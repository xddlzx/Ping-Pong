"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  A as A5,
  c as c3
} from "./chunk-DANFAIW7.js";
import {
  q
} from "./chunk-XWYMCR5D.js";
import {
  f as f5,
  n as n2
} from "./chunk-LWXYSBFU.js";
import {
  f as f4
} from "./chunk-JRAXXMAO.js";
import {
  io
} from "./chunk-P6UDNJ3P.js";
import {
  K,
  s as s4,
  x as x3
} from "./chunk-PNCNEUDJ.js";
import {
  A as A3,
  A2 as A4,
  a as a3,
  e as e3
} from "./chunk-Q76JCXYQ.js";
import {
  v as v2
} from "./chunk-Q2ALSPT4.js";
import {
  H as H2,
  MetamaskProvider,
  N as N2,
  a,
  import_constants,
  import_out,
  n,
  require_out as require_out3,
  require_out2 as require_out4,
  require_out3 as require_out5,
  require_out4 as require_out6,
  s as s2,
  z
} from "./chunk-GWYV5Q5U.js";
import {
  s as s3
} from "./chunk-CQ6QEUJE.js";
import {
  A2,
  I as I2,
  Mr,
  N as N3,
  R,
  R3 as R2,
  S2,
  U,
  d2 as d4,
  f3,
  i,
  i2,
  kr,
  w,
  x as x2,
  y2 as y
} from "./chunk-DZSHGTAC.js";
import {
  m,
  r
} from "./chunk-KMSODH52.js";
import {
  d as d3,
  k
} from "./chunk-EBUGIFUX.js";
import {
  A2 as A,
  D,
  L2 as L,
  _2,
  a as a2,
  b3 as b2,
  c as c2,
  f,
  f2,
  g4 as g,
  l3 as l,
  on,
  p3 as p,
  tn,
  x2 as x
} from "./chunk-DODOUSNB.js";
import {
  E3 as E,
  H,
  N,
  S2 as S,
  T2 as T,
  _2 as _,
  c4 as c,
  d as d2,
  require_lib,
  require_out as require_out2,
  s
} from "./chunk-HXV3SQ6S.js";
import {
  I,
  d,
  e as e2,
  u
} from "./chunk-EKHLTR53.js";
import {
  Q,
  e,
  import_CrossWindowProvider,
  require_enums,
  require_windowProviderConstants,
  require_windowProviderEnums
} from "./chunk-N7F464ZJ.js";
import {
  Bt,
  b,
  ur,
  v,
  xt,
  yt
} from "./chunk-5CKZHQYH.js";
import {
  require_react
} from "./chunk-IRELMTUJ.js";
import {
  require_out
} from "./chunk-5HSAGO3O.js";
import {
  require_transaction
} from "./chunk-UHKY3R7I.js";
import {
  __commonJS,
  __toESM,
  require_dist
} from "./chunk-UOCZJ3B4.js";

// node_modules/@multiversx/sdk-dapp-utils/out/helpers/providerNotInitializedError.js
var require_providerNotInitializedError = __commonJS({
  "node_modules/@multiversx/sdk-dapp-utils/out/helpers/providerNotInitializedError.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerNotInitializedError = void 0;
    var providerNotInitializedError = (caller) => () => {
      throw new Error(`Unable to perform ${caller}, Provider not initialized`);
    };
    exports.providerNotInitializedError = providerNotInitializedError;
  }
});

// node_modules/@multiversx/sdk-webview-provider/out/helpers/isWindowAvailable.js
var require_isWindowAvailable = __commonJS({
  "node_modules/@multiversx/sdk-webview-provider/out/helpers/isWindowAvailable.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isWindowAvailable = void 0;
    var isWindowAvailable = () => typeof window != "undefined" && typeof (window === null || window === void 0 ? void 0 : window.location) != "undefined";
    exports.isWindowAvailable = isWindowAvailable;
  }
});

// node_modules/@multiversx/sdk-webview-provider/out/helpers/getTargetOrigin.js
var require_getTargetOrigin = __commonJS({
  "node_modules/@multiversx/sdk-webview-provider/out/helpers/getTargetOrigin.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTargetOrigin = void 0;
    var isWindowAvailable_1 = require_isWindowAvailable();
    var getTargetOrigin = () => {
      var _a;
      if ((0, isWindowAvailable_1.isWindowAvailable)()) {
        const ancestorOrigins = window.location.ancestorOrigins;
        return (_a = ancestorOrigins === null || ancestorOrigins === void 0 ? void 0 : ancestorOrigins[ancestorOrigins.length - 1]) !== null && _a !== void 0 ? _a : "*";
      }
      return "*";
    };
    exports.getTargetOrigin = getTargetOrigin;
  }
});

// node_modules/@multiversx/sdk-webview-provider/out/helpers/getSafeWindow.js
var require_getSafeWindow = __commonJS({
  "node_modules/@multiversx/sdk-webview-provider/out/helpers/getSafeWindow.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSafeWindow = void 0;
    var getSafeWindow = () => {
      return typeof window !== "undefined" ? window : {};
    };
    exports.getSafeWindow = getSafeWindow;
  }
});

// node_modules/@multiversx/sdk-webview-provider/out/helpers/isMobileWebview.js
var require_isMobileWebview = __commonJS({
  "node_modules/@multiversx/sdk-webview-provider/out/helpers/isMobileWebview.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMobileWebview = void 0;
    var getSafeWindow_1 = require_getSafeWindow();
    var isMobileWebview = () => {
      const safeWindow = (0, getSafeWindow_1.getSafeWindow)();
      return safeWindow.ReactNativeWebView || safeWindow.webkit;
    };
    exports.isMobileWebview = isMobileWebview;
  }
});

// node_modules/@multiversx/sdk-webview-provider/out/helpers/getSafeDocument.js
var require_getSafeDocument = __commonJS({
  "node_modules/@multiversx/sdk-webview-provider/out/helpers/getSafeDocument.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSafeDocument = void 0;
    var getSafeDocument = () => {
      return typeof document !== "undefined" ? document : {};
    };
    exports.getSafeDocument = getSafeDocument;
  }
});

// node_modules/@multiversx/sdk-webview-provider/out/webviewProviderEventHandler.js
var require_webviewProviderEventHandler = __commonJS({
  "node_modules/@multiversx/sdk-webview-provider/out/webviewProviderEventHandler.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.webviewProviderEventHandler = void 0;
    var getTargetOrigin_1 = require_getTargetOrigin();
    var isMobileWebview_1 = require_isMobileWebview();
    var getSafeWindow_1 = require_getSafeWindow();
    var getSafeDocument_1 = require_getSafeDocument();
    var windowProviderEnums_1 = require_windowProviderEnums();
    var webviewProviderEventHandler = (action, resolve) => {
      return (event) => {
        var _a, _b, _c, _d;
        let eventData = event.data;
        try {
          eventData = (0, isMobileWebview_1.isMobileWebview)() && typeof eventData === "string" ? JSON.parse(eventData) : eventData;
        } catch (err) {
          console.error("error parsing eventData", eventData);
        }
        const { type, payload } = eventData;
        if (!(0, isMobileWebview_1.isMobileWebview)() && event.origin != (0, getTargetOrigin_1.getTargetOrigin)()) {
          return;
        }
        const isCurrentAction = action === type || type === windowProviderEnums_1.WindowProviderResponseEnums.cancelResponse;
        if (!isCurrentAction) {
          return;
        }
        (_b = (_a = (0, getSafeWindow_1.getSafeWindow)()).removeEventListener) === null || _b === void 0 ? void 0 : _b.call(_a, "message", (0, exports.webviewProviderEventHandler)(action, resolve));
        (_d = (_c = (0, getSafeDocument_1.getSafeDocument)()).removeEventListener) === null || _d === void 0 ? void 0 : _d.call(_c, "message", (0, exports.webviewProviderEventHandler)(action, resolve));
        resolve({ type, payload });
      };
    };
    exports.webviewProviderEventHandler = webviewProviderEventHandler;
  }
});

// node_modules/@multiversx/sdk-webview-provider/out/WebviewProvider.js
var require_WebviewProvider = __commonJS({
  "node_modules/@multiversx/sdk-webview-provider/out/WebviewProvider.js"(exports) {
    "use strict";
    var import_dist25 = __toESM(require_dist());
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e4) {
            reject(e4);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e4) {
            reject(e4);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebviewProvider = void 0;
    var transaction_1 = require_transaction();
    var webviewProviderEventHandler_1 = require_webviewProviderEventHandler();
    var enums_1 = require_enums();
    var windowProviderConstants_1 = require_windowProviderConstants();
    var getTargetOrigin_1 = require_getTargetOrigin();
    var getSafeWindow_1 = require_getSafeWindow();
    var getSafeDocument_1 = require_getSafeDocument();
    var sdk_core_1 = require_out();
    var out_1 = require_out();
    var WebviewProvider = class _WebviewProvider {
      static getInstance(options) {
        if (!_WebviewProvider._instance) {
          _WebviewProvider._instance = new _WebviewProvider(options);
        }
        return _WebviewProvider._instance;
      }
      constructor(options) {
        this.initialized = false;
        this.account = { address: "" };
        this.resetState = (resetStateCallback) => {
          var _a, _b;
          (_b = (_a = (0, getSafeWindow_1.getSafeWindow)()).addEventListener) === null || _b === void 0 ? void 0 : _b.call(_a, "message", (0, webviewProviderEventHandler_1.webviewProviderEventHandler)(enums_1.WindowProviderResponseEnums.resetStateResponse, (data) => {
            if (data.type === enums_1.WindowProviderResponseEnums.resetStateResponse) {
              resetStateCallback === null || resetStateCallback === void 0 ? void 0 : resetStateCallback();
              setTimeout(() => {
                this.finalizeResetState();
              }, 500);
            }
          }));
        };
        this.init = () => __awaiter(this, void 0, void 0, function* () {
          this.initialized = true;
          this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.finalizeHandshakeRequest,
            payload: void 0
          });
          return this.initialized;
        });
        this.login = () => __awaiter(this, void 0, void 0, function* () {
          var _a;
          if (!this.initialized) {
            throw new Error("Provider not initialized");
          }
          const response = yield this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.loginRequest,
            payload: void 0
          });
          if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
            console.warn("Cancelled the login action");
            yield this.cancelAction();
            return null;
          }
          if (!response.payload.data) {
            console.error("Error logging in", (_a = response.payload.error) !== null && _a !== void 0 ? _a : "No data received");
            return null;
          }
          this.account = response.payload.data;
          return this.account;
        });
        this.logout = () => __awaiter(this, void 0, void 0, function* () {
          const response = yield this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.logoutRequest,
            payload: void 0
          });
          this.initialized = false;
          this.disconnect();
          return Boolean(response.payload.data);
        });
        this.relogin = () => __awaiter(this, void 0, void 0, function* () {
          var _b;
          const response = yield this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.reloginRequest,
            payload: void 0
          });
          if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
            console.warn("Cancelled the re-login action");
            yield this.cancelAction();
            return null;
          }
          if (!response.payload.data) {
            console.error("Re-login Error", (_b = response.payload.error) !== null && _b !== void 0 ? _b : "No data received");
            return null;
          }
          const { data, error } = response.payload;
          if (error || !data) {
            throw new Error("Unable to re-login");
          }
          const { accessToken } = data;
          if (!accessToken) {
            console.error("Unable to re-login. Missing accessToken.");
            return null;
          }
          this.account.accessToken = accessToken;
          return accessToken;
        });
        this.signTransactions = (transactionsToSign) => __awaiter(this, void 0, void 0, function* () {
          const response = yield this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.signTransactionsRequest,
            payload: transactionsToSign.map((tx) => tx.toPlainObject())
          });
          const { data: signedTransactions, error } = response.payload;
          if (error || !signedTransactions) {
            console.error("Unable to sign transactions");
            return null;
          }
          if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
            console.warn("Cancelled the transactions signing action");
            this.cancelAction();
            return null;
          }
          return signedTransactions.map((tx) => transaction_1.Transaction.fromPlainObject(tx));
        });
        this.signTransaction = (transaction) => __awaiter(this, void 0, void 0, function* () {
          const response = yield this.signTransactions([transaction]);
          return response === null || response === void 0 ? void 0 : response[0];
        });
        this.signMessage = (messageToSign) => __awaiter(this, void 0, void 0, function* () {
          var _c;
          const response = yield this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.signMessageRequest,
            payload: { message: Buffer.from(messageToSign.data).toString() }
          });
          const { data, error } = response.payload;
          if (error || !data) {
            console.error("Unable to sign message");
            return null;
          }
          if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
            console.warn("Cancelled the message signing action");
            this.cancelAction();
            return null;
          }
          if (data.status !== enums_1.SignMessageStatusEnum.signed) {
            console.error("Could not sign message");
            return null;
          }
          return new sdk_core_1.Message({
            data: Buffer.from(messageToSign.data),
            address: (_c = messageToSign.address) !== null && _c !== void 0 ? _c : out_1.Address.fromBech32(this.account.address),
            signer: "webview",
            version: messageToSign.version,
            signature: Buffer.from(String(data.signature), "hex")
          });
        });
        this.cancelAction = () => __awaiter(this, void 0, void 0, function* () {
          return this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.cancelAction,
            payload: void 0
          });
        });
        this.finalizeResetState = () => __awaiter(this, void 0, void 0, function* () {
          return this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.finalizeResetStateRequest,
            payload: void 0
          });
        });
        this.sendPostMessage = (message) => __awaiter(this, void 0, void 0, function* () {
          var _d, _e;
          const safeWindow = (0, getSafeWindow_1.getSafeWindow)();
          if (safeWindow.ReactNativeWebView) {
            safeWindow.ReactNativeWebView.postMessage(JSON.stringify(message));
          } else if (safeWindow.webkit) {
            (_e = (_d = safeWindow.webkit.messageHandlers) === null || _d === void 0 ? void 0 : _d.jsHandler) === null || _e === void 0 ? void 0 : _e.postMessage(JSON.stringify(message), (0, getTargetOrigin_1.getTargetOrigin)());
          } else if (safeWindow.parent) {
            safeWindow.parent.postMessage(message, (0, getTargetOrigin_1.getTargetOrigin)());
          }
          return yield this.waitingForResponse(windowProviderConstants_1.responseTypeMap[message.type]);
        });
        this.waitingForResponse = (action) => __awaiter(this, void 0, void 0, function* () {
          return yield new Promise((resolve) => {
            var _a, _b, _c, _d;
            (_b = (_a = (0, getSafeWindow_1.getSafeWindow)()).addEventListener) === null || _b === void 0 ? void 0 : _b.call(_a, "message", (0, webviewProviderEventHandler_1.webviewProviderEventHandler)(action, resolve));
            (_d = (_c = (0, getSafeDocument_1.getSafeDocument)()).addEventListener) === null || _d === void 0 ? void 0 : _d.call(_c, "message", (0, webviewProviderEventHandler_1.webviewProviderEventHandler)(action, resolve));
          });
        });
        if (options === null || options === void 0 ? void 0 : options.resetStateCallback) {
          this.resetState(options.resetStateCallback);
        }
      }
      disconnect() {
        this.account = { address: "" };
      }
      isInitialized() {
        return this.initialized;
      }
      isConnected() {
        return Boolean(this.account.address);
      }
      getAccount() {
        return this.account;
      }
      setAccount(account) {
        this.account = account;
      }
    };
    exports.WebviewProvider = WebviewProvider;
  }
});

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-TJD2PXIU.js
var import_dist = __toESM(require_dist());
var f6 = b((A6, c4) => {
  v();
  function b3(r2, n4) {
    return r2 === n4 || r2 !== r2 && n4 !== n4;
  }
  c4.exports = b3;
});
var G = b((O2, o) => {
  v();
  var j2 = K(), T3 = f4(), x4 = "[object AsyncFunction]", y3 = "[object Function]", F5 = "[object GeneratorFunction]", p5 = "[object Proxy]";
  function q2(r2) {
    if (!T3(r2)) return false;
    var n4 = j2(r2);
    return n4 == y3 || n4 == F5 || n4 == x4 || n4 == p5;
  }
  o.exports = q2;
});

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-JNCGE6ZG.js
var import_dist2 = __toESM(require_dist());
v();
p();
g();
l();
u();
function M(o, t3 = a2.dispatch) {
  let i4 = x3(o);
  if (i4 == null) return;
  let { signature: n4, address: r2 } = i4;
  n4 && o && r2 && (t3(b2({ loginToken: o, signature: n4, nativeAuthToken: o })), t3(f2({ address: r2, loginMethod: "extra" })));
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-TZ5NQD7X.js
var import_dist3 = __toESM(require_dist());
var import_providerNotInitializedError = __toESM(require_providerNotInitializedError());
var import_WebviewProvider = __toESM(require_WebviewProvider());
v();
p();
l();
var i3 = class {
  constructor() {
    this.init = () => Bt(this, null, function* () {
      return yield this._provider.init();
    });
    this.login = () => Bt(this, null, function* () {
      var s7;
      let r2 = yield this._provider.login();
      return { address: (s7 = r2 == null ? void 0 : r2.address) != null ? s7 : "" };
    });
    this.logout = () => Bt(this, null, function* () {
      return a2.dispatch(L()), yield this._provider.logout();
    });
    this.relogin = () => Bt(this, null, function* () {
      let r2 = yield this._provider.relogin();
      return r2 ? (M(r2), a(), r2) : (console.error("Unable to re-login. Missing accessToken."), null);
    });
    this.signTransactions = (r2) => Bt(this, null, function* () {
      let s7 = yield this._provider.signTransactions(r2);
      return s7 || (q(), this._provider.cancelAction(), null);
    });
    this.signTransaction = (r2) => Bt(this, null, function* () {
      return yield this._provider.signTransaction(r2);
    });
    this.signMessage = (r2) => Bt(this, null, function* () {
      return yield this._provider.signMessage(r2);
    });
    this.cancelAction = () => Bt(this, null, function* () {
      return yield this._provider.cancelAction();
    });
    this.isInitialized = () => this._provider.isInitialized();
    this.isConnected = () => this._provider.isConnected();
    this.sendCustomRequest = (r2) => Bt(this, null, function* () {
      this._provider.sendPostMessage({ type: r2.request.method, payload: r2.request.params });
    });
    this.getAddress = (0, import_providerNotInitializedError.providerNotInitializedError)("getAddress");
    this._provider = import_WebviewProvider.WebviewProvider.getInstance({ resetStateCallback: () => a2.dispatch(L()) });
  }
  static getInstance() {
    return i3._instance || (i3._instance = new i3()), i3._instance;
  }
  getAccount() {
    var s7;
    let r2 = this._provider.getAccount();
    return { address: (s7 = r2 == null ? void 0 : r2.address) != null ? s7 : "" };
  }
  setAccount(r2) {
    this._provider.setAccount(r2);
  }
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-KVAJYNI6.js
var import_dist4 = __toESM(require_dist());
var import_react = __toESM(require_react());
var import_sdk_web_wallet_provider = __toESM(require_out2());
var import_sdk_web_wallet_provider2 = __toESM(require_out2());
var import_qs = __toESM(require_lib());
v();
T();
S2();
g();
Q();
I();
w();
d4();
i();
c2();
var B = f();
function sr(L4) {
  let P2 = k(r), s7 = d3(), { shouldFetchWalletUrlOnLoad: h2 } = k(i2), { search: r2 } = h2 ? B : f();
  (0, import_react.useEffect)(() => {
    if (r2 != null) {
      let o = import_qs.default.parse(r2.replace("?", ""));
      if (o && H in o) {
        let m3 = String(o[H]), e4 = new import_sdk_web_wallet_provider.WalletProvider(`${P2.walletAddress}${d2}`).getTransactionsFromWalletUrl(r2);
        if (o.status === "cancelled") {
          s7(tn({ sessionId: m3, status: "cancelled" })), L4(), N3({ removeParams: [...Object.keys(d), import_sdk_web_wallet_provider2.WALLET_PROVIDER_CALLBACK_PARAM, H, "address"], search: r2 }), s7(on(c));
          return;
        }
        if (e4.length > 0) {
          s7(tn({ sessionId: m3, status: "signed", transactions: e4.map((_3) => U(_3)) }));
          let [I4] = e4;
          R({ transaction: I4, search: r2 });
        }
      }
    }
  }, [r2]);
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-YJFNSJWQ.js
var import_dist5 = __toESM(require_dist());
v();
n2();
var f7 = ({ latestNonce: t3, transactions: n4 }) => n4.length === 0 ? n4 : n4.map((o, r2) => {
  let a5 = t3 + r2, s7 = o.getNonce().valueOf(), m3 = f5({ accountNonce: a5, transactionNonce: s7 });
  return o.setNonce(m3), o;
});

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-HF2LLKHF.js
var import_dist6 = __toESM(require_dist());
v();
S2();
e3();
a3();
var F2 = () => {
  let o = k(A2), { data: t3 } = A5(o);
  return (p5) => Bt(void 0, null, function* () {
    let u4 = t3 != null ? t3 : yield A3(o), f8 = A4(u4);
    return f7({ latestNonce: f8, transactions: p5 });
  });
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-QPBT6TOF.js
var import_dist7 = __toESM(require_dist());
var import_react2 = __toESM(require_react());
var import_sdk_extension_provider = __toESM(require_out3());
var import_out2 = __toESM(require_out6());
v();
e();
S2();
g();
var Cn = () => {
  let d6 = d3(), { provider: o } = v2(), { nonce: Q2 } = s3(), [R3, A6] = (0, import_react2.useState)(null), [V, X] = (0, import_react2.useState)(), [Y, Z2] = (0, import_react2.useState)([]), _3 = F2(), n4 = k(Mr), $ = k(kr), nn = () => Bt(void 0, null, function* () {
    var e4, r2;
    let s7 = Boolean(n4 == null ? void 0 : n4.transactions), t3 = (e4 = n4 == null ? void 0 : n4.transactions) != null ? e4 : [];
    if (s7) {
      let c4 = (r2 = n4 == null ? void 0 : n4.customTransactionInformation) != null && r2.skipUpdateNonces ? t3 : yield _3(t3);
      Z2(c4);
    }
    X(s7);
  });
  (0, import_react2.useEffect)(() => {
    nn();
  }, [n4, Q2]);
  let u4 = () => {
    A6(null), d6(on(null));
  }, S3 = (s7) => {
    u4(), on2(s7);
  };
  sr(S3);
  function on2(s7) {
    var a5, h2, i4, x4, m3, C, f8, E2, l3, N4, p5, W;
    let t3 = o instanceof import_sdk_extension_provider.ExtensionProvider, e4 = o instanceof import_out2.PasskeyProvider, r2 = o instanceof import_CrossWindowProvider.CrossWindowProvider, c4 = o instanceof import_out.IframeProvider, M3 = o instanceof MetamaskProvider, sn = o instanceof i3;
    d6(_2()), d6(A(s7)), !(!t3 && !r2 && !c4 && !e4 && !M3) && (u4(), t3 && ((h2 = (a5 = import_sdk_extension_provider.ExtensionProvider.getInstance()) == null ? void 0 : a5.cancelAction) == null || h2.call(a5)), e4 && ((x4 = (i4 = import_out2.PasskeyProvider.getInstance()) == null ? void 0 : i4.cancelAction) == null || x4.call(i4)), M3 && ((C = (m3 = MetamaskProvider.getInstance()) == null ? void 0 : m3.cancelAction) == null || C.call(m3)), r2 && ((E2 = (f8 = import_CrossWindowProvider.CrossWindowProvider.getInstance()) == null ? void 0 : f8.cancelAction) == null || E2.call(f8)), c4 && ((N4 = (l3 = import_out.IframeProvider.getInstance()) == null ? void 0 : l3.cancelAction) == null || N4.call(l3)), sn && ((W = (p5 = i3.getInstance()) == null ? void 0 : p5.cancelAction) == null || W.call(p5)));
  }
  return { error: R3, canceledTransactionsMessage: $, clearTransactionStatusMessage: u4, onAbort: S3, setError: A6, hasTransactions: V, transactionsToSign: n4 && xt(yt({}, n4), { transactions: Y }) };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-ZE3VJMR4.js
var import_dist8 = __toESM(require_dist());
v();
S2();
l();
function T2(t3) {
  let o = Mr(a2.getState()), r2 = Object.keys(t3).length === (o == null ? void 0 : o.transactions.length);
  return t3 && (t3 && r2);
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-I2YCVINV.js
var import_dist9 = __toESM(require_dist());
v();
var n3 = (r2, i4) => r2 ? Array.isArray(i4) ? i4.some((t3) => r2.address === t3 || r2.activeGuardianAddress === t3) : r2.address === i4 || r2.activeGuardianAddress === i4 : true;

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-BDWKIY35.js
var import_dist10 = __toESM(require_dist());
v();
var u2 = ({ transactions: r2, isGuarded: n4 }) => n4 ? r2.length === 0 ? false : r2.every((t3) => Boolean(t3.getGuardianSignature().toString("hex"))) : true;

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-P64EA6SQ.js
var import_dist11 = __toESM(require_dist());
v();
e();
function g3(w2) {
  return Bt(this, arguments, function* ({ address: t3, walletUrl: n4 }) {
    try {
      let r2 = yield import_CrossWindowProvider.CrossWindowProvider.getInstance().init(), i4 = import_CrossWindowProvider.CrossWindowProvider.getInstance().setAddress(t3).setWalletUrl(n4);
      if (r2) return i4;
      console.error("Could not initialise Cross Window Wallet provider");
    } catch (r2) {
      console.error("Unable to login to CrossWindowWalletProvider", r2);
    }
    return null;
  });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-L5AOIJ32.js
var import_dist12 = __toESM(require_dist());
v();
T();
y();
c2();
var j = ({ transactions: a5, hasGuardianScreen: b3, callbackRoute: r2, sessionId: t3, walletAddress: o, isGuarded: i4 }) => {
  let w2 = u2({ isGuarded: i4, transactions: a5 }), G2 = a5[0].getChainID().valueOf(), h2 = a5[0].getSender().bech32().toString(), C = c3(G2), e4 = o != null ? o : e2[C].walletAddress;
  return { needs2FaSigning: i4 ? !b3 && !w2 && t3 : false, sendTransactionsToGuardian: () => {
    let n4 = H2(e4), s7 = { [H]: String(t3) }, { origin: k3 } = f(), I4 = window != null && window.location ? `${k3}${r2}` : `${r2}`, P2 = x2({ callbackUrl: I4, urlParams: s7 });
    n4.guardTransactions(a5, { callbackUrl: encodeURIComponent(P2) });
  }, guardTransactions: () => Bt(void 0, null, function* () {
    let n4 = yield g3({ address: h2, walletUrl: e4 });
    return n4 == null || n4.setShouldShowConsentPopup(true), yield n4 == null ? void 0 : n4.guardTransactions(a5);
  }) };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-N3F7SMCL.js
var import_dist13 = __toESM(require_dist());
var import_react3 = __toESM(require_react());
var import_sdk_core = __toESM(require_out());
var import_sdk_extension_provider2 = __toESM(require_out3());
var import_out3 = __toESM(require_out6());
var He = b((ra, We) => {
  v();
  var Ft = s4(), Ut = Ft["__core-js_shared__"];
  We.exports = Ut;
});
var Ue = b((ta, Fe) => {
  v();
  var ce = He(), ze = function() {
    var e4 = /[^.]+$/.exec(ce && ce.keys && ce.keys.IE_PROTO || "");
    return e4 ? "Symbol(src)_1." + e4 : "";
  }();
  function Lt(e4) {
    return !!ze && ze in e4;
  }
  Fe.exports = Lt;
});
var ke = b((na, Le) => {
  v();
  var kt = Function.prototype, Vt = kt.toString;
  function jt(e4) {
    if (e4 != null) {
      try {
        return Vt.call(e4);
      } catch (t3) {
      }
      try {
        return e4 + "";
      } catch (t3) {
      }
    }
    return "";
  }
  Le.exports = jt;
});
var je = b((sa, Ve) => {
  v();
  var $t = G(), Kt = Ue(), Jt = f4(), Yt = ke(), Zt = /[\\^$.*+?()[\]{}|]/g, Bt2 = /^\[object .+?Constructor\]$/, Xt = Function.prototype, Qt = Object.prototype, en = Xt.toString, rn = Qt.hasOwnProperty, tn2 = RegExp("^" + en.call(rn).replace(Zt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  function nn(e4) {
    if (!Jt(e4) || Kt(e4)) return false;
    var t3 = $t(e4) ? tn2 : Bt2;
    return t3.test(Yt(e4));
  }
  Ve.exports = nn;
});
var Ke = b((aa, $e) => {
  v();
  function sn(e4, t3) {
    return e4 == null ? void 0 : e4[t3];
  }
  $e.exports = sn;
});
var Z = b((ia, Je) => {
  v();
  var an = je(), on2 = Ke();
  function cn2(e4, t3) {
    var n4 = on2(e4, t3);
    return an(n4) ? n4 : void 0;
  }
  Je.exports = cn2;
});
var F3 = b((oa, Ye) => {
  v();
  var un = Z(), ln = un(Object, "create");
  Ye.exports = ln;
});
var Xe = b((ca, Be) => {
  v();
  var Ze = F3();
  function hn() {
    this.__data__ = Ze ? Ze(null) : {}, this.size = 0;
  }
  Be.exports = hn;
});
var er = b((ua, Qe) => {
  v();
  function pn(e4) {
    var t3 = this.has(e4) && delete this.__data__[e4];
    return this.size -= t3 ? 1 : 0, t3;
  }
  Qe.exports = pn;
});
var tr = b((la, rr) => {
  v();
  var dn = F3(), fn = "__lodash_hash_undefined__", gn = Object.prototype, vn = gn.hasOwnProperty;
  function _n(e4) {
    var t3 = this.__data__;
    if (dn) {
      var n4 = t3[e4];
      return n4 === fn ? void 0 : n4;
    }
    return vn.call(t3, e4) ? t3[e4] : void 0;
  }
  rr.exports = _n;
});
var sr2 = b((ha, nr) => {
  v();
  var mn = F3(), xn = Object.prototype, Sn = xn.hasOwnProperty;
  function Cn2(e4) {
    var t3 = this.__data__;
    return mn ? t3[e4] !== void 0 : Sn.call(t3, e4);
  }
  nr.exports = Cn2;
});
var ir = b((pa, ar) => {
  v();
  var qn = F3(), In = "__lodash_hash_undefined__";
  function Tn(e4, t3) {
    var n4 = this.__data__;
    return this.size += this.has(e4) ? 0 : 1, n4[e4] = qn && t3 === void 0 ? In : t3, this;
  }
  ar.exports = Tn;
});
var cr = b((da, or) => {
  v();
  var wn = Xe(), Pn = er(), En = tr(), yn = sr2(), bn = ir();
  function O2(e4) {
    var t3 = -1, n4 = e4 == null ? 0 : e4.length;
    for (this.clear(); ++t3 < n4; ) {
      var c4 = e4[t3];
      this.set(c4[0], c4[1]);
    }
  }
  O2.prototype.clear = wn;
  O2.prototype.delete = Pn;
  O2.prototype.get = En;
  O2.prototype.has = yn;
  O2.prototype.set = bn;
  or.exports = O2;
});
var lr = b((fa, ur2) => {
  v();
  function An() {
    this.__data__ = [], this.size = 0;
  }
  ur2.exports = An;
});
var U2 = b((ga, hr) => {
  v();
  var Nn = f6();
  function On(e4, t3) {
    for (var n4 = e4.length; n4--; ) if (Nn(e4[n4][0], t3)) return n4;
    return -1;
  }
  hr.exports = On;
});
var dr = b((va, pr) => {
  v();
  var Dn = U2(), Mn = Array.prototype, Rn = Mn.splice;
  function Gn(e4) {
    var t3 = this.__data__, n4 = Dn(t3, e4);
    if (n4 < 0) return false;
    var c4 = t3.length - 1;
    return n4 == c4 ? t3.pop() : Rn.call(t3, n4, 1), --this.size, true;
  }
  pr.exports = Gn;
});
var gr = b((_a, fr) => {
  v();
  var Wn = U2();
  function Hn(e4) {
    var t3 = this.__data__, n4 = Wn(t3, e4);
    return n4 < 0 ? void 0 : t3[n4][1];
  }
  fr.exports = Hn;
});
var _r = b((ma, vr) => {
  v();
  var zn = U2();
  function Fn(e4) {
    return zn(this.__data__, e4) > -1;
  }
  vr.exports = Fn;
});
var xr = b((xa, mr) => {
  v();
  var Un = U2();
  function Ln(e4, t3) {
    var n4 = this.__data__, c4 = Un(n4, e4);
    return c4 < 0 ? (++this.size, n4.push([e4, t3])) : n4[c4][1] = t3, this;
  }
  mr.exports = Ln;
});
var Cr = b((Sa, Sr) => {
  v();
  var kn = lr(), Vn = dr(), jn = gr(), $n = _r(), Kn = xr();
  function D2(e4) {
    var t3 = -1, n4 = e4 == null ? 0 : e4.length;
    for (this.clear(); ++t3 < n4; ) {
      var c4 = e4[t3];
      this.set(c4[0], c4[1]);
    }
  }
  D2.prototype.clear = kn;
  D2.prototype.delete = Vn;
  D2.prototype.get = jn;
  D2.prototype.has = $n;
  D2.prototype.set = Kn;
  Sr.exports = D2;
});
var Ir = b((Ca, qr) => {
  v();
  var Jn = Z(), Yn = s4(), Zn = Jn(Yn, "Map");
  qr.exports = Zn;
});
var Pr = b((qa, wr) => {
  v();
  var Tr = cr(), Bn = Cr(), Xn = Ir();
  function Qn() {
    this.size = 0, this.__data__ = { hash: new Tr(), map: new (Xn || Bn)(), string: new Tr() };
  }
  wr.exports = Qn;
});
var yr = b((Ia, Er) => {
  v();
  function es(e4) {
    var t3 = typeof e4;
    return t3 == "string" || t3 == "number" || t3 == "symbol" || t3 == "boolean" ? e4 !== "__proto__" : e4 === null;
  }
  Er.exports = es;
});
var L2 = b((Ta, br) => {
  v();
  var rs = yr();
  function ts(e4, t3) {
    var n4 = e4.__data__;
    return rs(t3) ? n4[typeof t3 == "string" ? "string" : "hash"] : n4.map;
  }
  br.exports = ts;
});
var Nr = b((wa, Ar) => {
  v();
  var ns = L2();
  function ss(e4) {
    var t3 = ns(this, e4).delete(e4);
    return this.size -= t3 ? 1 : 0, t3;
  }
  Ar.exports = ss;
});
var Dr = b((Pa, Or) => {
  v();
  var as = L2();
  function is(e4) {
    return as(this, e4).get(e4);
  }
  Or.exports = is;
});
var Rr = b((Ea, Mr2) => {
  v();
  var os = L2();
  function cs(e4) {
    return os(this, e4).has(e4);
  }
  Mr2.exports = cs;
});
var Wr = b((ya, Gr) => {
  v();
  var us = L2();
  function ls(e4, t3) {
    var n4 = us(this, e4), c4 = n4.size;
    return n4.set(e4, t3), this.size += n4.size == c4 ? 0 : 1, this;
  }
  Gr.exports = ls;
});
var zr = b((ba, Hr) => {
  v();
  var hs = Pr(), ps = Nr(), ds = Dr(), fs = Rr(), gs = Wr();
  function M3(e4) {
    var t3 = -1, n4 = e4 == null ? 0 : e4.length;
    for (this.clear(); ++t3 < n4; ) {
      var c4 = e4[t3];
      this.set(c4[0], c4[1]);
    }
  }
  M3.prototype.clear = hs;
  M3.prototype.delete = ps;
  M3.prototype.get = ds;
  M3.prototype.has = fs;
  M3.prototype.set = gs;
  Hr.exports = M3;
});
var Ur = b((Aa, Fr) => {
  v();
  var vs = "__lodash_hash_undefined__";
  function _s(e4) {
    return this.__data__.set(e4, vs), this;
  }
  Fr.exports = _s;
});
var kr2 = b((Na, Lr) => {
  v();
  function ms(e4) {
    return this.__data__.has(e4);
  }
  Lr.exports = ms;
});
var jr = b((Oa, Vr) => {
  v();
  var xs = zr(), Ss = Ur(), Cs = kr2();
  function B2(e4) {
    var t3 = -1, n4 = e4 == null ? 0 : e4.length;
    for (this.__data__ = new xs(); ++t3 < n4; ) this.add(e4[t3]);
  }
  B2.prototype.add = B2.prototype.push = Ss;
  B2.prototype.has = Cs;
  Vr.exports = B2;
});
var Kr = b((Da, $r) => {
  v();
  function qs(e4, t3, n4, c4) {
    for (var v3 = e4.length, p5 = n4 + (c4 ? 1 : -1); c4 ? p5-- : ++p5 < v3; ) if (t3(e4[p5], p5, e4)) return p5;
    return -1;
  }
  $r.exports = qs;
});
var Yr = b((Ma, Jr) => {
  v();
  function Is(e4) {
    return e4 !== e4;
  }
  Jr.exports = Is;
});
var Br = b((Ra, Zr) => {
  v();
  function Ts(e4, t3, n4) {
    for (var c4 = n4 - 1, v3 = e4.length; ++c4 < v3; ) if (e4[c4] === t3) return c4;
    return -1;
  }
  Zr.exports = Ts;
});
var Qr = b((Ga, Xr) => {
  v();
  var ws = Kr(), Ps = Yr(), Es = Br();
  function ys(e4, t3, n4) {
    return t3 === t3 ? Es(e4, t3, n4) : ws(e4, Ps, n4);
  }
  Xr.exports = ys;
});
var rt = b((Wa, et) => {
  v();
  var bs = Qr();
  function As(e4, t3) {
    var n4 = e4 == null ? 0 : e4.length;
    return !!n4 && bs(e4, t3, 0) > -1;
  }
  et.exports = As;
});
var nt = b((Ha, tt) => {
  v();
  function Ns(e4, t3, n4) {
    for (var c4 = -1, v3 = e4 == null ? 0 : e4.length; ++c4 < v3; ) if (n4(t3, e4[c4])) return true;
    return false;
  }
  tt.exports = Ns;
});
var at = b((za, st) => {
  v();
  function Os(e4, t3) {
    return e4.has(t3);
  }
  st.exports = Os;
});
var ot = b((Fa, it) => {
  v();
  var Ds = Z(), Ms = s4(), Rs = Ds(Ms, "Set");
  it.exports = Rs;
});
var ut = b((Ua, ct) => {
  v();
  function Gs() {
  }
  ct.exports = Gs;
});
var ue = b((La, lt) => {
  v();
  function Ws(e4) {
    var t3 = -1, n4 = Array(e4.size);
    return e4.forEach(function(c4) {
      n4[++t3] = c4;
    }), n4;
  }
  lt.exports = Ws;
});
var pt = b((ka, ht) => {
  v();
  var le = ot(), Hs = ut(), zs = ue(), Fs = 1 / 0, Us = le && 1 / zs(new le([, -0]))[1] == Fs ? function(e4) {
    return new le(e4);
  } : Hs;
  ht.exports = Us;
});
var ft = b((Va, dt) => {
  v();
  var Ls = jr(), ks = rt(), Vs = nt(), js = at(), $s = pt(), Ks = ue(), Js = 200;
  function Ys(e4, t3, n4) {
    var c4 = -1, v3 = ks, p5 = e4.length, R3 = true, q2 = [], _3 = q2;
    if (n4) R3 = false, v3 = Vs;
    else if (p5 >= Js) {
      var k3 = t3 ? null : $s(e4);
      if (k3) return Ks(k3);
      R3 = false, v3 = js, _3 = new Ls();
    } else _3 = t3 ? [] : q2;
    e: for (; ++c4 < p5; ) {
      var u4 = e4[c4], T3 = t3 ? t3(u4) : u4;
      if (u4 = n4 || u4 !== 0 ? u4 : 0, R3 && T3 === T3) {
        for (var V = _3.length; V--; ) if (_3[V] === T3) continue e;
        t3 && _3.push(T3), q2.push(u4);
      } else v3(_3, T3, n4) || (_3 !== q2 && _3.push(T3), q2.push(u4));
    }
    return q2;
  }
  dt.exports = Ys;
});
var vt = b((ja, gt) => {
  v();
  var Zs = ft();
  function Bs(e4) {
    return e4 && e4.length ? Zs(e4) : [];
  }
  gt.exports = Bs;
});
v();
var Ct = ur(vt());
T();
e();
S2();
g();
Q();
y();
d4();
x();
c2();
var Si = () => {
  let e4 = d3(), t3 = (0, import_react3.useRef)("/"), { provider: n4 } = v2(), c4 = k(m), v3 = z(n4), p5 = (0, import_react3.useRef)(false), R3 = F2(), { isGuarded: q2, address: _3 } = s3(), k3 = k(kr), { transactionsToSign: u4, error: T3, setError: V, hasTransactions: X, onAbort: he, clearTransactionStatusMessage: pe } = Cn();
  sr(he);
  let j2 = (0, Ct.default)(u4 == null ? void 0 : u4.transactions.map((l3) => l3.getSender().toString()).filter((l3) => l3)), G2 = j2 == null ? void 0 : j2[0], { data: de } = A5(!G2 || G2 === _3 ? null : G2), qt = (l3) => {
    var w2, y3, I4, b3, A6, W, E2, h2, x4, H3, N4, K3;
    let f8 = n4 instanceof import_sdk_extension_provider2.ExtensionProvider, m3 = n4 instanceof import_out3.PasskeyProvider, g4 = n4 instanceof import_CrossWindowProvider.CrossWindowProvider, d6 = n4 instanceof import_out.IframeProvider, S3 = n4 instanceof MetamaskProvider, C = n4 instanceof i3;
    e4(_2()), e4(A(l3)), p5.current = false, !(!f8 && !g4 && !d6 && !m3 && !S3) && (pe(), f8 && ((y3 = (w2 = import_sdk_extension_provider2.ExtensionProvider.getInstance()) == null ? void 0 : w2.cancelAction) == null || y3.call(w2)), m3 && ((b3 = (I4 = import_out3.PasskeyProvider.getInstance()) == null ? void 0 : I4.cancelAction) == null || b3.call(I4)), S3 && ((W = (A6 = MetamaskProvider.getInstance()) == null ? void 0 : A6.cancelAction) == null || W.call(A6)), g4 && ((h2 = (E2 = import_CrossWindowProvider.CrossWindowProvider.getInstance()) == null ? void 0 : E2.cancelAction) == null || h2.call(E2)), d6 && ((H3 = (x4 = import_out.IframeProvider.getInstance()) == null ? void 0 : x4.cancelAction) == null || H3.call(x4)), C && ((K3 = (N4 = i3.getInstance()) == null ? void 0 : N4.cancelAction) == null || K3.call(N4)));
  }, $ = (l3, f8) => {
    v3 === "walletconnectv2" && (l3 = c);
    let g4 = l3.includes(c);
    if (qt(f8), g4) {
      e4(on(c));
      return;
    }
    V(l3);
  }, It = (l3, f8, m3 = "") => {
    let g4 = { [H]: f8 }, d6 = m3;
    if (window != null && window.location) {
      let { search: C, origin: w2 } = f(), y3 = new URLSearchParams(C);
      d6 = `${w2}${m3}`, y3.forEach((I4, b3) => {
        g4[b3] = I4;
      });
    }
    let S3 = x2({ callbackUrl: d6, urlParams: g4 });
    n4.signTransactions(l3, { callbackUrl: encodeURIComponent(S3) });
  }, Tt = () => Bt(void 0, null, function* () {
    var W, E2;
    if (p5.current || !u4) return;
    let { sessionId: l3, transactions: f8, callbackRoute: m3, customTransactionInformation: g4 } = u4, { redirectAfterSign: d6 } = g4, S3 = D(), C = m3 || S3, w2 = S3.includes(C), y3 = d6 && !w2;
    try {
      if (!(yield (W = n4 == null ? void 0 : n4.init) == null ? void 0 : W.call(n4))) return;
    } catch (h2) {
      let x4 = (h2 == null ? void 0 : h2.message) || h2 || N;
      console.error(x4), $(N, l3);
      return;
    }
    let I4 = !g4.skipGuardian, b3 = g4.hasConsentPopup, A6 = n4 instanceof import_CrossWindowProvider.CrossWindowProvider;
    try {
      p5.current = true, A6 && b3 && n4.setShouldShowConsentPopup(true);
      let h2 = (E2 = yield n4.signTransactions(q2 && I4 ? f8 == null ? void 0 : f8.map((P2) => (P2.setVersion(import_sdk_core.TransactionVersion.withTxOptions()), P2.setOptions(import_sdk_core.TransactionOptions.withOptions({ guarded: true })), P2)) : f8)) != null ? E2 : [];
      if (p5.current = false, !T2(h2)) return;
      let H3 = Object.values(h2).map((P2) => U(P2)), { needs2FaSigning: N4, guardTransactions: K3 } = j({ transactions: h2, sessionId: l3, callbackRoute: m3, isGuarded: q2 && I4, walletAddress: c4 });
      if (N4) {
        let P2 = yield K3();
        H3 = P2 ? P2.map((Pt) => U(Pt)) : [];
      }
      let fe = { sessionId: l3, transactions: H3, status: "signed" };
      y3 && (fe.redirectRoute = C), e4(tn(fe));
    } catch (h2) {
      p5.current = false;
      let x4 = (h2 == null ? void 0 : h2.message) || h2 || E;
      console.error(x4), e4(tn({ sessionId: l3, status: "cancelled" })), $(x4.includes("cancel") ? c : x4, l3);
    }
  }), wt = () => Bt(void 0, null, function* () {
    if (!u4) return;
    pe();
    let { sessionId: l3, transactions: f8, callbackRoute: m3, customTransactionInformation: g4 } = u4;
    if (!n4) {
      console.error(_);
      return;
    }
    if (j2.length > 1) throw new Error("Multiple senders are not allowed");
    if (G2 && G2 !== _3 && !n3(de, _3)) return console.error(S), $(S);
    t3.current = m3 || f().pathname;
    try {
      let d6 = v3 === "wallet", S3 = g4.skipUpdateNonces ? f8 : yield R3(f8);
      if (d6) return It(S3, l3, m3);
      Tt();
    } catch (d6) {
      let C = (d6 == null ? void 0 : d6.message) || s;
      console.error(C), $(C, l3), e4(tn({ sessionId: l3, status: "cancelled" })), console.error(C, d6);
    }
  });
  return (0, import_react3.useEffect)(() => {
    X ? wt() : p5.current = false;
  }, [u4, X, de]), { error: T3, canceledTransactionsMessage: k3, onAbort: he, hasTransactions: X, callbackRoute: t3.current, sessionId: u4 == null ? void 0 : u4.sessionId, transactions: u4 == null ? void 0 : u4.transactions };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-UHDRCKP4.js
var import_dist14 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-CD3FLIXS.js
var import_dist15 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VKP4RSCY.js
var import_dist16 = __toESM(require_dist());
var import_react4 = __toESM(require_react());
var import_sdk_hw_provider = __toESM(require_out4());
v();
S2();
var F4 = () => {
  let a5 = k(R2), w2 = k(I2), r2 = k(f3), o = s2(), [p5, I4] = (0, import_react4.useState)(), S3 = () => Bt(void 0, null, function* () {
    let t3 = (r2 == null ? void 0 : r2.index) != null;
    try {
      if (o instanceof import_sdk_hw_provider.HWProvider && o.isInitialized()) return t3 && (yield o.setAddressIndex(r2.index)), o;
      let e4 = new import_sdk_hw_provider.HWProvider();
      return (yield e4.init()) ? (t3 && (yield e4.setAddressIndex(r2.index)), e4) : null;
    } catch (e4) {
      return console.error("Failed to initialise Ledger Provider"), null;
    }
  });
  function x4(t3) {
    return Bt(this, null, function* () {
      let e4, n4 = w2 && !(t3 != null && t3.isRelogin);
      try {
        if (e4 = yield S3(), !e4) {
          console.warn("Could not initialise ledger app"), n4 && io(a5);
          return;
        }
        let d6 = yield N2(e4);
        return n(e4), I4(d6), e4;
      } catch (d6) {
        console.error("Could not initialise ledger app", d6), n4 && io(a5);
      }
      return null;
    });
  }
  return { setLedgerProvider: x4, ledgerData: p5 };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-Y274NXN4.js
var import_dist17 = __toESM(require_dist());
v();
var P = () => {
  let { provider: e4 } = v2(), { setLedgerProvider: c4 } = F4();
  return function() {
    return Bt(this, null, function* () {
      let r2;
      try {
        let o = yield e4.getAddress();
        r2 = Boolean(o);
      } catch (o) {
        r2 = false;
      }
      if (r2) return e4;
      let t3 = yield c4({ isRelogin: true });
      return t3 || e4;
    });
  };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-GXKZL6BG.js
var import_dist18 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-U6FPCKTD.js
var import_dist19 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-R7VXMYQB.js
var import_dist20 = __toESM(require_dist());
var import_sdk_extension_provider3 = __toESM(require_out3());
v();
function u3(t3) {
  return Bt(this, null, function* () {
    try {
      let e4 = import_sdk_extension_provider3.ExtensionProvider.getInstance().setAddress(t3);
      if (yield e4.init()) return e4;
      console.error("Could not initialise extension, make sure MultiversX wallet extension is installed.");
    } catch (e4) {
      console.error("Unable to login to ExtensionProvider", e4);
    }
    return null;
  });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-FJ2FD4LU.js
var import_dist21 = __toESM(require_dist());
v();
function p3(g4) {
  return Bt(this, arguments, function* ({ address: i4, walletUrl: o, loginType: n4 }) {
    try {
      let e4 = import_out.IframeProvider.getInstance();
      if (e4.isInitialized()) return e4;
      switch (n4) {
        case import_constants.IframeLoginTypes.passkey:
          e4.setLoginType(import_constants.IframeLoginTypes.passkey);
          break;
        case import_constants.IframeLoginTypes.metamask:
          e4.setLoginType(import_constants.IframeLoginTypes.metamask);
          break;
        default:
          break;
      }
      if (e4.setAddress(i4).setWalletUrl(o), yield e4.init()) return e4;
      console.error("Could not initialise IframeProvider");
    } catch (e4) {
      console.error("Unable to login to IframeProvider", e4);
    }
    return null;
  });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-PQ4DDH3I.js
var import_dist22 = __toESM(require_dist());
v();
function m2(t3) {
  return Bt(this, null, function* () {
    try {
      let e4 = MetamaskProvider.getInstance().setAddress(t3);
      if (yield e4.init()) return e4;
      console.error("Could not initialise metamask, make suremetamask flask is installed.");
    } catch (e4) {
      console.error("Unable to login to MetamaskProvider", e4);
    }
    return null;
  });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-PAVHGJ7A.js
var import_dist23 = __toESM(require_dist());
var import_sdk_opera_provider = __toESM(require_out5());
v();
function p4(o) {
  return Bt(this, null, function* () {
    try {
      let r2 = import_sdk_opera_provider.OperaProvider.getInstance().setAddress(o);
      if (yield r2.init()) return r2;
      console.error("Could not initialise opera crypto wallet, make sure that opera crypto wallet is installed.");
    } catch (r2) {
      console.error("Unable to login to OperaProvider", r2);
    }
    return null;
  });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-RPJN7DBE.js
var import_dist24 = __toESM(require_dist());
var import_out4 = __toESM(require_out6());
v();
function d5(o) {
  return Bt(this, null, function* () {
    try {
      let e4 = import_out4.PasskeyProvider.getInstance().setAddress(o);
      if (yield e4.init()) return e4;
      console.error("Could not initialise passkey provider");
    } catch (e4) {
      console.error("Unable to login to PasskeyProvider", e4);
    }
    return null;
  });
}

export {
  f6 as f,
  G,
  M,
  i3 as i,
  Cn,
  T2 as T,
  n3 as n,
  u2 as u,
  g3 as g,
  j,
  Si,
  F4 as F,
  P,
  u3 as u2,
  p3 as p,
  m2 as m,
  p4 as p2,
  d5 as d
};
//# sourceMappingURL=chunk-Q23JG3F6.js.map
