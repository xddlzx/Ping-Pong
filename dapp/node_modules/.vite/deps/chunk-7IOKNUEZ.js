"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  require_address,
  require_types,
  require_utils
} from "./chunk-PA4YGARE.js";
import {
  require_bignumber
} from "./chunk-JDLAKVPX.js";
import {
  require_errors
} from "./chunk-7T325JRE.js";
import {
  __commonJS,
  __toESM,
  require_dist
} from "./chunk-UOCZJ3B4.js";

// node_modules/@multiversx/sdk-core/out/abi/typeFormula.js
var require_typeFormula = __commonJS({
  "node_modules/@multiversx/sdk-core/out/abi/typeFormula.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeFormula = void 0;
    var TypeFormula = class {
      constructor(name, typeParameters, metadata) {
        this.name = name;
        this.typeParameters = typeParameters;
        this.metadata = metadata;
      }
      toString() {
        const hasTypeParameters = this.typeParameters.length > 0;
        const typeParameters = hasTypeParameters ? `<${this.typeParameters.map((tp) => tp.toString()).join(", ")}>` : "";
        const baseName = `${this.name}${typeParameters}`;
        return this.metadata !== void 0 ? `${baseName}*${this.metadata}*` : baseName;
      }
    };
    exports.TypeFormula = TypeFormula;
  }
});

// node_modules/@multiversx/sdk-core/out/abi/typeFormulaParser.js
var require_typeFormulaParser = __commonJS({
  "node_modules/@multiversx/sdk-core/out/abi/typeFormulaParser.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeFormulaParser = void 0;
    var typeFormula_1 = require_typeFormula();
    var TypeFormulaParser = class _TypeFormulaParser {
      parseExpression(expression) {
        expression = expression.trim();
        const tokens = this.tokenizeExpression(expression).filter((token) => token !== _TypeFormulaParser.COMMA);
        const stack = [];
        for (const token of tokens) {
          if (this.isPunctuation(token)) {
            if (this.isEndOfTypeParameters(token)) {
              const typeFormula = this.acquireTypeWithParameters(stack);
              stack.push(typeFormula);
            } else if (this.isBeginningOfTypeParameters(token)) {
              stack.push(token);
            } else {
              throw new Error(`Unexpected token (punctuation): ${token}`);
            }
          } else {
            stack.push(token);
          }
        }
        if (stack.length !== 1) {
          throw new Error(`Unexpected stack length at end of parsing: ${stack.length}`);
        }
        if (_TypeFormulaParser.PUNCTUATION.includes(stack[0])) {
          throw new Error("Unexpected root element.");
        }
        const item = stack[0];
        if (item instanceof typeFormula_1.TypeFormula) {
          return item;
        } else if (typeof item === "string") {
          return new typeFormula_1.TypeFormula(item, []);
        } else {
          throw new Error(`Unexpected item on stack: ${item}`);
        }
      }
      tokenizeExpression(expression) {
        const tokens = [];
        let currentToken = "";
        for (const character of expression) {
          if (this.isPunctuation(character)) {
            if (currentToken) {
              tokens.push(currentToken.trim());
              currentToken = "";
            }
            tokens.push(character);
          } else {
            currentToken += character;
          }
        }
        if (currentToken) {
          tokens.push(currentToken.trim());
        }
        return tokens;
      }
      acquireTypeWithParameters(stack) {
        const typeParameters = this.acquireTypeParameters(stack);
        const typeName = stack.pop();
        if (typeName === "ManagedDecimal" || typeName === "ManagedDecimalSigned") {
          const metadata = typeParameters[0].name;
          const typeFormula2 = new typeFormula_1.TypeFormula(typeName, [], metadata);
          return typeFormula2;
        }
        const typeFormula = new typeFormula_1.TypeFormula(typeName, typeParameters.reverse());
        return typeFormula;
      }
      acquireTypeParameters(stack) {
        const typeParameters = [];
        while (true) {
          const item = stack.pop();
          if (item === void 0) {
            throw new Error("Badly specified type parameters");
          }
          if (this.isBeginningOfTypeParameters(item)) {
            break;
          }
          if (item instanceof typeFormula_1.TypeFormula) {
            typeParameters.push(item);
          } else if (typeof item === "string") {
            typeParameters.push(new typeFormula_1.TypeFormula(item, []));
          } else {
            throw new Error(`Unexpected type parameter object in stack: ${item}`);
          }
        }
        return typeParameters;
      }
      isPunctuation(token) {
        return _TypeFormulaParser.PUNCTUATION.includes(token);
      }
      isEndOfTypeParameters(token) {
        return token === _TypeFormulaParser.END_TYPE_PARAMETERS;
      }
      isBeginningOfTypeParameters(token) {
        return token === _TypeFormulaParser.BEGIN_TYPE_PARAMETERS;
      }
    };
    exports.TypeFormulaParser = TypeFormulaParser;
    TypeFormulaParser.BEGIN_TYPE_PARAMETERS = "<";
    TypeFormulaParser.END_TYPE_PARAMETERS = ">";
    TypeFormulaParser.COMMA = ",";
    TypeFormulaParser.PUNCTUATION = [
      TypeFormulaParser.COMMA,
      TypeFormulaParser.BEGIN_TYPE_PARAMETERS,
      TypeFormulaParser.END_TYPE_PARAMETERS
    ];
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/typeExpressionParser.js
var require_typeExpressionParser = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/typeExpressionParser.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeExpressionParser = void 0;
    var typeFormulaParser_1 = require_typeFormulaParser();
    var errors_1 = require_errors();
    var types_1 = require_types();
    var TypeExpressionParser = class {
      constructor() {
        this.backingTypeFormulaParser = new typeFormulaParser_1.TypeFormulaParser();
      }
      parse(expression) {
        try {
          return this.doParse(expression);
        } catch (e) {
          throw new errors_1.ErrTypingSystem(`Failed to parse type expression: ${expression}. Error: ${e}`);
        }
      }
      doParse(expression) {
        const typeFormula = this.backingTypeFormulaParser.parseExpression(expression);
        const type = this.typeFormulaToType(typeFormula);
        return type;
      }
      typeFormulaToType(typeFormula) {
        const typeParameters = typeFormula.typeParameters.map((typeFormula2) => this.typeFormulaToType(typeFormula2));
        return new types_1.Type(typeFormula.name, typeParameters, void 0, typeFormula.metadata);
      }
    };
    exports.TypeExpressionParser = TypeExpressionParser;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/endpoint.js
var require_endpoint = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/endpoint.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointParameterDefinition = exports.EndpointModifiers = exports.EndpointDefinition = void 0;
    var typeExpressionParser_1 = require_typeExpressionParser();
    var NamePlaceholder = "?";
    var DescriptionPlaceholder = "N / A";
    var EndpointDefinition = class _EndpointDefinition {
      constructor(name, input, output, modifiers, title) {
        this.input = [];
        this.output = [];
        this.name = name;
        this.title = title || "";
        this.input = input || [];
        this.output = output || [];
        this.modifiers = modifiers;
      }
      isConstructor() {
        return this.name == "constructor";
      }
      static fromJSON(json) {
        json.name = json.name == null ? NamePlaceholder : json.name;
        json.onlyOwner = json.onlyOwner || false;
        json.title = json.title || "";
        json.payableInTokens = json.payableInTokens || [];
        json.inputs = json.inputs || [];
        json.outputs = json.outputs || [];
        let input = json.inputs.map((param) => EndpointParameterDefinition.fromJSON(param));
        let output = json.outputs.map((param) => EndpointParameterDefinition.fromJSON(param));
        let modifiers = new EndpointModifiers(json.mutability, json.payableInTokens, json.onlyOwner);
        return new _EndpointDefinition(json.name, input, output, modifiers, json.title);
      }
    };
    exports.EndpointDefinition = EndpointDefinition;
    var EndpointModifiers = class {
      constructor(mutability, payableInTokens, onlyOwner) {
        this.mutability = mutability || "";
        this.payableInTokens = payableInTokens || [];
        this.onlyOwner = onlyOwner || false;
      }
      isPayableInEGLD() {
        return this.isPayableInToken("EGLD");
      }
      isPayableInToken(token) {
        if (this.payableInTokens.includes(token)) {
          return true;
        }
        if (this.payableInTokens.includes(`!${token}`)) {
          return false;
        }
        if (this.payableInTokens.includes("*")) {
          return true;
        }
        return false;
      }
      isPayable() {
        return this.payableInTokens.length != 0;
      }
      isReadonly() {
        return this.mutability == "readonly";
      }
      isOnlyOwner() {
        return this.onlyOwner;
      }
    };
    exports.EndpointModifiers = EndpointModifiers;
    var EndpointParameterDefinition = class _EndpointParameterDefinition {
      constructor(name, description, type) {
        this.name = name;
        this.description = description;
        this.type = type;
      }
      static fromJSON(json) {
        let parsedType = new typeExpressionParser_1.TypeExpressionParser().parse(json.type);
        return new _EndpointParameterDefinition(json.name || NamePlaceholder, json.description || DescriptionPlaceholder, parsedType);
      }
    };
    exports.EndpointParameterDefinition = EndpointParameterDefinition;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/fields.js
var require_fields = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/fields.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fields = exports.Field = exports.FieldDefinition = void 0;
    var errors = __importStar(require_errors());
    var typeExpressionParser_1 = require_typeExpressionParser();
    var FieldDefinition = class _FieldDefinition {
      constructor(name, description, type) {
        this.name = name;
        this.description = description;
        this.type = type;
      }
      static fromJSON(json) {
        let parsedType = new typeExpressionParser_1.TypeExpressionParser().parse(json.type);
        return new _FieldDefinition(json.name, json.description, parsedType);
      }
    };
    exports.FieldDefinition = FieldDefinition;
    var Field = class {
      constructor(value, name = "") {
        this.value = value;
        this.name = name;
      }
      checkTyping(expectedDefinition) {
        const actualType = this.value.getType();
        if (!actualType.equals(expectedDefinition.type)) {
          throw new errors.ErrTypingSystem(`check type of field "${expectedDefinition.name}; expected: ${expectedDefinition.type}, actual: ${actualType}"`);
        }
        if (this.name != expectedDefinition.name) {
          throw new errors.ErrTypingSystem(`check name of field "${expectedDefinition.name}"`);
        }
      }
      equals(other) {
        return this.name == other.name && this.value.equals(other.value);
      }
    };
    exports.Field = Field;
    var Fields = class {
      static checkTyping(fields, definitions) {
        if (fields.length != definitions.length) {
          throw new errors.ErrTypingSystem("fields length vs. field definitions length");
        }
        for (let i = 0; i < fields.length; i++) {
          let field = fields[i];
          let definition = definitions[i];
          field.checkTyping(definition);
        }
      }
      static equals(actual, expected) {
        if (actual.length != expected.length) {
          return false;
        }
        for (let i = 0; i < actual.length; i++) {
          let selfField = actual[i];
          let otherField = expected[i];
          if (!selfField.equals(otherField)) {
            return false;
          }
        }
        return true;
      }
      static getNamesOfTypeDependencies(definitions) {
        const dependencies = [];
        for (const definition of definitions) {
          dependencies.push(definition.type.getName());
          dependencies.push(...definition.type.getNamesOfDependencies());
        }
        return [...new Set(dependencies)];
      }
    };
    exports.Fields = Fields;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/enum.js
var require_enum = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/enum.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnumValue = exports.EnumVariantDefinition = exports.EnumType = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils();
    var fields_1 = require_fields();
    var types_1 = require_types();
    var SimpleEnumMaxDiscriminant = 256;
    var EnumType = class _EnumType extends types_1.CustomType {
      constructor(name, variants) {
        super(name);
        this.variants = [];
        this.variants = variants;
      }
      getClassName() {
        return _EnumType.ClassName;
      }
      static fromJSON(json) {
        const rawVariants = _EnumType.assignMissingDiscriminants(json.variants || []);
        const variants = rawVariants.map((variant) => EnumVariantDefinition.fromJSON(variant));
        return new _EnumType(json.name, variants);
      }
      // For some enums (e.g. some "explicit-enum" types), the discriminants are missing.
      static assignMissingDiscriminants(variants) {
        const allDiscriminantsAreMissing = variants.every((variant) => variant.discriminant == void 0);
        if (!allDiscriminantsAreMissing) {
          return variants;
        }
        return variants.map((variant, index) => {
          return {
            ...variant,
            discriminant: index
          };
        });
      }
      getVariantByDiscriminant(discriminant) {
        let result = this.variants.find((e) => e.discriminant == discriminant);
        utils_1.guardValueIsSet(`variant by discriminant (${discriminant})`, result);
        return result;
      }
      getVariantByName(name) {
        let result = this.variants.find((e) => e.name == name);
        utils_1.guardValueIsSet(`variant by name (${name})`, result);
        return result;
      }
      getNamesOfDependencies() {
        const dependencies = [];
        for (const variant of this.variants) {
          dependencies.push(...variant.getNamesOfDependencies());
        }
        return [...new Set(dependencies)];
      }
    };
    exports.EnumType = EnumType;
    EnumType.ClassName = "EnumType";
    var EnumVariantDefinition = class _EnumVariantDefinition {
      constructor(name, discriminant, fieldsDefinitions = []) {
        this.fieldsDefinitions = [];
        utils_1.guardTrue(discriminant < SimpleEnumMaxDiscriminant, `discriminant for simple enum should be less than ${SimpleEnumMaxDiscriminant}`);
        this.name = name;
        this.discriminant = discriminant;
        this.fieldsDefinitions = fieldsDefinitions;
      }
      static fromJSON(json) {
        let definitions = (json.fields || []).map((definition) => fields_1.FieldDefinition.fromJSON(definition));
        return new _EnumVariantDefinition(json.name, json.discriminant, definitions);
      }
      getFieldsDefinitions() {
        return this.fieldsDefinitions;
      }
      getFieldDefinition(name) {
        return this.fieldsDefinitions.find((item) => item.name == name);
      }
      getNamesOfDependencies() {
        return fields_1.Fields.getNamesOfTypeDependencies(this.fieldsDefinitions);
      }
    };
    exports.EnumVariantDefinition = EnumVariantDefinition;
    var EnumValue = class _EnumValue extends types_1.TypedValue {
      constructor(type, variant, fields) {
        super(type);
        this.fields = [];
        this.name = variant.name;
        this.discriminant = variant.discriminant;
        this.fields = fields;
        this.fieldsByName = new Map(fields.map((field) => [field.name, field]));
        let definitions = variant.getFieldsDefinitions();
        fields_1.Fields.checkTyping(this.fields, definitions);
      }
      getClassName() {
        return _EnumValue.ClassName;
      }
      /**
       * Utility (named constructor) to create a simple (i.e. without fields) enum value.
       */
      static fromName(type, name) {
        let variant = type.getVariantByName(name);
        return new _EnumValue(type, variant, []);
      }
      /**
       * Utility (named constructor) to create a simple (i.e. without fields) enum value.
       */
      static fromDiscriminant(type, discriminant) {
        let variant = type.getVariantByDiscriminant(discriminant);
        return new _EnumValue(type, variant, []);
      }
      equals(other) {
        if (!this.getType().equals(other.getType())) {
          return false;
        }
        let selfFields = this.getFields();
        let otherFields = other.getFields();
        const nameIsSame = this.name == other.name;
        const discriminantIsSame = this.discriminant == other.discriminant;
        const fieldsAreSame = fields_1.Fields.equals(selfFields, otherFields);
        return nameIsSame && discriminantIsSame && fieldsAreSame;
      }
      getFields() {
        return this.fields;
      }
      getFieldValue(name) {
        let field = this.fieldsByName.get(name);
        if (field) {
          return field.value.valueOf();
        }
        throw new errors_1.ErrMissingFieldOnEnum(name, this.getType().getName());
      }
      valueOf() {
        let result = { name: this.name, fields: [] };
        this.fields.forEach((field, index) => result.fields[index] = field.value.valueOf());
        return result;
      }
    };
    exports.EnumValue = EnumValue;
    EnumValue.ClassName = "EnumValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/event.js
var require_event = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/event.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventTopicDefinition = exports.EventDefinition = void 0;
    var typeExpressionParser_1 = require_typeExpressionParser();
    var NamePlaceholder = "?";
    var EventDefinition = class _EventDefinition {
      constructor(identifier, inputs) {
        this.inputs = [];
        this.identifier = identifier;
        this.inputs = inputs || [];
      }
      static fromJSON(json) {
        json.identifier = json.identifier == null ? NamePlaceholder : json.identifier;
        json.inputs = json.inputs || [];
        const inputs = json.inputs.map((param) => EventTopicDefinition.fromJSON(param));
        return new _EventDefinition(json.identifier, inputs);
      }
    };
    exports.EventDefinition = EventDefinition;
    var EventTopicDefinition = class _EventTopicDefinition {
      constructor(options) {
        this.name = options.name;
        this.type = options.type;
        this.indexed = options.indexed;
      }
      static fromJSON(json) {
        const parsedType = new typeExpressionParser_1.TypeExpressionParser().parse(json.type);
        return new _EventTopicDefinition({
          name: json.name || NamePlaceholder,
          type: parsedType,
          indexed: json.indexed
        });
      }
    };
    exports.EventTopicDefinition = EventTopicDefinition;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/explicit-enum.js
var require_explicit_enum = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/explicit-enum.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExplicitEnumValue = exports.ExplicitEnumVariantDefinition = exports.ExplicitEnumType = void 0;
    var utils_1 = require_utils();
    var types_1 = require_types();
    var ExplicitEnumType = class _ExplicitEnumType extends types_1.CustomType {
      constructor(name, variants) {
        super(name);
        this.variants = [];
        this.variants = variants;
      }
      getClassName() {
        return _ExplicitEnumType.ClassName;
      }
      static fromJSON(json) {
        const variants = json.variants.map((variant) => ExplicitEnumVariantDefinition.fromJSON(variant));
        return new _ExplicitEnumType(json.name, variants);
      }
      getVariantByName(name) {
        let result = this.variants.find((e) => e.name == name);
        utils_1.guardValueIsSet(`variant by name (${name})`, result);
        return result;
      }
    };
    exports.ExplicitEnumType = ExplicitEnumType;
    ExplicitEnumType.ClassName = "ExplicitEnumType";
    var ExplicitEnumVariantDefinition = class _ExplicitEnumVariantDefinition {
      constructor(name) {
        this.name = name;
      }
      static fromJSON(json) {
        return new _ExplicitEnumVariantDefinition(json.name);
      }
    };
    exports.ExplicitEnumVariantDefinition = ExplicitEnumVariantDefinition;
    var ExplicitEnumValue = class _ExplicitEnumValue extends types_1.TypedValue {
      constructor(type, variant) {
        super(type);
        this.name = variant.name;
      }
      getClassName() {
        return _ExplicitEnumValue.ClassName;
      }
      /**
       * Utility (named constructor) to create a simple (i.e. without fields) enum value.
       */
      static fromName(type, name) {
        let variant = type.getVariantByName(name);
        return new _ExplicitEnumValue(type, variant);
      }
      equals(other) {
        if (!this.getType().equals(other.getType())) {
          return false;
        }
        return this.name == other.name;
      }
      valueOf() {
        return { name: this.name };
      }
    };
    exports.ExplicitEnumValue = ExplicitEnumValue;
    ExplicitEnumValue.ClassName = "ExplicitEnumValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/struct.js
var require_struct = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/struct.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Struct = exports.StructType = void 0;
    var errors_1 = require_errors();
    var fields_1 = require_fields();
    var types_1 = require_types();
    var StructType = class _StructType extends types_1.CustomType {
      constructor(name, fieldsDefinitions) {
        super(name);
        this.fieldsDefinitions = [];
        this.fieldsDefinitions = fieldsDefinitions;
      }
      getClassName() {
        return _StructType.ClassName;
      }
      static fromJSON(json) {
        let definitions = (json.fields || []).map((definition) => fields_1.FieldDefinition.fromJSON(definition));
        return new _StructType(json.name, definitions);
      }
      getFieldsDefinitions() {
        return this.fieldsDefinitions;
      }
      getFieldDefinition(name) {
        return this.fieldsDefinitions.find((item) => item.name == name);
      }
      getNamesOfDependencies() {
        return fields_1.Fields.getNamesOfTypeDependencies(this.fieldsDefinitions);
      }
    };
    exports.StructType = StructType;
    StructType.ClassName = "StructType";
    var Struct = class _Struct extends types_1.TypedValue {
      /**
       * One can only set fields at initialization time.
       */
      constructor(type, fields) {
        super(type);
        this.fields = fields;
        this.fieldsByName = new Map(fields.map((field) => [field.name, field]));
        this.checkTyping();
      }
      getClassName() {
        return _Struct.ClassName;
      }
      checkTyping() {
        let type = this.getType();
        let definitions = type.getFieldsDefinitions();
        fields_1.Fields.checkTyping(this.fields, definitions);
      }
      getFields() {
        return this.fields;
      }
      getFieldValue(name) {
        let field = this.fieldsByName.get(name);
        if (field) {
          return field.value.valueOf();
        }
        throw new errors_1.ErrMissingFieldOnStruct(name, this.getType().getName());
      }
      valueOf() {
        let result = {};
        for (const field of this.fields) {
          result[field.name] = field.value.valueOf();
        }
        return result;
      }
      equals(other) {
        if (!this.getType().equals(other.getType())) {
          return false;
        }
        let selfFields = this.getFields();
        let otherFields = other.getFields();
        return fields_1.Fields.equals(selfFields, otherFields);
      }
    };
    exports.Struct = Struct;
    Struct.ClassName = "Struct";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/algebraic.js
var require_algebraic = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/algebraic.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionalValue = exports.OptionalType = void 0;
    var utils_1 = require_utils();
    var types_1 = require_types();
    var OptionalType = class _OptionalType extends types_1.Type {
      constructor(typeParameter) {
        super("Optional", [typeParameter], types_1.TypeCardinality.variable(1));
      }
      getClassName() {
        return _OptionalType.ClassName;
      }
      isAssignableFrom(type) {
        if (!type.hasExactClass(_OptionalType.ClassName)) {
          return false;
        }
        let invariantTypeParameters = this.getFirstTypeParameter().equals(type.getFirstTypeParameter());
        let fakeCovarianceToNull = type.getFirstTypeParameter().hasExactClass(types_1.NullType.ClassName);
        return invariantTypeParameters || fakeCovarianceToNull;
      }
    };
    exports.OptionalType = OptionalType;
    OptionalType.ClassName = "OptionalType";
    var OptionalValue = class _OptionalValue extends types_1.TypedValue {
      constructor(type, value = null) {
        super(type);
        this.value = value;
      }
      getClassName() {
        return _OptionalValue.ClassName;
      }
      /**
       * Creates an OptionalValue, as not provided (missing).
       */
      static newMissing() {
        let type = new OptionalType(new types_1.NullType());
        return new _OptionalValue(type);
      }
      isSet() {
        return this.value ? true : false;
      }
      getTypedValue() {
        utils_1.guardValueIsSet("value", this.value);
        return this.value;
      }
      valueOf() {
        return this.value ? this.value.valueOf() : null;
      }
      equals(other) {
        var _a;
        return ((_a = this.value) == null ? void 0 : _a.equals(other.value)) || false;
      }
    };
    exports.OptionalValue = OptionalValue;
    OptionalValue.ClassName = "OptionalValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/boolean.js
var require_boolean = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/boolean.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanValue = exports.BooleanType = void 0;
    var types_1 = require_types();
    var BooleanType = class _BooleanType extends types_1.PrimitiveType {
      constructor() {
        super("bool");
      }
      getClassName() {
        return _BooleanType.ClassName;
      }
    };
    exports.BooleanType = BooleanType;
    BooleanType.ClassName = "BooleanType";
    var BooleanValue = class _BooleanValue extends types_1.PrimitiveValue {
      constructor(value) {
        super(new BooleanType());
        this.value = value;
      }
      getClassName() {
        return _BooleanValue.ClassName;
      }
      /**
       * Returns whether two objects have the same value.
       *
       * @param other another BooleanValue
       */
      equals(other) {
        return this.value === other.value;
      }
      isTrue() {
        return this.value === true;
      }
      isFalse() {
        return !this.isTrue();
      }
      valueOf() {
        return this.value;
      }
    };
    exports.BooleanValue = BooleanValue;
    BooleanValue.ClassName = "BooleanValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/bytes.js
var require_bytes = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/bytes.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesValue = exports.BytesType = void 0;
    var types_1 = require_types();
    var BytesType = class _BytesType extends types_1.PrimitiveType {
      constructor() {
        super("bytes");
      }
      getClassName() {
        return _BytesType.ClassName;
      }
    };
    exports.BytesType = BytesType;
    BytesType.ClassName = "BytesType";
    var BytesValue = class _BytesValue extends types_1.PrimitiveValue {
      constructor(value) {
        super(new BytesType());
        this.value = value;
      }
      getClassName() {
        return _BytesValue.ClassName;
      }
      /**
       * Creates a BytesValue from a utf-8 string.
       */
      static fromUTF8(value) {
        let buffer = Buffer.from(value, "utf-8");
        return new _BytesValue(buffer);
      }
      /**
       * Creates a BytesValue from a hex-encoded string.
       */
      static fromHex(value) {
        let buffer = Buffer.from(value, "hex");
        return new _BytesValue(buffer);
      }
      getLength() {
        return this.value.length;
      }
      /**
       * Returns whether two objects have the same value.
       */
      equals(other) {
        if (this.getLength() != other.getLength()) {
          return false;
        }
        return this.value.equals(other.value);
      }
      valueOf() {
        return this.value;
      }
      toString() {
        return this.value.toString();
      }
    };
    exports.BytesValue = BytesValue;
    BytesValue.ClassName = "BytesValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/codeMetadata.js
var require_codeMetadata = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/codeMetadata.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeMetadataValue = exports.CodeMetadataType = void 0;
    var types_1 = require_types();
    var CodeMetadataType = class extends types_1.PrimitiveType {
      constructor() {
        super("CodeMetadata");
      }
    };
    exports.CodeMetadataType = CodeMetadataType;
    var CodeMetadataValue = class extends types_1.PrimitiveValue {
      constructor(value) {
        super(new CodeMetadataType());
        this.value = value;
      }
      equals(other) {
        return this.value.equals(other.value);
      }
      valueOf() {
        return this.value;
      }
    };
    exports.CodeMetadataValue = CodeMetadataValue;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/composite.js
var require_composite = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/composite.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompositeValue = exports.CompositeType = void 0;
    var utils_1 = require_utils();
    var types_1 = require_types();
    var CompositeType = class _CompositeType extends types_1.Type {
      constructor(...typeParameters) {
        super("Composite", typeParameters, types_1.TypeCardinality.variable(typeParameters.length));
      }
      getClassName() {
        return _CompositeType.ClassName;
      }
    };
    exports.CompositeType = CompositeType;
    CompositeType.ClassName = "CompositeType";
    var CompositeValue = class _CompositeValue extends types_1.TypedValue {
      constructor(type, items) {
        super(type);
        utils_1.guardLength(items, type.getTypeParameters().length);
        this.items = items;
      }
      getClassName() {
        return _CompositeValue.ClassName;
      }
      static fromItems(...items) {
        let typeParameters = items.map((value) => value.getType());
        let type = new CompositeType(...typeParameters);
        return new _CompositeValue(type, items);
      }
      getItems() {
        return this.items;
      }
      valueOf() {
        return this.items.map((item) => item == null ? void 0 : item.valueOf());
      }
      equals(other) {
        if (this.getType().differs(other.getType())) {
          return false;
        }
        for (let i = 0; i < this.items.length; i++) {
          let selfItem = this.items[i];
          let otherItem = other.items[i];
          if (!selfItem.equals(otherItem)) {
            return false;
          }
        }
        return true;
      }
    };
    exports.CompositeValue = CompositeValue;
    CompositeValue.ClassName = "CompositeValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/collections.js
var require_collections = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/collections.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CollectionOfTypedValues = void 0;
    var CollectionOfTypedValues = class {
      constructor(items) {
        this.items = items;
      }
      getLength() {
        return this.items.length;
      }
      getItems() {
        return this.items;
      }
      valueOf() {
        return this.items.map((item) => item.valueOf());
      }
      equals(other) {
        if (this.getLength() != other.getLength()) {
          return false;
        }
        for (let i = 0; i < this.getLength(); i++) {
          let selfItem = this.items[i];
          let otherItem = other.items[i];
          if (!selfItem.equals(otherItem)) {
            return false;
          }
        }
        return true;
      }
    };
    exports.CollectionOfTypedValues = CollectionOfTypedValues;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/generic.js
var require_generic = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/generic.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.List = exports.OptionValue = exports.ListType = exports.OptionType = void 0;
    var utils_1 = require_utils();
    var collections_1 = require_collections();
    var types_1 = require_types();
    var OptionType = class _OptionType extends types_1.Type {
      constructor(typeParameter) {
        super("Option", [typeParameter]);
      }
      getClassName() {
        return _OptionType.ClassName;
      }
      isAssignableFrom(type) {
        if (!type.hasExactClass(_OptionType.ClassName)) {
          return false;
        }
        let invariantTypeParameters = this.getFirstTypeParameter().equals(type.getFirstTypeParameter());
        let fakeCovarianceToNull = type.getFirstTypeParameter().hasExactClass(types_1.NullType.ClassName);
        return invariantTypeParameters || fakeCovarianceToNull;
      }
    };
    exports.OptionType = OptionType;
    OptionType.ClassName = "OptionType";
    var ListType = class _ListType extends types_1.Type {
      constructor(typeParameter) {
        super("List", [typeParameter]);
      }
      getClassName() {
        return _ListType.ClassName;
      }
    };
    exports.ListType = ListType;
    ListType.ClassName = "ListType";
    var OptionValue = class _OptionValue extends types_1.TypedValue {
      constructor(type, value = null) {
        super(type);
        this.value = value;
      }
      getClassName() {
        return _OptionValue.ClassName;
      }
      /**
       * Creates an OptionValue, as a missing option argument.
       */
      static newMissing() {
        let type = new OptionType(new types_1.NullType());
        return new _OptionValue(type);
      }
      static newMissingTyped(type) {
        return new _OptionValue(new OptionType(type));
      }
      /**
       * Creates an OptionValue, as a provided option argument.
       */
      static newProvided(typedValue) {
        let type = new OptionType(typedValue.getType());
        return new _OptionValue(type, typedValue);
      }
      isSet() {
        return this.value ? true : false;
      }
      getTypedValue() {
        utils_1.guardValueIsSet("value", this.value);
        return this.value;
      }
      valueOf() {
        return this.value ? this.value.valueOf() : null;
      }
      equals(other) {
        var _a;
        return ((_a = this.value) == null ? void 0 : _a.equals(other.value)) || false;
      }
    };
    exports.OptionValue = OptionValue;
    OptionValue.ClassName = "OptionValue";
    var List = class _List extends types_1.TypedValue {
      /**
       *
       * @param type the type of this TypedValue (an instance of ListType), not the type parameter of the ListType
       * @param items the items, having the type type.getFirstTypeParameter()
       */
      constructor(type, items) {
        super(type);
        this.backingCollection = new collections_1.CollectionOfTypedValues(items);
      }
      getClassName() {
        return _List.ClassName;
      }
      static fromItems(items) {
        if (items.length == 0) {
          return new _List(new types_1.TypePlaceholder(), []);
        }
        let typeParameter = items[0].getType();
        let listType = new ListType(typeParameter);
        return new _List(listType, items);
      }
      getLength() {
        return this.backingCollection.getLength();
      }
      getItems() {
        return this.backingCollection.getItems();
      }
      valueOf() {
        return this.backingCollection.valueOf();
      }
      equals(other) {
        return this.backingCollection.equals(other.backingCollection);
      }
    };
    exports.List = List;
    List.ClassName = "List";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/genericArray.js
var require_genericArray = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/genericArray.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayVec = exports.ArrayVecType = void 0;
    var utils_1 = require_utils();
    var collections_1 = require_collections();
    var types_1 = require_types();
    var ArrayVecType = class _ArrayVecType extends types_1.Type {
      constructor(length, typeParameter) {
        super("Array", [typeParameter]);
        utils_1.guardTrue(length > 0, "array length > 0");
        this.length = length;
      }
      getClassName() {
        return _ArrayVecType.ClassName;
      }
    };
    exports.ArrayVecType = ArrayVecType;
    ArrayVecType.ClassName = "ArrayVecType";
    var ArrayVec = class _ArrayVec extends types_1.TypedValue {
      constructor(type, items) {
        super(type);
        utils_1.guardLength(items, type.length);
        this.backingCollection = new collections_1.CollectionOfTypedValues(items);
      }
      getClassName() {
        return _ArrayVec.ClassName;
      }
      getLength() {
        return this.backingCollection.getLength();
      }
      getItems() {
        return this.backingCollection.getItems();
      }
      valueOf() {
        return this.backingCollection.valueOf();
      }
      equals(other) {
        return this.backingCollection.equals(other.backingCollection);
      }
    };
    exports.ArrayVec = ArrayVec;
    ArrayVec.ClassName = "ArrayVec";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/h256.js
var require_h256 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/h256.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.H256Value = exports.H256Type = void 0;
    var types_1 = require_types();
    var H256Type = class _H256Type extends types_1.PrimitiveType {
      constructor() {
        super("H256");
      }
      getClassName() {
        return _H256Type.ClassName;
      }
    };
    exports.H256Type = H256Type;
    H256Type.ClassName = "H256Type";
    var H256Value = class _H256Value extends types_1.PrimitiveValue {
      constructor(value) {
        super(new H256Type());
        this.value = value;
      }
      getClassName() {
        return _H256Value.ClassName;
      }
      /**
       * Returns whether two objects have the same value.
       */
      equals(other) {
        return this.value.equals(other.value);
      }
      valueOf() {
        return this.value;
      }
    };
    exports.H256Value = H256Value;
    H256Value.ClassName = "H256Value";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/managedDecimal.js
var require_managedDecimal = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/managedDecimal.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManagedDecimalValue = exports.ManagedDecimalType = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var types_1 = require_types();
    var ManagedDecimalType = class _ManagedDecimalType extends types_1.Type {
      constructor(metadata) {
        super("ManagedDecimal", void 0, void 0, metadata);
      }
      getClassName() {
        return _ManagedDecimalType.ClassName;
      }
      getMetadata() {
        return this.metadata;
      }
      isVariable() {
        return this.metadata == "usize";
      }
    };
    exports.ManagedDecimalType = ManagedDecimalType;
    ManagedDecimalType.ClassName = "ManagedDecimalType";
    var ManagedDecimalValue = class _ManagedDecimalValue extends types_1.TypedValue {
      constructor(value, scale, isVariable = false) {
        super(new ManagedDecimalType(isVariable ? "usize" : scale));
        this.value = new bignumber_js_1.default(value);
        this.scale = scale;
        this.variable = isVariable;
      }
      getClassName() {
        return _ManagedDecimalValue.ClassName;
      }
      getScale() {
        return this.scale;
      }
      getPrecision() {
        return this.value.toFixed(this.scale).replace(".", "").length;
      }
      /**
       * Returns whether two objects have the same value.
       */
      equals(other) {
        if (this.getPrecision() != other.getPrecision()) {
          return false;
        }
        return new bignumber_js_1.default(this.value).eq(other.value);
      }
      valueOf() {
        return this.value;
      }
      toString() {
        return this.value.toFixed(this.scale);
      }
      isVariable() {
        return this.variable;
      }
    };
    exports.ManagedDecimalValue = ManagedDecimalValue;
    ManagedDecimalValue.ClassName = "ManagedDecimalValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/managedDecimalSigned.js
var require_managedDecimalSigned = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/managedDecimalSigned.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManagedDecimalSignedValue = exports.ManagedDecimalSignedType = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var types_1 = require_types();
    var ManagedDecimalSignedType = class _ManagedDecimalSignedType extends types_1.Type {
      constructor(metadata) {
        super("ManagedDecimalSigned", void 0, void 0, metadata);
      }
      getClassName() {
        return _ManagedDecimalSignedType.ClassName;
      }
      getMetadata() {
        return this.metadata;
      }
      isVariable() {
        return this.metadata == "usize";
      }
    };
    exports.ManagedDecimalSignedType = ManagedDecimalSignedType;
    ManagedDecimalSignedType.ClassName = "ManagedDecimalSignedType";
    var ManagedDecimalSignedValue = class _ManagedDecimalSignedValue extends types_1.TypedValue {
      constructor(value, scale, isVariable = false) {
        super(new ManagedDecimalSignedType(isVariable ? "usize" : scale));
        this.value = new bignumber_js_1.default(value);
        this.scale = scale;
        this.variable = isVariable;
      }
      getClassName() {
        return _ManagedDecimalSignedValue.ClassName;
      }
      getPrecision() {
        return this.value.toFixed(this.scale).replace(".", "").length;
      }
      getScale() {
        return this.scale;
      }
      /**
       * Returns whether two objects have the same value.
       */
      equals(other) {
        if (this.getPrecision() != other.getPrecision()) {
          return false;
        }
        return new bignumber_js_1.default(this.value).eq(other.value);
      }
      valueOf() {
        return this.value;
      }
      toString() {
        return this.value.toFixed(this.scale);
      }
      isVariable() {
        return this.variable;
      }
    };
    exports.ManagedDecimalSignedValue = ManagedDecimalSignedValue;
    ManagedDecimalSignedValue.ClassName = "ManagedDecimalSignedValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/nothing.js
var require_nothing = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/nothing.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NothingValue = exports.NothingType = void 0;
    var types_1 = require_types();
    var NothingType = class _NothingType extends types_1.PrimitiveType {
      constructor() {
        super("nothing");
      }
      getClassName() {
        return _NothingType.ClassName;
      }
    };
    exports.NothingType = NothingType;
    NothingType.ClassName = "NothingType";
    var NothingValue = class _NothingValue extends types_1.PrimitiveValue {
      constructor() {
        super(new NothingType());
      }
      getClassName() {
        return _NothingValue.ClassName;
      }
      equals(_other) {
        return false;
      }
      valueOf() {
        return {};
      }
    };
    exports.NothingValue = NothingValue;
    NothingValue.ClassName = "NothingValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/numerical.js
var require_numerical = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/numerical.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BigIntValue = exports.BigUIntValue = exports.I64Value = exports.U64Value = exports.I32Value = exports.U32Value = exports.I16Value = exports.U16Value = exports.I8Value = exports.U8Value = exports.NumericalValue = exports.BigIntType = exports.BigUIntType = exports.I64Type = exports.U64Type = exports.I32Type = exports.U32Type = exports.I16Type = exports.U16Type = exports.I8Type = exports.U8Type = exports.NumericalType = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var errors = __importStar(require_errors());
    var types_1 = require_types();
    var NumericalType = class _NumericalType extends types_1.PrimitiveType {
      constructor(name, sizeInBytes, withSign) {
        super(name);
        this.sizeInBytes = sizeInBytes;
        this.withSign = withSign;
      }
      getClassName() {
        return _NumericalType.ClassName;
      }
      hasFixedSize() {
        return this.sizeInBytes ? true : false;
      }
      hasArbitrarySize() {
        return !this.hasFixedSize();
      }
    };
    exports.NumericalType = NumericalType;
    NumericalType.ClassName = "NumericalType";
    var U8Type = class _U8Type extends NumericalType {
      constructor() {
        super("u8", 1, false);
      }
      getClassName() {
        return _U8Type.ClassName;
      }
    };
    exports.U8Type = U8Type;
    U8Type.ClassName = "U8Type";
    var I8Type = class _I8Type extends NumericalType {
      constructor() {
        super("i8", 1, true);
      }
      getClassName() {
        return _I8Type.ClassName;
      }
    };
    exports.I8Type = I8Type;
    I8Type.ClassName = "I8Type";
    var U16Type = class _U16Type extends NumericalType {
      constructor() {
        super("u16", 2, false);
      }
      getClassName() {
        return _U16Type.ClassName;
      }
    };
    exports.U16Type = U16Type;
    U16Type.ClassName = "U16Type";
    var I16Type = class _I16Type extends NumericalType {
      constructor() {
        super("i16", 2, true);
      }
      getClassName() {
        return _I16Type.ClassName;
      }
    };
    exports.I16Type = I16Type;
    I16Type.ClassName = "I16Type";
    var U32Type = class _U32Type extends NumericalType {
      constructor() {
        super("u32", 4, false);
      }
      getClassName() {
        return _U32Type.ClassName;
      }
    };
    exports.U32Type = U32Type;
    U32Type.ClassName = "U32Type";
    var I32Type = class _I32Type extends NumericalType {
      constructor() {
        super("i32", 4, true);
      }
      getClassName() {
        return _I32Type.ClassName;
      }
    };
    exports.I32Type = I32Type;
    I32Type.ClassName = "I32Type";
    var U64Type = class _U64Type extends NumericalType {
      constructor() {
        super("u64", 8, false);
      }
      getClassName() {
        return _U64Type.ClassName;
      }
    };
    exports.U64Type = U64Type;
    U64Type.ClassName = "U64Type";
    var I64Type = class _I64Type extends NumericalType {
      constructor() {
        super("i64", 8, true);
      }
      getClassName() {
        return _I64Type.ClassName;
      }
    };
    exports.I64Type = I64Type;
    I64Type.ClassName = "I64Type";
    var BigUIntType = class _BigUIntType extends NumericalType {
      constructor() {
        super("BigUint", 0, false);
      }
      getClassName() {
        return _BigUIntType.ClassName;
      }
    };
    exports.BigUIntType = BigUIntType;
    BigUIntType.ClassName = "BigUIntType";
    var BigIntType = class _BigIntType extends NumericalType {
      constructor() {
        super("Bigint", 0, true);
      }
      getClassName() {
        return _BigIntType.ClassName;
      }
    };
    exports.BigIntType = BigIntType;
    BigIntType.ClassName = "BigIntType";
    var NumericalValue = class _NumericalValue extends types_1.PrimitiveValue {
      constructor(type, value) {
        super(type);
        if (typeof value === "bigint") {
          value = value.toString();
        }
        this.value = new bignumber_js_1.default(value);
        this.sizeInBytes = type.sizeInBytes;
        this.withSign = type.withSign;
        if (this.value.isNaN()) {
          throw new errors.ErrInvalidArgument(`not a number: ${value}`);
        }
        if (!this.withSign && this.value.isNegative()) {
          throw new errors.ErrInvalidArgument(`negative, but type is unsigned: ${value}`);
        }
      }
      getClassName() {
        return _NumericalValue.ClassName;
      }
      /**
       * Returns whether two objects have the same value.
       *
       * @param other another NumericalValue
       */
      equals(other) {
        return this.value.isEqualTo(other.value);
      }
      valueOf() {
        return this.value;
      }
      toString() {
        return this.value.toString();
      }
    };
    exports.NumericalValue = NumericalValue;
    NumericalValue.ClassName = "NumericalValue";
    var U8Value = class _U8Value extends NumericalValue {
      constructor(value) {
        super(new U8Type(), value);
      }
      getClassName() {
        return _U8Value.ClassName;
      }
    };
    exports.U8Value = U8Value;
    U8Value.ClassName = "U8Value";
    var I8Value = class _I8Value extends NumericalValue {
      constructor(value) {
        super(new I8Type(), value);
      }
      getClassName() {
        return _I8Value.ClassName;
      }
    };
    exports.I8Value = I8Value;
    I8Value.ClassName = "I8Value";
    var U16Value = class _U16Value extends NumericalValue {
      constructor(value) {
        super(new U16Type(), value);
      }
      getClassName() {
        return _U16Value.ClassName;
      }
    };
    exports.U16Value = U16Value;
    U16Value.ClassName = "U16Value";
    var I16Value = class _I16Value extends NumericalValue {
      constructor(value) {
        super(new I16Type(), value);
      }
      getClassName() {
        return _I16Value.ClassName;
      }
    };
    exports.I16Value = I16Value;
    I16Value.ClassName = "I16Value";
    var U32Value = class _U32Value extends NumericalValue {
      constructor(value) {
        super(new U32Type(), value);
      }
      getClassName() {
        return _U32Value.ClassName;
      }
    };
    exports.U32Value = U32Value;
    U32Value.ClassName = "U32Value";
    var I32Value = class _I32Value extends NumericalValue {
      constructor(value) {
        super(new I32Type(), value);
      }
      getClassName() {
        return _I32Value.ClassName;
      }
    };
    exports.I32Value = I32Value;
    I32Value.ClassName = "I32Value";
    var U64Value = class _U64Value extends NumericalValue {
      constructor(value) {
        super(new U64Type(), value);
      }
      getClassName() {
        return _U64Value.ClassName;
      }
    };
    exports.U64Value = U64Value;
    U64Value.ClassName = "U64Value";
    var I64Value = class _I64Value extends NumericalValue {
      constructor(value) {
        super(new I64Type(), value);
      }
      getClassName() {
        return _I64Value.ClassName;
      }
    };
    exports.I64Value = I64Value;
    I64Value.ClassName = "I64Value";
    var BigUIntValue = class _BigUIntValue extends NumericalValue {
      constructor(value) {
        super(new BigUIntType(), value);
      }
      getClassName() {
        return _BigUIntValue.ClassName;
      }
    };
    exports.BigUIntValue = BigUIntValue;
    BigUIntValue.ClassName = "BigUIntValue";
    var BigIntValue = class _BigIntValue extends NumericalValue {
      constructor(value) {
        super(new BigIntType(), value);
      }
      getClassName() {
        return _BigIntValue.ClassName;
      }
    };
    exports.BigIntValue = BigIntValue;
    BigIntValue.ClassName = "BigIntValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/string.js
var require_string = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/string.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringValue = exports.StringType = void 0;
    var types_1 = require_types();
    var StringType = class _StringType extends types_1.PrimitiveType {
      constructor() {
        super("utf-8 string");
      }
      getClassName() {
        return _StringType.ClassName;
      }
    };
    exports.StringType = StringType;
    StringType.ClassName = "StringType";
    var StringValue = class _StringValue extends types_1.PrimitiveValue {
      constructor(value) {
        super(new StringType());
        this.value = value;
      }
      getClassName() {
        return _StringValue.ClassName;
      }
      /**
       * Creates a StringValue from a utf-8 string.
       */
      static fromUTF8(value) {
        return new _StringValue(value);
      }
      /**
       * Creates a StringValue from a hex-encoded string.
       */
      static fromHex(value) {
        let decodedValue = Buffer.from(value, "hex").toString();
        return new _StringValue(decodedValue);
      }
      getLength() {
        return this.value.length;
      }
      /**
       * Returns whether two objects have the same value.
       */
      equals(other) {
        return this.value === other.value;
      }
      valueOf() {
        return this.value;
      }
    };
    exports.StringValue = StringValue;
    StringValue.ClassName = "StringValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/tokenIdentifier.js
var require_tokenIdentifier = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/tokenIdentifier.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenIdentifierValue = exports.TokenIdentifierType = void 0;
    var types_1 = require_types();
    var EGLDTokenIdentifier = "EGLD";
    var TokenIdentifierType = class _TokenIdentifierType extends types_1.PrimitiveType {
      constructor() {
        super("TokenIdentifier");
      }
      getClassName() {
        return _TokenIdentifierType.ClassName;
      }
    };
    exports.TokenIdentifierType = TokenIdentifierType;
    TokenIdentifierType.ClassName = "TokenIdentifierType";
    var TokenIdentifierValue = class _TokenIdentifierValue extends types_1.PrimitiveValue {
      constructor(value) {
        super(new TokenIdentifierType());
        this.value = value;
      }
      static egld() {
        return new _TokenIdentifierValue(EGLDTokenIdentifier);
      }
      static esdtTokenIdentifier(identifier) {
        return new _TokenIdentifierValue(identifier);
      }
      getClassName() {
        return _TokenIdentifierValue.ClassName;
      }
      getLength() {
        return this.value.length;
      }
      /**
       * Returns whether two objects have the same value.
       */
      equals(other) {
        if (this.getLength() != other.getLength()) {
          return false;
        }
        return this.value == other.value;
      }
      valueOf() {
        return this.value;
      }
      toString() {
        return this.value.toString();
      }
    };
    exports.TokenIdentifierValue = TokenIdentifierValue;
    TokenIdentifierValue.ClassName = "TokenIdentifierValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/tuple.js
var require_tuple = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/tuple.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tuple = exports.TupleType = void 0;
    var errors = __importStar(require_errors());
    var fields_1 = require_fields();
    var struct_1 = require_struct();
    var TupleType = class _TupleType extends struct_1.StructType {
      constructor(...typeParameters) {
        super(_TupleType.prepareName(typeParameters), _TupleType.prepareFieldDefinitions(typeParameters));
      }
      getClassName() {
        return _TupleType.ClassName;
      }
      static prepareName(typeParameters) {
        let fields = typeParameters.map((type) => type.toString()).join(", ");
        let result = `tuple<${fields}>`;
        return result;
      }
      static prepareFieldDefinitions(typeParameters) {
        let result = typeParameters.map((type, i) => new fields_1.FieldDefinition(prepareFieldName(i), "anonymous tuple field", type));
        return result;
      }
    };
    exports.TupleType = TupleType;
    TupleType.ClassName = "TupleType";
    function prepareFieldName(fieldIndex) {
      return `field${fieldIndex}`;
    }
    var Tuple = class _Tuple extends struct_1.Struct {
      constructor(type, fields) {
        super(type, fields);
      }
      getClassName() {
        return _Tuple.ClassName;
      }
      static fromItems(items) {
        if (items.length < 1) {
          throw new errors.ErrTypingSystem("bad tuple items");
        }
        let fieldsTypes = items.map((item) => item.getType());
        let tupleType = new TupleType(...fieldsTypes);
        let fields = items.map((item, i) => new fields_1.Field(item, prepareFieldName(i)));
        return new _Tuple(tupleType, fields);
      }
    };
    exports.Tuple = Tuple;
    Tuple.ClassName = "Tuple";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/variadic.js
var require_variadic = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/variadic.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VariadicValue = exports.CountedVariadicType = exports.VariadicType = void 0;
    var types_1 = require_types();
    var VariadicType = class _VariadicType extends types_1.Type {
      constructor(typeParameter, isCounted = false) {
        super("Variadic", [typeParameter], types_1.TypeCardinality.variable());
        this.isCounted = isCounted;
      }
      getClassName() {
        return _VariadicType.ClassName;
      }
    };
    exports.VariadicType = VariadicType;
    VariadicType.ClassName = "VariadicType";
    var CountedVariadicType = class extends types_1.Type {
      constructor(typeParameter) {
        super("Variadic", [typeParameter], types_1.TypeCardinality.variable());
      }
      getClassName() {
        return VariadicType.ClassName;
      }
    };
    exports.CountedVariadicType = CountedVariadicType;
    CountedVariadicType.ClassName = "VariadicType";
    var VariadicValue = class _VariadicValue extends types_1.TypedValue {
      /**
       *
       * @param type the type of this TypedValue (an instance of VariadicType), not the type parameter of the VariadicType
       * @param items the items, having the type type.getFirstTypeParameter()
       */
      constructor(type, items) {
        super(type);
        this.items = items;
      }
      getClassName() {
        return _VariadicValue.ClassName;
      }
      static fromItems(...items) {
        return this.createFromItems(items, false);
      }
      static fromItemsCounted(...items) {
        return this.createFromItems(items, true);
      }
      static createFromItems(items, isCounted) {
        if (items.length == 0) {
          return new _VariadicValue(new VariadicType(new types_1.TypePlaceholder(), isCounted), []);
        }
        const typeParameter = items[0].getType();
        return new _VariadicValue(new VariadicType(typeParameter, isCounted), items);
      }
      getItems() {
        return this.items;
      }
      valueOf() {
        return this.items.map((item) => item.valueOf());
      }
      equals(other) {
        if (this.getType().differs(other.getType())) {
          return false;
        }
        for (let i = 0; i < this.items.length; i++) {
          let selfItem = this.items[i];
          let otherItem = other.items[i];
          if (!selfItem.equals(otherItem)) {
            return false;
          }
        }
        return true;
      }
    };
    exports.VariadicValue = VariadicValue;
    VariadicValue.ClassName = "VariadicValue";
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/typeMapper.js
var require_typeMapper = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/typeMapper.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeMapper = void 0;
    var errors = __importStar(require_errors());
    var address_1 = require_address();
    var algebraic_1 = require_algebraic();
    var boolean_1 = require_boolean();
    var bytes_1 = require_bytes();
    var codeMetadata_1 = require_codeMetadata();
    var composite_1 = require_composite();
    var enum_1 = require_enum();
    var explicit_enum_1 = require_explicit_enum();
    var fields_1 = require_fields();
    var generic_1 = require_generic();
    var genericArray_1 = require_genericArray();
    var h256_1 = require_h256();
    var managedDecimal_1 = require_managedDecimal();
    var managedDecimalSigned_1 = require_managedDecimalSigned();
    var nothing_1 = require_nothing();
    var numerical_1 = require_numerical();
    var string_1 = require_string();
    var struct_1 = require_struct();
    var tokenIdentifier_1 = require_tokenIdentifier();
    var tuple_1 = require_tuple();
    var variadic_1 = require_variadic();
    var TypeMapper = class {
      constructor(learnedTypes = []) {
        this.openTypesFactories = /* @__PURE__ */ new Map([
          ["Option", (...typeParameters) => new generic_1.OptionType(typeParameters[0])],
          ["List", (...typeParameters) => new generic_1.ListType(typeParameters[0])],
          // For the following open generics, we use a slightly different typing than the one defined by mx-sdk-rs (temporary workaround).
          ["VarArgs", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])],
          ["MultiResultVec", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])],
          ["variadic", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0])],
          ["counted-variadic", (...typeParameters) => new variadic_1.VariadicType(typeParameters[0], true)],
          ["OptionalArg", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])],
          ["optional", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])],
          ["OptionalResult", (...typeParameters) => new algebraic_1.OptionalType(typeParameters[0])],
          ["multi", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],
          ["MultiArg", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],
          ["MultiResult", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],
          ["multi", (...typeParameters) => new composite_1.CompositeType(...typeParameters)],
          // Perhaps we can adjust the ABI generator to only output "tuple", instead of "tupleN"?
          ["tuple", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          ["tuple2", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          ["tuple3", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          ["tuple4", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          ["tuple5", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          ["tuple6", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          ["tuple7", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          ["tuple8", (...typeParameters) => new tuple_1.TupleType(...typeParameters)],
          // Known-length arrays.
          // TODO: Handle these in typeExpressionParser!
          ["array2", (...typeParameters) => new genericArray_1.ArrayVecType(2, typeParameters[0])],
          ["array8", (...typeParameters) => new genericArray_1.ArrayVecType(8, typeParameters[0])],
          ["array16", (...typeParameters) => new genericArray_1.ArrayVecType(16, typeParameters[0])],
          ["array20", (...typeParameters) => new genericArray_1.ArrayVecType(20, typeParameters[0])],
          ["array32", (...typeParameters) => new genericArray_1.ArrayVecType(32, typeParameters[0])],
          ["array46", (...typeParameters) => new genericArray_1.ArrayVecType(46, typeParameters[0])],
          ["array48", (...typeParameters) => new genericArray_1.ArrayVecType(48, typeParameters[0])],
          ["array64", (...typeParameters) => new genericArray_1.ArrayVecType(64, typeParameters[0])],
          ["array128", (...typeParameters) => new genericArray_1.ArrayVecType(128, typeParameters[0])],
          ["array256", (...typeParameters) => new genericArray_1.ArrayVecType(256, typeParameters[0])],
          ["ManagedDecimal", (...metadata) => new managedDecimal_1.ManagedDecimalType(metadata)],
          ["ManagedDecimalSigned", (...metadata) => new managedDecimalSigned_1.ManagedDecimalSignedType(metadata)]
        ]);
        this.closedTypesMap = /* @__PURE__ */ new Map([
          ["u8", new numerical_1.U8Type()],
          ["u16", new numerical_1.U16Type()],
          ["u32", new numerical_1.U32Type()],
          ["u64", new numerical_1.U64Type()],
          ["U64", new numerical_1.U64Type()],
          ["BigUint", new numerical_1.BigUIntType()],
          ["i8", new numerical_1.I8Type()],
          ["i16", new numerical_1.I16Type()],
          ["i32", new numerical_1.I32Type()],
          ["i64", new numerical_1.I64Type()],
          ["Bigint", new numerical_1.BigIntType()],
          ["BigInt", new numerical_1.BigIntType()],
          ["bool", new boolean_1.BooleanType()],
          ["bytes", new bytes_1.BytesType()],
          ["Address", new address_1.AddressType()],
          ["H256", new h256_1.H256Type()],
          ["utf-8 string", new string_1.StringType()],
          ["TokenIdentifier", new tokenIdentifier_1.TokenIdentifierType()],
          ["EgldOrEsdtTokenIdentifier", new tokenIdentifier_1.TokenIdentifierType()],
          ["CodeMetadata", new codeMetadata_1.CodeMetadataType()],
          ["nothing", new nothing_1.NothingType()],
          ["AsyncCall", new nothing_1.NothingType()]
        ]);
        this.learnedTypesMap = /* @__PURE__ */ new Map();
        for (const type of learnedTypes) {
          if (type.getName() === "ManagedDecimal" || type.getName() === "ManagedDecimalSigned") {
            this.learnedTypesMap.set(`${type.getName()}_${type.getMetadata()}`, type);
          } else {
            this.learnedTypesMap.set(type.getName(), type);
          }
        }
      }
      /**
       * Maps a "raw type" object to a "known (specific) type" object.
       * In the process, it also learns the new type.
       * Can only map types if their dependencies were previously learned (through mapping).
       */
      mapType(type) {
        let mappedType = this.mapTypeRecursively(type);
        if (mappedType) {
          if (!mappedType.isGenericType()) {
            this.learnType(mappedType);
          }
          return mappedType;
        }
        throw new errors.ErrTypingSystem(`Cannot map the type "${type.getName()}" to a known type`);
      }
      mapTypeRecursively(type) {
        let isGeneric = type.isGenericType();
        let hasMetadata = type.hasMetadata();
        let previouslyLearnedType = this.learnedTypesMap.get(type.getName());
        if (previouslyLearnedType) {
          return previouslyLearnedType;
        }
        let knownClosedType = this.closedTypesMap.get(type.getName());
        if (knownClosedType) {
          return knownClosedType;
        }
        if (type.hasExactClass(enum_1.EnumType.ClassName)) {
          return this.mapEnumType(type);
        }
        if (type.hasExactClass(explicit_enum_1.ExplicitEnumType.ClassName)) {
          return this.mapExplicitEnumType(type);
        }
        if (type.hasExactClass(struct_1.StructType.ClassName)) {
          return this.mapStructType(type);
        }
        if (isGeneric || hasMetadata) {
          return this.mapGenericType(type);
        }
        return null;
      }
      learnType(type) {
        if (type.getName() === "ManagedDecimal" || type.getName() === "ManagedDecimalSigned") {
          const learnedTypeKey = `${type.getName()}_${type.getMetadata()}`;
          this.learnedTypesMap.delete(learnedTypeKey);
          this.learnedTypesMap.set(learnedTypeKey, type);
        } else {
          const learnedTypeKey = type.getName();
          this.learnedTypesMap.delete(learnedTypeKey);
          this.learnedTypesMap.set(learnedTypeKey, type);
        }
      }
      mapStructType(type) {
        let mappedFields = this.mappedFields(type.getFieldsDefinitions());
        let mappedStruct = new struct_1.StructType(type.getName(), mappedFields);
        return mappedStruct;
      }
      mapEnumType(type) {
        let variants = type.variants.map((variant) => new enum_1.EnumVariantDefinition(variant.name, variant.discriminant, this.mappedFields(variant.getFieldsDefinitions())));
        let mappedEnum = new enum_1.EnumType(type.getName(), variants);
        return mappedEnum;
      }
      mapExplicitEnumType(type) {
        let variants = type.variants.map((variant) => new explicit_enum_1.ExplicitEnumVariantDefinition(variant.name));
        let mappedEnum = new explicit_enum_1.ExplicitEnumType(type.getName(), variants);
        return mappedEnum;
      }
      mappedFields(definitions) {
        return definitions.map((definition) => new fields_1.FieldDefinition(definition.name, definition.description, this.mapType(definition.type)));
      }
      mapGenericType(type) {
        let typeParameters = type.getTypeParameters();
        let mappedTypeParameters = typeParameters.map((item) => this.mapType(item));
        let factory = this.openTypesFactories.get(type.getName());
        if (!factory) {
          throw new errors.ErrTypingSystem(`Cannot map the generic type "${type.getName()}" to a known type`);
        }
        if (type.hasMetadata()) {
          return factory(type.getMetadata());
        }
        return factory(...mappedTypeParameters);
      }
    };
    exports.TypeMapper = TypeMapper;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/abiRegistry.js
var require_abiRegistry = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/abiRegistry.js"(exports) {
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbiRegistry = void 0;
    var errors = __importStar(require_errors());
    var utils_1 = require_utils();
    var endpoint_1 = require_endpoint();
    var enum_1 = require_enum();
    var event_1 = require_event();
    var explicit_enum_1 = require_explicit_enum();
    var struct_1 = require_struct();
    var typeMapper_1 = require_typeMapper();
    var interfaceNamePlaceholder = "?";
    var AbiRegistry = class _AbiRegistry {
      constructor(options) {
        this.endpoints = [];
        this.customTypes = [];
        this.events = [];
        this.name = options.name;
        this.constructorDefinition = options.constructorDefinition;
        this.upgradeConstructorDefinition = options.upgradeConstructorDefinition;
        this.endpoints = options.endpoints;
        this.customTypes = options.customTypes;
        this.events = options.events || [];
      }
      static create(options) {
        const name = options.name || interfaceNamePlaceholder;
        const constructor = options.constructor || {};
        const upgradeConstructor = options.upgradeConstructor || {};
        const endpoints = options.endpoints || [];
        const types = options.types || {};
        const events = options.events || [];
        const constructorDefinition = endpoint_1.EndpointDefinition.fromJSON({ name: "constructor", ...constructor });
        const upgradeConstructorDefinition = endpoint_1.EndpointDefinition.fromJSON({
          name: "upgradeConstructor",
          ...upgradeConstructor
        });
        const endpointDefinitions = endpoints.map((item) => endpoint_1.EndpointDefinition.fromJSON(item));
        const customTypes = [];
        for (const customTypeName in types) {
          const typeDefinition = types[customTypeName];
          if (typeDefinition.type == "struct") {
            customTypes.push(struct_1.StructType.fromJSON({ name: customTypeName, fields: typeDefinition.fields }));
          } else if (typeDefinition.type == "enum") {
            customTypes.push(enum_1.EnumType.fromJSON({ name: customTypeName, variants: typeDefinition.variants }));
          } else if (typeDefinition.type == "explicit-enum") {
            customTypes.push(explicit_enum_1.ExplicitEnumType.fromJSON({ name: customTypeName, variants: typeDefinition.variants }));
          } else {
            throw new errors.ErrTypingSystem(`Cannot handle custom type: ${customTypeName}`);
          }
        }
        const eventDefinitions = events.map((item) => event_1.EventDefinition.fromJSON(item));
        const registry = new _AbiRegistry({
          name,
          constructorDefinition,
          upgradeConstructorDefinition,
          endpoints: endpointDefinitions,
          customTypes,
          events: eventDefinitions
        });
        const remappedRegistry = registry.remapToKnownTypes();
        return remappedRegistry;
      }
      getCustomType(name) {
        const result = this.customTypes.find((e) => e.getName() == name);
        utils_1.guardValueIsSetWithMessage(`custom type [${name}] not found`, result);
        return result;
      }
      getStruct(name) {
        const result = this.customTypes.find((e) => e.getName() == name && e.hasExactClass(struct_1.StructType.ClassName));
        utils_1.guardValueIsSetWithMessage(`struct [${name}] not found`, result);
        return result;
      }
      getStructs(names) {
        return names.map((name) => this.getStruct(name));
      }
      getEnum(name) {
        const result = this.customTypes.find((e) => e.getName() == name && e.hasExactClass(enum_1.EnumType.ClassName));
        utils_1.guardValueIsSetWithMessage(`enum [${name}] not found`, result);
        return result;
      }
      getExplicitEnum(name) {
        const result = this.customTypes.find((e) => e.getName() == name && e.hasExactClass(explicit_enum_1.ExplicitEnumType.ClassName));
        utils_1.guardValueIsSetWithMessage(`enum [${name}] not found`, result);
        return result;
      }
      getEnums(names) {
        return names.map((name) => this.getEnum(name));
      }
      getEndpoints() {
        return this.endpoints;
      }
      getEndpoint(name) {
        const result = this.endpoints.find((e) => e.name == name);
        utils_1.guardValueIsSetWithMessage(`endpoint [${name}] not found`, result);
        return result;
      }
      getEvent(name) {
        const result = this.events.find((e) => e.identifier == name);
        utils_1.guardValueIsSetWithMessage(`event [${name}] not found`, result);
        return result;
      }
      /**
       * Right after loading ABI definitions into a registry, the endpoints and the custom types (structs, enums)
       * use raw types for their I/O parameters (in the case of endpoints), or for their fields (in the case of structs).
       *
       * A raw type is merely an instance of {@link Type}, with a given name and type parameters (if it's a generic type).
       *
       * Though, for most (development) purposes, we'd like to operate using known, specific types (e.g. {@link List}, {@link U8Type} etc.).
       * This function increases the specificity of the types used by parameter / field definitions within a registry (on best-efforts basis).
       * The result is an equivalent, more explicit ABI registry.
       */
      remapToKnownTypes() {
        const mapper = new typeMapper_1.TypeMapper([]);
        const newCustomTypes = [];
        for (const type of this.customTypes) {
          this.mapCustomTypeDepthFirst(type, this.customTypes, mapper, newCustomTypes);
        }
        if (this.customTypes.length != newCustomTypes.length) {
          throw new errors.ErrTypingSystem("Did not re-map all custom types");
        }
        const newConstructor = mapEndpoint(this.constructorDefinition, mapper);
        const newUpgradeConstructor = this.upgradeConstructorDefinition ? mapEndpoint(this.upgradeConstructorDefinition, mapper) : void 0;
        const newEndpoints = [];
        for (const endpoint of this.endpoints) {
          newEndpoints.push(mapEndpoint(endpoint, mapper));
        }
        const newEvents = this.events.map((event) => mapEvent(event, mapper));
        const newRegistry = new _AbiRegistry({
          name: this.name,
          constructorDefinition: newConstructor,
          upgradeConstructorDefinition: newUpgradeConstructor,
          endpoints: newEndpoints,
          customTypes: newCustomTypes,
          events: newEvents
        });
        return newRegistry;
      }
      mapCustomTypeDepthFirst(typeToMap, allTypesToMap, mapper, mappedTypes) {
        const hasBeenMapped = mappedTypes.findIndex((type) => type.getName() == typeToMap.getName()) >= 0;
        if (hasBeenMapped) {
          return;
        }
        for (const typeName of typeToMap.getNamesOfDependencies()) {
          const dependencyType = allTypesToMap.find((type) => type.getName() == typeName);
          if (!dependencyType) {
            continue;
          }
          this.mapCustomTypeDepthFirst(dependencyType, allTypesToMap, mapper, mappedTypes);
        }
        const mappedType = mapper.mapType(typeToMap);
        mappedTypes.push(mappedType);
      }
    };
    exports.AbiRegistry = AbiRegistry;
    function mapEndpoint(endpoint, mapper) {
      const newInput = endpoint.input.map((e) => new endpoint_1.EndpointParameterDefinition(e.name, e.description, mapper.mapType(e.type)));
      const newOutput = endpoint.output.map((e) => new endpoint_1.EndpointParameterDefinition(e.name, e.description, mapper.mapType(e.type)));
      return new endpoint_1.EndpointDefinition(endpoint.name, newInput, newOutput, endpoint.modifiers, endpoint.title);
    }
    function mapEvent(event, mapper) {
      const newInputs = event.inputs.map((e) => new event_1.EventTopicDefinition({
        name: e.name,
        type: mapper.mapType(e.type),
        indexed: e.indexed
      }));
      return new event_1.EventDefinition(event.identifier, newInputs);
    }
  }
});

export {
  require_typeExpressionParser,
  require_endpoint,
  require_fields,
  require_enum,
  require_explicit_enum,
  require_struct,
  require_algebraic,
  require_boolean,
  require_bytes,
  require_codeMetadata,
  require_composite,
  require_generic,
  require_genericArray,
  require_h256,
  require_managedDecimal,
  require_managedDecimalSigned,
  require_nothing,
  require_numerical,
  require_string,
  require_tokenIdentifier,
  require_tuple,
  require_variadic,
  require_typeMapper,
  require_abiRegistry
};
//# sourceMappingURL=chunk-7IOKNUEZ.js.map
