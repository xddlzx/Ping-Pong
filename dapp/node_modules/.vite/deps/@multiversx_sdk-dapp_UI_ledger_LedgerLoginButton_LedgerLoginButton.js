"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  l,
  t
} from "./chunk-WDOVFOFV.js";
import {
  _ as _2,
  r
} from "./chunk-LORYQQIV.js";
import {
  i as i2,
  p as p2
} from "./chunk-363FTM5N.js";
import {
  e,
  i
} from "./chunk-NVQLXNFR.js";
import {
  p as p3,
  r as r2
} from "./chunk-IPUREAER.js";
import {
  o,
  r as r3
} from "./chunk-PDO3AD32.js";
import {
  l as l2,
  t as t3
} from "./chunk-TXONLDXC.js";
import {
  c as c3,
  n as n2
} from "./chunk-2MGRGLWN.js";
import {
  a,
  t as t2
} from "./chunk-SSPQ6NEM.js";
import {
  c as c2
} from "./chunk-XD22WRDO.js";
import {
  ip
} from "./chunk-HAZ3FCOL.js";
import {
  L
} from "./chunk-MUDNZN5J.js";
import "./chunk-5OI4NMYF.js";
import "./chunk-PY4NSTUI.js";
import {
  G as G3
} from "./chunk-7JEIBMIB.js";
import "./chunk-KREOLAJN.js";
import {
  _
} from "./chunk-RFACKTII.js";
import "./chunk-LLB2KFSE.js";
import "./chunk-N6IXFITH.js";
import {
  g
} from "./chunk-2J2WRMQO.js";
import "./chunk-G4JGKIZX.js";
import {
  G as G2
} from "./chunk-FCH2GSIR.js";
import "./chunk-2MP6LJQE.js";
import {
  v as v2
} from "./chunk-QK4SV7LD.js";
import "./chunk-55OQOIEO.js";
import {
  P,
  Xe
} from "./chunk-3TLFSX6D.js";
import "./chunk-PT4ZAT7W.js";
import {
  faAngleLeft,
  faAngleRight,
  faAnglesLeft,
  faAnglesRight,
  faCircleNotch
} from "./chunk-TXMYIQV3.js";
import "./chunk-3MNASYTU.js";
import {
  k as k2,
  x as x2
} from "./chunk-63SUVNQE.js";
import {
  require_classnames,
  u as u2
} from "./chunk-S677S367.js";
import "./chunk-UYE5PNS3.js";
import "./chunk-I55AVBBH.js";
import "./chunk-QJNSLYW7.js";
import {
  G,
  f as f3
} from "./chunk-Q23JG3F6.js";
import "./chunk-FKHV3UFA.js";
import "./chunk-54JZU37V.js";
import "./chunk-X6W6HIIL.js";
import "./chunk-OUHPLTKQ.js";
import "./chunk-UUNB4OK2.js";
import "./chunk-4HAL3YZK.js";
import "./chunk-DANFAIW7.js";
import "./chunk-LS4IVGTJ.js";
import "./chunk-XWYMCR5D.js";
import "./chunk-EPZIXHO6.js";
import "./chunk-LWXYSBFU.js";
import "./chunk-KMNHALK3.js";
import "./chunk-MMRK53YU.js";
import "./chunk-KL3RVTCS.js";
import "./chunk-FUWKOYH5.js";
import "./chunk-3T2RS5VX.js";
import "./chunk-TZGAA2VZ.js";
import "./chunk-B2F7MDWY.js";
import {
  n
} from "./chunk-2DAT54DZ.js";
import "./chunk-W6IS4BBY.js";
import {
  f as f2
} from "./chunk-JRAXXMAO.js";
import "./chunk-P6UDNJ3P.js";
import "./chunk-VC3CYCM2.js";
import {
  S as S2
} from "./chunk-JTQZEZNW.js";
import "./chunk-3TFE24LV.js";
import "./chunk-WYYX7HOH.js";
import "./chunk-5UC3SJWB.js";
import "./chunk-OQ2X2I36.js";
import "./chunk-REBRBBAX.js";
import "./chunk-4Y4NHRAJ.js";
import "./chunk-X74RERH2.js";
import "./chunk-X4QWOPZU.js";
import "./chunk-KIDRYMT6.js";
import {
  E
} from "./chunk-PNCNEUDJ.js";
import "./chunk-4PEQQYYX.js";
import "./chunk-NLJ5ZWYL.js";
import "./chunk-NWWRXY5Z.js";
import "./chunk-Q76JCXYQ.js";
import "./chunk-DLUMZFAB.js";
import "./chunk-Q2ALSPT4.js";
import "./chunk-GWYV5Q5U.js";
import "./chunk-MLGEBXDN.js";
import {
  p
} from "./chunk-4JMTGKNX.js";
import "./chunk-46YI7JI6.js";
import "./chunk-KBWKCXSB.js";
import "./chunk-BXH4IYHA.js";
import "./chunk-CQ6QEUJE.js";
import {
  C2 as C,
  S2 as S
} from "./chunk-DZSHGTAC.js";
import {
  W,
  u
} from "./chunk-6OCHV4EV.js";
import "./chunk-EN76Z23Y.js";
import {
  c,
  d
} from "./chunk-GT32YW3B.js";
import {
  bignumber_default
} from "./chunk-LOZL6BFA.js";
import "./chunk-UF3DAKWQ.js";
import "./chunk-L7SBMHDO.js";
import "./chunk-KMSODH52.js";
import "./chunk-36Z5UFBK.js";
import {
  k
} from "./chunk-EBUGIFUX.js";
import "./chunk-5MLKHMR6.js";
import "./chunk-WZ74NK6U.js";
import "./chunk-T74HIW6S.js";
import {
  f,
  x2 as x
} from "./chunk-DODOUSNB.js";
import "./chunk-TILBIW7H.js";
import "./chunk-3TFTH3JT.js";
import {
  FontAwesomeIcon
} from "./chunk-7GJK4ZO7.js";
import "./chunk-66L4EHKV.js";
import "./chunk-IXILR3JC.js";
import "./chunk-N4UJNUUL.js";
import "./chunk-FFVP3WMN.js";
import {
  K,
  T2 as T
} from "./chunk-HXV3SQ6S.js";
import "./chunk-EKHLTR53.js";
import "./chunk-N7F464ZJ.js";
import {
  Bt,
  b,
  gt,
  ur,
  v,
  yt
} from "./chunk-5CKZHQYH.js";
import {
  require_react
} from "./chunk-IRELMTUJ.js";
import "./chunk-5HSAGO3O.js";
import "./chunk-UHKY3R7I.js";
import "./chunk-C426NY4X.js";
import "./chunk-7IOKNUEZ.js";
import "./chunk-PA4YGARE.js";
import "./chunk-FOX6T53T.js";
import "./chunk-EPGUFONN.js";
import "./chunk-KLHSS55O.js";
import "./chunk-JDLAKVPX.js";
import "./chunk-7T325JRE.js";
import {
  __toESM,
  require_dist
} from "./chunk-UOCZJ3B4.js";

// node_modules/@multiversx/sdk-dapp/UI/ledger/LedgerLoginButton/LedgerLoginButton.js
var import_dist35 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-Y6XVUXOA.js
var import_dist17 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-JVE7C2M3.js
var import_dist16 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-FZI7VNO3.js
var import_dist15 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-MIJNROCY.js
var import_dist = __toESM(require_dist());
var import_react = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
v();
var h = ({ error: s3, ledgerAccount: e4, ledgerProgressBarClassNames: c6, showAddressList: a4, showProgressBar: m3, styles: r7 }) => {
  let p4 = [{ percentage: 33, conditions: !a4 && !e4 }, { conditions: a4 && !s3 && !e4, percentage: 66 }, { conditions: e4 != null && !s3, percentage: 100 }], g2 = (0, import_react.useMemo)(() => p4.find((u4) => u4.conditions), []), d3 = g2 ? g2.percentage : 33;
  if (!m3) return null;
  let { ledgerProgressBarTrackClassName: l4, ledgerProgressBarThumbClassName: P4 } = c6 || {};
  return import_react.default.createElement("div", { className: r7 == null ? void 0 : r7.ledgerProgressBar }, import_react.default.createElement("div", { className: (0, import_classnames.default)(r7 == null ? void 0 : r7.ledgerProgressBarTrack, l4) }), import_react.default.createElement("div", { className: (0, import_classnames.default)(r7 == null ? void 0 : r7.ledgerProgressBarThumb, P4), style: { width: `${d3}%` } }));
};
var x3 = u2(h, { ssrStyles: () => import("./progressBarStyles-X3FMVPUY.js"), clientStyles: () => (t2(), gt(a)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-NGADFDFJ.js
var import_dist2 = __toESM(require_dist());
var import_react2 = __toESM(require_react());
v();
x();
var A = ({ showScamPhishingAlert: e4, token: a4, ledgerScamPhishingAlertClassName: r7 }) => {
  if (!e4) return null;
  let h3 = x2(a4, r7);
  return import_react2.default.createElement(L, { authorizationInfo: h3, className: r7, url: f().origin });
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-4ZZBHLNT.js
var import_dist14 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-QNSCWHM6.js
var import_dist3 = __toESM(require_dist());
var import_react3 = __toESM(require_react());
var import_classnames2 = __toESM(require_classnames());
var e2 = __toESM(require_react());
v();
v();
var T2 = (t6) => e2.createElement("svg", yt({ xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", id: "Layer_1", x: "0px", y: "0px", viewBox: "0 0 290 142.3", style: { enableBackground: "new 0 0 290 142.3" }, xmlSpace: "preserve" }, t6), e2.createElement("style", { type: "text/css" }, `
	.st0{filter:url(#Adobe_OpacityMaskFilter);}
	.st1{fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000132080685600946463390000014083146887067534994_);}
	.st2{mask:url(#SVGID_1_);fill-rule:evenodd;clip-rule:evenodd;fill:#212529;}
	.st3{fill-rule:evenodd;clip-rule:evenodd;fill:#212529;}
`), e2.createElement("defs", null, e2.createElement("filter", { id: "Adobe_OpacityMaskFilter", filterUnits: "userSpaceOnUse", x: 1, y: 21.7, width: 92.7, height: 6.3 }, e2.createElement("feColorMatrix", { type: "matrix", values: "1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0" }))), e2.createElement("mask", { maskUnits: "userSpaceOnUse", x: 1, y: 21.7, width: 92.7, height: 6.3, id: "SVGID_1_" }, e2.createElement("g", { className: "st0" }, e2.createElement("linearGradient", { id: "SVGID_00000042721603501377086220000002945655816276772283_", gradientUnits: "userSpaceOnUse", x1: 1, y1: 24.85, x2: 92.9, y2: 24.85 }, e2.createElement("stop", { offset: 0, style: { stopColor: "#000000" } }), e2.createElement("stop", { offset: 0.1864, style: { stopColor: "#000000" } }), e2.createElement("stop", { offset: 0.8945, style: { stopColor: "#FFFFFF" } })), e2.createElement("rect", { x: 1, y: 21.7, style: { fillRule: "evenodd", clipRule: "evenodd", fill: "url(#SVGID_00000042721603501377086220000002945655816276772283_)" }, width: 91.9, height: 6.3 }))), e2.createElement("path", { className: "st2", d: "M1,26.6V28h92.7v-1.4H1z M1,21.7v1.4h92.7v-1.4H1z" }), e2.createElement("g", null, e2.createElement("path", { className: "st3", d: "M218.8,21h-38.1c-0.2,0-0.3,0.1-0.4,0.2c-0.1,0.1-0.2,0.2-0.2,0.4v5.6c0,0.2,0.1,0.3,0.2,0.4   c0.1,0.1,0.2,0.2,0.4,0.2h38.1c0.2,0,0.3-0.1,0.4-0.2c0.1-0.1,0.2-0.2,0.2-0.4v-5.6c0-0.1-0.1-0.3-0.2-0.4   C219.1,21.1,219,21,218.8,21z M185.2,25.4l-0.5,0.4l-0.6-0.9l0,0l-0.6,0.9l-0.5-0.4l0.6-0.8l0,0l-1-0.3l0.2-0.6l1,0.4l-0.1-1h0.7   l-0.1,1l1-0.4l0.2,0.6l-1,0.3l0,0L185.2,25.4z M189.6,25.4l-0.5,0.4l-0.6-0.9l0,0l-0.6,0.9l-0.5-0.4l0.6-0.8l0,0l-1-0.3l0.2-0.6   l1,0.4v-1h0.7l-0.1,1l1-0.4l0.2,0.6l-1,0.3l0,0L189.6,25.4z M194,25.4l-0.5,0.4l-0.6-0.9l0,0l-0.6,0.9l-0.5-0.4l0.6-0.8l0,0l-1-0.3   l0.2-0.6l1,0.4v-1h0.7l-0.1,1l1-0.4l0.2,0.6l-1,0.3l0,0L194,25.4z M198.4,25.4l-0.5,0.4l-0.6-0.9l0,0l-0.6,0.9l-0.5-0.4l0.7-0.8   l0,0l-1-0.3l0.1-0.6l1,0.4v-1h0.7l-0.1,1l1-0.4l0.2,0.6l-1,0.3l0,0L198.4,25.4z M202.8,25.4l-0.5,0.4l-0.6-0.9l0,0l-0.6,0.9   l-0.5-0.4l0.7-0.8l0,0l-1-0.3l0.2-0.6l1,0.4v-1h0.7l-0.1,1l1-0.4l0.2,0.6l-1,0.3l0,0L202.8,25.4z M207.1,25.4l-0.5,0.4l-0.6-0.9   l0,0l-0.6,0.9l-0.5-0.4l0.7-0.8l0,0l-1-0.3l0.2-0.6l1,0.4v-1h0.7l-0.1,1l1-0.4l0.2,0.6l-1,0.3l0,0L207.1,25.4z M211.5,25.4   l-0.5,0.4l-0.6-0.9l0,0l-0.6,0.9l-0.5-0.4l0.7-0.8l0,0l-1-0.3l0.2-0.6l1,0.4v-1h0.7l-0.1,1l1-0.4l0.2,0.6l-1,0.3l0,0L211.5,25.4z    M215.9,25.4l-0.5,0.4l-0.6-0.9l0,0l-0.6,0.9l-0.5-0.4l0.7-0.8l0,0l-1-0.3l0.2-0.6l1,0.4l-0.1-1h0.7l-0.1,1l1-0.4l0.2,0.6l-1,0.3   l0,0L215.9,25.4z" }), e2.createElement("path", { className: "st3", d: "M283.8,9.2l-0.1-0.1c-0.2-0.2-0.3-0.3-0.5-0.5s-0.3-0.3-0.5-0.5c-0.1-0.1-0.3-0.3-0.4-0.4   c-0.6-0.6-1.2-1.1-1.8-1.6c-3.9-3-8.7-4.7-13.9-4.7h-28.1c-0.1-0.2-0.2-0.3-0.3-0.5c-0.4-0.6-1.1-0.9-1.8-0.9h-14.7   c-0.8,0-1.4,0.4-1.8,0.9c-0.1,0.2-0.2,0.3-0.3,0.5h-42.3c-0.1-0.2-0.2-0.3-0.3-0.5c-0.4-0.6-1.1-0.9-1.8-0.9h-14.7   c-0.8,0-1.4,0.4-1.8,0.9c-0.1,0.2-0.2,0.3-0.3,0.5h-13c-1.1,0-2.1,0.4-2.8,1.2c-0.7,0.7-1.2,1.8-1.2,2.8v8.8c-0.1,0-0.2,0-0.2,0   h-0.3h-29.1c-1.7,0-3.2,0.7-4.4,1.8c-1.2,1.2-1.8,2.8-1.8,4.4v0.3H92.9v8.4h12.7v0.7c0,1.7,0.7,3.2,1.8,4.4   c1.2,1.2,2.7,1.8,4.4,1.8h29.1h0.3c0.1,0,0.2,0,0.2,0v7.4c0,1.1,0.4,2.1,1.2,2.8s1.8,1.2,2.8,1.2h72.3l-0.4,0.5l-53.4,63.6   c-0.3,0.4-0.6,0.9-0.7,1.4c-0.2,0.5-0.2,1-0.2,1.5s0.2,1,0.4,1.5s0.6,0.9,1,1.2l28.9,24.3c0.4,0.3,0.9,0.6,1.4,0.7   c0.5,0.2,1,0.2,1.5,0.2s1-0.2,1.5-0.4s0.9-0.6,1.2-1l82.5-98.3l2.9-3.5C291.8,30.3,291.3,17.5,283.8,9.2z M105.1,27.9h-11v-6h11   V27.9z M277.7,45.1l-79.8,95c-0.2,0.3-0.5,0.5-0.8,0.7s-0.7,0.3-1,0.3c-0.4,0-0.7,0-1.1-0.1c-0.3-0.1-0.7-0.3-0.9-0.5l-29-24.3   c-0.3-0.2-0.5-0.5-0.7-0.8s-0.3-0.7-0.3-1c0-0.4,0-0.7,0.1-1.1c0.1-0.3,0.3-0.7,0.5-0.9l54-64.4l0.4-0.5l1-1.2l8.1-9.7l0.3-0.3   l0.3-0.3l5.2-6.2l0.3-0.4l0.3-0.4L250,10.6c4.8-5.7,11.8-8.3,18.6-7.6c0.2,0,0.5,0,0.7,0.1c0.3,0,0.6,0.1,0.9,0.1   c0.2,0,0.5,0.1,0.7,0.1c0.4,0.1,0.7,0.2,1.1,0.3c0.6,0.2,1.2,0.3,1.8,0.5c0.3,0.1,0.6,0.2,0.9,0.3c0.3,0.1,0.6,0.2,0.9,0.4   c0.2,0.1,0.4,0.2,0.6,0.3c0.6,0.3,1.2,0.7,1.9,1c0.4,0.2,0.8,0.5,1.2,0.8l0,0c0.4,0.3,0.8,0.6,1.1,0.9c0.1,0.1,0.2,0.2,0.3,0.2   c0.1,0.1,0.2,0.2,0.3,0.2c0.2,0.1,0.3,0.3,0.5,0.4c0.1,0.1,0.2,0.2,0.4,0.4c7.9,7.8,8.6,20.6,1.3,29.3l-4.7,5.6L277.7,45.1z    M234.2,27.8l-6.8,8.1h-60.6c-0.8,0-1.5-0.7-1.5-1.5v-20c0-0.8,0.7-1.5,1.5-1.5h65.9c0.8,0,1.5,0.7,1.5,1.5L234.2,27.8L234.2,27.8z    M141.2,34.9h-0.3h-29.1c-1.3,0-2.6-0.5-3.5-1.5c-0.9-0.9-1.5-2.2-1.5-3.5v-9.5c0-1.3,0.5-2.6,1.5-3.5c0.9-0.9,2.2-1.5,3.5-1.5   h29.1h0.3c0.1,0,0.2,0,0.2,0.1v19.4C141.3,34.8,141.3,34.9,141.2,34.9z M145.4,46.2c-0.7,0-1.4-0.3-2-0.8c-0.5-0.5-0.8-1.2-0.8-2   v-8.2v-3.4V18.1V15V5.4c0-0.7,0.3-1.4,0.8-1.9s1.2-0.8,2-0.8h12.9h19.2h42h19.2h21.4c-4.1,1.2-7.8,3.6-10.8,7.1l-14.5,17.3V14.4   c0-1.2-0.9-2.1-2.1-2.1h-65.9c-1.2,0-2.1,0.9-2.1,2.1v20c0,1.2,0.9,2.1,2.1,2.1h60.1l-8.2,9.7C218.7,46.2,145.4,46.2,145.4,46.2z" }), e2.createElement("path", { className: "st3", d: "M265.5,12.2c-6.8,0-12.2,5.4-12.2,12.2c0,6.7,5.5,12.2,12.2,12.2c6.8,0,12.2-5.4,12.2-12.2   C277.7,17.7,272.2,12.2,265.5,12.2z M265.5,35.9c-6.4,0-11.6-5.2-11.6-11.5s5.2-11.5,11.6-11.5s11.6,5.2,11.6,11.5   S271.9,35.9,265.5,35.9z" })));
var m = T2;
T();
var D = ({ onClick: t6, error: a4, disabled: p4, connectPageContent: i6, customContentComponent: h3, className: C2 = "dapp-ledger-connect-button", ledgerConnectClassNames: g2, globalStyles: r7, styles: l4 }) => {
  let { ledgerModalTitleClassName: v5, ledgerModalSubtitleClassName: M, ledgerModalErrorClassName: u4, ledgerModalIconClassName: N2, ledgerModalButtonClassName: f5, ledgerModalFooterLinkClassName: L3, ledgerModalFooterClassName: x5, ledgerModalContentClassName: z4 } = g2 || {};
  return import_react3.default.createElement("div", { className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainer, C2) }, import_react3.default.createElement("div", { className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainerContent, z4) }, i6 || import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement("div", { className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainerHeading, v5) }, "Connect Ledger"), import_react3.default.createElement("p", { className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainerDescription, M) }, "Unlock your device & open the MultiversX App"), a4 && import_react3.default.createElement("p", { className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainerError, u4) }, a4), h3, import_react3.default.createElement("div", { className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainerIcon, N2) }, import_react3.default.createElement(m, null))), import_react3.default.createElement("div", { className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainerFooter, x5) }, import_react3.default.createElement("button", { onClick: t6, disabled: p4, "data-testid": "ledgerConnectBtn", className: (0, import_classnames2.default)(r7 == null ? void 0 : r7.btn, r7 == null ? void 0 : r7.btnPrimary, l4 == null ? void 0 : l4.loginConnectContainerButton, f5) }, "Connect Ledger"), import_react3.default.createElement("a", { href: "https://support.ledger.com/hc/en-us/articles/115005165269-Connection-issues-with-Windows-or-Linux", target: "_blank", rel: "noopener noreferrer", className: (0, import_classnames2.default)(l4 == null ? void 0 : l4.loginConnectContainerLink, L3) }, "Having connection issues?"))));
};
var P2 = u2(D, { ssrStyles: () => import("./ledgerConnectStyles-NMLHKYNP.js"), clientStyles: () => (_2(), gt(r)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-T26QPMXN.js
var import_dist10 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VKP3E34Y.js
var import_dist7 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-MT6A4XFH.js
var import_dist4 = __toESM(require_dist());
var import_react4 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());
v();
var B = ({ label: e4, onClick: m3, showLabels: p4, isInactive: r7, paginationButtonIcon: c6, className: d3, "data-testid": g2, styles: o9 }) => import_react4.default.createElement("div", { onClick: m3, "data-testid": g2, className: (0, import_classnames3.default)(o9 == null ? void 0 : o9.paginationEdgeButton, d3, { [o9 == null ? void 0 : o9.inactive]: r7 }) }, import_react4.default.createElement(FontAwesomeIcon, { icon: c6, className: o9 == null ? void 0 : o9.paginationEdgeButtonIcon }), import_react4.default.createElement("span", { className: (0, import_classnames3.default)(o9 == null ? void 0 : o9.paginationEdgeButtonText, { [o9 == null ? void 0 : o9.show]: p4 }) }, e4));
var N = u2(B, { ssrStyles: () => import("./paginationEdgeButtonStyles-H6SXNZWM.js"), clientStyles: () => (i2(), gt(p2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-7WZASU5V.js
var import_dist6 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-TOEZPOXX.js
var import_dist5 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-7WZASU5V.js
var L2 = b((ee2, _3) => {
  v();
  var Ir = Math.max, ur2 = Math.min;
  function pr(r7, e4, i6) {
    return r7 >= ur2(e4, i6) && r7 < Ir(e4, i6);
  }
  _3.exports = pr;
});
var G4 = b((ie, S4) => {
  v();
  var gr = /\s/;
  function xr(r7) {
    for (var e4 = r7.length; e4-- && gr.test(r7.charAt(e4)); ) ;
    return e4;
  }
  S4.exports = xr;
});
var F = b((ne, O) => {
  v();
  var hr = G4(), Ar = /^\s+/;
  function qr(r7) {
    return r7 && r7.slice(0, hr(r7) + 1).replace(Ar, "");
  }
  O.exports = qr;
});
var y = b((te, X) => {
  v();
  var Nr = F(), C2 = f2(), yr = c2(), H = 0 / 0, Tr = /^[-+]0x[0-9a-f]+$/i, Br = /^0b[01]+$/i, Rr = /^0o[0-7]+$/i, br = parseInt;
  function Er(r7) {
    if (typeof r7 == "number") return r7;
    if (yr(r7)) return H;
    if (C2(r7)) {
      var e4 = typeof r7.valueOf == "function" ? r7.valueOf() : r7;
      r7 = C2(e4) ? e4 + "" : e4;
    }
    if (typeof r7 != "string") return r7 === 0 ? r7 : +r7;
    r7 = Nr(r7);
    var i6 = Br.test(r7);
    return i6 || Rr.test(r7) ? br(r7.slice(2), i6 ? 2 : 8) : Tr.test(r7) ? H : +r7;
  }
  X.exports = Er;
});
var T3 = b((oe, k3) => {
  v();
  var dr = y(), $ = 1 / 0, Mr = 17976931348623157e292;
  function _r(r7) {
    if (!r7) return r7 === 0 ? r7 : 0;
    if (r7 = dr(r7), r7 === $ || r7 === -$) {
      var e4 = r7 < 0 ? -1 : 1;
      return e4 * Mr;
    }
    return r7 === r7 ? r7 : 0;
  }
  k3.exports = _r;
});
var v3 = b((se, P4) => {
  v();
  var Lr = L2(), w2 = T3(), Sr = y();
  function Gr(r7, e4, i6) {
    return e4 = w2(e4), i6 === void 0 ? (i6 = e4, e4 = 0) : i6 = w2(i6), r7 = Sr(r7), Lr(r7, e4, i6);
  }
  P4.exports = Gr;
});
var W2 = b((fe, U) => {
  v();
  var Or = Math.ceil, Fr = Math.max;
  function Cr(r7, e4, i6, t6) {
    for (var u4 = -1, I4 = Fr(Or((e4 - r7) / (i6 || 1)), 0), p4 = Array(I4); I4--; ) p4[t6 ? I4 : ++u4] = r7, r7 += i6;
    return p4;
  }
  U.exports = Cr;
});
var z = b((ce, Y) => {
  v();
  var Hr = 9007199254740991;
  function Xr(r7) {
    return typeof r7 == "number" && r7 > -1 && r7 % 1 == 0 && r7 <= Hr;
  }
  Y.exports = Xr;
});
var J = b((ae2, D2) => {
  v();
  var $r = G(), kr = z();
  function wr(r7) {
    return r7 != null && kr(r7.length) && !$r(r7);
  }
  D2.exports = wr;
});
var Q = b((me, K2) => {
  v();
  var Pr = 9007199254740991, vr = /^(?:0|[1-9]\d*)$/;
  function Ur(r7, e4) {
    var i6 = typeof r7;
    return e4 = e4 == null ? Pr : e4, !!e4 && (i6 == "number" || i6 != "symbol" && vr.test(r7)) && r7 > -1 && r7 % 1 == 0 && r7 < e4;
  }
  K2.exports = Ur;
});
var Z = b((Ie, V2) => {
  v();
  var Wr = f3(), Yr = J(), zr = Q(), Dr = f2();
  function Jr(r7, e4, i6) {
    if (!Dr(i6)) return false;
    var t6 = typeof e4;
    return (t6 == "number" ? Yr(i6) && zr(e4, i6.length) : t6 == "string" && e4 in i6) ? Wr(i6[e4], r7) : false;
  }
  V2.exports = Jr;
});
var l3 = b((ue, j2) => {
  v();
  var Kr = W2(), Qr = Z(), B2 = T3();
  function Vr(r7) {
    return function(e4, i6, t6) {
      return t6 && typeof t6 != "number" && Qr(e4, i6, t6) && (i6 = t6 = void 0), e4 = B2(e4), i6 === void 0 ? (i6 = e4, e4 = 0) : i6 = B2(i6), t6 = t6 === void 0 ? e4 < i6 ? 1 : -1 : B2(t6), Kr(e4, i6, t6, r7);
    };
  }
  j2.exports = Vr;
});
var er = b((pe, rr) => {
  v();
  var Zr = l3(), jr = Zr();
  rr.exports = jr;
});
v();
var R = ur(v3());
var m2 = ur(er());
T();
var he = ({ currentPage: r7, totalPages: e4 }) => {
  let i6 = r7 - 1, t6 = r7 + 1;
  if (e4 <= 7) return (0, m2.default)(1, e4 + 1).map((a4) => String(a4));
  let u4 = (a4, sr) => a4.includes(r7) ? a4 : a4.slice(0, 7 - sr.length - 1), I4 = (0, R.default)(t6 - 1, 3, 5), p4 = (0, R.default)(i6 + 1, e4 - 3, e4 - 1), b3 = I4 ? (0, m2.default)(1, t6 + 1) : (0, m2.default)(1, 5 - 1), E2 = p4 ? (0, m2.default)(i6, e4 + 1) : (0, m2.default)(e4 - 3 + 1, e4 + 1), h3 = u4(b3, E2), A3 = u4(E2.reverse(), b3), ir = h3.concat(A3), nr = [K, i6, r7, t6, K], [tr] = h3, [or] = A3;
  return (ir.includes(r7) ? [...h3, K, ...A3.reverse()] : [tr, ...nr, or]).map((a4) => String(a4));
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VKP3E34Y.js
var import_react5 = __toESM(require_react());
var import_classnames4 = __toESM(require_classnames());
v();
T();
c();
var V = ({ currentPage: d3 = 1, totalPages: c6, className: S4, disabledClassName: e4, buttonsClassNames: m3, onPageChange: w2, isDisabled: f5, showLabels: N2, showEdgeButtons: I4 = true, styles: n5 }) => {
  let [o9, C2] = (0, import_react5.useState)(d3), P4 = o9 === 1, E2 = o9 === c6, p4 = e4 ? { [e4]: f5 } : {}, W3 = he({ currentPage: o9, totalPages: c6 }), A3 = (i6) => {
    i6 !== o9 && (C2(i6), w2(i6));
  }, q2 = (i6) => {
    d(i6) && A3(new bignumber_default(i6).toNumber());
  }, u4 = (i6) => (v5) => {
    v5.preventDefault(), A3(i6);
  }, D2 = (i6) => d(i6) && new bignumber_default(i6).isGreaterThanOrEqualTo(100), M = (i6) => new bignumber_default(i6).isEqualTo(o9);
  return (0, import_react5.useEffect)(() => {
    d3 !== o9 && C2(d3);
  }, [d3, o9]), c6 <= 1 ? null : import_react5.default.createElement("div", { className: (0, import_classnames4.default)(n5 == null ? void 0 : n5.pagination, S4) }, I4 && import_react5.default.createElement("span", { onClick: u4(1), className: (0, import_classnames4.default)(n5 == null ? void 0 : n5.paginationAngle, m3, yt({ [n5 == null ? void 0 : n5.disabled]: P4 }, p4)) }, import_react5.default.createElement(FontAwesomeIcon, { className: n5 == null ? void 0 : n5.paginationAngleIcon, icon: faAnglesLeft })), import_react5.default.createElement(N, { label: "Prev", onClick: u4(o9 - 1), "data-testid": "prevBtn", paginationButtonIcon: faAngleLeft, isInactive: P4, showLabels: N2, className: (0, import_classnames4.default)(n5 == null ? void 0 : n5.paginationEdgeButton, m3, { [n5 == null ? void 0 : n5.disabled]: f5 }, p4) }), import_react5.default.createElement("div", { className: n5 == null ? void 0 : n5.paginationItems }, W3.map((i6, v5) => import_react5.default.createElement("div", { key: `page-item-${v5}`, className: n5 == null ? void 0 : n5.paginationItemWrapper }, d(i6) ? import_react5.default.createElement("div", { onClick: () => q2(i6), className: (0, import_classnames4.default)(n5 == null ? void 0 : n5.paginationItem, m3, { [n5 == null ? void 0 : n5.active]: M(i6) }, { [n5 == null ? void 0 : n5.ellipsis]: !d(i6) }, { [n5 == null ? void 0 : n5.disabled]: f5 }, { [n5 == null ? void 0 : n5.hundreds]: D2(i6) }, p4) }, import_react5.default.createElement("span", { className: n5 == null ? void 0 : n5.paginationItemText }, i6)) : import_react5.default.createElement("span", { className: n5 == null ? void 0 : n5.paginationItemText }, i6)))), import_react5.default.createElement(N, { label: "Next", onClick: u4(o9 + 1), "data-testid": "nextBtn", paginationButtonIcon: faAngleRight, isInactive: E2, showLabels: N2, className: (0, import_classnames4.default)(n5 == null ? void 0 : n5.paginationEdgeButton, n5 == null ? void 0 : n5.reversed, m3, { [n5 == null ? void 0 : n5.disabled]: f5 }, p4) }), I4 && import_react5.default.createElement("span", { onClick: u4(c6), className: (0, import_classnames4.default)(n5 == null ? void 0 : n5.paginationAngle, m3, yt({ [n5 == null ? void 0 : n5.disabled]: E2 }, p4)) }, import_react5.default.createElement(FontAwesomeIcon, { className: n5 == null ? void 0 : n5.paginationAngleIcon, icon: faAnglesRight })));
};
var gn = u2(V, { ssrStyles: () => import("./paginationStyles-JQXZBOF3.js"), clientStyles: () => (e(), gt(i)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-7RNNK63E.js
var import_dist8 = __toESM(require_dist());
var import_react6 = __toESM(require_react());
var import_classnames5 = __toESM(require_classnames());
v();
T();
var v4 = ({ customSpinnerComponent: d3, ledgerLoadingClassNames: p4, customContentComponent: m3, globalStyles: a4, styles: e4 }) => {
  let { ledgerModalSubtitleClassName: t6, ledgerModalTitleClassName: c6, ledgerLoadingWrapper: L3, ledgerLoadingSpinner: N2 } = p4 || {};
  return import_react6.default.createElement("div", { className: (0, import_classnames5.default)(e4 == null ? void 0 : e4.ledgerLoadingWrapper, L3), "data-testid": "ledgerLoading" }, import_react6.default.createElement("div", { className: (0, import_classnames5.default)(e4 == null ? void 0 : e4.ledgerLoadingHeading, c6) }, "Waiting for device..."), import_react6.default.createElement("p", { className: (0, import_classnames5.default)(e4 == null ? void 0 : e4.ledgerLoadingDescription, t6) }, "It may take a few seconds..."), m3, import_react6.default.createElement("div", { className: (0, import_classnames5.default)(e4 == null ? void 0 : e4.ledgerLoadingSpinner, N2) }, d3 || import_react6.default.createElement(G2, { iconSize: "10x", icon: faCircleNotch, iconClass: (0, import_classnames5.default)("fa-spin", a4 == null ? void 0 : a4.textPrimary) })));
};
var z3 = u2(v4, { ssrStyles: () => import("./ledgerLoadingStyles-TZYTGLLW.js"), clientStyles: () => (p3(), gt(r2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-QJF4JLOP.js
var import_dist9 = __toESM(require_dist());
var import_react7 = __toESM(require_react());
var import_classnames6 = __toESM(require_classnames());
v();
var I2 = ({ address: d3, index: a4, balance: T4, selectedAddress: i6, onSelectAddress: e4, className: c6 = "dapp-ledger-address-row", ledgerModalTableSelectedItemClassName: m3, disabled: p4 = false, styles: r7 }) => {
  var n5;
  return import_react7.default.createElement("div", { onClick: () => e4({ address: d3, index: a4 }), className: (0, import_classnames6.default)(r7 == null ? void 0 : r7.ledgerAddressTableBodyItem, { [m3 != null ? m3 : ""]: i6 === d3, [(n5 = r7 == null ? void 0 : r7.ledgerAddressTableBodyItemSelected) != null ? n5 : ""]: i6 === d3 }, c6) }, import_react7.default.createElement("div", { className: (0, import_classnames6.default)(r7 == null ? void 0 : r7.ledgerAddressTableBodyItemData, { disabled: p4 }) }, import_react7.default.createElement("input", { type: "radio", id: `check_${d3}`, disabled: p4, onChange: () => e4({ address: d3, index: a4 }), "data-testid": `check_${d3}`, role: "button", checked: i6 === d3, className: r7 == null ? void 0 : r7.ledgerAddressTableBodyItemDataInput }), import_react7.default.createElement("label", { htmlFor: `check_${a4}`, role: "button", "data-testid": `label_${a4}`, className: r7 == null ? void 0 : r7.ledgerAddressTableBodyItemDataLabel }, import_react7.default.createElement("div", { className: r7 == null ? void 0 : r7.ledgerAddressTableBodyItemDataValue }, import_react7.default.createElement(G3, { text: d3 })))), import_react7.default.createElement("div", { className: r7 == null ? void 0 : r7.ledgerAddressTableBodyItemData }, import_react7.default.createElement(_, { value: T4, egldLabel: n() })), import_react7.default.createElement("div", { className: r7 == null ? void 0 : r7.ledgerAddressTableBodyItemData }, a4));
};
var x4 = u2(I2, { ssrStyles: () => import("./addressRowStyles-47CPWX6L.js"), clientStyles: () => (r3(), gt(o)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-T26QPMXN.js
var import_react8 = __toESM(require_react());
var import_classnames7 = __toESM(require_classnames());
v();
T();
var b2 = 10;
var ee = 5e3;
var ae = ({ accounts: n5, addressTableClassNames: B2, addressesCount: E2 = ee, className: D2 = "dapp-ledger-address-table", customContentComponent: W3, dataTestId: m3 = "addressTableContainer", loading: c6, onConfirmSelectedAddress: w2, onGoToSpecificPage: H, onGoToNextPage: L3, onGoToPrevPage: F2, onSelectAddress: T4, selectedAddress: s3, startIndex: o9, disabledIndexes: u4 = [], globalStyles: i6, styles: e4 }) => {
  let { ledgerModalTitleClassName: k3, ledgerModalSubtitleClassName: G5, ledgerModalTableHeadClassName: I4, ledgerModalTableItemClassName: _3, ledgerModalButtonClassName: x5, ledgerModalTableNavigationButtonClassName: O, ledgerModalTableSelectedItemClassName: U, ledgerModalTableNavigationButtonDisabledClassName: $ } = B2 || {}, [g2, N2] = (0, import_react8.useState)([]), q2 = () => {
    let a4 = 0;
    for (; u4.includes(a4); ) a4++;
    return a4;
  };
  (0, import_react8.useEffect)(() => {
    if (n5.length > 0 && !c6 && (!s3 && o9 === 0)) {
      let p4 = q2(), V2 = n5[p4];
      T4({ address: V2, index: p4 });
    }
  }, [n5, s3, c6, o9]);
  let j2 = (a4) => Bt(void 0, null, function* () {
    try {
      let r7 = yield S2(a4);
      return { address: a4, balance: r7 };
    } catch (r7) {
      throw console.error("error fetching balance", r7), g2;
    }
  });
  if ((0, import_react8.useEffect)(() => {
    let a4 = n5.map((r7) => j2(r7));
    N2(n5.map((r7) => ({ address: r7, balance: "..." }))), Promise.all(a4).then((r7) => {
      N2(r7);
    });
  }, [n5]), c6) return import_react8.default.createElement(z3, null);
  let z4 = () => {
    !s3 || w2();
  }, J3 = (a4) => {
    if (a4 - 1 === o9 + 1) {
      L3();
      return;
    }
    if (a4 - 1 === o9 - 1) {
      F2();
      return;
    }
    H(a4 - 1);
  }, K2 = Math.ceil(E2 / b2), Q3 = ["Address", "Balance", "#"];
  return import_react8.default.createElement("div", { className: (0, import_classnames7.default)(e4 == null ? void 0 : e4.ledgerAddressTableWrapper, D2), "data-testid": m3 }, import_react8.default.createElement("div", { className: e4 == null ? void 0 : e4.ledgerAddressTableTop }, import_react8.default.createElement("div", { className: (0, import_classnames7.default)(e4 == null ? void 0 : e4.ledgerAddressTableHeading, k3), "data-testid": `${m3}Title` }, "Access your wallet"), import_react8.default.createElement("p", { className: (0, import_classnames7.default)(e4 == null ? void 0 : e4.ledgerAddressTableDescription, G5), "data-testid": `${m3}SubTitle` }, "Choose the wallet you want to access")), W3, import_react8.default.createElement("div", { className: e4 == null ? void 0 : e4.ledgerAddressTable }, import_react8.default.createElement("div", { className: (0, import_classnames7.default)(e4 == null ? void 0 : e4.ledgerAddressTableHeader, I4) }, Q3.map((a4) => import_react8.default.createElement("div", { key: a4, className: e4 == null ? void 0 : e4.ledgerAddressTableHeaderItem }, a4))), import_react8.default.createElement("div", { className: e4 == null ? void 0 : e4.ledgerAddressTableBody }, g2 && g2.map(({ address: a4, balance: r7 }, l4) => import_react8.default.createElement(x4, { address: a4, balance: r7, disabled: u4.includes(l4), key: l4 + o9 * b2, index: l4 + o9 * b2, selectedAddress: s3, onSelectAddress: T4, className: _3, ledgerModalTableSelectedItemClassName: U })))), import_react8.default.createElement("div", { className: e4 == null ? void 0 : e4.ledgerAddressTableBottom }, import_react8.default.createElement(gn, { className: e4 == null ? void 0 : e4.ledgerAddressTablePagination, currentPage: o9 + 1, totalPages: K2, onPageChange: J3, disabledClassName: $, buttonsClassNames: O }), import_react8.default.createElement("button", { disabled: !s3, onClick: z4, "data-testid": "confirmBtn", className: (0, import_classnames7.default)(i6 == null ? void 0 : i6.btn, i6 == null ? void 0 : i6.btnPrimary, e4 == null ? void 0 : e4.ledgerAddressTableButton, x5) }, "Access Wallet")));
};
var Ce = u2(ae, { ssrStyles: () => import("./addressTableStyles-GGC5C4NG.js"), clientStyles: () => (t3(), gt(l2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-AJEWTVBS.js
var import_dist13 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-7XEOFRLA.js
var import_dist12 = __toESM(require_dist());

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-HY3IEKEL.js
var import_dist11 = __toESM(require_dist());
v();
var u3 = ur(ip());
var c4 = (t6) => {
  if (t6 <= 0 || isNaN(t6) || !t6 || (0, u3.isString)(t6)) return "N/A time";
  if (t6 >= 86400) return "more than one day";
  let r7 = Math.floor(t6 / 3600), n5 = t6 % 3600, o9 = Math.floor(n5 / 60), e4 = n5 % 60, i6 = [];
  return r7 > 0 && i6.push(`${r7}h`), o9 > 0 && i6.push(`${o9}min`), e4 > 0 && i6.push(`${e4}sec`), i6.join(" ");
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-7XEOFRLA.js
v();
u();
var w = ({ loginToken: e4, version: r7 }) => {
  if (!e4 || !r7) return null;
  let { ledgerWithUsernames: c6 } = W(r7), t6 = E(e4);
  if (t6 == null) return null;
  let d3 = "For security, please confirm that your address:", a4 = "and Auth Token:", u4 = "are the one shown on your Ledger device screen now.";
  if (c6) {
    let m3 = c4(t6.ttl), f5 = "For security, please confirm your address:", h3 = "and authorize:";
    return { data: `${t6.origin} for ${m3}.`, confirmAddressText: f5, authText: h3 };
  }
  return { data: e4, confirmAddressText: d3, authText: a4, areShownText: u4 };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-AJEWTVBS.js
var import_react9 = __toESM(require_react());
var import_classnames8 = __toESM(require_classnames());
v();
T();
S();
var P3 = ({ token: N2, className: t6 = "dapp-ledger-confirm-address", customContentComponent: A3, confirmAddressClassNames: S4, styles: r7 }) => {
  var f5, C2;
  let { ledgerAccount: e4 } = p(), { ledgerModalTitleClassName: D2, ledgerModalConfirmDescriptionClassName: m3, ledgerModalConfirmDataClassName: a4, ledgerModalConfirmFooterClassName: M, ledgerModalConfirmContentClassName: h3 } = S4 || {}, n5 = k(C), I4 = (f5 = n5 == null ? void 0 : n5.loginToken) != null ? f5 : N2, d3 = w({ loginToken: I4, version: e4 == null ? void 0 : e4.version });
  return import_react9.default.createElement("div", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddress, h3, t6), "data-testid": "ledgerConfirmAddress" }, import_react9.default.createElement("h4", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddressHeading, D2) }, "Confirm Ledger Address"), A3, import_react9.default.createElement("div", { className: r7 == null ? void 0 : r7.ledgerConfirmAddressSection }, import_react9.default.createElement("div", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddressDescription, m3) }, d3 == null ? void 0 : d3.confirmAddressText), import_react9.default.createElement("div", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddressData, a4) }, (C2 = e4 == null ? void 0 : e4.address) != null ? C2 : "")), import_react9.default.createElement("div", { className: r7 == null ? void 0 : r7.ledgerConfirmAddressSection }, import_react9.default.createElement("div", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddressDescription, m3) }, d3 == null ? void 0 : d3.authText), import_react9.default.createElement("div", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddressData, a4) }, d3 == null ? void 0 : d3.data), import_react9.default.createElement("div", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddressDescription, m3) }, d3 == null ? void 0 : d3.areShownText)), import_react9.default.createElement("div", { className: (0, import_classnames8.default)(r7 == null ? void 0 : r7.ledgerConfirmAddressFooter, M) }, import_react9.default.createElement("div", null, "Select Approve on your device to confirm."), import_react9.default.createElement("div", null, "Or, if it does not match, close this page and", " ", import_react9.default.createElement("a", { href: "https://help.multiversx.com/en/", target: "_blank", rel: "noreferrer" }, "contact support"), ".")));
};
var Q2 = u2(P3, { ssrStyles: () => import("./confirmAddressStyles-UDN5GQ2Y.js"), clientStyles: () => (c3(), gt(n2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-4ZZBHLNT.js
var import_react10 = __toESM(require_react());
v();
var J2 = ({ isLoading: r7, customSpinnerComponent: m3, customContentComponent: e4, ledgerLoadingClassNames: g2, ledgerAccount: p4, error: s3, confirmAddressClassNames: c6, token: C2, showAddressList: L3, accounts: T4, addressTableClassNames: f5, onConfirmSelectedAddress: u4, onGoToSpecificPage: A3, onGoToNextPage: P4, onGoToPrevPage: N2, onSelectAddress: b3, selectedAddress: n5, startIndex: y3, disabledConnectButton: S4, ledgerConnectClassNames: v5, onStartLogin: x5 }) => r7 ? import_react10.default.createElement(z3, { customSpinnerComponent: m3, customContentComponent: e4, ledgerLoadingClassNames: g2 }) : p4 != null && !s3 ? import_react10.default.createElement(Q2, { confirmAddressClassNames: c6, customContentComponent: e4, token: C2 }) : L3 && !s3 ? import_react10.default.createElement(Ce, { accounts: T4, addressTableClassNames: f5, customContentComponent: e4, loading: r7, onConfirmSelectedAddress: u4, onGoToSpecificPage: A3, onGoToNextPage: P4, onGoToPrevPage: N2, onSelectAddress: b3, selectedAddress: n5 == null ? void 0 : n5.address, startIndex: y3 }) : import_react10.default.createElement(P2, { customContentComponent: e4, disabled: S4, error: s3, ledgerConnectClassNames: v5, onClick: x5 });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-FZI7VNO3.js
var import_react11 = __toESM(require_react());
v();
var Z2 = ({ callbackRoute: c6, customSpinnerComponent: C2, customContentComponent: P4, innerLedgerComponentsClasses: p4, nativeAuth: A3, onLoginRedirect: h3, showProgressBar: f5 = true, showScamPhishingAlert: u4 = true, token: o9 }) => {
  let { ledgerAccount: r7 } = p(), [B2, { error: s3, isLoading: N2 }, { accounts: S4, onConfirmSelectedAddress: y3, onGoToSpecificPage: T4, onGoToNextPage: w2, onGoToPrevPage: G5, onSelectAddress: b3, selectedAddress: x5, showAddressList: n5, startIndex: I4 }] = Xe({ callbackRoute: c6, token: o9, onLoginRedirect: h3, nativeAuth: A3 }), v5 = k2(o9), { addressTableClassNames: F2, confirmAddressClassNames: j2, ledgerConnectClassNames: q2, ledgerLoadingClassNames: z4, ledgerProgressBarClassNames: D2, ledgerScamPhishingAlertClassName: E2 } = p4 || {};
  return import_react11.default.createElement(import_react11.default.Fragment, null, import_react11.default.createElement(A, { ledgerScamPhishingAlertClassName: E2, showScamPhishingAlert: u4, token: o9 }), import_react11.default.createElement(x3, { error: s3, ledgerAccount: r7, ledgerProgressBarClassNames: D2, showAddressList: n5, showProgressBar: f5 }), import_react11.default.createElement(J2, yt({}, { accounts: S4, addressTableClassNames: F2, confirmAddressClassNames: j2, customContentComponent: P4, customSpinnerComponent: C2, disabledConnectButton: v5, error: s3, isLoading: N2, ledgerAccount: r7, ledgerConnectClassNames: q2, ledgerLoadingClassNames: z4, onConfirmSelectedAddress: y3, onGoToSpecificPage: T4, onGoToNextPage: w2, onGoToPrevPage: G5, onSelectAddress: b3, onStartLogin: B2, selectedAddress: x5, showAddressList: n5, startIndex: I4, token: o9 })));
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-JVE7C2M3.js
var import_react12 = __toESM(require_react());
var import_classnames9 = __toESM(require_classnames());
v();
var h2 = (o9) => {
  let { onClose: d3, className: s3, showLoginContent: m3, wrapContentInsideModal: C2, styles: e4 } = o9;
  return m3 === false ? null : C2 ? import_react12.default.createElement(g, { closeOnEscape: o9.closeOnEscape, modalConfig: { headerText: "Login with ledger", showHeader: true, modalContentClassName: e4 == null ? void 0 : e4.ledgerModalDialogContent, modalHeaderClassName: e4 == null ? void 0 : e4.ledgerModalHeader, modalHeaderTextClassName: e4 == null ? void 0 : e4.ledgerModalHeaderText, modalCloseButtonClassName: e4 == null ? void 0 : e4.ledgerModalCloseButton, modalBodyClassName: e4 == null ? void 0 : e4.ledgerModalBody, modalDialogClassName: (0, import_classnames9.default)(e4 == null ? void 0 : e4.ledgerLoginContainer, s3) }, onClose: d3, visible: o9.showLoginModal }, import_react12.default.createElement(Z2, yt({}, o9))) : import_react12.default.createElement(Z2, yt({}, o9));
};
var I3 = u2(h2, { ssrStyles: () => import("./ledgerLoginContainerStyles-U3JFWCGV.js"), clientStyles: () => (t(), gt(l)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-Y6XVUXOA.js
var import_react13 = __toESM(require_react());
v();
T();
var q = ({ buttonClassName: i6 = "dapp-ledger-login-button", callbackRoute: d3, children: l4, className: p4 = "dapp-ledger-login", customSpinnerComponent: g2, "data-testid": m3 = "ledgerLoginButton", disabled: C2, hideButtonWhenModalOpens: h3 = false, innerLedgerComponentsClasses: u4, loginButtonText: L3 = "Ledger", modalClassName: c6, nativeAuth: b3, onLoginRedirect: y3, onContentHide: B2, onContentShow: f5, onModalCloses: w2, onModalOpens: M, showProgressBar: T4 = true, showScamPhishingAlert: N2 = true, token: e4, wrapContentInsideModal: n5 = true }) => {
  let { disabledConnectButton: P4, handleCloseModal: v5, handleOpenModal: S4, shouldRenderButton: x5, showContent: O, showModal: I4 } = P({ hideButtonWhenModalOpens: h3, onContentHide: B2, onContentShow: f5, onModalCloses: w2, onModalOpens: M, token: e4, wrapContentInsideModal: n5 });
  return import_react13.default.createElement(import_react13.default.Fragment, null, x5 && import_react13.default.createElement(v2, { btnClassName: i6, className: p4, "data-testid": m3, disabled: C2 || P4, onLogin: S4, text: L3 }, l4), import_react13.default.createElement(I3, { callbackRoute: d3, className: c6, customSpinnerComponent: g2, innerLedgerComponentsClasses: u4, nativeAuth: b3, onClose: v5, onLoginRedirect: y3, showLoginContent: O, showLoginModal: I4, showProgressBar: T4, showScamPhishingAlert: N2, token: e4, wrapContentInsideModal: n5 }));
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-4TEW42TP.js
var import_dist18 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-NW3UAFRF.js
var import_dist19 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-LR4X2GXQ.js
var import_dist20 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-RCG33R3F.js
var import_dist21 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-AXNLXOPZ.js
var import_dist22 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-HKWVJLO2.js
var import_dist23 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-X46NTIXM.js
var import_dist24 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-BK7EGS52.js
var import_dist25 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-3A6ATNQJ.js
var import_dist26 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-FGYCNTDD.js
var import_dist27 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-OP4D5DN6.js
var import_dist28 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-ARG5V4N6.js
var import_dist29 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-2UVTGEVR.js
var import_dist30 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-MBRRU5L4.js
var import_dist31 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-STXBLUHN.js
var import_dist32 = __toESM(require_dist());
v();
var s2 = ((a4) => (a4.Address = "Address", a4.Balance = "Balance", a4.Hash = "#", a4))(s2 || {});

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-5TDSH4QL.js
var import_dist33 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-4QWDTT23.js
var import_dist34 = __toESM(require_dist());
v();
export {
  q as LedgerLoginButton
};
//# sourceMappingURL=@multiversx_sdk-dapp_UI_ledger_LedgerLoginButton_LedgerLoginButton.js.map
