"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  require_constants
} from "./chunk-MLGEBXDN.js";
import {
  require_lodash
} from "./chunk-3TFTH3JT.js";
import {
  P,
  T2 as T,
  require_out as require_out2
} from "./chunk-HXV3SQ6S.js";
import {
  Q,
  e,
  import_CrossWindowProvider,
  require_CrossWindowProvider,
  require_WindowManager,
  require_enums,
  require_errors,
  require_windowProviderConstants
} from "./chunk-N7F464ZJ.js";
import {
  Bt,
  v
} from "./chunk-5CKZHQYH.js";
import {
  require_crypto_browserify,
  require_elliptic,
  require_hash,
  require_out
} from "./chunk-5HSAGO3O.js";
import {
  require_transaction
} from "./chunk-UHKY3R7I.js";
import {
  require_signature
} from "./chunk-KLHSS55O.js";
import {
  require_events
} from "./chunk-JDLAKVPX.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __require,
  __toCommonJS,
  __toESM,
  require_buffer_polyfill,
  require_dist
} from "./chunk-UOCZJ3B4.js";

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d4, b4) {
  extendStatics(d4, b4);
  function __() {
    this.constructor = d4;
  }
  d4.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
}
function __rest(s4, e3) {
  var t3 = {};
  for (var p5 in s4) if (Object.prototype.hasOwnProperty.call(s4, p5) && e3.indexOf(p5) < 0)
    t3[p5] = s4[p5];
  if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i5 = 0, p5 = Object.getOwnPropertySymbols(s4); i5 < p5.length; i5++) {
      if (e3.indexOf(p5[i5]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p5[i5]))
        t3[p5[i5]] = s4[p5[i5]];
    }
  return t3;
}
function __decorate(decorators, target, key2, desc) {
  var c5 = arguments.length, r6 = c5 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key2) : desc, d4;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r6 = Reflect.decorate(decorators, target, key2, desc);
  else for (var i5 = decorators.length - 1; i5 >= 0; i5--) if (d4 = decorators[i5]) r6 = (c5 < 3 ? d4(r6) : c5 > 3 ? d4(target, key2, r6) : d4(target, key2)) || r6;
  return c5 > 3 && r6 && Object.defineProperty(target, key2, r6), r6;
}
function __param(paramIndex, decorator) {
  return function(target, key2) {
    decorator(target, key2, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P5, generator) {
  function adopt(value) {
    return value instanceof P5 ? value : new P5(function(resolve) {
      resolve(value);
    });
  }
  return new (P5 || (P5 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _5 = { label: 0, sent: function() {
    if (t3[0] & 1) throw t3[1];
    return t3[1];
  }, trys: [], ops: [] }, f3, y5, t3, g5;
  return g5 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g5[Symbol.iterator] = function() {
    return this;
  }), g5;
  function verb(n7) {
    return function(v8) {
      return step([n7, v8]);
    };
  }
  function step(op) {
    if (f3) throw new TypeError("Generator is already executing.");
    while (_5) try {
      if (f3 = 1, y5 && (t3 = op[0] & 2 ? y5["return"] : op[0] ? y5["throw"] || ((t3 = y5["return"]) && t3.call(y5), 0) : y5.next) && !(t3 = t3.call(y5, op[1])).done) return t3;
      if (y5 = 0, t3) op = [op[0] & 2, t3.value];
      switch (op[0]) {
        case 0:
        case 1:
          t3 = op;
          break;
        case 4:
          _5.label++;
          return { value: op[1], done: false };
        case 5:
          _5.label++;
          y5 = op[1];
          op = [0];
          continue;
        case 7:
          op = _5.ops.pop();
          _5.trys.pop();
          continue;
        default:
          if (!(t3 = _5.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _5 = 0;
            continue;
          }
          if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
            _5.label = op[1];
            break;
          }
          if (op[0] === 6 && _5.label < t3[1]) {
            _5.label = t3[1];
            t3 = op;
            break;
          }
          if (t3 && _5.label < t3[2]) {
            _5.label = t3[2];
            _5.ops.push(op);
            break;
          }
          if (t3[2]) _5.ops.pop();
          _5.trys.pop();
          continue;
      }
      op = body.call(thisArg, _5);
    } catch (e3) {
      op = [6, e3];
      y5 = 0;
    } finally {
      f3 = t3 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o4, m5, k5, k22) {
  if (k22 === void 0) k22 = k5;
  o4[k22] = m5[k5];
}
function __exportStar(m5, exports) {
  for (var p5 in m5) if (p5 !== "default" && !exports.hasOwnProperty(p5)) exports[p5] = m5[p5];
}
function __values(o4) {
  var s4 = typeof Symbol === "function" && Symbol.iterator, m5 = s4 && o4[s4], i5 = 0;
  if (m5) return m5.call(o4);
  if (o4 && typeof o4.length === "number") return {
    next: function() {
      if (o4 && i5 >= o4.length) o4 = void 0;
      return { value: o4 && o4[i5++], done: !o4 };
    }
  };
  throw new TypeError(s4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o4, n7) {
  var m5 = typeof Symbol === "function" && o4[Symbol.iterator];
  if (!m5) return o4;
  var i5 = m5.call(o4), r6, ar3 = [], e3;
  try {
    while ((n7 === void 0 || n7-- > 0) && !(r6 = i5.next()).done) ar3.push(r6.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r6 && !r6.done && (m5 = i5["return"])) m5.call(i5);
    } finally {
      if (e3) throw e3.error;
    }
  }
  return ar3;
}
function __spread() {
  for (var ar3 = [], i5 = 0; i5 < arguments.length; i5++)
    ar3 = ar3.concat(__read(arguments[i5]));
  return ar3;
}
function __spreadArrays() {
  for (var s4 = 0, i5 = 0, il = arguments.length; i5 < il; i5++) s4 += arguments[i5].length;
  for (var r6 = Array(s4), k5 = 0, i5 = 0; i5 < il; i5++)
    for (var a6 = arguments[i5], j3 = 0, jl = a6.length; j3 < jl; j3++, k5++)
      r6[k5] = a6[j3];
  return r6;
}
function __await(v8) {
  return this instanceof __await ? (this.v = v8, this) : new __await(v8);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g5 = generator.apply(thisArg, _arguments || []), i5, q2 = [];
  return i5 = {}, verb("next"), verb("throw"), verb("return"), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5;
  function verb(n7) {
    if (g5[n7]) i5[n7] = function(v8) {
      return new Promise(function(a6, b4) {
        q2.push([n7, v8, a6, b4]) > 1 || resume(n7, v8);
      });
    };
  }
  function resume(n7, v8) {
    try {
      step(g5[n7](v8));
    } catch (e3) {
      settle(q2[0][3], e3);
    }
  }
  function step(r6) {
    r6.value instanceof __await ? Promise.resolve(r6.value.v).then(fulfill, reject) : settle(q2[0][2], r6);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f3, v8) {
    if (f3(v8), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o4) {
  var i5, p5;
  return i5 = {}, verb("next"), verb("throw", function(e3) {
    throw e3;
  }), verb("return"), i5[Symbol.iterator] = function() {
    return this;
  }, i5;
  function verb(n7, f3) {
    i5[n7] = o4[n7] ? function(v8) {
      return (p5 = !p5) ? { value: __await(o4[n7](v8)), done: n7 === "return" } : f3 ? f3(v8) : v8;
    } : f3;
  }
}
function __asyncValues(o4) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m5 = o4[Symbol.asyncIterator], i5;
  return m5 ? m5.call(o4) : (o4 = typeof __values === "function" ? __values(o4) : o4[Symbol.iterator](), i5 = {}, verb("next"), verb("throw"), verb("return"), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5);
  function verb(n7) {
    i5[n7] = o4[n7] && function(v8) {
      return new Promise(function(resolve, reject) {
        v8 = o4[n7](v8), settle(resolve, reject, v8.done, v8.value);
      });
    };
  }
  function settle(resolve, reject, d4, v8) {
    Promise.resolve(v8).then(function(v9) {
      resolve({ value: v9, done: d4 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod2) {
  if (mod2 && mod2.__esModule) return mod2;
  var result = {};
  if (mod2 != null) {
    for (var k5 in mod2) if (Object.hasOwnProperty.call(mod2, k5)) result[k5] = mod2[k5];
  }
  result.default = mod2;
  return result;
}
function __importDefault(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var import_dist, extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    import_dist = __toESM(require_dist());
    extendStatics = function(d4, b4) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d5, b5) {
        d5.__proto__ = b5;
      } || function(d5, b5) {
        for (var p5 in b5) if (b5.hasOwnProperty(p5)) d5[p5] = b5[p5];
      };
      return extendStatics(d4, b4);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t3) {
        for (var s4, i5 = 1, n7 = arguments.length; i5 < n7; i5++) {
          s4 = arguments[i5];
          for (var p5 in s4) if (Object.prototype.hasOwnProperty.call(s4, p5)) t3[p5] = s4[p5];
        }
        return t3;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay2(timeout2) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout2);
      });
    }
    exports.delay = delay2;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants2();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds2(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds2;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp2 = this.get(label);
        if (typeof timestamp2.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp2.started;
        this.timestamps.set(label, { started: timestamp2.started, elapsed });
      }
      get(label) {
        const timestamp2 = this.timestamps.get(label);
        if (typeof timestamp2 === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp2;
      }
      elapsed(label) {
        const timestamp2 = this.get(label);
        const elapsed = timestamp2.elapsed || Date.now() - timestamp2.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants2(), exports);
  }
});

// node_modules/@walletconnect/events/dist/esm/events.js
var import_dist2, IEvents;
var init_events = __esm({
  "node_modules/@walletconnect/events/dist/esm/events.js"() {
    import_dist2 = __toESM(require_dist());
    IEvents = class {
    };
  }
});

// node_modules/@walletconnect/events/dist/esm/index.js
var import_dist3;
var init_esm = __esm({
  "node_modules/@walletconnect/events/dist/esm/index.js"() {
    import_dist3 = __toESM(require_dist());
    init_events();
  }
});

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_dist4, import_events, import_time, n, s, r, i;
var init_index_es = __esm({
  "node_modules/@walletconnect/heartbeat/dist/index.es.js"() {
    import_dist4 = __toESM(require_dist());
    import_events = __toESM(require_events());
    import_time = __toESM(require_cjs());
    init_esm();
    n = class extends IEvents {
      constructor(e3) {
        super();
      }
    };
    s = import_time.FIVE_SECONDS;
    r = { pulse: "heartbeat_pulse" };
    i = class _i2 extends n {
      constructor(e3) {
        super(e3), this.events = new import_events.EventEmitter(), this.interval = s, this.interval = (e3 == null ? void 0 : e3.interval) || s;
      }
      static async init(e3) {
        const t3 = new _i2(e3);
        return await t3.init(), t3;
      }
      async init() {
        await this.initialize();
      }
      stop() {
        clearInterval(this.intervalRef);
      }
      on(e3, t3) {
        this.events.on(e3, t3);
      }
      once(e3, t3) {
        this.events.once(e3, t3);
      }
      off(e3, t3) {
        this.events.off(e3, t3);
      }
      removeListener(e3, t3) {
        this.events.removeListener(e3, t3);
      }
      async initialize() {
        this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
      }
      pulse() {
        this.events.emit(r.pulse);
      }
    };
  }
});

// node_modules/destr/dist/index.mjs
function jsonParseTransform(key2, value) {
  if (key2 === "__proto__" || key2 === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key2);
    return;
  }
  return value;
}
function warnKeyDropped(key2) {
  console.warn(`[destr] Dropping "${key2}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  const _value = value.trim();
  if (
    // eslint-disable-next-line unicorn/prefer-at
    value[0] === '"' && value.endsWith('"') && !value.includes("\\")
  ) {
    return _value.slice(1, -1);
  }
  if (_value.length <= 9) {
    const _lval = _value.toLowerCase();
    if (_lval === "true") {
      return true;
    }
    if (_lval === "false") {
      return false;
    }
    if (_lval === "undefined") {
      return void 0;
    }
    if (_lval === "null") {
      return null;
    }
    if (_lval === "nan") {
      return Number.NaN;
    }
    if (_lval === "infinity") {
      return Number.POSITIVE_INFINITY;
    }
    if (_lval === "-infinity") {
      return Number.NEGATIVE_INFINITY;
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}
var import_dist5, suspectProtoRx, suspectConstructorRx, JsonSigRx;
var init_dist = __esm({
  "node_modules/destr/dist/index.mjs"() {
    import_dist5 = __toESM(require_dist(), 1);
    suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
    suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
    JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
  }
});

// node_modules/unstorage/dist/shared/unstorage.BqzpVTXx.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c5) => c5.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key2) {
  var _a2;
  if (!key2) {
    return "";
  }
  return ((_a2 = key2.split("?")[0]) == null ? void 0 : _a2.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base4) {
  base4 = normalizeKey(base4);
  return base4 ? base4 + ":" : "";
}
var import_dist6, BASE64_PREFIX;
var init_unstorage_BqzpVTXx = __esm({
  "node_modules/unstorage/dist/shared/unstorage.BqzpVTXx.mjs"() {
    import_dist6 = __toESM(require_dist(), 1);
    BASE64_PREFIX = "base64:";
  }
});

// node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
function createStorage(options = {}) {
  const context2 = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key2) => {
    for (const base4 of context2.mountpoints) {
      if (key2.startsWith(base4)) {
        return {
          base: base4,
          relativeKey: key2.slice(base4.length),
          driver: context2.mounts[base4]
        };
      }
    }
    return {
      base: "",
      relativeKey: key2,
      driver: context2.mounts[""]
    };
  };
  const getMounts = (base4, includeParent) => {
    return context2.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base4) || includeParent && base4.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base4.length > mountpoint.length ? base4.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context2.mounts[mountpoint]
    }));
  };
  const onChange = (event, key2) => {
    if (!context2.watching) {
      return;
    }
    key2 = normalizeKey(key2);
    for (const listener of context2.watchListeners) {
      listener(event, key2);
    }
  };
  const startWatch = async () => {
    if (context2.watching) {
      return;
    }
    context2.watching = true;
    for (const mountpoint in context2.mounts) {
      context2.unwatch[mountpoint] = await watch(
        context2.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context2.watching) {
      return;
    }
    for (const mountpoint in context2.unwatch) {
      await context2.unwatch[mountpoint]();
    }
    context2.unwatch = {};
    context2.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key2 = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key2);
      getBatch(mount).items.push({
        key: key2,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r6) => r6.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key2, opts = {}) {
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key2, opts = {}) {
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r6) => r6.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key2, opts = {}) {
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key2, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key2);
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify(value), opts);
      if (!driver.watch) {
        onChange("update", key2);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key2, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key2, opts);
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key2);
      }
    },
    async removeItem(key2, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key2);
      }
    },
    // Meta
    async getMeta(key2, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key2, value, opts = {}) {
      return this.setItem(key2 + "$", value, opts);
    },
    removeMeta(key2, opts = {}) {
      return this.removeItem(key2 + "$", opts);
    },
    // Keys
    async getKeys(base4, opts = {}) {
      base4 = normalizeBaseKey(base4);
      const mounts = getMounts(base4, true);
      let maskedMounts = [];
      const allKeys = [];
      for (const mount of mounts) {
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key2 of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key2);
          if (!maskedMounts.some((p5) => fullKey.startsWith(p5))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p5) => !p5.startsWith(mount.mountpoint))
        ];
      }
      return base4 ? allKeys.filter(
        (key2) => key2.startsWith(base4) && key2[key2.length - 1] !== "$"
      ) : allKeys.filter((key2) => key2[key2.length - 1] !== "$");
    },
    // Utils
    async clear(base4, opts = {}) {
      base4 = normalizeBaseKey(base4);
      await Promise.all(
        getMounts(base4, false).map(async (m5) => {
          if (m5.driver.clear) {
            return asyncCall(m5.driver.clear, m5.relativeBase, opts);
          }
          if (m5.driver.removeItem) {
            const keys2 = await m5.driver.getKeys(m5.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key2) => m5.driver.removeItem(key2, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context2.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context2.watchListeners.push(callback);
      return async () => {
        context2.watchListeners = context2.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context2.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context2.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base4, driver) {
      base4 = normalizeBaseKey(base4);
      if (base4 && context2.mounts[base4]) {
        throw new Error(`already mounted at ${base4}`);
      }
      if (base4) {
        context2.mountpoints.push(base4);
        context2.mountpoints.sort((a6, b4) => b4.length - a6.length);
      }
      context2.mounts[base4] = driver;
      if (context2.watching) {
        Promise.resolve(watch(driver, onChange, base4)).then((unwatcher) => {
          context2.unwatch[base4] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base4, _dispose = true) {
      var _a2, _b;
      base4 = normalizeBaseKey(base4);
      if (!base4 || !context2.mounts[base4]) {
        return;
      }
      if (context2.watching && base4 in context2.unwatch) {
        (_b = (_a2 = context2.unwatch)[base4]) == null ? void 0 : _b.call(_a2);
        delete context2.unwatch[base4];
      }
      if (_dispose) {
        await dispose(context2.mounts[base4]);
      }
      context2.mountpoints = context2.mountpoints.filter((key2) => key2 !== base4);
      delete context2.mounts[base4];
    },
    getMount(key2 = "") {
      key2 = normalizeKey(key2) + ":";
      const m5 = getMount(key2);
      return {
        driver: m5.driver,
        base: m5.base
      };
    },
    getMounts(base4 = "", opts = {}) {
      base4 = normalizeKey(base4);
      const mounts = getMounts(base4, opts.parents);
      return mounts.map((m5) => ({
        driver: m5.driver,
        base: m5.mountpoint
      }));
    },
    // Aliases
    keys: (base4, opts = {}) => storage.getKeys(base4, opts),
    get: (key2, opts = {}) => storage.getItem(key2, opts),
    set: (key2, value, opts = {}) => storage.setItem(key2, value, opts),
    has: (key2, opts = {}) => storage.hasItem(key2, opts),
    del: (key2, opts = {}) => storage.removeItem(key2, opts),
    remove: (key2, opts = {}) => storage.removeItem(key2, opts)
  };
  return storage;
}
function watch(driver, onChange, base4) {
  return driver.watch ? driver.watch((event, key2) => onChange(event, base4 + key2)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}
var import_dist7, DRIVER_NAME, memory;
var init_dist2 = __esm({
  "node_modules/unstorage/dist/index.mjs"() {
    import_dist7 = __toESM(require_dist(), 1);
    init_dist();
    init_unstorage_BqzpVTXx();
    init_unstorage_BqzpVTXx();
    DRIVER_NAME = "memory";
    memory = defineDriver(() => {
      const data = /* @__PURE__ */ new Map();
      return {
        name: DRIVER_NAME,
        getInstance: () => data,
        hasItem(key2) {
          return data.has(key2);
        },
        getItem(key2) {
          return data.get(key2) ?? null;
        },
        getItemRaw(key2) {
          return data.get(key2) ?? null;
        },
        setItem(key2, value) {
          data.set(key2, value);
        },
        setItemRaw(key2, value) {
          data.set(key2, value);
        },
        removeItem(key2) {
          data.delete(key2);
        },
        getKeys() {
          return [...data.keys()];
        },
        clear() {
          data.clear();
        },
        dispose() {
          data.clear();
        }
      };
    });
  }
});

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  const request = indexedDB.open(dbName);
  request.onupgradeneeded = () => request.result.createObjectStore(storeName);
  const dbp = promisifyRequest(request);
  return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key2, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key2)));
}
function set(key2, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key2);
    return promisifyRequest(store.transaction);
  });
}
function del(key2, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key2);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}
var import_dist8, defaultGetStoreFunc;
var init_dist3 = __esm({
  "node_modules/idb-keyval/dist/index.js"() {
    import_dist8 = __toESM(require_dist());
  }
});

// node_modules/@walletconnect/safe-json/dist/esm/index.js
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a2) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}
var import_dist9, JSONStringify, JSONParse;
var init_esm2 = __esm({
  "node_modules/@walletconnect/safe-json/dist/esm/index.js"() {
    import_dist9 = __toESM(require_dist());
    JSONStringify = (data) => JSON.stringify(data, (_5, value) => typeof value === "bigint" ? value.toString() + "n" : value);
    JSONParse = (json) => {
      const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
      const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
      return JSON.parse(serializedData, (_5, value) => {
        const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
        if (isCustomFormatBigInt)
          return BigInt(value.substring(0, value.length - 1));
        return value;
      });
    };
  }
});

// node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
function k(i5) {
  var t3;
  return [i5[0], safeJsonParse((t3 = i5[1]) != null ? t3 : "")];
}
var import_dist10, x, z, D, E, _, l2, c, K, N, y, O, j, h;
var init_index_es2 = __esm({
  "node_modules/@walletconnect/keyvaluestorage/dist/index.es.js"() {
    import_dist10 = __toESM(require_dist());
    init_dist2();
    init_dist3();
    init_esm2();
    x = "idb-keyval";
    z = (i5 = {}) => {
      const t3 = i5.base && i5.base.length > 0 ? `${i5.base}:` : "", e3 = (s4) => t3 + s4;
      let n7;
      return i5.dbName && i5.storeName && (n7 = createStore(i5.dbName, i5.storeName)), { name: x, options: i5, async hasItem(s4) {
        return !(typeof await get(e3(s4), n7) > "u");
      }, async getItem(s4) {
        return await get(e3(s4), n7) ?? null;
      }, setItem(s4, a6) {
        return set(e3(s4), a6, n7);
      }, removeItem(s4) {
        return del(e3(s4), n7);
      }, getKeys() {
        return keys(n7);
      }, clear() {
        return clear(n7);
      } };
    };
    D = "WALLET_CONNECT_V2_INDEXED_DB";
    E = "keyvaluestorage";
    _ = class {
      constructor() {
        this.indexedDb = createStorage({ driver: z({ dbName: D, storeName: E }) });
      }
      async getKeys() {
        return this.indexedDb.getKeys();
      }
      async getEntries() {
        return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t3) => [t3.key, t3.value]);
      }
      async getItem(t3) {
        const e3 = await this.indexedDb.getItem(t3);
        if (e3 !== null) return e3;
      }
      async setItem(t3, e3) {
        await this.indexedDb.setItem(t3, safeJsonStringify(e3));
      }
      async removeItem(t3) {
        await this.indexedDb.removeItem(t3);
      }
    };
    l2 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
    c = { exports: {} };
    (function() {
      let i5;
      function t3() {
      }
      i5 = t3, i5.prototype.getItem = function(e3) {
        return this.hasOwnProperty(e3) ? String(this[e3]) : null;
      }, i5.prototype.setItem = function(e3, n7) {
        this[e3] = String(n7);
      }, i5.prototype.removeItem = function(e3) {
        delete this[e3];
      }, i5.prototype.clear = function() {
        const e3 = this;
        Object.keys(e3).forEach(function(n7) {
          e3[n7] = void 0, delete e3[n7];
        });
      }, i5.prototype.key = function(e3) {
        return e3 = e3 || 0, Object.keys(this)[e3];
      }, i5.prototype.__defineGetter__("length", function() {
        return Object.keys(this).length;
      }), typeof l2 < "u" && l2.localStorage ? c.exports = l2.localStorage : typeof window < "u" && window.localStorage ? c.exports = window.localStorage : c.exports = new t3();
    })();
    K = class {
      constructor() {
        this.localStorage = c.exports;
      }
      async getKeys() {
        return Object.keys(this.localStorage);
      }
      async getEntries() {
        return Object.entries(this.localStorage).map(k);
      }
      async getItem(t3) {
        const e3 = this.localStorage.getItem(t3);
        if (e3 !== null) return safeJsonParse(e3);
      }
      async setItem(t3, e3) {
        this.localStorage.setItem(t3, safeJsonStringify(e3));
      }
      async removeItem(t3) {
        this.localStorage.removeItem(t3);
      }
    };
    N = "wc_storage_version";
    y = 1;
    O = async (i5, t3, e3) => {
      const n7 = N, s4 = await t3.getItem(n7);
      if (s4 && s4 >= y) {
        e3(t3);
        return;
      }
      const a6 = await i5.getKeys();
      if (!a6.length) {
        e3(t3);
        return;
      }
      const m5 = [];
      for (; a6.length; ) {
        const r6 = a6.shift();
        if (!r6) continue;
        const o4 = r6.toLowerCase();
        if (o4.includes("wc@") || o4.includes("walletconnect") || o4.includes("wc_") || o4.includes("wallet_connect")) {
          const f3 = await i5.getItem(r6);
          await t3.setItem(r6, f3), m5.push(r6);
        }
      }
      await t3.setItem(n7, y), e3(t3), j(i5, m5);
    };
    j = async (i5, t3) => {
      t3.length && t3.forEach(async (e3) => {
        await i5.removeItem(e3);
      });
    };
    h = class {
      constructor() {
        this.initialized = false, this.setInitialized = (e3) => {
          this.storage = e3, this.initialized = true;
        };
        const t3 = new K();
        this.storage = t3;
        try {
          const e3 = new _();
          O(t3, e3, this.setInitialized);
        } catch {
          this.initialized = true;
        }
      }
      async getKeys() {
        return await this.initialize(), this.storage.getKeys();
      }
      async getEntries() {
        return await this.initialize(), this.storage.getEntries();
      }
      async getItem(t3) {
        return await this.initialize(), this.storage.getItem(t3);
      }
      async setItem(t3, e3) {
        return await this.initialize(), this.storage.setItem(t3, e3);
      }
      async removeItem(t3) {
        return await this.initialize(), this.storage.removeItem(t3);
      }
      async initialize() {
        this.initialized || await new Promise((t3) => {
          const e3 = setInterval(() => {
            this.initialized && (clearInterval(e3), t3());
          }, 20);
        });
      }
    };
  }
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    function tryStringify(o4) {
      try {
        return JSON.stringify(o4);
      } catch (e3) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f3, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f3 === "object" && f3 !== null) {
        var len = args.length + offset;
        if (len === 1) return f3;
        var objects = new Array(len);
        objects[0] = ss2(f3);
        for (var index = 1; index < len; index++) {
          objects[index] = ss2(args[index]);
        }
        return objects.join(" ");
      }
      if (typeof f3 !== "string") {
        return f3;
      }
      var argLen = args.length;
      if (argLen === 0) return f3;
      var str2 = "";
      var a6 = 1 - offset;
      var lastPos = -1;
      var flen = f3 && f3.length || 0;
      for (var i5 = 0; i5 < flen; ) {
        if (f3.charCodeAt(i5) === 37 && i5 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f3.charCodeAt(i5 + 1)) {
            case 100:
            // 'd'
            case 102:
              if (a6 >= argLen)
                break;
              if (args[a6] == null) break;
              if (lastPos < i5)
                str2 += f3.slice(lastPos, i5);
              str2 += Number(args[a6]);
              lastPos = i5 + 2;
              i5++;
              break;
            case 105:
              if (a6 >= argLen)
                break;
              if (args[a6] == null) break;
              if (lastPos < i5)
                str2 += f3.slice(lastPos, i5);
              str2 += Math.floor(Number(args[a6]));
              lastPos = i5 + 2;
              i5++;
              break;
            case 79:
            // 'O'
            case 111:
            // 'o'
            case 106:
              if (a6 >= argLen)
                break;
              if (args[a6] === void 0) break;
              if (lastPos < i5)
                str2 += f3.slice(lastPos, i5);
              var type = typeof args[a6];
              if (type === "string") {
                str2 += "'" + args[a6] + "'";
                lastPos = i5 + 2;
                i5++;
                break;
              }
              if (type === "function") {
                str2 += args[a6].name || "<anonymous>";
                lastPos = i5 + 2;
                i5++;
                break;
              }
              str2 += ss2(args[a6]);
              lastPos = i5 + 2;
              i5++;
              break;
            case 115:
              if (a6 >= argLen)
                break;
              if (lastPos < i5)
                str2 += f3.slice(lastPos, i5);
              str2 += String(args[a6]);
              lastPos = i5 + 2;
              i5++;
              break;
            case 37:
              if (lastPos < i5)
                str2 += f3.slice(lastPos, i5);
              str2 += "%";
              lastPos = i5 + 2;
              i5++;
              a6--;
              break;
          }
          ++a6;
        }
        ++i5;
      }
      if (lastPos === -1)
        return f3;
      else if (lastPos < flen) {
        str2 += f3.slice(lastPos);
      }
      return str2;
    }
  }
});

// node_modules/pino/browser.js
var require_browser = __commonJS({
  "node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k5) {
          return k5 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write) opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1) stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false) opts.level = "silent";
      const level = opts.level || "info";
      const logger12 = Object.create(proto);
      if (!logger12.log) logger12.log = noop2;
      Object.defineProperty(logger12, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger12, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger12.levels = pino.levels;
      logger12.level = level;
      logger12.setMaxListeners = logger12.getMaxListeners = logger12.emit = logger12.addListener = logger12.on = logger12.prependListener = logger12.once = logger12.prependOnceListener = logger12.removeListener = logger12.removeAllListeners = logger12.listeners = logger12.listenerCount = logger12.eventNames = logger12.write = logger12.flush = noop2;
      logger12.serializers = serializers;
      logger12._serialize = serialize;
      logger12._stdErrSerialize = stdErrSerialize;
      logger12.child = child;
      if (transmit2) logger12._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger12, "error", "log");
        set2(setOpts, logger12, "fatal", "error");
        set2(setOpts, logger12, "warn", "error");
        set2(setOpts, logger12, "info", "log");
        set2(setOpts, logger12, "debug", "log");
        set2(setOpts, logger12, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind2(parent, bindings, "error");
          this.fatal = bind2(parent, bindings, "fatal");
          this.warn = bind2(parent, bindings, "warn");
          this.info = bind2(parent, bindings, "info");
          this.debug = bind2(parent, bindings, "debug");
          this.trace = bind2(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger12;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger12, level, fallback) {
      const proto = Object.getPrototypeOf(logger12);
      logger12[level] = logger12.levelVal > logger12.levels.values[level] ? noop2 : proto[level] ? proto[level] : _console[level] || _console[fallback] || noop2;
      wrap(opts, logger12, level);
    }
    function wrap(opts, logger12, level) {
      if (!opts.transmit && logger12[level] === noop2) return;
      logger12[level] = /* @__PURE__ */ function(write) {
        return function LOG() {
          const ts = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i5 = 0; i5 < args.length; i5++) args[i5] = arguments[i5];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject) write.call(proto, asObject(this, level, args, ts));
          else write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger12.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue) return;
            transmit(this, {
              ts,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger12.level],
              send: opts.transmit.send,
              val: logger12.levelVal
            }, args);
          }
        };
      }(logger12[level]);
    }
    function asObject(logger12, level, args, ts) {
      if (logger12._serialize) applySerializers(args, logger12._serialize, logger12.serializers, logger12._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o4 = {};
      if (ts) {
        o4.time = ts;
      }
      o4.level = pino.levels.values[level];
      let lvl = (logger12._childLevel | 0) + 1;
      if (lvl < 1) lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o4, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string") msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0) o4.msg = msg;
      return o4;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i5 in args) {
        if (stdErrSerialize && args[i5] instanceof Error) {
          args[i5] = pino.stdSerializers.err(args[i5]);
        } else if (typeof args[i5] === "object" && !Array.isArray(args[i5])) {
          for (const k5 in args[i5]) {
            if (serialize && serialize.indexOf(k5) > -1 && k5 in serializers) {
              args[i5][k5] = serializers[k5](args[i5][k5]);
            }
          }
        }
      }
    }
    function bind2(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i5 = 1; i5 < args.length; i5++) {
          args[i5] = arguments[i5 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger12, opts, args) {
      const send = opts.send;
      const ts = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger12._logEvent.bindings;
      applySerializers(
        args,
        logger12._serialize || Object.keys(logger12.serializers),
        logger12.serializers,
        logger12._stdErrSerialize === void 0 ? true : logger12._stdErrSerialize
      );
      logger12._logEvent.ts = ts;
      logger12._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger12._logEvent.level.label = methodLevel;
      logger12._logEvent.level.value = methodValue;
      send(methodLevel, logger12._logEvent, val);
      logger12._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err2) {
      const obj = {
        type: err2.constructor.name,
        msg: err2.message,
        stack: err2.stack
      };
      for (const key2 in err2) {
        if (obj[key2] === void 0) {
          obj[key2] = err2[key2];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a6) {
      return a6;
    }
    function noop2() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o4) {
        return typeof o4 !== "undefined" && o4;
      }
      try {
        if (typeof globalThis !== "undefined") return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e3) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// node_modules/@walletconnect/logger/dist/index.es.js
function k2(r6) {
  return g(i2({}, r6), { level: (r6 == null ? void 0 : r6.level) || c2.level });
}
function v2(r6, e3 = n2) {
  return r6[e3] || "";
}
function b(r6, e3, t3 = n2) {
  return r6[t3] = e3, r6;
}
function y2(r6, e3 = n2) {
  let t3 = "";
  return typeof r6.bindings > "u" ? t3 = v2(r6, e3) : t3 = r6.bindings().context || "", t3;
}
function w(r6, e3, t3 = n2) {
  const o4 = y2(r6, t3);
  return o4.trim() ? `${o4}/${e3}` : e3;
}
function E2(r6, e3, t3 = n2) {
  const o4 = w(r6, e3, t3), a6 = r6.child({ context: o4 });
  return b(a6, o4, t3);
}
function C(r6) {
  var e3, t3;
  const o4 = new m((e3 = r6.opts) == null ? void 0 : e3.level, r6.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r6.opts), { level: "trace", browser: g(i2({}, (t3 = r6.opts) == null ? void 0 : t3.browser), { write: (a6) => o4.write(a6) }) })), chunkLoggerController: o4 };
}
function I(r6) {
  var e3;
  const t3 = new B((e3 = r6.opts) == null ? void 0 : e3.level, r6.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r6.opts), { level: "trace" }), t3), chunkLoggerController: t3 };
}
function A(r6) {
  return typeof r6.loggerOverride < "u" && typeof r6.loggerOverride != "string" ? { logger: r6.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C(r6) : I(r6);
}
var import_dist11, import_pino, import_pino2, c2, n2, l3, O2, d, L, m, B, x2, S, _2, p, T2, z2, f, i2, g;
var init_index_es3 = __esm({
  "node_modules/@walletconnect/logger/dist/index.es.js"() {
    import_dist11 = __toESM(require_dist());
    import_pino = __toESM(require_browser());
    import_pino2 = __toESM(require_browser());
    init_esm2();
    c2 = { level: "info" };
    n2 = "custom_context";
    l3 = 1e3 * 1024;
    O2 = class {
      constructor(e3) {
        this.nodeValue = e3, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
      }
      get value() {
        return this.nodeValue;
      }
      get size() {
        return this.sizeInBytes;
      }
    };
    d = class {
      constructor(e3) {
        this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e3, this.sizeInBytes = 0;
      }
      append(e3) {
        const t3 = new O2(e3);
        if (t3.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e3} with size ${t3.size}`);
        for (; this.size + t3.size > this.maxSizeInBytes; ) this.shift();
        this.head ? (this.tail && (this.tail.next = t3), this.tail = t3) : (this.head = t3, this.tail = t3), this.lengthInNodes++, this.sizeInBytes += t3.size;
      }
      shift() {
        if (!this.head) return;
        const e3 = this.head;
        this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e3.size;
      }
      toArray() {
        const e3 = [];
        let t3 = this.head;
        for (; t3 !== null; ) e3.push(t3.value), t3 = t3.next;
        return e3;
      }
      get length() {
        return this.lengthInNodes;
      }
      get size() {
        return this.sizeInBytes;
      }
      toOrderedArray() {
        return Array.from(this);
      }
      [Symbol.iterator]() {
        let e3 = this.head;
        return { next: () => {
          if (!e3) return { done: true, value: null };
          const t3 = e3.value;
          return e3 = e3.next, { done: false, value: t3 };
        } };
      }
    };
    L = class {
      constructor(e3, t3 = l3) {
        this.level = e3 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t3, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
      }
      forwardToConsole(e3, t3) {
        t3 === import_pino.levels.values.error ? console.error(e3) : t3 === import_pino.levels.values.warn ? console.warn(e3) : t3 === import_pino.levels.values.debug ? console.debug(e3) : t3 === import_pino.levels.values.trace ? console.trace(e3) : console.log(e3);
      }
      appendToLogs(e3) {
        this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e3 }));
        const t3 = typeof e3 == "string" ? JSON.parse(e3).level : e3.level;
        t3 >= this.levelValue && this.forwardToConsole(e3, t3);
      }
      getLogs() {
        return this.logs;
      }
      clearLogs() {
        this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
      }
      getLogArray() {
        return Array.from(this.logs);
      }
      logsToBlob(e3) {
        const t3 = this.getLogArray();
        return t3.push(safeJsonStringify({ extraMetadata: e3 })), new Blob(t3, { type: "application/json" });
      }
    };
    m = class {
      constructor(e3, t3 = l3) {
        this.baseChunkLogger = new L(e3, t3);
      }
      write(e3) {
        this.baseChunkLogger.appendToLogs(e3);
      }
      getLogs() {
        return this.baseChunkLogger.getLogs();
      }
      clearLogs() {
        this.baseChunkLogger.clearLogs();
      }
      getLogArray() {
        return this.baseChunkLogger.getLogArray();
      }
      logsToBlob(e3) {
        return this.baseChunkLogger.logsToBlob(e3);
      }
      downloadLogsBlobInBrowser(e3) {
        const t3 = URL.createObjectURL(this.logsToBlob(e3)), o4 = document.createElement("a");
        o4.href = t3, o4.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o4), o4.click(), document.body.removeChild(o4), URL.revokeObjectURL(t3);
      }
    };
    B = class {
      constructor(e3, t3 = l3) {
        this.baseChunkLogger = new L(e3, t3);
      }
      write(e3) {
        this.baseChunkLogger.appendToLogs(e3);
      }
      getLogs() {
        return this.baseChunkLogger.getLogs();
      }
      clearLogs() {
        this.baseChunkLogger.clearLogs();
      }
      getLogArray() {
        return this.baseChunkLogger.getLogArray();
      }
      logsToBlob(e3) {
        return this.baseChunkLogger.logsToBlob(e3);
      }
    };
    x2 = Object.defineProperty;
    S = Object.defineProperties;
    _2 = Object.getOwnPropertyDescriptors;
    p = Object.getOwnPropertySymbols;
    T2 = Object.prototype.hasOwnProperty;
    z2 = Object.prototype.propertyIsEnumerable;
    f = (r6, e3, t3) => e3 in r6 ? x2(r6, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : r6[e3] = t3;
    i2 = (r6, e3) => {
      for (var t3 in e3 || (e3 = {})) T2.call(e3, t3) && f(r6, t3, e3[t3]);
      if (p) for (var t3 of p(e3)) z2.call(e3, t3) && f(r6, t3, e3[t3]);
      return r6;
    };
    g = (r6, e3) => S(r6, _2(e3));
  }
});

// node_modules/@walletconnect/types/dist/index.es.js
var import_dist12, import_events4, n3, h3, a2, g2, u, p2, d2, x3, y3, v3, C2, S2, M;
var init_index_es4 = __esm({
  "node_modules/@walletconnect/types/dist/index.es.js"() {
    import_dist12 = __toESM(require_dist());
    init_esm();
    import_events4 = __toESM(require_events());
    n3 = class extends IEvents {
      constructor(s4) {
        super(), this.opts = s4, this.protocol = "wc", this.version = 2;
      }
    };
    h3 = class extends IEvents {
      constructor(s4, t3) {
        super(), this.core = s4, this.logger = t3, this.records = /* @__PURE__ */ new Map();
      }
    };
    a2 = class {
      constructor(s4, t3) {
        this.logger = s4, this.core = t3;
      }
    };
    g2 = class extends IEvents {
      constructor(s4, t3) {
        super(), this.relayer = s4, this.logger = t3;
      }
    };
    u = class extends IEvents {
      constructor(s4) {
        super();
      }
    };
    p2 = class {
      constructor(s4, t3, e3, f3) {
        this.core = s4, this.logger = t3, this.name = e3;
      }
    };
    d2 = class extends IEvents {
      constructor(s4, t3) {
        super(), this.relayer = s4, this.logger = t3;
      }
    };
    x3 = class extends IEvents {
      constructor(s4, t3) {
        super(), this.core = s4, this.logger = t3;
      }
    };
    y3 = class {
      constructor(s4, t3, e3) {
        this.core = s4, this.logger = t3, this.store = e3;
      }
    };
    v3 = class {
      constructor(s4, t3) {
        this.projectId = s4, this.logger = t3;
      }
    };
    C2 = class {
      constructor(s4, t3, e3) {
        this.core = s4, this.logger = t3, this.telemetryEnabled = e3;
      }
    };
    S2 = class {
      constructor(s4) {
        this.opts = s4, this.protocol = "wc", this.version = 2;
      }
    };
    M = class {
      constructor(s4) {
        this.client = s4;
      }
    };
  }
});

// node_modules/@stablelib/random/lib/source/browser.js
var require_browser2 = __commonJS({
  "node_modules/@stablelib/random/lib/source/browser.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserRandomSource = void 0;
    var QUOTA = 65536;
    var BrowserRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        const browserCrypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
        if (browserCrypto && browserCrypto.getRandomValues !== void 0) {
          this._crypto = browserCrypto;
          this.isAvailable = true;
          this.isInstantiated = true;
        }
      }
      randomBytes(length2) {
        if (!this.isAvailable || !this._crypto) {
          throw new Error("Browser random byte generator is not available.");
        }
        const out = new Uint8Array(length2);
        for (let i5 = 0; i5 < out.length; i5 += QUOTA) {
          this._crypto.getRandomValues(out.subarray(i5, i5 + Math.min(out.length - i5, QUOTA)));
        }
        return out;
      }
    };
    exports.BrowserRandomSource = BrowserRandomSource;
  }
});

// node_modules/@stablelib/wipe/lib/wipe.js
var require_wipe = __commonJS({
  "node_modules/@stablelib/wipe/lib/wipe.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    function wipe(array) {
      for (var i5 = 0; i5 < array.length; i5++) {
        array[i5] = 0;
      }
      return array;
    }
    exports.wipe = wipe;
  }
});

// node_modules/@stablelib/random/lib/source/node.js
var require_node = __commonJS({
  "node_modules/@stablelib/random/lib/source/node.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeRandomSource = void 0;
    var wipe_1 = require_wipe();
    var NodeRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        if (typeof __require !== "undefined") {
          const nodeCrypto = require_crypto_browserify();
          if (nodeCrypto && nodeCrypto.randomBytes) {
            this._crypto = nodeCrypto;
            this.isAvailable = true;
            this.isInstantiated = true;
          }
        }
      }
      randomBytes(length2) {
        if (!this.isAvailable || !this._crypto) {
          throw new Error("Node.js random byte generator is not available.");
        }
        let buffer2 = this._crypto.randomBytes(length2);
        if (buffer2.length !== length2) {
          throw new Error("NodeRandomSource: got fewer bytes than requested");
        }
        const out = new Uint8Array(length2);
        for (let i5 = 0; i5 < out.length; i5++) {
          out[i5] = buffer2[i5];
        }
        (0, wipe_1.wipe)(buffer2);
        return out;
      }
    };
    exports.NodeRandomSource = NodeRandomSource;
  }
});

// node_modules/@stablelib/random/lib/source/system.js
var require_system = __commonJS({
  "node_modules/@stablelib/random/lib/source/system.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SystemRandomSource = void 0;
    var browser_1 = require_browser2();
    var node_1 = require_node();
    var SystemRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.name = "";
        this._source = new browser_1.BrowserRandomSource();
        if (this._source.isAvailable) {
          this.isAvailable = true;
          this.name = "Browser";
          return;
        }
        this._source = new node_1.NodeRandomSource();
        if (this._source.isAvailable) {
          this.isAvailable = true;
          this.name = "Node";
          return;
        }
      }
      randomBytes(length2) {
        if (!this.isAvailable) {
          throw new Error("System random byte generator is not available.");
        }
        return this._source.randomBytes(length2);
      }
    };
    exports.SystemRandomSource = SystemRandomSource;
  }
});

// node_modules/@stablelib/int/lib/int.js
var require_int = __commonJS({
  "node_modules/@stablelib/int/lib/int.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    function imulShim(a6, b4) {
      var ah = a6 >>> 16 & 65535, al = a6 & 65535;
      var bh = b4 >>> 16 & 65535, bl = b4 & 65535;
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    }
    exports.mul = Math.imul || imulShim;
    function add3(a6, b4) {
      return a6 + b4 | 0;
    }
    exports.add = add3;
    function sub(a6, b4) {
      return a6 - b4 | 0;
    }
    exports.sub = sub;
    function rotl(x6, n7) {
      return x6 << n7 | x6 >>> 32 - n7;
    }
    exports.rotl = rotl;
    function rotr(x6, n7) {
      return x6 << 32 - n7 | x6 >>> n7;
    }
    exports.rotr = rotr;
    function isIntegerShim(n7) {
      return typeof n7 === "number" && isFinite(n7) && Math.floor(n7) === n7;
    }
    exports.isInteger = Number.isInteger || isIntegerShim;
    exports.MAX_SAFE_INTEGER = 9007199254740991;
    exports.isSafeInteger = function(n7) {
      return exports.isInteger(n7) && (n7 >= -exports.MAX_SAFE_INTEGER && n7 <= exports.MAX_SAFE_INTEGER);
    };
  }
});

// node_modules/@stablelib/binary/lib/binary.js
var require_binary = __commonJS({
  "node_modules/@stablelib/binary/lib/binary.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var int_1 = require_int();
    function readInt16BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 0] << 8 | array[offset + 1]) << 16 >> 16;
    }
    exports.readInt16BE = readInt16BE;
    function readUint16BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 0] << 8 | array[offset + 1]) >>> 0;
    }
    exports.readUint16BE = readUint16BE;
    function readInt16LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 1] << 8 | array[offset]) << 16 >> 16;
    }
    exports.readInt16LE = readInt16LE;
    function readUint16LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 1] << 8 | array[offset]) >>> 0;
    }
    exports.readUint16LE = readUint16LE;
    function writeUint16BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(2);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 8;
      out[offset + 1] = value >>> 0;
      return out;
    }
    exports.writeUint16BE = writeUint16BE;
    exports.writeInt16BE = writeUint16BE;
    function writeUint16LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(2);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 0;
      out[offset + 1] = value >>> 8;
      return out;
    }
    exports.writeUint16LE = writeUint16LE;
    exports.writeInt16LE = writeUint16LE;
    function readInt32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];
    }
    exports.readInt32BE = readInt32BE;
    function readUint32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;
    }
    exports.readUint32BE = readUint32BE;
    function readInt32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset];
    }
    exports.readInt32LE = readInt32LE;
    function readUint32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset]) >>> 0;
    }
    exports.readUint32LE = readUint32LE;
    function writeUint32BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 24;
      out[offset + 1] = value >>> 16;
      out[offset + 2] = value >>> 8;
      out[offset + 3] = value >>> 0;
      return out;
    }
    exports.writeUint32BE = writeUint32BE;
    exports.writeInt32BE = writeUint32BE;
    function writeUint32LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 0;
      out[offset + 1] = value >>> 8;
      out[offset + 2] = value >>> 16;
      out[offset + 3] = value >>> 24;
      return out;
    }
    exports.writeUint32LE = writeUint32LE;
    exports.writeInt32LE = writeUint32LE;
    function readInt64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var hi2 = readInt32BE(array, offset);
      var lo2 = readInt32BE(array, offset + 4);
      return hi2 * 4294967296 + lo2 - (lo2 >> 31) * 4294967296;
    }
    exports.readInt64BE = readInt64BE;
    function readUint64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var hi2 = readUint32BE(array, offset);
      var lo2 = readUint32BE(array, offset + 4);
      return hi2 * 4294967296 + lo2;
    }
    exports.readUint64BE = readUint64BE;
    function readInt64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var lo2 = readInt32LE(array, offset);
      var hi2 = readInt32LE(array, offset + 4);
      return hi2 * 4294967296 + lo2 - (lo2 >> 31) * 4294967296;
    }
    exports.readInt64LE = readInt64LE;
    function readUint64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var lo2 = readUint32LE(array, offset);
      var hi2 = readUint32LE(array, offset + 4);
      return hi2 * 4294967296 + lo2;
    }
    exports.readUint64LE = readUint64LE;
    function writeUint64BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      writeUint32BE(value / 4294967296 >>> 0, out, offset);
      writeUint32BE(value >>> 0, out, offset + 4);
      return out;
    }
    exports.writeUint64BE = writeUint64BE;
    exports.writeInt64BE = writeUint64BE;
    function writeUint64LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      writeUint32LE(value >>> 0, out, offset);
      writeUint32LE(value / 4294967296 >>> 0, out, offset + 4);
      return out;
    }
    exports.writeUint64LE = writeUint64LE;
    exports.writeInt64LE = writeUint64LE;
    function readUintBE(bitLength, array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("readUintBE supports only bitLengths divisible by 8");
      }
      if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintBE: array is too short for the given bitLength");
      }
      var result = 0;
      var mul3 = 1;
      for (var i5 = bitLength / 8 + offset - 1; i5 >= offset; i5--) {
        result += array[i5] * mul3;
        mul3 *= 256;
      }
      return result;
    }
    exports.readUintBE = readUintBE;
    function readUintLE(bitLength, array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("readUintLE supports only bitLengths divisible by 8");
      }
      if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintLE: array is too short for the given bitLength");
      }
      var result = 0;
      var mul3 = 1;
      for (var i5 = offset; i5 < offset + bitLength / 8; i5++) {
        result += array[i5] * mul3;
        mul3 *= 256;
      }
      return result;
    }
    exports.readUintLE = readUintLE;
    function writeUintBE(bitLength, value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("writeUintBE supports only bitLengths divisible by 8");
      }
      if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintBE value must be an integer");
      }
      var div = 1;
      for (var i5 = bitLength / 8 + offset - 1; i5 >= offset; i5--) {
        out[i5] = value / div & 255;
        div *= 256;
      }
      return out;
    }
    exports.writeUintBE = writeUintBE;
    function writeUintLE(bitLength, value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("writeUintLE supports only bitLengths divisible by 8");
      }
      if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintLE value must be an integer");
      }
      var div = 1;
      for (var i5 = offset; i5 < offset + bitLength / 8; i5++) {
        out[i5] = value / div & 255;
        div *= 256;
      }
      return out;
    }
    exports.writeUintLE = writeUintLE;
    function readFloat32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat32(offset);
    }
    exports.readFloat32BE = readFloat32BE;
    function readFloat32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat32(offset, true);
    }
    exports.readFloat32LE = readFloat32LE;
    function readFloat64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat64(offset);
    }
    exports.readFloat64BE = readFloat64BE;
    function readFloat64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat64(offset, true);
    }
    exports.readFloat64LE = readFloat64LE;
    function writeFloat32BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat32(offset, value);
      return out;
    }
    exports.writeFloat32BE = writeFloat32BE;
    function writeFloat32LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat32(offset, value, true);
      return out;
    }
    exports.writeFloat32LE = writeFloat32LE;
    function writeFloat64BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat64(offset, value);
      return out;
    }
    exports.writeFloat64BE = writeFloat64BE;
    function writeFloat64LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat64(offset, value, true);
      return out;
    }
    exports.writeFloat64LE = writeFloat64LE;
  }
});

// node_modules/@stablelib/random/lib/random.js
var require_random = __commonJS({
  "node_modules/@stablelib/random/lib/random.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;
    var system_1 = require_system();
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    exports.defaultRandomSource = new system_1.SystemRandomSource();
    function randomBytes2(length2, prng = exports.defaultRandomSource) {
      return prng.randomBytes(length2);
    }
    exports.randomBytes = randomBytes2;
    function randomUint32(prng = exports.defaultRandomSource) {
      const buf = randomBytes2(4, prng);
      const result = (0, binary_1.readUint32LE)(buf);
      (0, wipe_1.wipe)(buf);
      return result;
    }
    exports.randomUint32 = randomUint32;
    var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    function randomString(length2, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      if (charset.length < 2) {
        throw new Error("randomString charset is too short");
      }
      if (charset.length > 256) {
        throw new Error("randomString charset is too long");
      }
      let out = "";
      const charsLen = charset.length;
      const maxByte = 256 - 256 % charsLen;
      while (length2 > 0) {
        const buf = randomBytes2(Math.ceil(length2 * 256 / maxByte), prng);
        for (let i5 = 0; i5 < buf.length && length2 > 0; i5++) {
          const randomByte = buf[i5];
          if (randomByte < maxByte) {
            out += charset.charAt(randomByte % charsLen);
            length2--;
          }
        }
        (0, wipe_1.wipe)(buf);
      }
      return out;
    }
    exports.randomString = randomString;
    function randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      const length2 = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
      return randomString(length2, charset, prng);
    }
    exports.randomStringForEntropy = randomStringForEntropy;
  }
});

// node_modules/@stablelib/sha512/lib/sha512.js
var require_sha512 = __commonJS({
  "node_modules/@stablelib/sha512/lib/sha512.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    exports.DIGEST_LENGTH = 64;
    exports.BLOCK_SIZE = 128;
    var SHA512 = (
      /** @class */
      function() {
        function SHA5122() {
          this.digestLength = exports.DIGEST_LENGTH;
          this.blockSize = exports.BLOCK_SIZE;
          this._stateHi = new Int32Array(8);
          this._stateLo = new Int32Array(8);
          this._tempHi = new Int32Array(16);
          this._tempLo = new Int32Array(16);
          this._buffer = new Uint8Array(256);
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          this.reset();
        }
        SHA5122.prototype._initState = function() {
          this._stateHi[0] = 1779033703;
          this._stateHi[1] = 3144134277;
          this._stateHi[2] = 1013904242;
          this._stateHi[3] = 2773480762;
          this._stateHi[4] = 1359893119;
          this._stateHi[5] = 2600822924;
          this._stateHi[6] = 528734635;
          this._stateHi[7] = 1541459225;
          this._stateLo[0] = 4089235720;
          this._stateLo[1] = 2227873595;
          this._stateLo[2] = 4271175723;
          this._stateLo[3] = 1595750129;
          this._stateLo[4] = 2917565137;
          this._stateLo[5] = 725511199;
          this._stateLo[6] = 4215389547;
          this._stateLo[7] = 327033209;
        };
        SHA5122.prototype.reset = function() {
          this._initState();
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          return this;
        };
        SHA5122.prototype.clean = function() {
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._tempHi);
          wipe_1.wipe(this._tempLo);
          this.reset();
        };
        SHA5122.prototype.update = function(data, dataLength) {
          if (dataLength === void 0) {
            dataLength = data.length;
          }
          if (this._finished) {
            throw new Error("SHA512: can't update because hash was finished.");
          }
          var dataPos = 0;
          this._bytesHashed += dataLength;
          if (this._bufferLength > 0) {
            while (this._bufferLength < exports.BLOCK_SIZE && dataLength > 0) {
              this._buffer[this._bufferLength++] = data[dataPos++];
              dataLength--;
            }
            if (this._bufferLength === this.blockSize) {
              hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);
              this._bufferLength = 0;
            }
          }
          if (dataLength >= this.blockSize) {
            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);
            dataLength %= this.blockSize;
          }
          while (dataLength > 0) {
            this._buffer[this._bufferLength++] = data[dataPos++];
            dataLength--;
          }
          return this;
        };
        SHA5122.prototype.finish = function(out) {
          if (!this._finished) {
            var bytesHashed = this._bytesHashed;
            var left = this._bufferLength;
            var bitLenHi = bytesHashed / 536870912 | 0;
            var bitLenLo = bytesHashed << 3;
            var padLength = bytesHashed % 128 < 112 ? 128 : 256;
            this._buffer[left] = 128;
            for (var i5 = left + 1; i5 < padLength - 8; i5++) {
              this._buffer[i5] = 0;
            }
            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);
            this._finished = true;
          }
          for (var i5 = 0; i5 < this.digestLength / 8; i5++) {
            binary_1.writeUint32BE(this._stateHi[i5], out, i5 * 8);
            binary_1.writeUint32BE(this._stateLo[i5], out, i5 * 8 + 4);
          }
          return this;
        };
        SHA5122.prototype.digest = function() {
          var out = new Uint8Array(this.digestLength);
          this.finish(out);
          return out;
        };
        SHA5122.prototype.saveState = function() {
          if (this._finished) {
            throw new Error("SHA256: cannot save finished state");
          }
          return {
            stateHi: new Int32Array(this._stateHi),
            stateLo: new Int32Array(this._stateLo),
            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
            bufferLength: this._bufferLength,
            bytesHashed: this._bytesHashed
          };
        };
        SHA5122.prototype.restoreState = function(savedState) {
          this._stateHi.set(savedState.stateHi);
          this._stateLo.set(savedState.stateLo);
          this._bufferLength = savedState.bufferLength;
          if (savedState.buffer) {
            this._buffer.set(savedState.buffer);
          }
          this._bytesHashed = savedState.bytesHashed;
          this._finished = false;
          return this;
        };
        SHA5122.prototype.cleanSavedState = function(savedState) {
          wipe_1.wipe(savedState.stateHi);
          wipe_1.wipe(savedState.stateLo);
          if (savedState.buffer) {
            wipe_1.wipe(savedState.buffer);
          }
          savedState.bufferLength = 0;
          savedState.bytesHashed = 0;
        };
        return SHA5122;
      }()
    );
    exports.SHA512 = SHA512;
    var K4 = new Int32Array([
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ]);
    function hashBlocks(wh, wl, hh, hl, m5, pos, len) {
      var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
      var h6, l6;
      var th, tl;
      var a6, b4, c5, d4;
      while (len >= 128) {
        for (var i5 = 0; i5 < 16; i5++) {
          var j3 = 8 * i5 + pos;
          wh[i5] = binary_1.readUint32BE(m5, j3);
          wl[i5] = binary_1.readUint32BE(m5, j3 + 4);
        }
        for (var i5 = 0; i5 < 80; i5++) {
          var bh0 = ah0;
          var bh1 = ah1;
          var bh2 = ah2;
          var bh3 = ah3;
          var bh4 = ah4;
          var bh5 = ah5;
          var bh6 = ah6;
          var bh7 = ah7;
          var bl0 = al0;
          var bl1 = al1;
          var bl2 = al2;
          var bl3 = al3;
          var bl4 = al4;
          var bl5 = al5;
          var bl6 = al6;
          var bl7 = al7;
          h6 = ah7;
          l6 = al7;
          a6 = l6 & 65535;
          b4 = l6 >>> 16;
          c5 = h6 & 65535;
          d4 = h6 >>> 16;
          h6 = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
          l6 = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
          a6 += l6 & 65535;
          b4 += l6 >>> 16;
          c5 += h6 & 65535;
          d4 += h6 >>> 16;
          h6 = ah4 & ah5 ^ ~ah4 & ah6;
          l6 = al4 & al5 ^ ~al4 & al6;
          a6 += l6 & 65535;
          b4 += l6 >>> 16;
          c5 += h6 & 65535;
          d4 += h6 >>> 16;
          h6 = K4[i5 * 2];
          l6 = K4[i5 * 2 + 1];
          a6 += l6 & 65535;
          b4 += l6 >>> 16;
          c5 += h6 & 65535;
          d4 += h6 >>> 16;
          h6 = wh[i5 % 16];
          l6 = wl[i5 % 16];
          a6 += l6 & 65535;
          b4 += l6 >>> 16;
          c5 += h6 & 65535;
          d4 += h6 >>> 16;
          b4 += a6 >>> 16;
          c5 += b4 >>> 16;
          d4 += c5 >>> 16;
          th = c5 & 65535 | d4 << 16;
          tl = a6 & 65535 | b4 << 16;
          h6 = th;
          l6 = tl;
          a6 = l6 & 65535;
          b4 = l6 >>> 16;
          c5 = h6 & 65535;
          d4 = h6 >>> 16;
          h6 = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
          l6 = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
          a6 += l6 & 65535;
          b4 += l6 >>> 16;
          c5 += h6 & 65535;
          d4 += h6 >>> 16;
          h6 = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
          l6 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
          a6 += l6 & 65535;
          b4 += l6 >>> 16;
          c5 += h6 & 65535;
          d4 += h6 >>> 16;
          b4 += a6 >>> 16;
          c5 += b4 >>> 16;
          d4 += c5 >>> 16;
          bh7 = c5 & 65535 | d4 << 16;
          bl7 = a6 & 65535 | b4 << 16;
          h6 = bh3;
          l6 = bl3;
          a6 = l6 & 65535;
          b4 = l6 >>> 16;
          c5 = h6 & 65535;
          d4 = h6 >>> 16;
          h6 = th;
          l6 = tl;
          a6 += l6 & 65535;
          b4 += l6 >>> 16;
          c5 += h6 & 65535;
          d4 += h6 >>> 16;
          b4 += a6 >>> 16;
          c5 += b4 >>> 16;
          d4 += c5 >>> 16;
          bh3 = c5 & 65535 | d4 << 16;
          bl3 = a6 & 65535 | b4 << 16;
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
          if (i5 % 16 === 15) {
            for (var j3 = 0; j3 < 16; j3++) {
              h6 = wh[j3];
              l6 = wl[j3];
              a6 = l6 & 65535;
              b4 = l6 >>> 16;
              c5 = h6 & 65535;
              d4 = h6 >>> 16;
              h6 = wh[(j3 + 9) % 16];
              l6 = wl[(j3 + 9) % 16];
              a6 += l6 & 65535;
              b4 += l6 >>> 16;
              c5 += h6 & 65535;
              d4 += h6 >>> 16;
              th = wh[(j3 + 1) % 16];
              tl = wl[(j3 + 1) % 16];
              h6 = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
              l6 = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
              a6 += l6 & 65535;
              b4 += l6 >>> 16;
              c5 += h6 & 65535;
              d4 += h6 >>> 16;
              th = wh[(j3 + 14) % 16];
              tl = wl[(j3 + 14) % 16];
              h6 = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
              l6 = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
              a6 += l6 & 65535;
              b4 += l6 >>> 16;
              c5 += h6 & 65535;
              d4 += h6 >>> 16;
              b4 += a6 >>> 16;
              c5 += b4 >>> 16;
              d4 += c5 >>> 16;
              wh[j3] = c5 & 65535 | d4 << 16;
              wl[j3] = a6 & 65535 | b4 << 16;
            }
          }
        }
        h6 = ah0;
        l6 = al0;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[0];
        l6 = hl[0];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[0] = ah0 = c5 & 65535 | d4 << 16;
        hl[0] = al0 = a6 & 65535 | b4 << 16;
        h6 = ah1;
        l6 = al1;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[1];
        l6 = hl[1];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[1] = ah1 = c5 & 65535 | d4 << 16;
        hl[1] = al1 = a6 & 65535 | b4 << 16;
        h6 = ah2;
        l6 = al2;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[2];
        l6 = hl[2];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[2] = ah2 = c5 & 65535 | d4 << 16;
        hl[2] = al2 = a6 & 65535 | b4 << 16;
        h6 = ah3;
        l6 = al3;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[3];
        l6 = hl[3];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[3] = ah3 = c5 & 65535 | d4 << 16;
        hl[3] = al3 = a6 & 65535 | b4 << 16;
        h6 = ah4;
        l6 = al4;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[4];
        l6 = hl[4];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[4] = ah4 = c5 & 65535 | d4 << 16;
        hl[4] = al4 = a6 & 65535 | b4 << 16;
        h6 = ah5;
        l6 = al5;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[5];
        l6 = hl[5];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[5] = ah5 = c5 & 65535 | d4 << 16;
        hl[5] = al5 = a6 & 65535 | b4 << 16;
        h6 = ah6;
        l6 = al6;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[6];
        l6 = hl[6];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[6] = ah6 = c5 & 65535 | d4 << 16;
        hl[6] = al6 = a6 & 65535 | b4 << 16;
        h6 = ah7;
        l6 = al7;
        a6 = l6 & 65535;
        b4 = l6 >>> 16;
        c5 = h6 & 65535;
        d4 = h6 >>> 16;
        h6 = hh[7];
        l6 = hl[7];
        a6 += l6 & 65535;
        b4 += l6 >>> 16;
        c5 += h6 & 65535;
        d4 += h6 >>> 16;
        b4 += a6 >>> 16;
        c5 += b4 >>> 16;
        d4 += c5 >>> 16;
        hh[7] = ah7 = c5 & 65535 | d4 << 16;
        hl[7] = al7 = a6 & 65535 | b4 << 16;
        pos += 128;
        len -= 128;
      }
      return pos;
    }
    function hash2(data) {
      var h6 = new SHA512();
      h6.update(data);
      var digest2 = h6.digest();
      h6.clean();
      return digest2;
    }
    exports.hash = hash2;
  }
});

// node_modules/@stablelib/ed25519/lib/ed25519.js
var require_ed25519 = __commonJS({
  "node_modules/@stablelib/ed25519/lib/ed25519.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertSecretKeyToX25519 = exports.convertPublicKeyToX25519 = exports.verify = exports.sign = exports.extractPublicKeyFromSecretKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.SEED_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.SIGNATURE_LENGTH = void 0;
    var random_1 = require_random();
    var sha512_1 = require_sha512();
    var wipe_1 = require_wipe();
    exports.SIGNATURE_LENGTH = 64;
    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 64;
    exports.SEED_LENGTH = 32;
    function gf(init2) {
      const r6 = new Float64Array(16);
      if (init2) {
        for (let i5 = 0; i5 < init2.length; i5++) {
          r6[i5] = init2[i5];
        }
      }
      return r6;
    }
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf();
    var gf1 = gf([1]);
    var D4 = gf([
      30883,
      4953,
      19914,
      30187,
      55467,
      16705,
      2637,
      112,
      59544,
      30585,
      16505,
      36039,
      65139,
      11119,
      27886,
      20995
    ]);
    var D22 = gf([
      61785,
      9906,
      39828,
      60374,
      45398,
      33411,
      5274,
      224,
      53552,
      61171,
      33010,
      6542,
      64743,
      22239,
      55772,
      9222
    ]);
    var X3 = gf([
      54554,
      36645,
      11616,
      51542,
      42930,
      38181,
      51040,
      26924,
      56412,
      64982,
      57905,
      49316,
      21502,
      52590,
      14035,
      8553
    ]);
    var Y2 = gf([
      26200,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214
    ]);
    var I5 = gf([
      41136,
      18958,
      6951,
      50414,
      58488,
      44335,
      6150,
      12099,
      55207,
      15867,
      153,
      11085,
      57099,
      20417,
      9344,
      11139
    ]);
    function set25519(r6, a6) {
      for (let i5 = 0; i5 < 16; i5++) {
        r6[i5] = a6[i5] | 0;
      }
    }
    function car25519(o4) {
      let c5 = 1;
      for (let i5 = 0; i5 < 16; i5++) {
        let v8 = o4[i5] + c5 + 65535;
        c5 = Math.floor(v8 / 65536);
        o4[i5] = v8 - c5 * 65536;
      }
      o4[0] += c5 - 1 + 37 * (c5 - 1);
    }
    function sel25519(p5, q2, b4) {
      const c5 = ~(b4 - 1);
      for (let i5 = 0; i5 < 16; i5++) {
        const t3 = c5 & (p5[i5] ^ q2[i5]);
        p5[i5] ^= t3;
        q2[i5] ^= t3;
      }
    }
    function pack25519(o4, n7) {
      const m5 = gf();
      const t3 = gf();
      for (let i5 = 0; i5 < 16; i5++) {
        t3[i5] = n7[i5];
      }
      car25519(t3);
      car25519(t3);
      car25519(t3);
      for (let j3 = 0; j3 < 2; j3++) {
        m5[0] = t3[0] - 65517;
        for (let i5 = 1; i5 < 15; i5++) {
          m5[i5] = t3[i5] - 65535 - (m5[i5 - 1] >> 16 & 1);
          m5[i5 - 1] &= 65535;
        }
        m5[15] = t3[15] - 32767 - (m5[14] >> 16 & 1);
        const b4 = m5[15] >> 16 & 1;
        m5[14] &= 65535;
        sel25519(t3, m5, 1 - b4);
      }
      for (let i5 = 0; i5 < 16; i5++) {
        o4[2 * i5] = t3[i5] & 255;
        o4[2 * i5 + 1] = t3[i5] >> 8;
      }
    }
    function verify32(x6, y5) {
      let d4 = 0;
      for (let i5 = 0; i5 < 32; i5++) {
        d4 |= x6[i5] ^ y5[i5];
      }
      return (1 & d4 - 1 >>> 8) - 1;
    }
    function neq25519(a6, b4) {
      const c5 = new Uint8Array(32);
      const d4 = new Uint8Array(32);
      pack25519(c5, a6);
      pack25519(d4, b4);
      return verify32(c5, d4);
    }
    function par25519(a6) {
      const d4 = new Uint8Array(32);
      pack25519(d4, a6);
      return d4[0] & 1;
    }
    function unpack25519(o4, n7) {
      for (let i5 = 0; i5 < 16; i5++) {
        o4[i5] = n7[2 * i5] + (n7[2 * i5 + 1] << 8);
      }
      o4[15] &= 32767;
    }
    function add3(o4, a6, b4) {
      for (let i5 = 0; i5 < 16; i5++) {
        o4[i5] = a6[i5] + b4[i5];
      }
    }
    function sub(o4, a6, b4) {
      for (let i5 = 0; i5 < 16; i5++) {
        o4[i5] = a6[i5] - b4[i5];
      }
    }
    function mul3(o4, a6, b4) {
      let v8, c5, t0 = 0, t1 = 0, t22 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t222 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b4[0], b1 = b4[1], b22 = b4[2], b32 = b4[3], b42 = b4[4], b5 = b4[5], b6 = b4[6], b7 = b4[7], b8 = b4[8], b9 = b4[9], b10 = b4[10], b11 = b4[11], b12 = b4[12], b13 = b4[13], b14 = b4[14], b15 = b4[15];
      v8 = a6[0];
      t0 += v8 * b0;
      t1 += v8 * b1;
      t22 += v8 * b22;
      t3 += v8 * b32;
      t4 += v8 * b42;
      t5 += v8 * b5;
      t6 += v8 * b6;
      t7 += v8 * b7;
      t8 += v8 * b8;
      t9 += v8 * b9;
      t10 += v8 * b10;
      t11 += v8 * b11;
      t12 += v8 * b12;
      t13 += v8 * b13;
      t14 += v8 * b14;
      t15 += v8 * b15;
      v8 = a6[1];
      t1 += v8 * b0;
      t22 += v8 * b1;
      t3 += v8 * b22;
      t4 += v8 * b32;
      t5 += v8 * b42;
      t6 += v8 * b5;
      t7 += v8 * b6;
      t8 += v8 * b7;
      t9 += v8 * b8;
      t10 += v8 * b9;
      t11 += v8 * b10;
      t12 += v8 * b11;
      t13 += v8 * b12;
      t14 += v8 * b13;
      t15 += v8 * b14;
      t16 += v8 * b15;
      v8 = a6[2];
      t22 += v8 * b0;
      t3 += v8 * b1;
      t4 += v8 * b22;
      t5 += v8 * b32;
      t6 += v8 * b42;
      t7 += v8 * b5;
      t8 += v8 * b6;
      t9 += v8 * b7;
      t10 += v8 * b8;
      t11 += v8 * b9;
      t12 += v8 * b10;
      t13 += v8 * b11;
      t14 += v8 * b12;
      t15 += v8 * b13;
      t16 += v8 * b14;
      t17 += v8 * b15;
      v8 = a6[3];
      t3 += v8 * b0;
      t4 += v8 * b1;
      t5 += v8 * b22;
      t6 += v8 * b32;
      t7 += v8 * b42;
      t8 += v8 * b5;
      t9 += v8 * b6;
      t10 += v8 * b7;
      t11 += v8 * b8;
      t12 += v8 * b9;
      t13 += v8 * b10;
      t14 += v8 * b11;
      t15 += v8 * b12;
      t16 += v8 * b13;
      t17 += v8 * b14;
      t18 += v8 * b15;
      v8 = a6[4];
      t4 += v8 * b0;
      t5 += v8 * b1;
      t6 += v8 * b22;
      t7 += v8 * b32;
      t8 += v8 * b42;
      t9 += v8 * b5;
      t10 += v8 * b6;
      t11 += v8 * b7;
      t12 += v8 * b8;
      t13 += v8 * b9;
      t14 += v8 * b10;
      t15 += v8 * b11;
      t16 += v8 * b12;
      t17 += v8 * b13;
      t18 += v8 * b14;
      t19 += v8 * b15;
      v8 = a6[5];
      t5 += v8 * b0;
      t6 += v8 * b1;
      t7 += v8 * b22;
      t8 += v8 * b32;
      t9 += v8 * b42;
      t10 += v8 * b5;
      t11 += v8 * b6;
      t12 += v8 * b7;
      t13 += v8 * b8;
      t14 += v8 * b9;
      t15 += v8 * b10;
      t16 += v8 * b11;
      t17 += v8 * b12;
      t18 += v8 * b13;
      t19 += v8 * b14;
      t20 += v8 * b15;
      v8 = a6[6];
      t6 += v8 * b0;
      t7 += v8 * b1;
      t8 += v8 * b22;
      t9 += v8 * b32;
      t10 += v8 * b42;
      t11 += v8 * b5;
      t12 += v8 * b6;
      t13 += v8 * b7;
      t14 += v8 * b8;
      t15 += v8 * b9;
      t16 += v8 * b10;
      t17 += v8 * b11;
      t18 += v8 * b12;
      t19 += v8 * b13;
      t20 += v8 * b14;
      t21 += v8 * b15;
      v8 = a6[7];
      t7 += v8 * b0;
      t8 += v8 * b1;
      t9 += v8 * b22;
      t10 += v8 * b32;
      t11 += v8 * b42;
      t12 += v8 * b5;
      t13 += v8 * b6;
      t14 += v8 * b7;
      t15 += v8 * b8;
      t16 += v8 * b9;
      t17 += v8 * b10;
      t18 += v8 * b11;
      t19 += v8 * b12;
      t20 += v8 * b13;
      t21 += v8 * b14;
      t222 += v8 * b15;
      v8 = a6[8];
      t8 += v8 * b0;
      t9 += v8 * b1;
      t10 += v8 * b22;
      t11 += v8 * b32;
      t12 += v8 * b42;
      t13 += v8 * b5;
      t14 += v8 * b6;
      t15 += v8 * b7;
      t16 += v8 * b8;
      t17 += v8 * b9;
      t18 += v8 * b10;
      t19 += v8 * b11;
      t20 += v8 * b12;
      t21 += v8 * b13;
      t222 += v8 * b14;
      t23 += v8 * b15;
      v8 = a6[9];
      t9 += v8 * b0;
      t10 += v8 * b1;
      t11 += v8 * b22;
      t12 += v8 * b32;
      t13 += v8 * b42;
      t14 += v8 * b5;
      t15 += v8 * b6;
      t16 += v8 * b7;
      t17 += v8 * b8;
      t18 += v8 * b9;
      t19 += v8 * b10;
      t20 += v8 * b11;
      t21 += v8 * b12;
      t222 += v8 * b13;
      t23 += v8 * b14;
      t24 += v8 * b15;
      v8 = a6[10];
      t10 += v8 * b0;
      t11 += v8 * b1;
      t12 += v8 * b22;
      t13 += v8 * b32;
      t14 += v8 * b42;
      t15 += v8 * b5;
      t16 += v8 * b6;
      t17 += v8 * b7;
      t18 += v8 * b8;
      t19 += v8 * b9;
      t20 += v8 * b10;
      t21 += v8 * b11;
      t222 += v8 * b12;
      t23 += v8 * b13;
      t24 += v8 * b14;
      t25 += v8 * b15;
      v8 = a6[11];
      t11 += v8 * b0;
      t12 += v8 * b1;
      t13 += v8 * b22;
      t14 += v8 * b32;
      t15 += v8 * b42;
      t16 += v8 * b5;
      t17 += v8 * b6;
      t18 += v8 * b7;
      t19 += v8 * b8;
      t20 += v8 * b9;
      t21 += v8 * b10;
      t222 += v8 * b11;
      t23 += v8 * b12;
      t24 += v8 * b13;
      t25 += v8 * b14;
      t26 += v8 * b15;
      v8 = a6[12];
      t12 += v8 * b0;
      t13 += v8 * b1;
      t14 += v8 * b22;
      t15 += v8 * b32;
      t16 += v8 * b42;
      t17 += v8 * b5;
      t18 += v8 * b6;
      t19 += v8 * b7;
      t20 += v8 * b8;
      t21 += v8 * b9;
      t222 += v8 * b10;
      t23 += v8 * b11;
      t24 += v8 * b12;
      t25 += v8 * b13;
      t26 += v8 * b14;
      t27 += v8 * b15;
      v8 = a6[13];
      t13 += v8 * b0;
      t14 += v8 * b1;
      t15 += v8 * b22;
      t16 += v8 * b32;
      t17 += v8 * b42;
      t18 += v8 * b5;
      t19 += v8 * b6;
      t20 += v8 * b7;
      t21 += v8 * b8;
      t222 += v8 * b9;
      t23 += v8 * b10;
      t24 += v8 * b11;
      t25 += v8 * b12;
      t26 += v8 * b13;
      t27 += v8 * b14;
      t28 += v8 * b15;
      v8 = a6[14];
      t14 += v8 * b0;
      t15 += v8 * b1;
      t16 += v8 * b22;
      t17 += v8 * b32;
      t18 += v8 * b42;
      t19 += v8 * b5;
      t20 += v8 * b6;
      t21 += v8 * b7;
      t222 += v8 * b8;
      t23 += v8 * b9;
      t24 += v8 * b10;
      t25 += v8 * b11;
      t26 += v8 * b12;
      t27 += v8 * b13;
      t28 += v8 * b14;
      t29 += v8 * b15;
      v8 = a6[15];
      t15 += v8 * b0;
      t16 += v8 * b1;
      t17 += v8 * b22;
      t18 += v8 * b32;
      t19 += v8 * b42;
      t20 += v8 * b5;
      t21 += v8 * b6;
      t222 += v8 * b7;
      t23 += v8 * b8;
      t24 += v8 * b9;
      t25 += v8 * b10;
      t26 += v8 * b11;
      t27 += v8 * b12;
      t28 += v8 * b13;
      t29 += v8 * b14;
      t30 += v8 * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t22 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t222;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c5 = 1;
      v8 = t0 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t0 = v8 - c5 * 65536;
      v8 = t1 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t1 = v8 - c5 * 65536;
      v8 = t22 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t22 = v8 - c5 * 65536;
      v8 = t3 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t3 = v8 - c5 * 65536;
      v8 = t4 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t4 = v8 - c5 * 65536;
      v8 = t5 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t5 = v8 - c5 * 65536;
      v8 = t6 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t6 = v8 - c5 * 65536;
      v8 = t7 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t7 = v8 - c5 * 65536;
      v8 = t8 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t8 = v8 - c5 * 65536;
      v8 = t9 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t9 = v8 - c5 * 65536;
      v8 = t10 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t10 = v8 - c5 * 65536;
      v8 = t11 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t11 = v8 - c5 * 65536;
      v8 = t12 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t12 = v8 - c5 * 65536;
      v8 = t13 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t13 = v8 - c5 * 65536;
      v8 = t14 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t14 = v8 - c5 * 65536;
      v8 = t15 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t15 = v8 - c5 * 65536;
      t0 += c5 - 1 + 37 * (c5 - 1);
      c5 = 1;
      v8 = t0 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t0 = v8 - c5 * 65536;
      v8 = t1 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t1 = v8 - c5 * 65536;
      v8 = t22 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t22 = v8 - c5 * 65536;
      v8 = t3 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t3 = v8 - c5 * 65536;
      v8 = t4 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t4 = v8 - c5 * 65536;
      v8 = t5 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t5 = v8 - c5 * 65536;
      v8 = t6 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t6 = v8 - c5 * 65536;
      v8 = t7 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t7 = v8 - c5 * 65536;
      v8 = t8 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t8 = v8 - c5 * 65536;
      v8 = t9 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t9 = v8 - c5 * 65536;
      v8 = t10 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t10 = v8 - c5 * 65536;
      v8 = t11 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t11 = v8 - c5 * 65536;
      v8 = t12 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t12 = v8 - c5 * 65536;
      v8 = t13 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t13 = v8 - c5 * 65536;
      v8 = t14 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t14 = v8 - c5 * 65536;
      v8 = t15 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t15 = v8 - c5 * 65536;
      t0 += c5 - 1 + 37 * (c5 - 1);
      o4[0] = t0;
      o4[1] = t1;
      o4[2] = t22;
      o4[3] = t3;
      o4[4] = t4;
      o4[5] = t5;
      o4[6] = t6;
      o4[7] = t7;
      o4[8] = t8;
      o4[9] = t9;
      o4[10] = t10;
      o4[11] = t11;
      o4[12] = t12;
      o4[13] = t13;
      o4[14] = t14;
      o4[15] = t15;
    }
    function square(o4, a6) {
      mul3(o4, a6, a6);
    }
    function inv25519(o4, i5) {
      const c5 = gf();
      let a6;
      for (a6 = 0; a6 < 16; a6++) {
        c5[a6] = i5[a6];
      }
      for (a6 = 253; a6 >= 0; a6--) {
        square(c5, c5);
        if (a6 !== 2 && a6 !== 4) {
          mul3(c5, c5, i5);
        }
      }
      for (a6 = 0; a6 < 16; a6++) {
        o4[a6] = c5[a6];
      }
    }
    function pow2523(o4, i5) {
      const c5 = gf();
      let a6;
      for (a6 = 0; a6 < 16; a6++) {
        c5[a6] = i5[a6];
      }
      for (a6 = 250; a6 >= 0; a6--) {
        square(c5, c5);
        if (a6 !== 1) {
          mul3(c5, c5, i5);
        }
      }
      for (a6 = 0; a6 < 16; a6++) {
        o4[a6] = c5[a6];
      }
    }
    function edadd(p5, q2) {
      const a6 = gf(), b4 = gf(), c5 = gf(), d4 = gf(), e3 = gf(), f3 = gf(), g5 = gf(), h6 = gf(), t3 = gf();
      sub(a6, p5[1], p5[0]);
      sub(t3, q2[1], q2[0]);
      mul3(a6, a6, t3);
      add3(b4, p5[0], p5[1]);
      add3(t3, q2[0], q2[1]);
      mul3(b4, b4, t3);
      mul3(c5, p5[3], q2[3]);
      mul3(c5, c5, D22);
      mul3(d4, p5[2], q2[2]);
      add3(d4, d4, d4);
      sub(e3, b4, a6);
      sub(f3, d4, c5);
      add3(g5, d4, c5);
      add3(h6, b4, a6);
      mul3(p5[0], e3, f3);
      mul3(p5[1], h6, g5);
      mul3(p5[2], g5, f3);
      mul3(p5[3], e3, h6);
    }
    function cswap(p5, q2, b4) {
      for (let i5 = 0; i5 < 4; i5++) {
        sel25519(p5[i5], q2[i5], b4);
      }
    }
    function pack(r6, p5) {
      const tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p5[2]);
      mul3(tx, p5[0], zi);
      mul3(ty, p5[1], zi);
      pack25519(r6, ty);
      r6[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p5, q2, s4) {
      set25519(p5[0], gf0);
      set25519(p5[1], gf1);
      set25519(p5[2], gf1);
      set25519(p5[3], gf0);
      for (let i5 = 255; i5 >= 0; --i5) {
        const b4 = s4[i5 / 8 | 0] >> (i5 & 7) & 1;
        cswap(p5, q2, b4);
        edadd(q2, p5);
        edadd(p5, p5);
        cswap(p5, q2, b4);
      }
    }
    function scalarbase(p5, s4) {
      const q2 = [gf(), gf(), gf(), gf()];
      set25519(q2[0], X3);
      set25519(q2[1], Y2);
      set25519(q2[2], gf1);
      mul3(q2[3], X3, Y2);
      scalarmult(p5, q2, s4);
    }
    function generateKeyPairFromSeed2(seed) {
      if (seed.length !== exports.SEED_LENGTH) {
        throw new Error(`ed25519: seed must be ${exports.SEED_LENGTH} bytes`);
      }
      const d4 = (0, sha512_1.hash)(seed);
      d4[0] &= 248;
      d4[31] &= 127;
      d4[31] |= 64;
      const publicKey = new Uint8Array(32);
      const p5 = [gf(), gf(), gf(), gf()];
      scalarbase(p5, d4);
      pack(publicKey, p5);
      const secretKey = new Uint8Array(64);
      secretKey.set(seed);
      secretKey.set(publicKey, 32);
      return {
        publicKey,
        secretKey
      };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed2;
    function generateKeyPair3(prng) {
      const seed = (0, random_1.randomBytes)(32, prng);
      const result = generateKeyPairFromSeed2(seed);
      (0, wipe_1.wipe)(seed);
      return result;
    }
    exports.generateKeyPair = generateKeyPair3;
    function extractPublicKeyFromSecretKey(secretKey) {
      if (secretKey.length !== exports.SECRET_KEY_LENGTH) {
        throw new Error(`ed25519: secret key must be ${exports.SECRET_KEY_LENGTH} bytes`);
      }
      return new Uint8Array(secretKey.subarray(32));
    }
    exports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;
    var L3 = new Float64Array([
      237,
      211,
      245,
      92,
      26,
      99,
      18,
      88,
      214,
      156,
      247,
      162,
      222,
      249,
      222,
      20,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      16
    ]);
    function modL(r6, x6) {
      let carry;
      let i5;
      let j3;
      let k5;
      for (i5 = 63; i5 >= 32; --i5) {
        carry = 0;
        for (j3 = i5 - 32, k5 = i5 - 12; j3 < k5; ++j3) {
          x6[j3] += carry - 16 * x6[i5] * L3[j3 - (i5 - 32)];
          carry = Math.floor((x6[j3] + 128) / 256);
          x6[j3] -= carry * 256;
        }
        x6[j3] += carry;
        x6[i5] = 0;
      }
      carry = 0;
      for (j3 = 0; j3 < 32; j3++) {
        x6[j3] += carry - (x6[31] >> 4) * L3[j3];
        carry = x6[j3] >> 8;
        x6[j3] &= 255;
      }
      for (j3 = 0; j3 < 32; j3++) {
        x6[j3] -= carry * L3[j3];
      }
      for (i5 = 0; i5 < 32; i5++) {
        x6[i5 + 1] += x6[i5] >> 8;
        r6[i5] = x6[i5] & 255;
      }
    }
    function reduce2(r6) {
      const x6 = new Float64Array(64);
      for (let i5 = 0; i5 < 64; i5++) {
        x6[i5] = r6[i5];
      }
      for (let i5 = 0; i5 < 64; i5++) {
        r6[i5] = 0;
      }
      modL(r6, x6);
    }
    function sign5(secretKey, message) {
      const x6 = new Float64Array(64);
      const p5 = [gf(), gf(), gf(), gf()];
      const d4 = (0, sha512_1.hash)(secretKey.subarray(0, 32));
      d4[0] &= 248;
      d4[31] &= 127;
      d4[31] |= 64;
      const signature2 = new Uint8Array(64);
      signature2.set(d4.subarray(32), 32);
      const hs2 = new sha512_1.SHA512();
      hs2.update(signature2.subarray(32));
      hs2.update(message);
      const r6 = hs2.digest();
      hs2.clean();
      reduce2(r6);
      scalarbase(p5, r6);
      pack(signature2, p5);
      hs2.reset();
      hs2.update(signature2.subarray(0, 32));
      hs2.update(secretKey.subarray(32));
      hs2.update(message);
      const h6 = hs2.digest();
      reduce2(h6);
      for (let i5 = 0; i5 < 32; i5++) {
        x6[i5] = r6[i5];
      }
      for (let i5 = 0; i5 < 32; i5++) {
        for (let j3 = 0; j3 < 32; j3++) {
          x6[i5 + j3] += h6[i5] * d4[j3];
        }
      }
      modL(signature2.subarray(32), x6);
      return signature2;
    }
    exports.sign = sign5;
    function unpackneg(r6, p5) {
      const t3 = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
      set25519(r6[2], gf1);
      unpack25519(r6[1], p5);
      square(num, r6[1]);
      mul3(den, num, D4);
      sub(num, num, r6[2]);
      add3(den, r6[2], den);
      square(den2, den);
      square(den4, den2);
      mul3(den6, den4, den2);
      mul3(t3, den6, num);
      mul3(t3, t3, den);
      pow2523(t3, t3);
      mul3(t3, t3, num);
      mul3(t3, t3, den);
      mul3(t3, t3, den);
      mul3(r6[0], t3, den);
      square(chk, r6[0]);
      mul3(chk, chk, den);
      if (neq25519(chk, num)) {
        mul3(r6[0], r6[0], I5);
      }
      square(chk, r6[0]);
      mul3(chk, chk, den);
      if (neq25519(chk, num)) {
        return -1;
      }
      if (par25519(r6[0]) === p5[31] >> 7) {
        sub(r6[0], gf0, r6[0]);
      }
      mul3(r6[3], r6[0], r6[1]);
      return 0;
    }
    function verify5(publicKey, message, signature2) {
      const t3 = new Uint8Array(32);
      const p5 = [gf(), gf(), gf(), gf()];
      const q2 = [gf(), gf(), gf(), gf()];
      if (signature2.length !== exports.SIGNATURE_LENGTH) {
        throw new Error(`ed25519: signature must be ${exports.SIGNATURE_LENGTH} bytes`);
      }
      if (unpackneg(q2, publicKey)) {
        return false;
      }
      const hs2 = new sha512_1.SHA512();
      hs2.update(signature2.subarray(0, 32));
      hs2.update(publicKey);
      hs2.update(message);
      const h6 = hs2.digest();
      reduce2(h6);
      scalarmult(p5, q2, h6);
      scalarbase(q2, signature2.subarray(32));
      edadd(p5, q2);
      pack(t3, p5);
      if (verify32(signature2, t3)) {
        return false;
      }
      return true;
    }
    exports.verify = verify5;
    function convertPublicKeyToX25519(publicKey) {
      let q2 = [gf(), gf(), gf(), gf()];
      if (unpackneg(q2, publicKey)) {
        throw new Error("Ed25519: invalid public key");
      }
      let a6 = gf();
      let b4 = gf();
      let y5 = q2[1];
      add3(a6, gf1, y5);
      sub(b4, gf1, y5);
      inv25519(b4, b4);
      mul3(a6, a6, b4);
      let z6 = new Uint8Array(32);
      pack25519(z6, a6);
      return z6;
    }
    exports.convertPublicKeyToX25519 = convertPublicKeyToX25519;
    function convertSecretKeyToX25519(secretKey) {
      const d4 = (0, sha512_1.hash)(secretKey.subarray(0, 32));
      d4[0] &= 248;
      d4[31] &= 127;
      d4[31] |= 64;
      const o4 = new Uint8Array(d4.subarray(0, 32));
      (0, wipe_1.wipe)(d4);
      return o4;
    }
    exports.convertSecretKeyToX25519 = convertSecretKeyToX25519;
  }
});

// node_modules/@walletconnect/relay-auth/dist/esm/constants.js
var import_dist13, JWT_IRIDIUM_ALG, JWT_IRIDIUM_TYP, JWT_DELIMITER, JWT_ENCODING, JSON_ENCODING, DATA_ENCODING, DID_DELIMITER, DID_PREFIX, DID_METHOD, MULTICODEC_ED25519_ENCODING, MULTICODEC_ED25519_BASE, MULTICODEC_ED25519_HEADER, KEY_PAIR_SEED_LENGTH;
var init_constants = __esm({
  "node_modules/@walletconnect/relay-auth/dist/esm/constants.js"() {
    import_dist13 = __toESM(require_dist());
    JWT_IRIDIUM_ALG = "EdDSA";
    JWT_IRIDIUM_TYP = "JWT";
    JWT_DELIMITER = ".";
    JWT_ENCODING = "base64url";
    JSON_ENCODING = "utf8";
    DATA_ENCODING = "utf8";
    DID_DELIMITER = ":";
    DID_PREFIX = "did";
    DID_METHOD = "key";
    MULTICODEC_ED25519_ENCODING = "base58btc";
    MULTICODEC_ED25519_BASE = "z";
    MULTICODEC_ED25519_HEADER = "K36";
    KEY_PAIR_SEED_LENGTH = 32;
  }
});

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}
var import_dist14;
var init_as_uint8array = __esm({
  "node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js"() {
    import_dist14 = __toESM(require_dist(), 1);
  }
});

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size));
  }
  return new Uint8Array(size);
}
var import_dist15;
var init_alloc = __esm({
  "node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js"() {
    import_dist15 = __toESM(require_dist(), 1);
    init_as_uint8array();
  }
});

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/concat.js
function concat(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}
var import_dist16;
var init_concat = __esm({
  "node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/concat.js"() {
    import_dist16 = __toESM(require_dist());
    init_alloc();
    init_as_uint8array();
  }
});

// node_modules/multiformats/esm/vendor/base-x.js
function base(ALPHABET, name2) {
  if (ALPHABET.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j3 = 0; j3 < BASE_MAP.length; j3++) {
    BASE_MAP[j3] = 255;
  }
  for (var i5 = 0; i5 < ALPHABET.length; i5++) {
    var x6 = ALPHABET.charAt(i5);
    var xc = x6.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x6 + " is ambiguous");
    }
    BASE_MAP[xc] = i5;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode8(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i6 = 0;
      for (var it1 = size - 1; (carry !== 0 || i6 < length2) && it1 !== -1; it1--, i6++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      pbegin++;
    }
    var it22 = size - length2;
    while (it22 !== size && b58[it22] === 0) {
      it22++;
    }
    var str2 = LEADER.repeat(zeroes);
    for (; it22 < size; ++it22) {
      str2 += ALPHABET.charAt(b58[it22]);
    }
    return str2;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i6 = 0;
      for (var it32 = size - 1; (carry !== 0 || i6 < length2) && it32 !== -1; it32--, i6++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size - length2;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size - it4));
    var j4 = zeroes;
    while (it4 !== size) {
      vch[j4++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string3) {
    var buffer2 = decodeUnsafe(string3);
    if (buffer2) {
      return buffer2;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode8,
    decodeUnsafe,
    decode: decode8
  };
}
var import_dist17, src, _brrp__multiformats_scope_baseX, base_x_default;
var init_base_x = __esm({
  "node_modules/multiformats/esm/vendor/base-x.js"() {
    import_dist17 = __toESM(require_dist(), 1);
    src = base;
    _brrp__multiformats_scope_baseX = src;
    base_x_default = _brrp__multiformats_scope_baseX;
  }
});

// node_modules/multiformats/esm/src/bytes.js
var import_dist18, empty, equals, coerce, fromString, toString;
var init_bytes = __esm({
  "node_modules/multiformats/esm/src/bytes.js"() {
    import_dist18 = __toESM(require_dist(), 1);
    empty = new Uint8Array(0);
    equals = (aa, bb) => {
      if (aa === bb)
        return true;
      if (aa.byteLength !== bb.byteLength) {
        return false;
      }
      for (let ii2 = 0; ii2 < aa.byteLength; ii2++) {
        if (aa[ii2] !== bb[ii2]) {
          return false;
        }
      }
      return true;
    };
    coerce = (o4) => {
      if (o4 instanceof Uint8Array && o4.constructor.name === "Uint8Array")
        return o4;
      if (o4 instanceof ArrayBuffer)
        return new Uint8Array(o4);
      if (ArrayBuffer.isView(o4)) {
        return new Uint8Array(o4.buffer, o4.byteOffset, o4.byteLength);
      }
      throw new Error("Unknown type, must be binary type");
    };
    fromString = (str2) => new TextEncoder().encode(str2);
    toString = (b4) => new TextDecoder().decode(b4);
  }
});

// node_modules/multiformats/esm/src/bases/base.js
var import_dist19, Encoder, Decoder, ComposedDecoder, or, Codec, from, baseX, decode, encode, rfc4648;
var init_base = __esm({
  "node_modules/multiformats/esm/src/bases/base.js"() {
    import_dist19 = __toESM(require_dist(), 1);
    init_base_x();
    init_bytes();
    Encoder = class {
      constructor(name2, prefix, baseEncode) {
        this.name = name2;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
      }
      encode(bytes) {
        if (bytes instanceof Uint8Array) {
          return `${this.prefix}${this.baseEncode(bytes)}`;
        } else {
          throw Error("Unknown type, must be binary type");
        }
      }
    };
    Decoder = class {
      constructor(name2, prefix, baseDecode) {
        this.name = name2;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === void 0) {
          throw new Error("Invalid prefix character");
        }
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
      }
      decode(text) {
        if (typeof text === "string") {
          if (text.codePointAt(0) !== this.prefixCodePoint) {
            throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
          }
          return this.baseDecode(text.slice(this.prefix.length));
        } else {
          throw Error("Can only multibase decode strings");
        }
      }
      or(decoder) {
        return or(this, decoder);
      }
    };
    ComposedDecoder = class {
      constructor(decoders) {
        this.decoders = decoders;
      }
      or(decoder) {
        return or(this, decoder);
      }
      decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) {
          return decoder.decode(input);
        } else {
          throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
        }
      }
    };
    or = (left, right) => new ComposedDecoder({
      ...left.decoders || { [left.prefix]: left },
      ...right.decoders || { [right.prefix]: right }
    });
    Codec = class {
      constructor(name2, prefix, baseEncode, baseDecode) {
        this.name = name2;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name2, prefix, baseEncode);
        this.decoder = new Decoder(name2, prefix, baseDecode);
      }
      encode(input) {
        return this.encoder.encode(input);
      }
      decode(input) {
        return this.decoder.decode(input);
      }
    };
    from = ({ name: name2, prefix, encode: encode8, decode: decode8 }) => new Codec(name2, prefix, encode8, decode8);
    baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
      const { encode: encode8, decode: decode8 } = base_x_default(alphabet2, name2);
      return from({
        prefix,
        name: name2,
        encode: encode8,
        decode: (text) => coerce(decode8(text))
      });
    };
    decode = (string3, alphabet2, bitsPerChar, name2) => {
      const codes = {};
      for (let i5 = 0; i5 < alphabet2.length; ++i5) {
        codes[alphabet2[i5]] = i5;
      }
      let end = string3.length;
      while (string3[end - 1] === "=") {
        --end;
      }
      const out = new Uint8Array(end * bitsPerChar / 8 | 0);
      let bits = 0;
      let buffer2 = 0;
      let written = 0;
      for (let i5 = 0; i5 < end; ++i5) {
        const value = codes[string3[i5]];
        if (value === void 0) {
          throw new SyntaxError(`Non-${name2} character`);
        }
        buffer2 = buffer2 << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
          bits -= 8;
          out[written++] = 255 & buffer2 >> bits;
        }
      }
      if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
        throw new SyntaxError("Unexpected end of data");
      }
      return out;
    };
    encode = (data, alphabet2, bitsPerChar) => {
      const pad = alphabet2[alphabet2.length - 1] === "=";
      const mask = (1 << bitsPerChar) - 1;
      let out = "";
      let bits = 0;
      let buffer2 = 0;
      for (let i5 = 0; i5 < data.length; ++i5) {
        buffer2 = buffer2 << 8 | data[i5];
        bits += 8;
        while (bits > bitsPerChar) {
          bits -= bitsPerChar;
          out += alphabet2[mask & buffer2 >> bits];
        }
      }
      if (bits) {
        out += alphabet2[mask & buffer2 << bitsPerChar - bits];
      }
      if (pad) {
        while (out.length * bitsPerChar & 7) {
          out += "=";
        }
      }
      return out;
    };
    rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
      return from({
        prefix,
        name: name2,
        encode(input) {
          return encode(input, alphabet2, bitsPerChar);
        },
        decode(input) {
          return decode(input, alphabet2, bitsPerChar, name2);
        }
      });
    };
  }
});

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});
var import_dist20, identity;
var init_identity = __esm({
  "node_modules/multiformats/esm/src/bases/identity.js"() {
    import_dist20 = __toESM(require_dist(), 1);
    init_base();
    init_bytes();
    identity = from({
      prefix: "\0",
      name: "identity",
      encode: (buf) => toString(buf),
      decode: (str2) => fromString(str2)
    });
  }
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base2
});
var import_dist21, base2;
var init_base2 = __esm({
  "node_modules/multiformats/esm/src/bases/base2.js"() {
    import_dist21 = __toESM(require_dist(), 1);
    init_base();
    base2 = rfc4648({
      prefix: "0",
      name: "base2",
      alphabet: "01",
      bitsPerChar: 1
    });
  }
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var import_dist22, base8;
var init_base8 = __esm({
  "node_modules/multiformats/esm/src/bases/base8.js"() {
    import_dist22 = __toESM(require_dist(), 1);
    init_base();
    base8 = rfc4648({
      prefix: "7",
      name: "base8",
      alphabet: "01234567",
      bitsPerChar: 3
    });
  }
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var import_dist23, base10;
var init_base10 = __esm({
  "node_modules/multiformats/esm/src/bases/base10.js"() {
    import_dist23 = __toESM(require_dist(), 1);
    init_base();
    base10 = baseX({
      prefix: "9",
      name: "base10",
      alphabet: "0123456789"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base16,
  base16upper: () => base16upper
});
var import_dist24, base16, base16upper;
var init_base16 = __esm({
  "node_modules/multiformats/esm/src/bases/base16.js"() {
    import_dist24 = __toESM(require_dist(), 1);
    init_base();
    base16 = rfc4648({
      prefix: "f",
      name: "base16",
      alphabet: "0123456789abcdef",
      bitsPerChar: 4
    });
    base16upper = rfc4648({
      prefix: "F",
      name: "base16upper",
      alphabet: "0123456789ABCDEF",
      bitsPerChar: 4
    });
  }
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base32,
  base32hex: () => base32hex,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var import_dist25, base32, base32upper, base32pad, base32padupper, base32hex, base32hexupper, base32hexpad, base32hexpadupper, base32z;
var init_base32 = __esm({
  "node_modules/multiformats/esm/src/bases/base32.js"() {
    import_dist25 = __toESM(require_dist(), 1);
    init_base();
    base32 = rfc4648({
      prefix: "b",
      name: "base32",
      alphabet: "abcdefghijklmnopqrstuvwxyz234567",
      bitsPerChar: 5
    });
    base32upper = rfc4648({
      prefix: "B",
      name: "base32upper",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
      bitsPerChar: 5
    });
    base32pad = rfc4648({
      prefix: "c",
      name: "base32pad",
      alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
      bitsPerChar: 5
    });
    base32padupper = rfc4648({
      prefix: "C",
      name: "base32padupper",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
      bitsPerChar: 5
    });
    base32hex = rfc4648({
      prefix: "v",
      name: "base32hex",
      alphabet: "0123456789abcdefghijklmnopqrstuv",
      bitsPerChar: 5
    });
    base32hexupper = rfc4648({
      prefix: "V",
      name: "base32hexupper",
      alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
      bitsPerChar: 5
    });
    base32hexpad = rfc4648({
      prefix: "t",
      name: "base32hexpad",
      alphabet: "0123456789abcdefghijklmnopqrstuv=",
      bitsPerChar: 5
    });
    base32hexpadupper = rfc4648({
      prefix: "T",
      name: "base32hexpadupper",
      alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
      bitsPerChar: 5
    });
    base32z = rfc4648({
      prefix: "h",
      name: "base32z",
      alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
      bitsPerChar: 5
    });
  }
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var import_dist26, base36, base36upper;
var init_base36 = __esm({
  "node_modules/multiformats/esm/src/bases/base36.js"() {
    import_dist26 = __toESM(require_dist(), 1);
    init_base();
    base36 = baseX({
      prefix: "k",
      name: "base36",
      alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
    });
    base36upper = baseX({
      prefix: "K",
      name: "base36upper",
      alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr
});
var import_dist27, base58btc, base58flickr;
var init_base58 = __esm({
  "node_modules/multiformats/esm/src/bases/base58.js"() {
    import_dist27 = __toESM(require_dist(), 1);
    init_base();
    base58btc = baseX({
      name: "base58btc",
      prefix: "z",
      alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
    });
    base58flickr = baseX({
      name: "base58flickr",
      prefix: "Z",
      alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base64,
  base64pad: () => base64pad,
  base64url: () => base64url,
  base64urlpad: () => base64urlpad
});
var import_dist28, base64, base64pad, base64url, base64urlpad;
var init_base64 = __esm({
  "node_modules/multiformats/esm/src/bases/base64.js"() {
    import_dist28 = __toESM(require_dist(), 1);
    init_base();
    base64 = rfc4648({
      prefix: "m",
      name: "base64",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      bitsPerChar: 6
    });
    base64pad = rfc4648({
      prefix: "M",
      name: "base64pad",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
      bitsPerChar: 6
    });
    base64url = rfc4648({
      prefix: "u",
      name: "base64url",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
      bitsPerChar: 6
    });
    base64urlpad = rfc4648({
      prefix: "U",
      name: "base64urlpad",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
      bitsPerChar: 6
    });
  }
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
function encode2(data) {
  return data.reduce((p5, c5) => {
    p5 += alphabetBytesToChars[c5];
    return p5;
  }, "");
}
function decode2(str2) {
  const byts = [];
  for (const char of str2) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var import_dist29, alphabet, alphabetBytesToChars, alphabetCharsToBytes, base256emoji;
var init_base256emoji = __esm({
  "node_modules/multiformats/esm/src/bases/base256emoji.js"() {
    import_dist29 = __toESM(require_dist(), 1);
    init_base();
    alphabet = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
    alphabetBytesToChars = alphabet.reduce((p5, c5, i5) => {
      p5[i5] = c5;
      return p5;
    }, []);
    alphabetCharsToBytes = alphabet.reduce((p5, c5, i5) => {
      p5[c5.codePointAt(0)] = i5;
      return p5;
    }, []);
    base256emoji = from({
      prefix: "🚀",
      name: "base256emoji",
      encode: encode2,
      decode: decode2
    });
  }
});

// node_modules/multiformats/esm/vendor/varint.js
function encode3(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode3.bytes = offset - oldOffset + 1;
  return out;
}
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b4, l6 = buf.length;
  do {
    if (counter >= l6) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b4 = buf[counter++];
    res += shift < 28 ? (b4 & REST$1) << shift : (b4 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b4 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var import_dist30, encode_1, MSB, REST, MSBALL, INT, decode3, MSB$1, REST$1, N1, N2, N3, N4, N5, N6, N7, N8, N9, length, varint, _brrp_varint, varint_default;
var init_varint = __esm({
  "node_modules/multiformats/esm/vendor/varint.js"() {
    import_dist30 = __toESM(require_dist(), 1);
    encode_1 = encode3;
    MSB = 128;
    REST = 127;
    MSBALL = ~REST;
    INT = Math.pow(2, 31);
    decode3 = read;
    MSB$1 = 128;
    REST$1 = 127;
    N1 = Math.pow(2, 7);
    N2 = Math.pow(2, 14);
    N3 = Math.pow(2, 21);
    N4 = Math.pow(2, 28);
    N5 = Math.pow(2, 35);
    N6 = Math.pow(2, 42);
    N7 = Math.pow(2, 49);
    N8 = Math.pow(2, 56);
    N9 = Math.pow(2, 63);
    length = function(value) {
      return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
    };
    varint = {
      encode: encode_1,
      decode: decode3,
      encodingLength: length
    };
    _brrp_varint = varint;
    varint_default = _brrp_varint;
  }
});

// node_modules/multiformats/esm/src/varint.js
var import_dist31, decode4, encodeTo, encodingLength;
var init_varint2 = __esm({
  "node_modules/multiformats/esm/src/varint.js"() {
    import_dist31 = __toESM(require_dist(), 1);
    init_varint();
    decode4 = (data, offset = 0) => {
      const code2 = varint_default.decode(data, offset);
      return [
        code2,
        varint_default.decode.bytes
      ];
    };
    encodeTo = (int, target, offset = 0) => {
      varint_default.encode(int, target, offset);
      return target;
    };
    encodingLength = (int) => {
      return varint_default.encodingLength(int);
    };
  }
});

// node_modules/multiformats/esm/src/hashes/digest.js
var import_dist32, create, decode5, equals2, Digest;
var init_digest = __esm({
  "node_modules/multiformats/esm/src/hashes/digest.js"() {
    import_dist32 = __toESM(require_dist(), 1);
    init_bytes();
    init_varint2();
    create = (code2, digest2) => {
      const size = digest2.byteLength;
      const sizeOffset = encodingLength(code2);
      const digestOffset = sizeOffset + encodingLength(size);
      const bytes = new Uint8Array(digestOffset + size);
      encodeTo(code2, bytes, 0);
      encodeTo(size, bytes, sizeOffset);
      bytes.set(digest2, digestOffset);
      return new Digest(code2, size, digest2, bytes);
    };
    decode5 = (multihash) => {
      const bytes = coerce(multihash);
      const [code2, sizeOffset] = decode4(bytes);
      const [size, digestOffset] = decode4(bytes.subarray(sizeOffset));
      const digest2 = bytes.subarray(sizeOffset + digestOffset);
      if (digest2.byteLength !== size) {
        throw new Error("Incorrect length");
      }
      return new Digest(code2, size, digest2, bytes);
    };
    equals2 = (a6, b4) => {
      if (a6 === b4) {
        return true;
      } else {
        return a6.code === b4.code && a6.size === b4.size && equals(a6.bytes, b4.bytes);
      }
    };
    Digest = class {
      constructor(code2, size, digest2, bytes) {
        this.code = code2;
        this.size = size;
        this.digest = digest2;
        this.bytes = bytes;
      }
    };
  }
});

// node_modules/multiformats/esm/src/hashes/hasher.js
var import_dist33, from2, Hasher;
var init_hasher = __esm({
  "node_modules/multiformats/esm/src/hashes/hasher.js"() {
    import_dist33 = __toESM(require_dist(), 1);
    init_digest();
    from2 = ({ name: name2, code: code2, encode: encode8 }) => new Hasher(name2, code2, encode8);
    Hasher = class {
      constructor(name2, code2, encode8) {
        this.name = name2;
        this.code = code2;
        this.encode = encode8;
      }
      digest(input) {
        if (input instanceof Uint8Array) {
          const result = this.encode(input);
          return result instanceof Uint8Array ? create(this.code, result) : result.then((digest2) => create(this.code, digest2));
        } else {
          throw Error("Unknown type, must be binary type");
        }
      }
    };
  }
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha256,
  sha512: () => sha512
});
var import_dist34, sha, sha256, sha512;
var init_sha2_browser = __esm({
  "node_modules/multiformats/esm/src/hashes/sha2-browser.js"() {
    import_dist34 = __toESM(require_dist(), 1);
    init_hasher();
    sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
    sha256 = from2({
      name: "sha2-256",
      code: 18,
      encode: sha("SHA-256")
    });
    sha512 = from2({
      name: "sha2-512",
      code: 19,
      encode: sha("SHA-512")
    });
  }
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var import_dist35, code, name, encode4, digest, identity2;
var init_identity2 = __esm({
  "node_modules/multiformats/esm/src/hashes/identity.js"() {
    import_dist35 = __toESM(require_dist(), 1);
    init_bytes();
    init_digest();
    code = 0;
    name = "identity";
    encode4 = coerce;
    digest = (input) => create(code, encode4(input));
    identity2 = {
      code,
      name,
      encode: encode4,
      digest
    };
  }
});

// node_modules/multiformats/esm/src/codecs/raw.js
var import_dist36;
var init_raw = __esm({
  "node_modules/multiformats/esm/src/codecs/raw.js"() {
    import_dist36 = __toESM(require_dist(), 1);
    init_bytes();
  }
});

// node_modules/multiformats/esm/src/codecs/json.js
var import_dist37, textEncoder, textDecoder;
var init_json = __esm({
  "node_modules/multiformats/esm/src/codecs/json.js"() {
    import_dist37 = __toESM(require_dist(), 1);
    textEncoder = new TextEncoder();
    textDecoder = new TextDecoder();
  }
});

// node_modules/multiformats/esm/src/cid.js
var import_dist38, CID, parseCIDtoBytes, toStringV0, toStringV1, DAG_PB_CODE, SHA_256_CODE, encodeCID, cidSymbol, readonly, hidden, version, deprecate, IS_CID_DEPRECATION;
var init_cid = __esm({
  "node_modules/multiformats/esm/src/cid.js"() {
    import_dist38 = __toESM(require_dist(), 1);
    init_varint2();
    init_digest();
    init_base58();
    init_base32();
    init_bytes();
    CID = class _CID {
      constructor(version12, code2, multihash, bytes) {
        this.code = code2;
        this.version = version12;
        this.multihash = multihash;
        this.bytes = bytes;
        this.byteOffset = bytes.byteOffset;
        this.byteLength = bytes.byteLength;
        this.asCID = this;
        this._baseCache = /* @__PURE__ */ new Map();
        Object.defineProperties(this, {
          byteOffset: hidden,
          byteLength: hidden,
          code: readonly,
          version: readonly,
          multihash: readonly,
          bytes: readonly,
          _baseCache: hidden,
          asCID: hidden
        });
      }
      toV0() {
        switch (this.version) {
          case 0: {
            return this;
          }
          default: {
            const { code: code2, multihash } = this;
            if (code2 !== DAG_PB_CODE) {
              throw new Error("Cannot convert a non dag-pb CID to CIDv0");
            }
            if (multihash.code !== SHA_256_CODE) {
              throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
            }
            return _CID.createV0(multihash);
          }
        }
      }
      toV1() {
        switch (this.version) {
          case 0: {
            const { code: code2, digest: digest2 } = this.multihash;
            const multihash = create(code2, digest2);
            return _CID.createV1(this.code, multihash);
          }
          case 1: {
            return this;
          }
          default: {
            throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
          }
        }
      }
      equals(other) {
        return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
      }
      toString(base4) {
        const { bytes, version: version12, _baseCache } = this;
        switch (version12) {
          case 0:
            return toStringV0(bytes, _baseCache, base4 || base58btc.encoder);
          default:
            return toStringV1(bytes, _baseCache, base4 || base32.encoder);
        }
      }
      toJSON() {
        return {
          code: this.code,
          version: this.version,
          hash: this.multihash.bytes
        };
      }
      get [Symbol.toStringTag]() {
        return "CID";
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
      }
      static isCID(value) {
        deprecate(/^0\.0/, IS_CID_DEPRECATION);
        return !!(value && (value[cidSymbol] || value.asCID === value));
      }
      get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
      }
      get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
      }
      get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
      }
      get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
      }
      get prefix() {
        throw new Error('"prefix" property is deprecated');
      }
      static asCID(value) {
        if (value instanceof _CID) {
          return value;
        } else if (value != null && value.asCID === value) {
          const { version: version12, code: code2, multihash, bytes } = value;
          return new _CID(version12, code2, multihash, bytes || encodeCID(version12, code2, multihash.bytes));
        } else if (value != null && value[cidSymbol] === true) {
          const { version: version12, multihash, code: code2 } = value;
          const digest2 = decode5(multihash);
          return _CID.create(version12, code2, digest2);
        } else {
          return null;
        }
      }
      static create(version12, code2, digest2) {
        if (typeof code2 !== "number") {
          throw new Error("String codecs are no longer supported");
        }
        switch (version12) {
          case 0: {
            if (code2 !== DAG_PB_CODE) {
              throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
            } else {
              return new _CID(version12, code2, digest2, digest2.bytes);
            }
          }
          case 1: {
            const bytes = encodeCID(version12, code2, digest2.bytes);
            return new _CID(version12, code2, digest2, bytes);
          }
          default: {
            throw new Error("Invalid version");
          }
        }
      }
      static createV0(digest2) {
        return _CID.create(0, DAG_PB_CODE, digest2);
      }
      static createV1(code2, digest2) {
        return _CID.create(1, code2, digest2);
      }
      static decode(bytes) {
        const [cid, remainder] = _CID.decodeFirst(bytes);
        if (remainder.length) {
          throw new Error("Incorrect length");
        }
        return cid;
      }
      static decodeFirst(bytes) {
        const specs = _CID.inspectBytes(bytes);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) {
          throw new Error("Incorrect length");
        }
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
        return [
          cid,
          bytes.subarray(specs.size)
        ];
      }
      static inspectBytes(initialBytes) {
        let offset = 0;
        const next = () => {
          const [i5, length2] = decode4(initialBytes.subarray(offset));
          offset += length2;
          return i5;
        };
        let version12 = next();
        let codec = DAG_PB_CODE;
        if (version12 === 18) {
          version12 = 0;
          offset = 0;
        } else if (version12 === 1) {
          codec = next();
        }
        if (version12 !== 0 && version12 !== 1) {
          throw new RangeError(`Invalid CID version ${version12}`);
        }
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
          version: version12,
          codec,
          multihashCode,
          digestSize,
          multihashSize,
          size
        };
      }
      static parse(source, base4) {
        const [prefix, bytes] = parseCIDtoBytes(source, base4);
        const cid = _CID.decode(bytes);
        cid._baseCache.set(prefix, source);
        return cid;
      }
    };
    parseCIDtoBytes = (source, base4) => {
      switch (source[0]) {
        case "Q": {
          const decoder = base4 || base58btc;
          return [
            base58btc.prefix,
            decoder.decode(`${base58btc.prefix}${source}`)
          ];
        }
        case base58btc.prefix: {
          const decoder = base4 || base58btc;
          return [
            base58btc.prefix,
            decoder.decode(source)
          ];
        }
        case base32.prefix: {
          const decoder = base4 || base32;
          return [
            base32.prefix,
            decoder.decode(source)
          ];
        }
        default: {
          if (base4 == null) {
            throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
          }
          return [
            source[0],
            base4.decode(source)
          ];
        }
      }
    };
    toStringV0 = (bytes, cache, base4) => {
      const { prefix } = base4;
      if (prefix !== base58btc.prefix) {
        throw Error(`Cannot string encode V0 in ${base4.name} encoding`);
      }
      const cid = cache.get(prefix);
      if (cid == null) {
        const cid2 = base4.encode(bytes).slice(1);
        cache.set(prefix, cid2);
        return cid2;
      } else {
        return cid;
      }
    };
    toStringV1 = (bytes, cache, base4) => {
      const { prefix } = base4;
      const cid = cache.get(prefix);
      if (cid == null) {
        const cid2 = base4.encode(bytes);
        cache.set(prefix, cid2);
        return cid2;
      } else {
        return cid;
      }
    };
    DAG_PB_CODE = 112;
    SHA_256_CODE = 18;
    encodeCID = (version12, code2, multihash) => {
      const codeOffset = encodingLength(version12);
      const hashOffset = codeOffset + encodingLength(code2);
      const bytes = new Uint8Array(hashOffset + multihash.byteLength);
      encodeTo(version12, bytes, 0);
      encodeTo(code2, bytes, codeOffset);
      bytes.set(multihash, hashOffset);
      return bytes;
    };
    cidSymbol = Symbol.for("@ipld/js-cid/CID");
    readonly = {
      writable: false,
      configurable: false,
      enumerable: true
    };
    hidden = {
      writable: false,
      enumerable: false,
      configurable: false
    };
    version = "0.0.0-dev";
    deprecate = (range2, message) => {
      if (range2.test(version)) {
        console.warn(message);
      } else {
        throw new Error(message);
      }
    };
    IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
  }
});

// node_modules/multiformats/esm/src/index.js
var import_dist39;
var init_src = __esm({
  "node_modules/multiformats/esm/src/index.js"() {
    import_dist39 = __toESM(require_dist(), 1);
    init_cid();
    init_varint2();
    init_bytes();
    init_hasher();
    init_digest();
  }
});

// node_modules/multiformats/esm/src/basics.js
var import_dist40, bases, hashes;
var init_basics = __esm({
  "node_modules/multiformats/esm/src/basics.js"() {
    import_dist40 = __toESM(require_dist());
    init_identity();
    init_base2();
    init_base8();
    init_base10();
    init_base16();
    init_base32();
    init_base36();
    init_base58();
    init_base64();
    init_base256emoji();
    init_sha2_browser();
    init_identity2();
    init_raw();
    init_json();
    init_src();
    bases = {
      ...identity_exports,
      ...base2_exports,
      ...base8_exports,
      ...base10_exports,
      ...base16_exports,
      ...base32_exports,
      ...base36_exports,
      ...base58_exports,
      ...base64_exports,
      ...base256emoji_exports
    };
    hashes = {
      ...sha2_browser_exports,
      ...identity_exports2
    };
  }
});

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode8, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode8
    },
    decoder: { decode: decode8 }
  };
}
var import_dist41, string, ascii, BASES, bases_default;
var init_bases = __esm({
  "node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js"() {
    import_dist41 = __toESM(require_dist(), 1);
    init_basics();
    init_alloc();
    string = createCodec("utf8", "u", (buf) => {
      const decoder = new TextDecoder("utf8");
      return "u" + decoder.decode(buf);
    }, (str2) => {
      const encoder = new TextEncoder();
      return encoder.encode(str2.substring(1));
    });
    ascii = createCodec("ascii", "a", (buf) => {
      let string3 = "a";
      for (let i5 = 0; i5 < buf.length; i5++) {
        string3 += String.fromCharCode(buf[i5]);
      }
      return string3;
    }, (str2) => {
      str2 = str2.substring(1);
      const buf = allocUnsafe(str2.length);
      for (let i5 = 0; i5 < str2.length; i5++) {
        buf[i5] = str2.charCodeAt(i5);
      }
      return buf;
    });
    BASES = {
      utf8: string,
      "utf-8": string,
      hex: bases.base16,
      latin1: ascii,
      ascii,
      binary: ascii,
      ...bases
    };
    bases_default = BASES;
  }
});

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/to-string.js
function toString2(array, encoding = "utf8") {
  const base4 = bases_default[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base4.encoder.encode(array).substring(1);
}
var import_dist42;
var init_to_string = __esm({
  "node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/to-string.js"() {
    import_dist42 = __toESM(require_dist());
    init_bases();
  }
});

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/from-string.js
function fromString2(string3, encoding = "utf8") {
  const base4 = bases_default[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string3, "utf-8"));
  }
  return base4.decoder.decode(`${base4.prefix}${string3}`);
}
var import_dist43;
var init_from_string = __esm({
  "node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/from-string.js"() {
    import_dist43 = __toESM(require_dist());
    init_bases();
    init_as_uint8array();
  }
});

// node_modules/@walletconnect/relay-auth/dist/esm/utils.js
function decodeJSON(str2) {
  return safeJsonParse(toString2(fromString2(str2, JWT_ENCODING), JSON_ENCODING));
}
function encodeJSON(val) {
  return toString2(fromString2(safeJsonStringify(val), JSON_ENCODING), JWT_ENCODING);
}
function encodeIss(publicKey) {
  const header = fromString2(MULTICODEC_ED25519_HEADER, MULTICODEC_ED25519_ENCODING);
  const multicodec = MULTICODEC_ED25519_BASE + toString2(concat([header, publicKey]), MULTICODEC_ED25519_ENCODING);
  return [DID_PREFIX, DID_METHOD, multicodec].join(DID_DELIMITER);
}
function encodeSig(bytes) {
  return toString2(bytes, JWT_ENCODING);
}
function decodeSig(encoded) {
  return fromString2(encoded, JWT_ENCODING);
}
function encodeData(params) {
  return fromString2([encodeJSON(params.header), encodeJSON(params.payload)].join(JWT_DELIMITER), DATA_ENCODING);
}
function encodeJWT(params) {
  return [
    encodeJSON(params.header),
    encodeJSON(params.payload),
    encodeSig(params.signature)
  ].join(JWT_DELIMITER);
}
function decodeJWT(jwt) {
  const params = jwt.split(JWT_DELIMITER);
  const header = decodeJSON(params[0]);
  const payload = decodeJSON(params[1]);
  const signature2 = decodeSig(params[2]);
  const data = fromString2(params.slice(0, 2).join(JWT_DELIMITER), DATA_ENCODING);
  return { header, payload, signature: signature2, data };
}
var import_dist44;
var init_utils = __esm({
  "node_modules/@walletconnect/relay-auth/dist/esm/utils.js"() {
    import_dist44 = __toESM(require_dist());
    init_concat();
    init_to_string();
    init_from_string();
    init_esm2();
    init_constants();
  }
});

// node_modules/@walletconnect/relay-auth/dist/esm/api.js
function generateKeyPair(seed = (0, import_random.randomBytes)(KEY_PAIR_SEED_LENGTH)) {
  return ed25519.generateKeyPairFromSeed(seed);
}
async function signJWT(sub, aud, ttl, keyPair2, iat = (0, import_time2.fromMiliseconds)(Date.now())) {
  const header = { alg: JWT_IRIDIUM_ALG, typ: JWT_IRIDIUM_TYP };
  const iss = encodeIss(keyPair2.publicKey);
  const exp = iat + ttl;
  const payload = { iss, sub, aud, iat, exp };
  const data = encodeData({ header, payload });
  const signature2 = ed25519.sign(keyPair2.secretKey, data);
  return encodeJWT({ header, payload, signature: signature2 });
}
var import_dist45, ed25519, import_random, import_time2;
var init_api = __esm({
  "node_modules/@walletconnect/relay-auth/dist/esm/api.js"() {
    import_dist45 = __toESM(require_dist());
    ed25519 = __toESM(require_ed25519());
    import_random = __toESM(require_random());
    import_time2 = __toESM(require_cjs());
    init_constants();
    init_utils();
  }
});

// node_modules/@walletconnect/relay-auth/dist/esm/types.js
var import_dist46;
var init_types = __esm({
  "node_modules/@walletconnect/relay-auth/dist/esm/types.js"() {
    import_dist46 = __toESM(require_dist());
  }
});

// node_modules/@walletconnect/relay-auth/dist/esm/index.js
var import_dist47;
var init_esm3 = __esm({
  "node_modules/@walletconnect/relay-auth/dist/esm/index.js"() {
    import_dist47 = __toESM(require_dist());
    init_api();
    init_constants();
    init_types();
    init_utils();
  }
});

// node_modules/detect-browser/es/index.js
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  return ua !== "" && userAgentRules.reduce(function(matched, _a2) {
    var browser = _a2[0], regex = _a2[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version12 = versionParts.join(".");
  var os = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version12, os, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version12, os);
}
function detectOS(ua) {
  for (var ii2 = 0, count2 = operatingSystemRules.length; ii2 < count2; ii2++) {
    var _a2 = operatingSystemRules[ii2], os = _a2[0], regex = _a2[1];
    var match = regex.exec(ua);
    if (match) {
      return os;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count2) {
  var output = [];
  for (var ii2 = 0; ii2 < count2; ii2++) {
    output.push("0");
  }
  return output;
}
var import_dist48, __spreadArray, BrowserInfo, NodeInfo, SearchBotDeviceInfo, BotInfo, ReactNativeInfo, SEARCHBOX_UA_REGEX, SEARCHBOT_OS_REGEX, REQUIRED_VERSION_PARTS, userAgentRules, operatingSystemRules;
var init_es = __esm({
  "node_modules/detect-browser/es/index.js"() {
    import_dist48 = __toESM(require_dist());
    __spreadArray = function(to2, from4, pack) {
      if (pack || arguments.length === 2) for (var i5 = 0, l6 = from4.length, ar3; i5 < l6; i5++) {
        if (ar3 || !(i5 in from4)) {
          if (!ar3) ar3 = Array.prototype.slice.call(from4, 0, i5);
          ar3[i5] = from4[i5];
        }
      }
      return to2.concat(ar3 || Array.prototype.slice.call(from4));
    };
    BrowserInfo = /** @class */
    /* @__PURE__ */ function() {
      function BrowserInfo2(name2, version12, os) {
        this.name = name2;
        this.version = version12;
        this.os = os;
        this.type = "browser";
      }
      return BrowserInfo2;
    }();
    NodeInfo = /** @class */
    /* @__PURE__ */ function() {
      function NodeInfo2(version12) {
        this.version = version12;
        this.type = "node";
        this.name = "node";
        this.os = process.platform;
      }
      return NodeInfo2;
    }();
    SearchBotDeviceInfo = /** @class */
    /* @__PURE__ */ function() {
      function SearchBotDeviceInfo2(name2, version12, os, bot) {
        this.name = name2;
        this.version = version12;
        this.os = os;
        this.bot = bot;
        this.type = "bot-device";
      }
      return SearchBotDeviceInfo2;
    }();
    BotInfo = /** @class */
    /* @__PURE__ */ function() {
      function BotInfo2() {
        this.type = "bot";
        this.bot = true;
        this.name = "bot";
        this.version = null;
        this.os = null;
      }
      return BotInfo2;
    }();
    ReactNativeInfo = /** @class */
    /* @__PURE__ */ function() {
      function ReactNativeInfo2() {
        this.type = "react-native";
        this.name = "react-native";
        this.version = null;
        this.os = null;
      }
      return ReactNativeInfo2;
    }();
    SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
    SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    REQUIRED_VERSION_PARTS = 3;
    userAgentRules = [
      ["aol", /AOLShield\/([0-9\._]+)/],
      ["edge", /Edge\/([0-9\._]+)/],
      ["edge-ios", /EdgiOS\/([0-9\._]+)/],
      ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
      ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
      ["samsung", /SamsungBrowser\/([0-9\.]+)/],
      ["silk", /\bSilk\/([0-9._-]+)\b/],
      ["miui", /MiuiBrowser\/([0-9\.]+)$/],
      ["beaker", /BeakerBrowser\/([0-9\.]+)/],
      ["edge-chromium", /EdgA?\/([0-9\.]+)/],
      [
        "chromium-webview",
        /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
      ],
      ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
      ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
      ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
      ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
      ["fxios", /FxiOS\/([0-9\.]+)/],
      ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
      ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
      ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
      ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
      ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
      ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
      ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
      ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
      ["ie", /MSIE\s(7\.0)/],
      ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
      ["android", /Android\s([0-9\.]+)/],
      ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
      ["safari", /Version\/([0-9\._]+).*Safari/],
      ["facebook", /FB[AS]V\/([0-9\.]+)/],
      ["instagram", /Instagram\s([0-9\.]+)/],
      ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
      ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
      ["curl", /^curl\/([0-9\.]+)$/],
      ["searchbot", SEARCHBOX_UA_REGEX]
    ];
    operatingSystemRules = [
      ["iOS", /iP(hone|od|ad)/],
      ["Android OS", /Android/],
      ["BlackBerry OS", /BlackBerry|BB10/],
      ["Windows Mobile", /IEMobile/],
      ["Amazon OS", /Kindle/],
      ["Windows 3.11", /Win16/],
      ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
      ["Windows 98", /(Windows 98)|(Win98)/],
      ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
      ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
      ["Windows Server 2003", /(Windows NT 5.2)/],
      ["Windows Vista", /(Windows NT 6.0)/],
      ["Windows 7", /(Windows NT 6.1)/],
      ["Windows 8", /(Windows NT 6.2)/],
      ["Windows 8.1", /(Windows NT 6.3)/],
      ["Windows 10", /(Windows NT 10.0)/],
      ["Windows ME", /Windows ME/],
      ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
      ["Open BSD", /OpenBSD/],
      ["Sun OS", /SunOS/],
      ["Chrome OS", /CrOS/],
      ["Linux", /(Linux)|(X11)/],
      ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
      ["QNX", /QNX/],
      ["BeOS", /BeOS/],
      ["OS/2", /OS\/2/]
    ];
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e3) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i5 = 0; i5 < links.length; i5++) {
          const link = links[i5];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i5 = 0; i5 < metaTags.length; i5++) {
          const tag = metaTags[i5];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/strict-uri-encode/index.js
var require_strict_uri_encode = __commonJS({
  "node_modules/strict-uri-encode/index.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    module.exports = (str2) => encodeURIComponent(str2).replace(/[!'()*]/g, (x6) => `%${x6.charCodeAt(0).toString(16).toUpperCase()}`);
  }
});

// node_modules/decode-uri-component/index.js
var require_decode_uri_component = __commonJS({
  "node_modules/decode-uri-component/index.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var token = "%[a-f0-9]{2}";
    var singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");
    var multiMatcher = new RegExp("(" + token + ")+", "gi");
    function decodeComponents(components, split) {
      try {
        return [decodeURIComponent(components.join(""))];
      } catch (err2) {
      }
      if (components.length === 1) {
        return components;
      }
      split = split || 1;
      var left = components.slice(0, split);
      var right = components.slice(split);
      return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }
    function decode8(input) {
      try {
        return decodeURIComponent(input);
      } catch (err2) {
        var tokens = input.match(singleMatcher) || [];
        for (var i5 = 1; i5 < tokens.length; i5++) {
          input = decodeComponents(tokens, i5).join("");
          tokens = input.match(singleMatcher) || [];
        }
        return input;
      }
    }
    function customDecodeURIComponent(input) {
      var replaceMap = {
        "%FE%FF": "��",
        "%FF%FE": "��"
      };
      var match = multiMatcher.exec(input);
      while (match) {
        try {
          replaceMap[match[0]] = decodeURIComponent(match[0]);
        } catch (err2) {
          var result = decode8(match[0]);
          if (result !== match[0]) {
            replaceMap[match[0]] = result;
          }
        }
        match = multiMatcher.exec(input);
      }
      replaceMap["%C2"] = "�";
      var entries = Object.keys(replaceMap);
      for (var i5 = 0; i5 < entries.length; i5++) {
        var key2 = entries[i5];
        input = input.replace(new RegExp(key2, "g"), replaceMap[key2]);
      }
      return input;
    }
    module.exports = function(encodedURI) {
      if (typeof encodedURI !== "string") {
        throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
      }
      try {
        encodedURI = encodedURI.replace(/\+/g, " ");
        return decodeURIComponent(encodedURI);
      } catch (err2) {
        return customDecodeURIComponent(encodedURI);
      }
    };
  }
});

// node_modules/split-on-first/index.js
var require_split_on_first = __commonJS({
  "node_modules/split-on-first/index.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    module.exports = (string3, separator) => {
      if (!(typeof string3 === "string" && typeof separator === "string")) {
        throw new TypeError("Expected the arguments to be of type `string`");
      }
      if (separator === "") {
        return [string3];
      }
      const separatorIndex = string3.indexOf(separator);
      if (separatorIndex === -1) {
        return [string3];
      }
      return [
        string3.slice(0, separatorIndex),
        string3.slice(separatorIndex + separator.length)
      ];
    };
  }
});

// node_modules/filter-obj/index.js
var require_filter_obj = __commonJS({
  "node_modules/filter-obj/index.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    module.exports = function(obj, predicate) {
      var ret = {};
      var keys2 = Object.keys(obj);
      var isArr = Array.isArray(predicate);
      for (var i5 = 0; i5 < keys2.length; i5++) {
        var key2 = keys2[i5];
        var val = obj[key2];
        if (isArr ? predicate.indexOf(key2) !== -1 : predicate(key2, val, obj)) {
          ret[key2] = val;
        }
      }
      return ret;
    };
  }
});

// node_modules/query-string/index.js
var require_query_string = __commonJS({
  "node_modules/query-string/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var strictUriEncode = require_strict_uri_encode();
    var decodeComponent = require_decode_uri_component();
    var splitOnFirst = require_split_on_first();
    var filterObject = require_filter_obj();
    var isNullOrUndefined = (value) => value === null || value === void 0;
    var encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");
    function encoderForArrayFormat(options) {
      switch (options.arrayFormat) {
        case "index":
          return (key2) => (result, value) => {
            const index = result.length;
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, [encode8(key2, options), "[", index, "]"].join("")];
            }
            return [
              ...result,
              [encode8(key2, options), "[", encode8(index, options), "]=", encode8(value, options)].join("")
            ];
          };
        case "bracket":
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, [encode8(key2, options), "[]"].join("")];
            }
            return [...result, [encode8(key2, options), "[]=", encode8(value, options)].join("")];
          };
        case "colon-list-separator":
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, [encode8(key2, options), ":list="].join("")];
            }
            return [...result, [encode8(key2, options), ":list=", encode8(value, options)].join("")];
          };
        case "comma":
        case "separator":
        case "bracket-separator": {
          const keyValueSep = options.arrayFormat === "bracket-separator" ? "[]=" : "=";
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            value = value === null ? "" : value;
            if (result.length === 0) {
              return [[encode8(key2, options), keyValueSep, encode8(value, options)].join("")];
            }
            return [[result, encode8(value, options)].join(options.arrayFormatSeparator)];
          };
        }
        default:
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, encode8(key2, options)];
            }
            return [...result, [encode8(key2, options), "=", encode8(value, options)].join("")];
          };
      }
    }
    function parserForArrayFormat(options) {
      let result;
      switch (options.arrayFormat) {
        case "index":
          return (key2, value, accumulator) => {
            result = /\[(\d*)\]$/.exec(key2);
            key2 = key2.replace(/\[\d*\]$/, "");
            if (!result) {
              accumulator[key2] = value;
              return;
            }
            if (accumulator[key2] === void 0) {
              accumulator[key2] = {};
            }
            accumulator[key2][result[1]] = value;
          };
        case "bracket":
          return (key2, value, accumulator) => {
            result = /(\[\])$/.exec(key2);
            key2 = key2.replace(/\[\]$/, "");
            if (!result) {
              accumulator[key2] = value;
              return;
            }
            if (accumulator[key2] === void 0) {
              accumulator[key2] = [value];
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], value);
          };
        case "colon-list-separator":
          return (key2, value, accumulator) => {
            result = /(:list)$/.exec(key2);
            key2 = key2.replace(/:list$/, "");
            if (!result) {
              accumulator[key2] = value;
              return;
            }
            if (accumulator[key2] === void 0) {
              accumulator[key2] = [value];
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], value);
          };
        case "comma":
        case "separator":
          return (key2, value, accumulator) => {
            const isArray4 = typeof value === "string" && value.includes(options.arrayFormatSeparator);
            const isEncodedArray = typeof value === "string" && !isArray4 && decode8(value, options).includes(options.arrayFormatSeparator);
            value = isEncodedArray ? decode8(value, options) : value;
            const newValue = isArray4 || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item) => decode8(item, options)) : value === null ? value : decode8(value, options);
            accumulator[key2] = newValue;
          };
        case "bracket-separator":
          return (key2, value, accumulator) => {
            const isArray4 = /(\[\])$/.test(key2);
            key2 = key2.replace(/\[\]$/, "");
            if (!isArray4) {
              accumulator[key2] = value ? decode8(value, options) : value;
              return;
            }
            const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map((item) => decode8(item, options));
            if (accumulator[key2] === void 0) {
              accumulator[key2] = arrayValue;
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], arrayValue);
          };
        default:
          return (key2, value, accumulator) => {
            if (accumulator[key2] === void 0) {
              accumulator[key2] = value;
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], value);
          };
      }
    }
    function validateArrayFormatSeparator(value) {
      if (typeof value !== "string" || value.length !== 1) {
        throw new TypeError("arrayFormatSeparator must be single character string");
      }
    }
    function encode8(value, options) {
      if (options.encode) {
        return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
      }
      return value;
    }
    function decode8(value, options) {
      if (options.decode) {
        return decodeComponent(value);
      }
      return value;
    }
    function keysSorter(input) {
      if (Array.isArray(input)) {
        return input.sort();
      }
      if (typeof input === "object") {
        return keysSorter(Object.keys(input)).sort((a6, b4) => Number(a6) - Number(b4)).map((key2) => input[key2]);
      }
      return input;
    }
    function removeHash(input) {
      const hashStart = input.indexOf("#");
      if (hashStart !== -1) {
        input = input.slice(0, hashStart);
      }
      return input;
    }
    function getHash(url) {
      let hash2 = "";
      const hashStart = url.indexOf("#");
      if (hashStart !== -1) {
        hash2 = url.slice(hashStart);
      }
      return hash2;
    }
    function extract(input) {
      input = removeHash(input);
      const queryStart = input.indexOf("?");
      if (queryStart === -1) {
        return "";
      }
      return input.slice(queryStart + 1);
    }
    function parseValue(value, options) {
      if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
        value = Number(value);
      } else if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
        value = value.toLowerCase() === "true";
      }
      return value;
    }
    function parse2(query, options) {
      options = Object.assign({
        decode: true,
        sort: true,
        arrayFormat: "none",
        arrayFormatSeparator: ",",
        parseNumbers: false,
        parseBooleans: false
      }, options);
      validateArrayFormatSeparator(options.arrayFormatSeparator);
      const formatter = parserForArrayFormat(options);
      const ret = /* @__PURE__ */ Object.create(null);
      if (typeof query !== "string") {
        return ret;
      }
      query = query.trim().replace(/^[?#&]/, "");
      if (!query) {
        return ret;
      }
      for (const param of query.split("&")) {
        if (param === "") {
          continue;
        }
        let [key2, value] = splitOnFirst(options.decode ? param.replace(/\+/g, " ") : param, "=");
        value = value === void 0 ? null : ["comma", "separator", "bracket-separator"].includes(options.arrayFormat) ? value : decode8(value, options);
        formatter(decode8(key2, options), value, ret);
      }
      for (const key2 of Object.keys(ret)) {
        const value = ret[key2];
        if (typeof value === "object" && value !== null) {
          for (const k5 of Object.keys(value)) {
            value[k5] = parseValue(value[k5], options);
          }
        } else {
          ret[key2] = parseValue(value, options);
        }
      }
      if (options.sort === false) {
        return ret;
      }
      return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key2) => {
        const value = ret[key2];
        if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) {
          result[key2] = keysSorter(value);
        } else {
          result[key2] = value;
        }
        return result;
      }, /* @__PURE__ */ Object.create(null));
    }
    exports.extract = extract;
    exports.parse = parse2;
    exports.stringify = (object, options) => {
      if (!object) {
        return "";
      }
      options = Object.assign({
        encode: true,
        strict: true,
        arrayFormat: "none",
        arrayFormatSeparator: ","
      }, options);
      validateArrayFormatSeparator(options.arrayFormatSeparator);
      const shouldFilter = (key2) => options.skipNull && isNullOrUndefined(object[key2]) || options.skipEmptyString && object[key2] === "";
      const formatter = encoderForArrayFormat(options);
      const objectCopy = {};
      for (const key2 of Object.keys(object)) {
        if (!shouldFilter(key2)) {
          objectCopy[key2] = object[key2];
        }
      }
      const keys2 = Object.keys(objectCopy);
      if (options.sort !== false) {
        keys2.sort(options.sort);
      }
      return keys2.map((key2) => {
        const value = object[key2];
        if (value === void 0) {
          return "";
        }
        if (value === null) {
          return encode8(key2, options);
        }
        if (Array.isArray(value)) {
          if (value.length === 0 && options.arrayFormat === "bracket-separator") {
            return encode8(key2, options) + "[]";
          }
          return value.reduce(formatter(key2), []).join("&");
        }
        return encode8(key2, options) + "=" + encode8(value, options);
      }).filter((x6) => x6.length > 0).join("&");
    };
    exports.parseUrl = (url, options) => {
      options = Object.assign({
        decode: true
      }, options);
      const [url_, hash2] = splitOnFirst(url, "#");
      return Object.assign(
        {
          url: url_.split("?")[0] || "",
          query: parse2(extract(url), options)
        },
        options && options.parseFragmentIdentifier && hash2 ? { fragmentIdentifier: decode8(hash2, options) } : {}
      );
    };
    exports.stringifyUrl = (object, options) => {
      options = Object.assign({
        encode: true,
        strict: true,
        [encodeFragmentIdentifier]: true
      }, options);
      const url = removeHash(object.url).split("?")[0] || "";
      const queryFromUrl = exports.extract(object.url);
      const parsedQueryFromUrl = exports.parse(queryFromUrl, { sort: false });
      const query = Object.assign(parsedQueryFromUrl, object.query);
      let queryString = exports.stringify(query, options);
      if (queryString) {
        queryString = `?${queryString}`;
      }
      let hash2 = getHash(object.url);
      if (object.fragmentIdentifier) {
        hash2 = `#${options[encodeFragmentIdentifier] ? encode8(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
      }
      return `${url}${queryString}${hash2}`;
    };
    exports.pick = (input, filter2, options) => {
      options = Object.assign({
        parseFragmentIdentifier: true,
        [encodeFragmentIdentifier]: false
      }, options);
      const { url, query, fragmentIdentifier } = exports.parseUrl(input, options);
      return exports.stringifyUrl({
        url,
        query: filterObject(query, filter2),
        fragmentIdentifier
      }, options);
    };
    exports.exclude = (input, filter2, options) => {
      const exclusionFilter = Array.isArray(filter2) ? (key2) => !filter2.includes(key2) : (key2, value) => !filter2(key2, value);
      return exports.pick(input, exclusionFilter, options);
    };
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n7, s4) {
          return methods["cshake" + bits2].update(message, outputBits, n7, s4)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key2, message, outputBits, s4) {
          return methods["kmac" + bits2].update(key2, message, outputBits, s4)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i6 = 0; i6 < OUTPUT_TYPES.length; ++i6) {
          var type = OUTPUT_TYPES[i6];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w4 = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n7, s4) {
          if (!n7 && !s4) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n7, s4], w4);
          }
        };
        method.update = function(message, outputBits, n7, s4) {
          return method.create(outputBits, n7, s4).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w4 = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key2, outputBits, s4) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s4], w4).bytepad([key2], w4);
        };
        method.update = function(key2, message, outputBits, s4) {
          return method.create(key2, outputBits, s4).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i5 = 0; i5 < algorithms.length; ++i5) {
        var algorithm = algorithms[i5];
        var bits = algorithm.bits;
        for (var j3 = 0; j3 < bits.length; ++j3) {
          var methodName = algorithm.name + "_" + bits[j3];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j3], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j3];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i6 = 0; i6 < 50; ++i6) {
          this.s[i6] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length2 = message.length, blockCount = this.blockCount, index = 0, s4 = this.s, i6, code2;
        while (index < length2) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i6 = 1; i6 < blockCount + 1; ++i6) {
              blocks[i6] = 0;
            }
          }
          if (notString) {
            for (i6 = this.start; index < length2 && i6 < byteCount; ++index) {
              blocks[i6 >> 2] |= message[index] << SHIFT[i6++ & 3];
            }
          } else {
            for (i6 = this.start; index < length2 && i6 < byteCount; ++index) {
              code2 = message.charCodeAt(index);
              if (code2 < 128) {
                blocks[i6 >> 2] |= code2 << SHIFT[i6++ & 3];
              } else if (code2 < 2048) {
                blocks[i6 >> 2] |= (192 | code2 >> 6) << SHIFT[i6++ & 3];
                blocks[i6 >> 2] |= (128 | code2 & 63) << SHIFT[i6++ & 3];
              } else if (code2 < 55296 || code2 >= 57344) {
                blocks[i6 >> 2] |= (224 | code2 >> 12) << SHIFT[i6++ & 3];
                blocks[i6 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i6++ & 3];
                blocks[i6 >> 2] |= (128 | code2 & 63) << SHIFT[i6++ & 3];
              } else {
                code2 = 65536 + ((code2 & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i6 >> 2] |= (240 | code2 >> 18) << SHIFT[i6++ & 3];
                blocks[i6 >> 2] |= (128 | code2 >> 12 & 63) << SHIFT[i6++ & 3];
                blocks[i6 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i6++ & 3];
                blocks[i6 >> 2] |= (128 | code2 & 63) << SHIFT[i6++ & 3];
              }
            }
          }
          this.lastByteIndex = i6;
          if (i6 >= byteCount) {
            this.start = i6 - byteCount;
            this.block = blocks[blockCount];
            for (i6 = 0; i6 < blockCount; ++i6) {
              s4[i6] ^= blocks[i6];
            }
            f3(s4);
            this.reset = true;
          } else {
            this.start = i6;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x6, right) {
        var o4 = x6 & 255, n7 = 1;
        var bytes = [o4];
        x6 = x6 >> 8;
        o4 = x6 & 255;
        while (o4 > 0) {
          bytes.unshift(o4);
          x6 = x6 >> 8;
          o4 = x6 & 255;
          ++n7;
        }
        if (right) {
          bytes.push(n7);
        } else {
          bytes.unshift(n7);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str2) {
        var notString, type = typeof str2;
        if (type !== "string") {
          if (type === "object") {
            if (str2 === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str2.constructor === ArrayBuffer) {
              str2 = new Uint8Array(str2);
            } else if (!Array.isArray(str2)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str2)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length2 = str2.length;
        if (notString) {
          bytes = length2;
        } else {
          for (var i6 = 0; i6 < str2.length; ++i6) {
            var code2 = str2.charCodeAt(i6);
            if (code2 < 128) {
              bytes += 1;
            } else if (code2 < 2048) {
              bytes += 2;
            } else if (code2 < 55296 || code2 >= 57344) {
              bytes += 3;
            } else {
              code2 = 65536 + ((code2 & 1023) << 10 | str2.charCodeAt(++i6) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str2);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w4) {
        var bytes = this.encode(w4);
        for (var i6 = 0; i6 < strs.length; ++i6) {
          bytes += this.encodeString(strs[i6]);
        }
        var paddingBytes = w4 - bytes % w4;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i6 = this.lastByteIndex, blockCount = this.blockCount, s4 = this.s;
        blocks[i6 >> 2] |= this.padding[i6 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i6 = 1; i6 < blockCount + 1; ++i6) {
            blocks[i6] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i6 = 0; i6 < blockCount; ++i6) {
          s4[i6] ^= blocks[i6];
        }
        f3(s4);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s4 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i6 = 0, j4 = 0;
        var hex = "", block;
        while (j4 < outputBlocks) {
          for (i6 = 0; i6 < blockCount && j4 < outputBlocks; ++i6, ++j4) {
            block = s4[i6];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j4 % blockCount === 0) {
            f3(s4);
            i6 = 0;
          }
        }
        if (extraBytes) {
          block = s4[i6];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s4 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i6 = 0, j4 = 0;
        var bytes = this.outputBits >> 3;
        var buffer2;
        if (extraBytes) {
          buffer2 = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer2 = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer2);
        while (j4 < outputBlocks) {
          for (i6 = 0; i6 < blockCount && j4 < outputBlocks; ++i6, ++j4) {
            array[j4] = s4[i6];
          }
          if (j4 % blockCount === 0) {
            f3(s4);
          }
        }
        if (extraBytes) {
          array[i6] = s4[i6];
          buffer2 = buffer2.slice(0, bytes);
        }
        return buffer2;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s4 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i6 = 0, j4 = 0;
        var array = [], offset, block;
        while (j4 < outputBlocks) {
          for (i6 = 0; i6 < blockCount && j4 < outputBlocks; ++i6, ++j4) {
            offset = j4 << 2;
            block = s4[i6];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j4 % blockCount === 0) {
            f3(s4);
          }
        }
        if (extraBytes) {
          offset = j4 << 2;
          block = s4[i6];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f3 = function(s4) {
        var h6, l6, n7, c0, c1, c22, c32, c42, c5, c6, c7, c8, c9, b0, b1, b22, b32, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b222, b23, b24, b25, b26, b27, b28, b29, b30, b31, b322, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n7 = 0; n7 < 48; n7 += 2) {
          c0 = s4[0] ^ s4[10] ^ s4[20] ^ s4[30] ^ s4[40];
          c1 = s4[1] ^ s4[11] ^ s4[21] ^ s4[31] ^ s4[41];
          c22 = s4[2] ^ s4[12] ^ s4[22] ^ s4[32] ^ s4[42];
          c32 = s4[3] ^ s4[13] ^ s4[23] ^ s4[33] ^ s4[43];
          c42 = s4[4] ^ s4[14] ^ s4[24] ^ s4[34] ^ s4[44];
          c5 = s4[5] ^ s4[15] ^ s4[25] ^ s4[35] ^ s4[45];
          c6 = s4[6] ^ s4[16] ^ s4[26] ^ s4[36] ^ s4[46];
          c7 = s4[7] ^ s4[17] ^ s4[27] ^ s4[37] ^ s4[47];
          c8 = s4[8] ^ s4[18] ^ s4[28] ^ s4[38] ^ s4[48];
          c9 = s4[9] ^ s4[19] ^ s4[29] ^ s4[39] ^ s4[49];
          h6 = c8 ^ (c22 << 1 | c32 >>> 31);
          l6 = c9 ^ (c32 << 1 | c22 >>> 31);
          s4[0] ^= h6;
          s4[1] ^= l6;
          s4[10] ^= h6;
          s4[11] ^= l6;
          s4[20] ^= h6;
          s4[21] ^= l6;
          s4[30] ^= h6;
          s4[31] ^= l6;
          s4[40] ^= h6;
          s4[41] ^= l6;
          h6 = c0 ^ (c42 << 1 | c5 >>> 31);
          l6 = c1 ^ (c5 << 1 | c42 >>> 31);
          s4[2] ^= h6;
          s4[3] ^= l6;
          s4[12] ^= h6;
          s4[13] ^= l6;
          s4[22] ^= h6;
          s4[23] ^= l6;
          s4[32] ^= h6;
          s4[33] ^= l6;
          s4[42] ^= h6;
          s4[43] ^= l6;
          h6 = c22 ^ (c6 << 1 | c7 >>> 31);
          l6 = c32 ^ (c7 << 1 | c6 >>> 31);
          s4[4] ^= h6;
          s4[5] ^= l6;
          s4[14] ^= h6;
          s4[15] ^= l6;
          s4[24] ^= h6;
          s4[25] ^= l6;
          s4[34] ^= h6;
          s4[35] ^= l6;
          s4[44] ^= h6;
          s4[45] ^= l6;
          h6 = c42 ^ (c8 << 1 | c9 >>> 31);
          l6 = c5 ^ (c9 << 1 | c8 >>> 31);
          s4[6] ^= h6;
          s4[7] ^= l6;
          s4[16] ^= h6;
          s4[17] ^= l6;
          s4[26] ^= h6;
          s4[27] ^= l6;
          s4[36] ^= h6;
          s4[37] ^= l6;
          s4[46] ^= h6;
          s4[47] ^= l6;
          h6 = c6 ^ (c0 << 1 | c1 >>> 31);
          l6 = c7 ^ (c1 << 1 | c0 >>> 31);
          s4[8] ^= h6;
          s4[9] ^= l6;
          s4[18] ^= h6;
          s4[19] ^= l6;
          s4[28] ^= h6;
          s4[29] ^= l6;
          s4[38] ^= h6;
          s4[39] ^= l6;
          s4[48] ^= h6;
          s4[49] ^= l6;
          b0 = s4[0];
          b1 = s4[1];
          b322 = s4[11] << 4 | s4[10] >>> 28;
          b33 = s4[10] << 4 | s4[11] >>> 28;
          b14 = s4[20] << 3 | s4[21] >>> 29;
          b15 = s4[21] << 3 | s4[20] >>> 29;
          b46 = s4[31] << 9 | s4[30] >>> 23;
          b47 = s4[30] << 9 | s4[31] >>> 23;
          b28 = s4[40] << 18 | s4[41] >>> 14;
          b29 = s4[41] << 18 | s4[40] >>> 14;
          b20 = s4[2] << 1 | s4[3] >>> 31;
          b21 = s4[3] << 1 | s4[2] >>> 31;
          b22 = s4[13] << 12 | s4[12] >>> 20;
          b32 = s4[12] << 12 | s4[13] >>> 20;
          b34 = s4[22] << 10 | s4[23] >>> 22;
          b35 = s4[23] << 10 | s4[22] >>> 22;
          b16 = s4[33] << 13 | s4[32] >>> 19;
          b17 = s4[32] << 13 | s4[33] >>> 19;
          b48 = s4[42] << 2 | s4[43] >>> 30;
          b49 = s4[43] << 2 | s4[42] >>> 30;
          b40 = s4[5] << 30 | s4[4] >>> 2;
          b41 = s4[4] << 30 | s4[5] >>> 2;
          b222 = s4[14] << 6 | s4[15] >>> 26;
          b23 = s4[15] << 6 | s4[14] >>> 26;
          b4 = s4[25] << 11 | s4[24] >>> 21;
          b5 = s4[24] << 11 | s4[25] >>> 21;
          b36 = s4[34] << 15 | s4[35] >>> 17;
          b37 = s4[35] << 15 | s4[34] >>> 17;
          b18 = s4[45] << 29 | s4[44] >>> 3;
          b19 = s4[44] << 29 | s4[45] >>> 3;
          b10 = s4[6] << 28 | s4[7] >>> 4;
          b11 = s4[7] << 28 | s4[6] >>> 4;
          b42 = s4[17] << 23 | s4[16] >>> 9;
          b43 = s4[16] << 23 | s4[17] >>> 9;
          b24 = s4[26] << 25 | s4[27] >>> 7;
          b25 = s4[27] << 25 | s4[26] >>> 7;
          b6 = s4[36] << 21 | s4[37] >>> 11;
          b7 = s4[37] << 21 | s4[36] >>> 11;
          b38 = s4[47] << 24 | s4[46] >>> 8;
          b39 = s4[46] << 24 | s4[47] >>> 8;
          b30 = s4[8] << 27 | s4[9] >>> 5;
          b31 = s4[9] << 27 | s4[8] >>> 5;
          b12 = s4[18] << 20 | s4[19] >>> 12;
          b13 = s4[19] << 20 | s4[18] >>> 12;
          b44 = s4[29] << 7 | s4[28] >>> 25;
          b45 = s4[28] << 7 | s4[29] >>> 25;
          b26 = s4[38] << 8 | s4[39] >>> 24;
          b27 = s4[39] << 8 | s4[38] >>> 24;
          b8 = s4[48] << 14 | s4[49] >>> 18;
          b9 = s4[49] << 14 | s4[48] >>> 18;
          s4[0] = b0 ^ ~b22 & b4;
          s4[1] = b1 ^ ~b32 & b5;
          s4[10] = b10 ^ ~b12 & b14;
          s4[11] = b11 ^ ~b13 & b15;
          s4[20] = b20 ^ ~b222 & b24;
          s4[21] = b21 ^ ~b23 & b25;
          s4[30] = b30 ^ ~b322 & b34;
          s4[31] = b31 ^ ~b33 & b35;
          s4[40] = b40 ^ ~b42 & b44;
          s4[41] = b41 ^ ~b43 & b45;
          s4[2] = b22 ^ ~b4 & b6;
          s4[3] = b32 ^ ~b5 & b7;
          s4[12] = b12 ^ ~b14 & b16;
          s4[13] = b13 ^ ~b15 & b17;
          s4[22] = b222 ^ ~b24 & b26;
          s4[23] = b23 ^ ~b25 & b27;
          s4[32] = b322 ^ ~b34 & b36;
          s4[33] = b33 ^ ~b35 & b37;
          s4[42] = b42 ^ ~b44 & b46;
          s4[43] = b43 ^ ~b45 & b47;
          s4[4] = b4 ^ ~b6 & b8;
          s4[5] = b5 ^ ~b7 & b9;
          s4[14] = b14 ^ ~b16 & b18;
          s4[15] = b15 ^ ~b17 & b19;
          s4[24] = b24 ^ ~b26 & b28;
          s4[25] = b25 ^ ~b27 & b29;
          s4[34] = b34 ^ ~b36 & b38;
          s4[35] = b35 ^ ~b37 & b39;
          s4[44] = b44 ^ ~b46 & b48;
          s4[45] = b45 ^ ~b47 & b49;
          s4[6] = b6 ^ ~b8 & b0;
          s4[7] = b7 ^ ~b9 & b1;
          s4[16] = b16 ^ ~b18 & b10;
          s4[17] = b17 ^ ~b19 & b11;
          s4[26] = b26 ^ ~b28 & b20;
          s4[27] = b27 ^ ~b29 & b21;
          s4[36] = b36 ^ ~b38 & b30;
          s4[37] = b37 ^ ~b39 & b31;
          s4[46] = b46 ^ ~b48 & b40;
          s4[47] = b47 ^ ~b49 & b41;
          s4[8] = b8 ^ ~b0 & b22;
          s4[9] = b9 ^ ~b1 & b32;
          s4[18] = b18 ^ ~b10 & b12;
          s4[19] = b19 ^ ~b11 & b13;
          s4[28] = b28 ^ ~b20 & b222;
          s4[29] = b29 ^ ~b21 & b23;
          s4[38] = b38 ^ ~b30 & b322;
          s4[39] = b39 ^ ~b31 & b33;
          s4[48] = b48 ^ ~b40 & b42;
          s4[49] = b49 ^ ~b41 & b43;
          s4[0] ^= RC[n7];
          s4[1] ^= RC[n7 + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i5 = 0; i5 < methodNames.length; ++i5) {
          root[methodNames[i5]] = methods[methodNames[i5]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@ethersproject/logger/lib.esm/_version.js
var import_dist49, version2;
var init_version = __esm({
  "node_modules/@ethersproject/logger/lib.esm/_version.js"() {
    import_dist49 = __toESM(require_dist());
    version2 = "logger/5.7.0";
  }
});

// node_modules/@ethersproject/logger/lib.esm/index.js
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var import_dist50, _permanentCensorErrors, _censorErrors, LogLevels, _logLevel, _globalLogger, _normalizeError, LogLevel, ErrorCode, HEX, Logger;
var init_lib = __esm({
  "node_modules/@ethersproject/logger/lib.esm/index.js"() {
    "use strict";
    import_dist50 = __toESM(require_dist());
    init_version();
    _permanentCensorErrors = false;
    _censorErrors = false;
    LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    _logLevel = LogLevels["default"];
    _globalLogger = null;
    _normalizeError = _checkNormalize();
    (function(LogLevel2) {
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["INFO"] = "INFO";
      LogLevel2["WARNING"] = "WARNING";
      LogLevel2["ERROR"] = "ERROR";
      LogLevel2["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    (function(ErrorCode2) {
      ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
      ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
      ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
      ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    HEX = "0123456789abcdef";
    Logger = class _Logger {
      constructor(version12) {
        Object.defineProperty(this, "version", {
          enumerable: true,
          value: version12,
          writable: false
        });
      }
      _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
          this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
          return;
        }
        console.log.apply(console, args);
      }
      debug(...args) {
        this._log(_Logger.levels.DEBUG, args);
      }
      info(...args) {
        this._log(_Logger.levels.INFO, args);
      }
      warn(...args) {
        this._log(_Logger.levels.WARNING, args);
      }
      makeError(message, code2, params) {
        if (_censorErrors) {
          return this.makeError("censored error", code2, {});
        }
        if (!code2) {
          code2 = _Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
          params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key2) => {
          const value = params[key2];
          try {
            if (value instanceof Uint8Array) {
              let hex = "";
              for (let i5 = 0; i5 < value.length; i5++) {
                hex += HEX[value[i5] >> 4];
                hex += HEX[value[i5] & 15];
              }
              messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
            } else {
              messageDetails.push(key2 + "=" + JSON.stringify(value));
            }
          } catch (error2) {
            messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
          }
        });
        messageDetails.push(`code=${code2}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch (code2) {
          case ErrorCode.NUMERIC_FAULT: {
            url = "NUMERIC_FAULT";
            const fault = message;
            switch (fault) {
              case "overflow":
              case "underflow":
              case "division-by-zero":
                url += "-" + fault;
                break;
              case "negative-power":
              case "negative-width":
                url += "-unsupported";
                break;
              case "unbound-bitwise-result":
                url += "-unbound-result";
                break;
            }
            break;
          }
          case ErrorCode.CALL_EXCEPTION:
          case ErrorCode.INSUFFICIENT_FUNDS:
          case ErrorCode.MISSING_NEW:
          case ErrorCode.NONCE_EXPIRED:
          case ErrorCode.REPLACEMENT_UNDERPRICED:
          case ErrorCode.TRANSACTION_REPLACED:
          case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
            url = code2;
            break;
        }
        if (url) {
          message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
          message += " (" + messageDetails.join(", ") + ")";
        }
        const error = new Error(message);
        error.reason = reason;
        error.code = code2;
        Object.keys(params).forEach(function(key2) {
          error[key2] = params[key2];
        });
        return error;
      }
      throwError(message, code2, params) {
        throw this.makeError(message, code2, params);
      }
      throwArgumentError(message, name2, value) {
        return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
          argument: name2,
          value
        });
      }
      assert(condition, message, code2, params) {
        if (!!condition) {
          return;
        }
        this.throwError(message, code2, params);
      }
      assertArgument(condition, message, name2, value) {
        if (!!condition) {
          return;
        }
        this.throwArgumentError(message, name2, value);
      }
      checkNormalize(message) {
        if (message == null) {
          message = "platform missing String.prototype.normalize";
        }
        if (_normalizeError) {
          this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "String.prototype.normalize",
            form: _normalizeError
          });
        }
      }
      checkSafeUint53(value, message) {
        if (typeof value !== "number") {
          return;
        }
        if (message == null) {
          message = "value not safe";
        }
        if (value < 0 || value >= 9007199254740991) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "out-of-safe-range",
            value
          });
        }
        if (value % 1) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "non-integer",
            value
          });
        }
      }
      checkArgumentCount(count2, expectedCount, message) {
        if (message) {
          message = ": " + message;
        } else {
          message = "";
        }
        if (count2 < expectedCount) {
          this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
            count: count2,
            expectedCount
          });
        }
        if (count2 > expectedCount) {
          this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
            count: count2,
            expectedCount
          });
        }
      }
      checkNew(target, kind) {
        if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      checkAbstract(target, kind) {
        if (target === kind) {
          this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
        } else if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      static globalLogger() {
        if (!_globalLogger) {
          _globalLogger = new _Logger(version2);
        }
        return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
          this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        if (_permanentCensorErrors) {
          if (!censorship) {
            return;
          }
          this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
          _Logger.globalLogger().warn("invalid log level - " + logLevel);
          return;
        }
        _logLevel = level;
      }
      static from(version12) {
        return new _Logger(version12);
      }
    };
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;
  }
});

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var import_dist51, version3;
var init_version2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
    import_dist51 = __toESM(require_dist());
    version3 = "bytes/5.7.0";
  }
});

// node_modules/@ethersproject/bytes/lib.esm/index.js
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i5 = 0; i5 < value.length; i5++) {
    const v8 = value[i5];
    if (!isInteger(v8) || v8 < 0 || v8 >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i5 = 0; i5 < hex.length; i5 += 2) {
      result.push(parseInt(hex.substring(i5, i5 + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat2(items) {
  const objects = items.map((item) => arrayify(item));
  const length2 = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length2);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function zeroPad(value, length2) {
  value = arrayify(value);
  if (value.length > length2) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length2);
  result.set(value, length2 - value.length);
  return addSlice(result);
}
function isHexString(value, length2) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length2 && value.length !== 2 + 2 * length2) {
    return false;
  }
  return true;
}
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i5 = 0; i5 < value.length; i5++) {
      let v8 = value[i5];
      result += HexCharacters[(v8 & 240) >> 4] + HexCharacters[v8 & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexZeroPad(value, length2) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length2 + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length2 + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes = arrayify(signature2);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs3 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs3);
      const recoveryParam = vs3[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs3[0] &= 127;
      const s4 = hexlify(vs3);
      if (result.s == null) {
        result.s = s4;
      } else if (result.s !== s4) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs2 = arrayify(result.s);
    if (vs2[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs2[0] |= 128;
    }
    const _vs = hexlify(vs2);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
var import_dist52, logger, HexCharacters;
var init_lib2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/index.js"() {
    "use strict";
    import_dist52 = __toESM(require_dist());
    init_lib();
    init_version2();
    logger = new Logger(version3);
    HexCharacters = "0123456789abcdef";
  }
});

// node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}
var import_dist53, import_js_sha3;
var init_lib3 = __esm({
  "node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
    "use strict";
    import_dist53 = __toESM(require_dist());
    import_js_sha3 = __toESM(require_sha3());
    init_lib2();
  }
});

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var import_dist54;
var init_addresses = __esm({
  "node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
    import_dist54 = __toESM(require_dist());
  }
});

// node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base4, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base4 === "le" || base4 === "be") {
            endian = base4;
            base4 = 10;
          }
          this._init(number || 0, base4 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer_polyfill().Buffer;
        }
      } catch (e3) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min2(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base4, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base4, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base4, endian);
        }
        if (base4 === "hex") {
          base4 = 16;
        }
        assert2(base4 === (base4 | 0) && base4 >= 2 && base4 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base4 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base4, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base4, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base4, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base4, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base4, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i5 = 0; i5 < this.length; i5++) {
          this.words[i5] = 0;
        }
        var j3, w4;
        var off = 0;
        if (endian === "be") {
          for (i5 = number.length - 1, j3 = 0; i5 >= 0; i5 -= 3) {
            w4 = number[i5] | number[i5 - 1] << 8 | number[i5 - 2] << 16;
            this.words[j3] |= w4 << off & 67108863;
            this.words[j3 + 1] = w4 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        } else if (endian === "le") {
          for (i5 = 0, j3 = 0; i5 < number.length; i5 += 3) {
            w4 = number[i5] | number[i5 + 1] << 8 | number[i5 + 2] << 16;
            this.words[j3] |= w4 << off & 67108863;
            this.words[j3 + 1] = w4 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string3, index) {
        var c5 = string3.charCodeAt(index);
        if (c5 >= 48 && c5 <= 57) {
          return c5 - 48;
        } else if (c5 >= 65 && c5 <= 70) {
          return c5 - 55;
        } else if (c5 >= 97 && c5 <= 102) {
          return c5 - 87;
        } else {
          assert2(false, "Invalid character in " + string3);
        }
      }
      function parseHexByte(string3, lowerBound, index) {
        var r6 = parseHex4Bits(string3, index);
        if (index - 1 >= lowerBound) {
          r6 |= parseHex4Bits(string3, index - 1) << 4;
        }
        return r6;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i5 = 0; i5 < this.length; i5++) {
          this.words[i5] = 0;
        }
        var off = 0;
        var j3 = 0;
        var w4;
        if (endian === "be") {
          for (i5 = number.length - 1; i5 >= start; i5 -= 2) {
            w4 = parseHexByte(number, start, i5) << off;
            this.words[j3] |= w4 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w4 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i5 = parseLength % 2 === 0 ? start + 1 : start; i5 < number.length; i5 += 2) {
            w4 = parseHexByte(number, start, i5) << off;
            this.words[j3] |= w4 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w4 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str2, start, end, mul3) {
        var r6 = 0;
        var b4 = 0;
        var len = Math.min(str2.length, end);
        for (var i5 = start; i5 < len; i5++) {
          var c5 = str2.charCodeAt(i5) - 48;
          r6 *= mul3;
          if (c5 >= 49) {
            b4 = c5 - 49 + 10;
          } else if (c5 >= 17) {
            b4 = c5 - 17 + 10;
          } else {
            b4 = c5;
          }
          assert2(c5 >= 0 && b4 < mul3, "Invalid character");
          r6 += b4;
        }
        return r6;
      }
      BN3.prototype._parseBase = function _parseBase(number, base4, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base4) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base4 | 0;
        var total = number.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i5 = start; i5 < end; i5 += limbLen) {
          word = parseBase(number, i5, i5 + limbLen, base4);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow = 1;
          word = parseBase(number, i5, number.length, base4);
          for (i5 = 0; i5 < mod2; i5++) {
            pow *= base4;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i5 = 0; i5 < this.length; i5++) {
          dest.words[i5] = this.words[i5];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r6 = new BN3(null);
        this.copy(r6);
        return r6;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e3) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString4(base4, padding2) {
        base4 = base4 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base4 === 16 || base4 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i5 = 0; i5 < this.length; i5++) {
            var w4 = this.words[i5];
            var word = ((w4 << off | carry) & 16777215).toString(16);
            carry = w4 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i5--;
            }
            if (carry !== 0 || i5 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base4 === (base4 | 0) && base4 >= 2 && base4 <= 36) {
          var groupSize = groupSizes[base4];
          var groupBase = groupBases[base4];
          out = "";
          var c5 = this.clone();
          c5.negative = 0;
          while (!c5.isZero()) {
            var r6 = c5.modrn(groupBase).toString(base4);
            c5 = c5.idivn(groupBase);
            if (!c5.isZero()) {
              out = zeros2[groupSize - r6.length] + r6 + out;
            } else {
              out = r6 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length2) {
          return this.toArrayLike(Buffer2, endian, length2);
        };
      }
      BN3.prototype.toArray = function toArray2(endian, length2) {
        return this.toArrayLike(Array, endian, length2);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length2 || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i5 = 0, shift = 0; i5 < this.length; i5++) {
          var word = this.words[i5] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i5 = 0, shift = 0; i5 < this.length; i5++) {
          var word = this.words[i5] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w4) {
          return 32 - Math.clz32(w4);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w4) {
          var t3 = w4;
          var r6 = 0;
          if (t3 >= 4096) {
            r6 += 13;
            t3 >>>= 13;
          }
          if (t3 >= 64) {
            r6 += 7;
            t3 >>>= 7;
          }
          if (t3 >= 8) {
            r6 += 4;
            t3 >>>= 4;
          }
          if (t3 >= 2) {
            r6 += 2;
            t3 >>>= 2;
          }
          return r6 + t3;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w4) {
        if (w4 === 0) return 26;
        var t3 = w4;
        var r6 = 0;
        if ((t3 & 8191) === 0) {
          r6 += 13;
          t3 >>>= 13;
        }
        if ((t3 & 127) === 0) {
          r6 += 7;
          t3 >>>= 7;
        }
        if ((t3 & 15) === 0) {
          r6 += 4;
          t3 >>>= 4;
        }
        if ((t3 & 3) === 0) {
          r6 += 2;
          t3 >>>= 2;
        }
        if ((t3 & 1) === 0) {
          r6++;
        }
        return r6;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w4 = this.words[this.length - 1];
        var hi2 = this._countBits(w4);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w4 = new Array(num.bitLength());
        for (var bit = 0; bit < w4.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w4[bit] = num.words[off] >>> wbit & 1;
        }
        return w4;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r6 = 0;
        for (var i5 = 0; i5 < this.length; i5++) {
          var b4 = this._zeroBits(this.words[i5]);
          r6 += b4;
          if (b4 !== 26) break;
        }
        return r6;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i5 = 0; i5 < num.length; i5++) {
          this.words[i5] = this.words[i5] | num.words[i5];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or4(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b4;
        if (this.length > num.length) {
          b4 = num;
        } else {
          b4 = this;
        }
        for (var i5 = 0; i5 < b4.length; i5++) {
          this.words[i5] = this.words[i5] & num.words[i5];
        }
        this.length = b4.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a6;
        var b4;
        if (this.length > num.length) {
          a6 = this;
          b4 = num;
        } else {
          a6 = num;
          b4 = this;
        }
        for (var i5 = 0; i5 < b4.length; i5++) {
          this.words[i5] = a6.words[i5] ^ b4.words[i5];
        }
        if (this !== a6) {
          for (; i5 < a6.length; i5++) {
            this.words[i5] = a6.words[i5];
          }
        }
        this.length = a6.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i5 = 0; i5 < bytesNeeded; i5++) {
          this.words[i5] = ~this.words[i5] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i5] = ~this.words[i5] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r6;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r6 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r6 = this.isub(num);
          num.negative = 1;
          return r6._normSign();
        }
        var a6, b4;
        if (this.length > num.length) {
          a6 = this;
          b4 = num;
        } else {
          a6 = num;
          b4 = this;
        }
        var carry = 0;
        for (var i5 = 0; i5 < b4.length; i5++) {
          r6 = (a6.words[i5] | 0) + (b4.words[i5] | 0) + carry;
          this.words[i5] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        for (; carry !== 0 && i5 < a6.length; i5++) {
          r6 = (a6.words[i5] | 0) + carry;
          this.words[i5] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        this.length = a6.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a6 !== this) {
          for (; i5 < a6.length; i5++) {
            this.words[i5] = a6.words[i5];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r6 = this.iadd(num);
          num.negative = 1;
          return r6._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a6, b4;
        if (cmp > 0) {
          a6 = this;
          b4 = num;
        } else {
          a6 = num;
          b4 = this;
        }
        var carry = 0;
        for (var i5 = 0; i5 < b4.length; i5++) {
          r6 = (a6.words[i5] | 0) - (b4.words[i5] | 0) + carry;
          carry = r6 >> 26;
          this.words[i5] = r6 & 67108863;
        }
        for (; carry !== 0 && i5 < a6.length; i5++) {
          r6 = (a6.words[i5] | 0) + carry;
          carry = r6 >> 26;
          this.words[i5] = r6 & 67108863;
        }
        if (carry === 0 && i5 < a6.length && a6 !== this) {
          for (; i5 < a6.length; i5++) {
            this.words[i5] = a6.words[i5];
          }
        }
        this.length = Math.max(this.length, i5);
        if (a6 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a6 = self2.words[0] | 0;
        var b4 = num.words[0] | 0;
        var r6 = a6 * b4;
        var lo2 = r6 & 67108863;
        var carry = r6 / 67108864 | 0;
        out.words[0] = lo2;
        for (var k5 = 1; k5 < len; k5++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k5, num.length - 1);
          for (var j3 = Math.max(0, k5 - self2.length + 1); j3 <= maxJ; j3++) {
            var i5 = k5 - j3 | 0;
            a6 = self2.words[i5] | 0;
            b4 = num.words[j3] | 0;
            r6 = a6 * b4 + rword;
            ncarry += r6 / 67108864 | 0;
            rword = r6 & 67108863;
          }
          out.words[k5] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k5] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a6 = self2.words;
        var b4 = num.words;
        var o4 = out.words;
        var c5 = 0;
        var lo2;
        var mid;
        var hi2;
        var a0 = a6[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a6[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a6[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a6[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a42 = a6[4] | 0;
        var al4 = a42 & 8191;
        var ah4 = a42 >>> 13;
        var a52 = a6[5] | 0;
        var al5 = a52 & 8191;
        var ah5 = a52 >>> 13;
        var a62 = a6[6] | 0;
        var al6 = a62 & 8191;
        var ah6 = a62 >>> 13;
        var a7 = a6[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a6[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a6[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b4[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b4[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b4[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b4[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b42 = b4[4] | 0;
        var bl4 = b42 & 8191;
        var bh4 = b42 >>> 13;
        var b5 = b4[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b4[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b4[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b4[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b4[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo2 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo2 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo2 = lo2 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo2 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo2 = lo2 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo2 = lo2 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w22 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo2 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo2 = lo2 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo2 = lo2 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo2 = lo2 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w32 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
        w32 &= 67108863;
        lo2 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo2 = lo2 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo2 = lo2 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo2 = lo2 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo2 = lo2 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w4 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo2 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo2 = lo2 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo2 = lo2 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo2 = lo2 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo2 = lo2 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo2 = lo2 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w5 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo2 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo2 = lo2 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo2 = lo2 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo2 = lo2 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo2 = lo2 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo2 = lo2 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo2 = lo2 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo2 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo2 = lo2 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo2 = lo2 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo2 = lo2 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo2 = lo2 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo2 = lo2 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo2 = lo2 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo2 = lo2 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo2 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo2 = lo2 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo2 = lo2 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo2 = lo2 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo2 = lo2 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo2 = lo2 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo2 = lo2 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo2 = lo2 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo2 = lo2 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo2 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo2 = lo2 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo2 = lo2 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo2 = lo2 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo2 = lo2 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo2 = lo2 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo2 = lo2 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo2 = lo2 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo2 = lo2 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo2 = lo2 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo2 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo2 = lo2 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo2 = lo2 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo2 = lo2 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo2 = lo2 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo2 = lo2 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo2 = lo2 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo2 = lo2 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo2 = lo2 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo2 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo2 = lo2 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo2 = lo2 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo2 = lo2 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo2 = lo2 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo2 = lo2 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo2 = lo2 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo2 = lo2 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo2 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo2 = lo2 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo2 = lo2 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo2 = lo2 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo2 = lo2 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo2 = lo2 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo2 = lo2 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo2 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo2 = lo2 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo2 = lo2 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo2 = lo2 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo2 = lo2 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo2 = lo2 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo2 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo2 = lo2 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo2 = lo2 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo2 = lo2 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo2 = lo2 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo2 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo2 = lo2 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo2 = lo2 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo2 = lo2 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo2 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo2 = lo2 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo2 = lo2 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo2 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo2 = lo2 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo2 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o4[0] = w0;
        o4[1] = w1;
        o4[2] = w22;
        o4[3] = w32;
        o4[4] = w4;
        o4[5] = w5;
        o4[6] = w6;
        o4[7] = w7;
        o4[8] = w8;
        o4[9] = w9;
        o4[10] = w10;
        o4[11] = w11;
        o4[12] = w12;
        o4[13] = w13;
        o4[14] = w14;
        o4[15] = w15;
        o4[16] = w16;
        o4[17] = w17;
        o4[18] = w18;
        if (c5 !== 0) {
          o4[19] = c5;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k5 = 0; k5 < out.length - 1; k5++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k5, num.length - 1);
          for (var j3 = Math.max(0, k5 - self2.length + 1); j3 <= maxJ; j3++) {
            var i5 = k5 - j3;
            var a6 = self2.words[i5] | 0;
            var b4 = num.words[j3] | 0;
            var r6 = a6 * b4;
            var lo2 = r6 & 67108863;
            ncarry = ncarry + (r6 / 67108864 | 0) | 0;
            lo2 = lo2 + rword | 0;
            rword = lo2 & 67108863;
            ncarry = ncarry + (lo2 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k5] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k5] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x6, y5) {
        this.x = x6;
        this.y = y5;
      }
      FFTM.prototype.makeRBT = function makeRBT(N13) {
        var t3 = new Array(N13);
        var l6 = BN3.prototype._countBits(N13) - 1;
        for (var i5 = 0; i5 < N13; i5++) {
          t3[i5] = this.revBin(i5, l6, N13);
        }
        return t3;
      };
      FFTM.prototype.revBin = function revBin(x6, l6, N13) {
        if (x6 === 0 || x6 === N13 - 1) return x6;
        var rb = 0;
        for (var i5 = 0; i5 < l6; i5++) {
          rb |= (x6 & 1) << l6 - i5 - 1;
          x6 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N13) {
        for (var i5 = 0; i5 < N13; i5++) {
          rtws[i5] = rws[rbt[i5]];
          itws[i5] = iws[rbt[i5]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N13, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N13);
        for (var s4 = 1; s4 < N13; s4 <<= 1) {
          var l6 = s4 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l6);
          var itwdf = Math.sin(2 * Math.PI / l6);
          for (var p5 = 0; p5 < N13; p5 += l6) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j3 = 0; j3 < s4; j3++) {
              var re3 = rtws[p5 + j3];
              var ie2 = itws[p5 + j3];
              var ro2 = rtws[p5 + j3 + s4];
              var io2 = itws[p5 + j3 + s4];
              var rx = rtwdf_ * ro2 - itwdf_ * io2;
              io2 = rtwdf_ * io2 + itwdf_ * ro2;
              ro2 = rx;
              rtws[p5 + j3] = re3 + ro2;
              itws[p5 + j3] = ie2 + io2;
              rtws[p5 + j3 + s4] = re3 - ro2;
              itws[p5 + j3 + s4] = ie2 - io2;
              if (j3 !== l6) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n7, m5) {
        var N13 = Math.max(m5, n7) | 1;
        var odd = N13 & 1;
        var i5 = 0;
        for (N13 = N13 / 2 | 0; N13; N13 = N13 >>> 1) {
          i5++;
        }
        return 1 << i5 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N13) {
        if (N13 <= 1) return;
        for (var i5 = 0; i5 < N13 / 2; i5++) {
          var t3 = rws[i5];
          rws[i5] = rws[N13 - i5 - 1];
          rws[N13 - i5 - 1] = t3;
          t3 = iws[i5];
          iws[i5] = -iws[N13 - i5 - 1];
          iws[N13 - i5 - 1] = -t3;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N13) {
        var carry = 0;
        for (var i5 = 0; i5 < N13 / 2; i5++) {
          var w4 = Math.round(ws2[2 * i5 + 1] / N13) * 8192 + Math.round(ws2[2 * i5] / N13) + carry;
          ws2[i5] = w4 & 67108863;
          if (w4 < 67108864) {
            carry = 0;
          } else {
            carry = w4 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N13) {
        var carry = 0;
        for (var i5 = 0; i5 < len; i5++) {
          carry = carry + (ws2[i5] | 0);
          rws[2 * i5] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i5 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i5 = 2 * len; i5 < N13; ++i5) {
          rws[i5] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N13) {
        var ph = new Array(N13);
        for (var i5 = 0; i5 < N13; i5++) {
          ph[i5] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x6, y5, out) {
        var N13 = 2 * this.guessLen13b(x6.length, y5.length);
        var rbt = this.makeRBT(N13);
        var _5 = this.stub(N13);
        var rws = new Array(N13);
        var rwst = new Array(N13);
        var iwst = new Array(N13);
        var nrws = new Array(N13);
        var nrwst = new Array(N13);
        var niwst = new Array(N13);
        var rmws = out.words;
        rmws.length = N13;
        this.convert13b(x6.words, x6.length, rws, N13);
        this.convert13b(y5.words, y5.length, nrws, N13);
        this.transform(rws, _5, rwst, iwst, N13, rbt);
        this.transform(nrws, _5, nrwst, niwst, N13, rbt);
        for (var i5 = 0; i5 < N13; i5++) {
          var rx = rwst[i5] * nrwst[i5] - iwst[i5] * niwst[i5];
          iwst[i5] = rwst[i5] * niwst[i5] + iwst[i5] * nrwst[i5];
          rwst[i5] = rx;
        }
        this.conjugate(rwst, iwst, N13);
        this.transform(rwst, iwst, rmws, _5, N13, rbt);
        this.conjugate(rmws, _5, N13);
        this.normalize13b(rmws, N13);
        out.negative = x6.negative ^ y5.negative;
        out.length = x6.length + y5.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i5 = 0; i5 < this.length; i5++) {
          var w4 = (this.words[i5] | 0) * num;
          var lo2 = (w4 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w4 / 67108864 | 0;
          carry += lo2 >>> 26;
          this.words[i5] = lo2 & 67108863;
        }
        if (carry !== 0) {
          this.words[i5] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w4 = toBitArray(num);
        if (w4.length === 0) return new BN3(1);
        var res = this;
        for (var i5 = 0; i5 < w4.length; i5++, res = res.sqr()) {
          if (w4[i5] !== 0) break;
        }
        if (++i5 < w4.length) {
          for (var q2 = res.sqr(); i5 < w4.length; i5++, q2 = q2.sqr()) {
            if (w4[i5] === 0) continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s4 = (bits - r6) / 26;
        var carryMask = 67108863 >>> 26 - r6 << 26 - r6;
        var i5;
        if (r6 !== 0) {
          var carry = 0;
          for (i5 = 0; i5 < this.length; i5++) {
            var newCarry = this.words[i5] & carryMask;
            var c5 = (this.words[i5] | 0) - newCarry << r6;
            this.words[i5] = c5 | carry;
            carry = newCarry >>> 26 - r6;
          }
          if (carry) {
            this.words[i5] = carry;
            this.length++;
          }
        }
        if (s4 !== 0) {
          for (i5 = this.length - 1; i5 >= 0; i5--) {
            this.words[i5 + s4] = this.words[i5];
          }
          for (i5 = 0; i5 < s4; i5++) {
            this.words[i5] = 0;
          }
          this.length += s4;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h6;
        if (hint) {
          h6 = (hint - hint % 26) / 26;
        } else {
          h6 = 0;
        }
        var r6 = bits % 26;
        var s4 = Math.min((bits - r6) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r6 << r6;
        var maskedWords = extended;
        h6 -= s4;
        h6 = Math.max(0, h6);
        if (maskedWords) {
          for (var i5 = 0; i5 < s4; i5++) {
            maskedWords.words[i5] = this.words[i5];
          }
          maskedWords.length = s4;
        }
        if (s4 === 0) {
        } else if (this.length > s4) {
          this.length -= s4;
          for (i5 = 0; i5 < this.length; i5++) {
            this.words[i5] = this.words[i5 + s4];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i5 = this.length - 1; i5 >= 0 && (carry !== 0 || i5 >= h6); i5--) {
          var word = this.words[i5] | 0;
          this.words[i5] = carry << 26 - r6 | word >>> r6;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r6 = bit % 26;
        var s4 = (bit - r6) / 26;
        var q2 = 1 << r6;
        if (this.length <= s4) return false;
        var w4 = this.words[s4];
        return !!(w4 & q2);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s4 = (bits - r6) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s4) {
          return this;
        }
        if (r6 !== 0) {
          s4++;
        }
        this.length = Math.min(s4, this.length);
        if (r6 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r6 << r6;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i5 = 0; i5 < this.length && this.words[i5] >= 67108864; i5++) {
          this.words[i5] -= 67108864;
          if (i5 === this.length - 1) {
            this.words[i5 + 1] = 1;
          } else {
            this.words[i5 + 1]++;
          }
        }
        this.length = Math.max(this.length, i5 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i5 = 0; i5 < this.length && this.words[i5] < 0; i5++) {
            this.words[i5] += 67108864;
            this.words[i5 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i5;
        this._expand(len);
        var w4;
        var carry = 0;
        for (i5 = 0; i5 < num.length; i5++) {
          w4 = (this.words[i5 + shift] | 0) + carry;
          var right = (num.words[i5] | 0) * mul3;
          w4 -= right & 67108863;
          carry = (w4 >> 26) - (right / 67108864 | 0);
          this.words[i5 + shift] = w4 & 67108863;
        }
        for (; i5 < this.length - shift; i5++) {
          w4 = (this.words[i5 + shift] | 0) + carry;
          carry = w4 >> 26;
          this.words[i5 + shift] = w4 & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i5 = 0; i5 < this.length; i5++) {
          w4 = -(this.words[i5] | 0) + carry;
          carry = w4 >> 26;
          this.words[i5] = w4 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a6 = this.clone();
        var b4 = num;
        var bhi = b4.words[b4.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b4 = b4.ushln(shift);
          a6.iushln(shift);
          bhi = b4.words[b4.length - 1] | 0;
        }
        var m5 = a6.length - b4.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN3(null);
          q2.length = m5 + 1;
          q2.words = new Array(q2.length);
          for (var i5 = 0; i5 < q2.length; i5++) {
            q2.words[i5] = 0;
          }
        }
        var diff = a6.clone()._ishlnsubmul(b4, 1, m5);
        if (diff.negative === 0) {
          a6 = diff;
          if (q2) {
            q2.words[m5] = 1;
          }
        }
        for (var j3 = m5 - 1; j3 >= 0; j3--) {
          var qj = (a6.words[b4.length + j3] | 0) * 67108864 + (a6.words[b4.length + j3 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a6._ishlnsubmul(b4, qj, j3);
          while (a6.negative !== 0) {
            qj--;
            a6.negative = 0;
            a6._ishlnsubmul(b4, 1, j3);
            if (!a6.isZero()) {
              a6.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j3] = qj;
          }
        }
        if (q2) {
          q2._strip();
        }
        a6._strip();
        if (mode !== "div" && shift !== 0) {
          a6.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a6
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p5 = (1 << 26) % num;
        var acc = 0;
        for (var i5 = this.length - 1; i5 >= 0; i5--) {
          acc = (p5 * acc + (this.words[i5] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i5 = this.length - 1; i5 >= 0; i5--) {
          var w4 = (this.words[i5] | 0) + carry * 67108864;
          this.words[i5] = w4 / num | 0;
          carry = w4 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var x6 = this;
        var y5 = p5.clone();
        if (x6.negative !== 0) {
          x6 = x6.umod(p5);
        } else {
          x6 = x6.clone();
        }
        var A5 = new BN3(1);
        var B4 = new BN3(0);
        var C6 = new BN3(0);
        var D4 = new BN3(1);
        var g5 = 0;
        while (x6.isEven() && y5.isEven()) {
          x6.iushrn(1);
          y5.iushrn(1);
          ++g5;
        }
        var yp = y5.clone();
        var xp = x6.clone();
        while (!x6.isZero()) {
          for (var i5 = 0, im = 1; (x6.words[0] & im) === 0 && i5 < 26; ++i5, im <<= 1) ;
          if (i5 > 0) {
            x6.iushrn(i5);
            while (i5-- > 0) {
              if (A5.isOdd() || B4.isOdd()) {
                A5.iadd(yp);
                B4.isub(xp);
              }
              A5.iushrn(1);
              B4.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (y5.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
          if (j3 > 0) {
            y5.iushrn(j3);
            while (j3-- > 0) {
              if (C6.isOdd() || D4.isOdd()) {
                C6.iadd(yp);
                D4.isub(xp);
              }
              C6.iushrn(1);
              D4.iushrn(1);
            }
          }
          if (x6.cmp(y5) >= 0) {
            x6.isub(y5);
            A5.isub(C6);
            B4.isub(D4);
          } else {
            y5.isub(x6);
            C6.isub(A5);
            D4.isub(B4);
          }
        }
        return {
          a: C6,
          b: D4,
          gcd: y5.iushln(g5)
        };
      };
      BN3.prototype._invmp = function _invmp(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var a6 = this;
        var b4 = p5.clone();
        if (a6.negative !== 0) {
          a6 = a6.umod(p5);
        } else {
          a6 = a6.clone();
        }
        var x1 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b4.clone();
        while (a6.cmpn(1) > 0 && b4.cmpn(1) > 0) {
          for (var i5 = 0, im = 1; (a6.words[0] & im) === 0 && i5 < 26; ++i5, im <<= 1) ;
          if (i5 > 0) {
            a6.iushrn(i5);
            while (i5-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (b4.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
          if (j3 > 0) {
            b4.iushrn(j3);
            while (j3-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a6.cmp(b4) >= 0) {
            a6.isub(b4);
            x1.isub(x22);
          } else {
            b4.isub(a6);
            x22.isub(x1);
          }
        }
        var res;
        if (a6.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p5);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a6 = this.clone();
        var b4 = num.clone();
        a6.negative = 0;
        b4.negative = 0;
        for (var shift = 0; a6.isEven() && b4.isEven(); shift++) {
          a6.iushrn(1);
          b4.iushrn(1);
        }
        do {
          while (a6.isEven()) {
            a6.iushrn(1);
          }
          while (b4.isEven()) {
            b4.iushrn(1);
          }
          var r6 = a6.cmp(b4);
          if (r6 < 0) {
            var t3 = a6;
            a6 = b4;
            b4 = t3;
          } else if (r6 === 0 || b4.cmpn(1) === 0) {
            break;
          }
          a6.isub(b4);
        } while (true);
        return b4.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r6 = bit % 26;
        var s4 = (bit - r6) / 26;
        var q2 = 1 << r6;
        if (this.length <= s4) {
          this._expand(s4 + 1);
          this.words[s4] |= q2;
          return this;
        }
        var carry = q2;
        for (var i5 = s4; carry !== 0 && i5 < this.length; i5++) {
          var w4 = this.words[i5] | 0;
          w4 += carry;
          carry = w4 >>> 26;
          w4 &= 67108863;
          this.words[i5] = w4;
        }
        if (carry !== 0) {
          this.words[i5] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w4 = this.words[0] | 0;
          res = w4 === num ? 0 : w4 < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i5 = this.length - 1; i5 >= 0; i5--) {
          var a6 = this.words[i5] | 0;
          var b4 = num.words[i5] | 0;
          if (a6 === b4) continue;
          if (a6 < b4) {
            res = -1;
          } else if (a6 > b4) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt4(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt3(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p5) {
        this.name = name2;
        this.p = new BN3(p5, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r6 = num;
        var rlen;
        do {
          this.split(r6, this.tmp);
          r6 = this.imulK(r6);
          r6 = r6.iadd(this.tmp);
          rlen = r6.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r6.ucmp(this.p);
        if (cmp === 0) {
          r6.words[0] = 0;
          r6.length = 1;
        } else if (cmp > 0) {
          r6.isub(this.p);
        } else {
          if (r6.strip !== void 0) {
            r6.strip();
          } else {
            r6._strip();
          }
        }
        return r6;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i5 = 0; i5 < outLen; i5++) {
          output.words[i5] = input.words[i5];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i5 = 10; i5 < input.length; i5++) {
          var next = input.words[i5] | 0;
          input.words[i5 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i5 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo2 = 0;
        for (var i5 = 0; i5 < num.length; i5++) {
          var w4 = num.words[i5] | 0;
          lo2 += w4 * 977;
          num.words[i5] = lo2 & 67108863;
          lo2 = w4 * 64 + (lo2 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i5 = 0; i5 < num.length; i5++) {
          var hi2 = (num.words[i5] | 0) * 19 + carry;
          var lo2 = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i5] = lo2;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m5) {
        if (typeof m5 === "string") {
          var prime = BN3._prime(m5);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m5.gtn(1), "modulus must be greater than 1");
          this.m = m5;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a6) {
        assert2(a6.negative === 0, "red works only with positives");
        assert2(a6.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a6, b4) {
        assert2((a6.negative | b4.negative) === 0, "red works only with positives");
        assert2(
          a6.red && a6.red === b4.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a6) {
        if (this.prime) return this.prime.ireduce(a6)._forceRed(this);
        move(a6, a6.umod(this.m)._forceRed(this));
        return a6;
      };
      Red.prototype.neg = function neg3(a6) {
        if (a6.isZero()) {
          return a6.clone();
        }
        return this.m.sub(a6)._forceRed(this);
      };
      Red.prototype.add = function add3(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.add(b4);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.iadd(b4);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.sub(b4);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.isub(b4);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a6, num) {
        this._verify1(a6);
        return this.imod(a6.ushln(num));
      };
      Red.prototype.imul = function imul(a6, b4) {
        this._verify2(a6, b4);
        return this.imod(a6.imul(b4));
      };
      Red.prototype.mul = function mul3(a6, b4) {
        this._verify2(a6, b4);
        return this.imod(a6.mul(b4));
      };
      Red.prototype.isqr = function isqr(a6) {
        return this.imul(a6, a6.clone());
      };
      Red.prototype.sqr = function sqr(a6) {
        return this.mul(a6, a6);
      };
      Red.prototype.sqrt = function sqrt(a6) {
        if (a6.isZero()) return a6.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a6, pow);
        }
        var q2 = this.m.subn(1);
        var s4 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s4++;
          q2.iushrn(1);
        }
        assert2(!q2.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z6 = this.m.bitLength();
        z6 = new BN3(2 * z6 * z6).toRed(this);
        while (this.pow(z6, lpow).cmp(nOne) !== 0) {
          z6.redIAdd(nOne);
        }
        var c5 = this.pow(z6, q2);
        var r6 = this.pow(a6, q2.addn(1).iushrn(1));
        var t3 = this.pow(a6, q2);
        var m5 = s4;
        while (t3.cmp(one) !== 0) {
          var tmp = t3;
          for (var i5 = 0; tmp.cmp(one) !== 0; i5++) {
            tmp = tmp.redSqr();
          }
          assert2(i5 < m5);
          var b4 = this.pow(c5, new BN3(1).iushln(m5 - i5 - 1));
          r6 = r6.redMul(b4);
          c5 = b4.redSqr();
          t3 = t3.redMul(c5);
          m5 = i5;
        }
        return r6;
      };
      Red.prototype.invm = function invm(a6) {
        var inv = a6._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a6, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a6.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a6;
        for (var i5 = 2; i5 < wnd.length; i5++) {
          wnd[i5] = this.mul(wnd[i5 - 1], a6);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i5 = num.length - 1; i5 >= 0; i5--) {
          var word = num.words[i5];
          for (var j3 = start - 1; j3 >= 0; j3--) {
            var bit = word >> j3 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i5 !== 0 || j3 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r6 = num.umod(this.m);
        return r6 === num ? r6.clone() : r6;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m5) {
        Red.call(this, m5);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r6 = this.imod(num.mul(this.rinv));
        r6.red = null;
        return r6;
      };
      Mont.prototype.imul = function imul(a6, b4) {
        if (a6.isZero() || b4.isZero()) {
          a6.words[0] = 0;
          a6.length = 1;
          return a6;
        }
        var t3 = a6.imul(b4);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t3.isub(c5).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a6, b4) {
        if (a6.isZero() || b4.isZero()) return new BN3(0)._forceRed(this);
        var t3 = a6.mul(b4);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t3.isub(c5).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a6) {
        var res = this.imod(a6._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var import_dist55, version4;
var init_version3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
    import_dist55 = __toESM(require_dist());
    version4 = "bignumber/5.7.0";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}
var import_dist56, import_bn, BN, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;
var init_bignumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
    "use strict";
    import_dist56 = __toESM(require_dist());
    import_bn = __toESM(require_bn());
    init_lib2();
    init_lib();
    init_version3();
    BN = import_bn.default.BN;
    logger2 = new Logger(version4);
    _constructorGuard = {};
    MAX_SAFE = 9007199254740991;
    _warnedToStringRadix = false;
    BigNumber = class _BigNumber {
      constructor(constructorGuard, hex) {
        if (constructorGuard !== _constructorGuard) {
          logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
          });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
      }
      fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
        if (this._hex[0] === "-") {
          return _BigNumber.from(this._hex.substring(1));
        }
        return this;
      }
      add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
        const o4 = _BigNumber.from(other);
        if (o4.isZero()) {
          throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
      }
      or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
        return toBN(this).eq(toBN(other));
      }
      lt(other) {
        return toBN(this).lt(toBN(other));
      }
      lte(other) {
        return toBN(this).lte(toBN(other));
      }
      gt(other) {
        return toBN(this).gt(toBN(other));
      }
      gte(other) {
        return toBN(this).gte(toBN(other));
      }
      isNegative() {
        return this._hex[0] === "-";
      }
      isZero() {
        return toBN(this).isZero();
      }
      toNumber() {
        try {
          return toBN(this).toNumber();
        } catch (error) {
          throwFault("overflow", "toNumber", this.toString());
        }
        return null;
      }
      toBigInt() {
        try {
          return BigInt(this.toString());
        } catch (e3) {
        }
        return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
          value: this.toString()
        });
      }
      toString() {
        if (arguments.length > 0) {
          if (arguments[0] === 10) {
            if (!_warnedToStringRadix) {
              _warnedToStringRadix = true;
              logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
            }
          } else if (arguments[0] === 16) {
            logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
          } else {
            logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
          }
        }
        return toBN(this).toString(10);
      }
      toHexString() {
        return this._hex;
      }
      toJSON(key2) {
        return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
        if (value instanceof _BigNumber) {
          return value;
        }
        if (typeof value === "string") {
          if (value.match(/^-?0x[0-9a-f]+$/i)) {
            return new _BigNumber(_constructorGuard, toHex(value));
          }
          if (value.match(/^-?[0-9]+$/)) {
            return new _BigNumber(_constructorGuard, toHex(new BN(value)));
          }
          return logger2.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
          if (value % 1) {
            throwFault("underflow", "BigNumber.from", value);
          }
          if (value >= MAX_SAFE || value <= -MAX_SAFE) {
            throwFault("overflow", "BigNumber.from", value);
          }
          return _BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") {
          return _BigNumber.from(anyValue.toString());
        }
        if (isBytes(anyValue)) {
          return _BigNumber.from(hexlify(anyValue));
        }
        if (anyValue) {
          if (anyValue.toHexString) {
            const hex = anyValue.toHexString();
            if (typeof hex === "string") {
              return _BigNumber.from(hex);
            }
          } else {
            let hex = anyValue._hex;
            if (hex == null && anyValue.type === "BigNumber") {
              hex = anyValue.hex;
            }
            if (typeof hex === "string") {
              if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
                return _BigNumber.from(hex);
              }
            }
          }
        }
        return logger2.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
        return !!(value && value._isBigNumber);
      }
    };
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e3) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var import_dist57, logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber, ONE, BUMP;
var init_fixednumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
    "use strict";
    import_dist57 = __toESM(require_dist());
    init_lib2();
    init_lib();
    init_version3();
    init_bignumber();
    logger3 = new Logger(version4);
    _constructorGuard2 = {};
    Zero = BigNumber.from(0);
    NegativeOne = BigNumber.from(-1);
    zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    FixedFormat = class _FixedFormat {
      constructor(constructorGuard, signed2, width, decimals) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.signed = signed2;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
      }
      static from(value) {
        if (value instanceof _FixedFormat) {
          return value;
        }
        if (typeof value === "number") {
          value = `fixed128x${value}`;
        }
        let signed2 = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
          if (value === "fixed") {
          } else if (value === "ufixed") {
            signed2 = false;
          } else {
            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
            if (!match) {
              logger3.throwArgumentError("invalid fixed format", "format", value);
            }
            signed2 = match[1] !== "u";
            width = parseInt(match[2]);
            decimals = parseInt(match[3]);
          }
        } else if (value) {
          const check = (key2, type, defaultValue) => {
            if (value[key2] == null) {
              return defaultValue;
            }
            if (typeof value[key2] !== type) {
              logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
            }
            return value[key2];
          };
          signed2 = check("signed", "boolean", signed2);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
          logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
      }
    };
    FixedNumber = class _FixedNumber {
      constructor(constructorGuard, hex, value, format) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
      }
      _checkFormat(other) {
        if (this.format.name !== other.format.name) {
          logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
      }
      addUnsafe(other) {
        this._checkFormat(other);
        const a6 = parseFixed(this._value, this.format.decimals);
        const b4 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a6.add(b4), this.format.decimals, this.format);
      }
      subUnsafe(other) {
        this._checkFormat(other);
        const a6 = parseFixed(this._value, this.format.decimals);
        const b4 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a6.sub(b4), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
        this._checkFormat(other);
        const a6 = parseFixed(this._value, this.format.decimals);
        const b4 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a6.mul(b4).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
        this._checkFormat(other);
        const a6 = parseFixed(this._value, this.format.decimals);
        const b4 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a6.mul(this.format._multiplier).div(b4), this.format.decimals, this.format);
      }
      floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
          result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
          result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      // @TODO: Support other rounding algorithms
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
          logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
          return this;
        }
        const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
        return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
        return this._value[0] === "-";
      }
      toString() {
        return this._value;
      }
      toHexString(width) {
        if (width == null) {
          return this._hex;
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      toFormat(format) {
        return _FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
          format = decimals;
          decimals = null;
        }
        if (decimals == null) {
          decimals = 0;
        }
        if (format == null) {
          format = "fixed";
        }
        return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
          throwFault2("unsigned value cannot be negative", "overflow", "value", value);
        }
        let hex = null;
        if (fixedFormat.signed) {
          hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
          hex = numeric.toHexString();
          hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value).length > fixedFormat.width / 8) {
          throw new Error("overflow");
        }
        let numeric = BigNumber.from(value);
        if (fixedFormat.signed) {
          numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static from(value, format) {
        if (typeof value === "string") {
          return _FixedNumber.fromString(value, format);
        }
        if (isBytes(value)) {
          return _FixedNumber.fromBytes(value, format);
        }
        try {
          return _FixedNumber.fromValue(value, 0, format);
        } catch (error) {
          if (error.code !== Logger.errors.INVALID_ARGUMENT) {
            throw error;
          }
        }
        return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
      }
    };
    ONE = FixedNumber.from(1);
    BUMP = FixedNumber.from("0.5");
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/index.js
var import_dist58;
var init_lib4 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
    import_dist58 = __toESM(require_dist());
    init_bignumber();
    init_fixednumber();
    init_bignumber();
  }
});

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var import_dist59, NegativeOne2, Zero2, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
var init_bignumbers = __esm({
  "node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
    import_dist59 = __toESM(require_dist());
    init_lib4();
    NegativeOne2 = BigNumber.from(-1);
    Zero2 = BigNumber.from(0);
    One = BigNumber.from(1);
    Two = BigNumber.from(2);
    WeiPerEther = BigNumber.from("1000000000000000000");
    MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var import_dist60;
var init_hashes = __esm({
  "node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
    import_dist60 = __toESM(require_dist());
  }
});

// node_modules/@ethersproject/constants/lib.esm/strings.js
var import_dist61;
var init_strings = __esm({
  "node_modules/@ethersproject/constants/lib.esm/strings.js"() {
    import_dist61 = __toESM(require_dist());
  }
});

// node_modules/@ethersproject/constants/lib.esm/index.js
var import_dist62;
var init_lib5 = __esm({
  "node_modules/@ethersproject/constants/lib.esm/index.js"() {
    "use strict";
    import_dist62 = __toESM(require_dist());
    init_addresses();
    init_bignumbers();
    init_hashes();
    init_strings();
  }
});

// node_modules/@ethersproject/strings/lib.esm/_version.js
var import_dist63, version5;
var init_version4 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/_version.js"() {
    import_dist63 = __toESM(require_dist());
    version5 = "strings/5.7.0";
  }
});

// node_modules/@ethersproject/strings/lib.esm/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger4.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i5 = 0;
    for (let o4 = offset + 1; o4 < bytes.length; o4++) {
      if (bytes[o4] >> 6 !== 2) {
        break;
      }
      i5++;
    }
    return i5;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
function toUtf8Bytes(str2, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger4.checkNormalize();
    str2 = str2.normalize(form);
  }
  let result = [];
  for (let i5 = 0; i5 < str2.length; i5++) {
    const c5 = str2.charCodeAt(i5);
    if (c5 < 128) {
      result.push(c5);
    } else if (c5 < 2048) {
      result.push(c5 >> 6 | 192);
      result.push(c5 & 63 | 128);
    } else if ((c5 & 64512) == 55296) {
      i5++;
      const c22 = str2.charCodeAt(i5);
      if (i5 >= str2.length || (c22 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c5 & 1023) << 10) + (c22 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c5 >> 12 | 224);
      result.push(c5 >> 6 & 63 | 128);
      result.push(c5 & 63 | 128);
    }
  }
  return arrayify(result);
}
var import_dist64, logger4, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;
var init_utf8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
    "use strict";
    import_dist64 = __toESM(require_dist());
    init_lib2();
    init_lib();
    init_version4();
    logger4 = new Logger(version5);
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
  }
});

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
var import_dist65;
var init_bytes32 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
    "use strict";
    import_dist65 = __toESM(require_dist());
    init_lib5();
    init_lib2();
    init_utf8();
  }
});

// node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i5 = 0; i5 < data.length; i5 += 4) {
    result.push(parseInt(data.substring(i5, i5 + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo2 = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo2 += parseInt(comps[0], 16);
    result[lo2] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi2 = 0;
  return data.split(",").map((v8) => {
    let comps = v8.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo2 = hi2 + parseInt(comps[0], 16);
    hi2 = parseInt(comps[1], 16);
    return { l: lo2, h: hi2 };
  });
}
var import_dist66, Table_A_1_ranges, Table_B_1_flags, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;
var init_idna = __esm({
  "node_modules/@ethersproject/strings/lib.esm/idna.js"() {
    "use strict";
    import_dist66 = __toESM(require_dist());
    init_utf8();
    Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v8) => parseInt(v8, 16));
    Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  }
});

// node_modules/@ethersproject/strings/lib.esm/index.js
var import_dist67;
var init_lib6 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/index.js"() {
    "use strict";
    import_dist67 = __toESM(require_dist());
    init_bytes32();
    init_idna();
    init_utf8();
  }
});

// node_modules/@ethersproject/hash/lib.esm/id.js
var import_dist68;
var init_id = __esm({
  "node_modules/@ethersproject/hash/lib.esm/id.js"() {
    import_dist68 = __toESM(require_dist());
    init_lib3();
    init_lib6();
  }
});

// node_modules/@ethersproject/hash/lib.esm/_version.js
var import_dist69, version6;
var init_version5 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/_version.js"() {
    import_dist69 = __toESM(require_dist());
    version6 = "hash/5.7.0";
  }
});

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode6(textData) {
  textData = atob(textData);
  const data = [];
  for (let i5 = 0; i5 < textData.length; i5++) {
    data.push(textData.charCodeAt(i5));
  }
  return arrayify(data);
}
var import_dist70;
var init_base642 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    "use strict";
    import_dist70 = __toESM(require_dist());
    init_lib2();
  }
});

// node_modules/@ethersproject/base64/lib.esm/index.js
var import_dist71;
var init_lib7 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/index.js"() {
    "use strict";
    import_dist71 = __toESM(require_dist());
    init_base642();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i5 = 0; i5 < array.length; i5++) {
    const value = array[i5];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i5 = 1; i5 < symbol_count; i5++) {
    acc.push(total += u16());
  }
  let skip2 = u16();
  let pos_payload = pos;
  pos += skip2;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N13 = 31;
  const FULL = Math.pow(2, N13);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i5 = 0; i5 < N13; i5++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range2 = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range2);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a6 = low + Math.floor(range2 * acc[start] / total);
    let b4 = low + Math.floor(range2 * acc[start + 1] / total) - 1;
    while (((a6 ^ b4) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a6 = a6 << 1 & MASK;
      b4 = b4 << 1 & MASK | 1;
    }
    while (a6 & ~b4 & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a6 = a6 << 1 ^ HALF;
      b4 = (b4 ^ HALF) << 1 | HALF | 1;
    }
    low = a6;
    range2 = 1 + b4 - a6;
  }
  let offset = symbol_count - 4;
  return symbols.map((x6) => {
    switch (x6 - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x6 - 1;
    }
  });
}
function read_payload(v8) {
  let pos = 0;
  return () => v8[pos++];
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
function signed(i5) {
  return i5 & 1 ? ~i5 >> 1 : i5 >> 1;
}
function read_counts(n7, next) {
  let v8 = Array(n7);
  for (let i5 = 0; i5 < n7; i5++)
    v8[i5] = 1 + next();
  return v8;
}
function read_ascending(n7, next) {
  let v8 = Array(n7);
  for (let i5 = 0, x6 = -1; i5 < n7; i5++)
    v8[i5] = x6 += 1 + next();
  return v8;
}
function read_deltas(n7, next) {
  let v8 = Array(n7);
  for (let i5 = 0, x6 = 0; i5 < n7; i5++)
    v8[i5] = x6 += signed(next());
  return v8;
}
function read_member_array(next, lookup) {
  let v8 = read_ascending(next(), next);
  let n7 = next();
  let vX = read_ascending(n7, next);
  let vN = read_counts(n7, next);
  for (let i5 = 0; i5 < n7; i5++) {
    for (let j3 = 0; j3 < vN[i5]; j3++) {
      v8.push(vX[i5] + j3);
    }
  }
  return lookup ? v8.map((x6) => lookup[x6]) : v8;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w4 = next();
    if (w4 == 0)
      break;
    ret.push(read_linear_table(w4, next));
  }
  while (true) {
    let w4 = next() - 1;
    if (w4 < 0)
      break;
    ret.push(read_replacement_table(w4, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v8 = [];
  while (true) {
    let i5 = next();
    if (i5 == 0)
      break;
    v8.push(i5);
  }
  return v8;
}
function read_transposed(n7, w4, next) {
  let m5 = Array(n7).fill(void 0).map(() => []);
  for (let i5 = 0; i5 < w4; i5++) {
    read_deltas(n7, next).forEach((x6, j3) => m5[j3].push(x6));
  }
  return m5;
}
function read_linear_table(w4, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m5 = read_transposed(vN.length, 1 + w4, next);
  return flat(m5.map((v8, i5) => {
    const x6 = v8[0], ys2 = v8.slice(1);
    return Array(vN[i5]).fill(void 0).map((_5, j3) => {
      let j_dy = j3 * dy;
      return [x6 + j3 * dx, ys2.map((y5) => y5 + j_dy)];
    });
  }));
}
function read_replacement_table(w4, next) {
  let n7 = 1 + next();
  let m5 = read_transposed(n7, 1 + w4, next);
  return m5.map((v8) => [v8[0], v8.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a6, b4) => a6 - b4);
  return read2();
  function read2() {
    let branches = [];
    while (true) {
      let keys2 = read_member_array(next, sorted);
      if (keys2.length == 0)
        break;
      branches.push({ set: new Set(keys2), node: read2() });
    }
    branches.sort((a6, b4) => b4.set.size - a6.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}
var import_dist72;
var init_decoder = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js"() {
    import_dist72 = __toESM(require_dist());
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode6("AEQF2AO2DEsA2wIrAGsBRABxAN8AZwCcAEwAqgA0AGwAUgByADcATAAVAFYAIQAyACEAKAAYAFgAGwAjABQAMAAmADIAFAAfABQAKwATACoADgAbAA8AHQAYABoAGQAxADgALAAoADwAEwA9ABMAGgARAA4ADwAWABMAFgAIAA8AHgQXBYMA5BHJAS8JtAYoAe4AExozi0UAH21tAaMnBT8CrnIyhrMDhRgDygIBUAEHcoFHUPe8AXBjAewCjgDQR8IICIcEcQLwATXCDgzvHwBmBoHNAqsBdBcUAykgDhAMShskMgo8AY8jqAQfAUAfHw8BDw87MioGlCIPBwZCa4ELatMAAMspJVgsDl8AIhckSg8XAHdvTwBcIQEiDT4OPhUqbyECAEoAS34Aej8Ybx83JgT/Xw8gHxZ/7w8RICxPHA9vBw+Pfw8PHwAPFv+fAsAvCc8vEr8ivwD/EQ8Bol8OEBa/A78hrwAPCU8vESNvvwWfHwNfAVoDHr+ZAAED34YaAdJPAK7PLwSEgDLHAGo1Pz8Pvx9fUwMrpb8O/58VTzAPIBoXIyQJNF8hpwIVAT8YGAUADDNBaX3RAMomJCg9EhUeA29MABsZBTMNJipjOhc19gcIDR8bBwQHEggCWi6DIgLuAQYA+BAFCha3A5XiAEsqM7UFFgFLhAMjFTMYE1Klnw74nRVBG/ASCm0BYRN/BrsU3VoWy+S0vV8LQx+vN8gF2AC2AK5EAWwApgYDKmAAroQ0NDQ0AT+OCg7wAAIHRAbpNgVcBV0APTA5BfbPFgMLzcYL/QqqA82eBALKCjQCjqYCht0/k2+OAsXQAoP3ASTKDgDw6ACKAUYCMpIKJpRaAE4A5womABzZvs0REEKiACIQAd5QdAECAj4Ywg/wGqY2AVgAYADYvAoCGAEubA0gvAY2ALAAbpbvqpyEAGAEpgQAJgAG7gAgAEACmghUFwCqAMpAINQIwC4DthRAAPcycKgApoIdABwBfCisABoATwBqASIAvhnSBP8aH/ECeAKXAq40NjgDBTwFYQU6AXs3oABgAD4XNgmcCY1eCl5tIFZeUqGgyoNHABgAEQAaABNwWQAmABMATPMa3T34ADldyprmM1M2XociUQgLzvwAXT3xABgAEQAaABNwIGFAnADD8AAgAD4BBJWzaCcIAIEBFMAWwKoAAdq9BWAF5wLQpALEtQAKUSGkahR4GnJM+gsAwCgeFAiUAECQ0BQuL8AAIAAAADKeIheclvFqQAAETr4iAMxIARMgAMIoHhQIAn0E0pDQFC4HhznoAAAAIAI2C0/4lvFqQAAETgBJJwYCAy4ABgYAFAA8MBKYEH4eRhTkAjYeFcgACAYAeABsOqyQ5gRwDayqugEgaIIAtgoACgDmEABmBAWGme5OBJJA2m4cDeoAmITWAXwrMgOgAGwBCh6CBXYF1Tzg1wKAAFdiuABRAFwAXQBsAG8AdgBrAHYAbwCEAHEwfxQBVE5TEQADVFhTBwBDANILAqcCzgLTApQCrQL6vAAMAL8APLhNBKkE6glGKTAU4Dr4N2EYEwBCkABKk8rHAbYBmwIoAiU4Ajf/Aq4CowCAANIChzgaNBsCsTgeODcFXrgClQKdAqQBiQGYAqsCsjTsNHsfNPA0ixsAWTWiOAMFPDQSNCk2BDZHNow2TTZUNhk28Jk9VzI3QkEoAoICoQKwAqcAQAAxBV4FXbS9BW47YkIXP1ciUqs05DS/FwABUwJW11e6nHuYZmSh/RAYA8oMKvZ8KASoUAJYWAJ6ILAsAZSoqjpgA0ocBIhmDgDWAAawRDQoAAcuAj5iAHABZiR2AIgiHgCaAU68ACxuHAG0ygM8MiZIAlgBdF4GagJqAPZOHAMuBgoATkYAsABiAHgAMLoGDPj0HpKEBAAOJgAuALggTAHWAeAMEDbd20Uege0ADwAWADkAQgA9OHd+2MUQZBBhBgNNDkxxPxUQArEPqwvqERoM1irQ090ANK4H8ANYB/ADWANYB/AH8ANYB/ADWANYA1gDWBwP8B/YxRBkD00EcgWTBZAE2wiIJk4RhgctCNdUEnQjHEwDSgEBIypJITuYMxAlR0wRTQgIATZHbKx9PQNMMbBU+pCnA9AyVDlxBgMedhKlAC8PeCE1uk6DekxxpQpQT7NX9wBFBgASqwAS5gBJDSgAUCwGPQBI4zTYABNGAE2bAE3KAExdGABKaAbgAFBXAFCOAFBJABI2SWdObALDOq0//QomCZhvwHdTBkIQHCemEPgMNAG2ATwN7kvZBPIGPATKH34ZGg/OlZ0Ipi3eDO4m5C6igFsj9iqEBe5L9TzeC05RaQ9aC2YJ5DpkgU8DIgEOIowK3g06CG4Q9ArKbA3mEUYHOgPWSZsApgcCCxIdNhW2JhFirQsKOXgG/Br3C5AmsBMqev0F1BoiBk4BKhsAANAu6IWxWjJcHU9gBgQLJiPIFKlQIQ0mQLh4SRocBxYlqgKSQ3FKiFE3HpQh9zw+DWcuFFF9B/Y8BhlQC4I8n0asRQ8R0z6OPUkiSkwtBDaALDAnjAnQD4YMunxzAVoJIgmyDHITMhEYN8YIOgcaLpclJxYIIkaWYJsE+KAD9BPSAwwFQAlCBxQDthwuEy8VKgUOgSXYAvQ21i60ApBWgQEYBcwPJh/gEFFH4Q7qCJwCZgOEJewALhUiABginAhEZABgj9lTBi7MCMhqbSN1A2gU6GIRdAeSDlgHqBw0FcAc4nDJXgyGCSiksAlcAXYJmgFgBOQICjVcjKEgQmdUi1kYnCBiQUBd/QIyDGYVoES+h3kCjA9sEhwBNgF0BzoNAgJ4Ee4RbBCWCOyGBTW2M/k6JgRQIYQgEgooA1BszwsoJvoM+WoBpBJjAw00PnfvZ6xgtyUX/gcaMsZBYSHyC5NPzgydGsIYQ1QvGeUHwAP0GvQn60FYBgADpAQUOk4z7wS+C2oIjAlAAEoOpBgH2BhrCnKM0QEyjAG4mgNYkoQCcJAGOAcMAGgMiAV65gAeAqgIpAAGANADWAA6Aq4HngAaAIZCAT4DKDABIuYCkAOUCDLMAZYwAfQqBBzEDBYA+DhuSwLDsgKAa2ajBd5ZAo8CSjYBTiYEBk9IUgOwcuIA3ABMBhTgSAEWrEvMG+REAeBwLADIAPwABjYHBkIBzgH0bgC4AWALMgmjtLYBTuoqAIQAFmwB2AKKAN4ANgCA8gFUAE4FWvoF1AJQSgESMhksWGIBvAMgATQBDgB6BsyOpsoIIARuB9QCEBwV4gLvLwe2AgMi4BPOQsYCvd9WADIXUu5eZwqoCqdeaAC0YTQHMnM9UQAPH6k+yAdy/BZIiQImSwBQ5gBQQzSaNTFWSTYBpwGqKQK38AFtqwBI/wK37gK3rQK3sAK6280C0gK33AK3zxAAUEIAUD9SklKDArekArw5AEQAzAHCO147WTteO1k7XjtZO147WTteO1kDmChYI03AVU0oJqkKbV9GYewMpw3VRMk6ShPcYFJgMxPJLbgUwhXPJVcZPhq9JwYl5VUKDwUt1GYxCC00dhe9AEApaYNCY4ceMQpMHOhTklT5LRwAskujM7ANrRsWREEFSHXuYisWDwojAmSCAmJDXE6wXDchAqH4AmiZAmYKAp+FOBwMAmY8AmYnBG8EgAN/FAN+kzkHOXgYOYM6JCQCbB4CMjc4CwJtyAJtr/CLADRoRiwBaADfAOIASwYHmQyOAP8MwwAOtgJ3MAJ2o0ACeUxEAni7Hl3cRa9G9AJ8QAJ6yQJ9CgJ88UgBSH5kJQAsFklZSlwWGErNAtECAtDNSygDiFADh+dExpEzAvKiXQQDA69Lz0wuJgTQTU1NsAKLQAKK2cIcCB5EaAa4Ao44Ao5dQZiCAo7aAo5deVG1UzYLUtVUhgKT/AKTDQDqAB1VH1WwVdEHLBwplocy4nhnRTw6ApegAu+zWCKpAFomApaQApZ9nQCqWa1aCoJOADwClrYClk9cRVzSApnMApllXMtdCBoCnJw5wzqeApwXAp+cAp65iwAeEDIrEAKd8gKekwC2PmE1YfACntQCoG8BqgKeoCACnk+mY8lkKCYsAiewAiZ/AqD8AqBN2AKmMAKlzwKoAAB+AqfzaH1osgAESmodatICrOQCrK8CrWgCrQMCVx4CVd0CseLYAx9PbJgCsr4OArLpGGzhbWRtSWADJc4Ctl08QG6RAylGArhfArlIFgK5K3hwN3DiAr0aAy2zAzISAr6JcgMDM3ICvhtzI3NQAsPMAsMFc4N0TDZGdOEDPKgDPJsDPcACxX0CxkgCxhGKAshqUgLIRQLJUALJLwJkngLd03h6YniveSZL0QMYpGcDAmH1GfSVJXsMXpNevBICz2wCz20wTFTT9BSgAMeuAs90ASrrA04TfkwGAtwoAtuLAtJQA1JdA1NgAQIDVY2AikABzBfuYUZ2AILPg44C2sgC2d+EEYRKpz0DhqYAMANkD4ZyWvoAVgLfZgLeuXR4AuIw7RUB8zEoAfScAfLTiALr9ALpcXoAAur6AurlAPpIAboC7ooC652Wq5cEAu5AA4XhmHpw4XGiAvMEAGoDjheZlAL3FAORbwOSiAL3mQL52gL4Z5odmqy8OJsfA52EAv77ARwAOp8dn7QDBY4DpmsDptoA0sYDBmuhiaIGCgMMSgFgASACtgNGAJwEgLpoBgC8BGzAEowcggCEDC6kdjoAJAM0C5IKRoABZCgiAIzw3AYBLACkfng9ogigkgNmWAN6AEQCvrkEVqTGAwCsBRbAA+4iQkMCHR072jI2PTbUNsk2RjY5NvA23TZKNiU3EDcZN5I+RTxDRTBCJkK5VBYKFhZfwQCWygU3AJBRHpu+OytgNxa61A40GMsYjsn7BVwFXQVcBV0FaAVdBVwFXQVcBV0FXAVdBVwFXUsaCNyKAK4AAQUHBwKU7oICoW1e7jAEzgPxA+YDwgCkBFDAwADABKzAAOxFLhitA1UFTDeyPkM+bj51QkRCuwTQWWQ8X+0AWBYzsACNA8xwzAGm7EZ/QisoCTAbLDs6fnLfb8H2GccsbgFw13M1HAVkBW/Jxsm9CNRO8E8FDD0FBQw9FkcClOYCoMFegpDfADgcMiA2AJQACB8AsigKAIzIEAJKeBIApY5yPZQIAKQiHb4fvj5BKSRPQrZCOz0oXyxgOywfKAnGbgMClQaCAkILXgdeCD9IIGUgQj5fPoY+dT52Ao5CM0dAX9BTVG9SDzFwWTQAbxBzJF/lOEIQQglCCkKJIAls5AcClQICoKPMODEFxhi6KSAbiyfIRrMjtCgdWCAkPlFBIitCsEJRzAbMAV/OEyQzDg0OAQQEJ36i328/Mk9AybDJsQlq3tDRApUKAkFzXf1d/j9uALYP6hCoFgCTGD8kPsFKQiobrm0+zj0KSD8kPnVCRBwMDyJRTHFgMTJa5rwXQiQ2YfI/JD7BMEJEHGINTw4TOFlIRzwJO0icMQpyPyQ+wzJCRBv6DVgnKB01NgUKj2bwYzMqCoBkznBgEF+zYDIocwRIX+NgHj4HICNfh2C4CwdwFWpTG/lgUhYGAwRfv2Ts8mAaXzVgml/XYIJfuWC4HI1gUF9pYJZgMR6ilQHMAOwLAlDRefC0in4AXAEJA6PjCwc0IamOANMMCAECRQDFNRTZBgd+CwQlRA+r6+gLBDEFBnwUBXgKATIArwAGRAAHA3cDdAN2A3kDdwN9A3oDdQN7A30DfAN4A3oDfQAYEAAlAtYASwMAUAFsAHcKAHcAmgB3AHUAdQB2AHVu8UgAygDAAHcAdQB1AHYAdQALCgB3AAsAmgB3AAsCOwB3AAtu8UgAygDAAHgKAJoAdwB3AHUAdQB2AHUAeAB1AHUAdgB1bvFIAMoAwAALCgCaAHcACwB3AAsCOwB3AAtu8UgAygDAAH4ACwGgALcBpwC6AahdAu0COwLtbvFIAMoAwAALCgCaAu0ACwLtAAsCOwLtAAtu8UgAygDAA24ACwNvAAu0VsQAAzsAABCkjUIpAAsAUIusOggWcgMeBxVsGwL67U/2HlzmWOEeOgALASvuAAseAfpKUpnpGgYJDCIZM6YyARUE9ThqAD5iXQgnAJYJPnOzw0ZAEZxEKsIAkA4DhAHnTAIDxxUDK0lxCQlPYgIvIQVYJQBVqE1GakUAKGYiDToSBA1EtAYAXQJYAIF8GgMHRyAAIAjOe9YncekRAA0KACUrjwE7Ayc6AAYWAqaiKG4McEcqANoN3+Mg9TwCBhIkuCny+JwUQ29L008JluRxu3K+oAdqiHOqFH0AG5SUIfUJ5SxCGfxdipRzqTmT4V5Zb+r1Uo4Vm+NqSSEl2mNvR2JhIa8SpYO6ntdwFXHCWTCK8f2+Hxo7uiG3drDycAuKIMP5bhi06ACnqArH1rz4Rqg//lm6SgJGEVbF9xJHISaR6HxqxSnkw6shDnelHKNEfGUXSJRJ1GcsmtJw25xrZMDK9gXSm1/YMkdX4/6NKYOdtk/NQ3/NnDASjTc3fPjIjW/5sVfVObX2oTDWkr1dF9f3kxBsD3/3aQO8hPfRz+e0uEiJqt1161griu7gz8hDDwtpy+F+BWtefnKHZPAxcZoWbnznhJpy0e842j36bcNzGnIEusgGX0a8ZxsnjcSsPDZ09yZ36fCQbriHeQ72JRMILNl6ePPf2HWoVwgWAm1fb3V2sAY0+B6rAXqSwPBgseVmoqsBTSrm91+XasMYYySI8eeRxH3ZvHkMz3BQ5aJ3iUVbYPNM3/7emRtjlsMgv/9VyTsyt/mK+8fgWeT6SoFaclXqn42dAIsvAarF5vNNWHzKSkKQ/8Hfk5ZWK7r9yliOsooyBjRhfkHP4Q2DkWXQi6FG/9r/IwbmkV5T7JSopHKn1pJwm9tb5Ot0oyN1Z2mPpKXHTxx2nlK08fKk1hEYA8WgVVWL5lgx0iTv+KdojJeU23ZDjmiubXOxVXJKKi2Wjuh2HLZOFLiSC7Tls5SMh4f+Pj6xUSrNjFqLGehRNB8lC0QSLNmkJJx/wSG3MnjE9T1CkPwJI0wH2lfzwETIiVqUxg0dfu5q39Gt+hwdcxkhhNvQ4TyrBceof3Mhs/IxFci1HmHr4FMZgXEEczPiGCx0HRwzAqDq2j9AVm1kwN0mRVLWLylgtoPNapF5cY4Y1wJh/e0BBwZj44YgZrDNqvD/9Hv7GFYdUQeDJuQ3EWI4HaKqavU1XjC/n41kT4L79kqGq0kLhdTZvgP3TA3fS0ozVz+5piZsoOtIvBUFoMKbNcmBL6YxxaUAusHB38XrS8dQMnQwJfUUkpRoGr5AUeWicvBTzyK9g77+yCkf5PAysL7r/JjcZgrbvRpMW9iyaxZvKO6ceZN2EwIxKwVFPuvFuiEPGCoagbMo+SpydLrXqBzNCDGFCrO/rkcwa2xhokQZ5CdZ0AsU3JfSqJ6n5I14YA+P/uAgfhPU84Tlw7cEFfp7AEE8ey4sP12PTt4Cods1GRgDOB5xvyiR5m+Bx8O5nBCNctU8BevfV5A08x6RHd5jcwPTMDSZJOedIZ1cGQ704lxbAzqZOP05ZxaOghzSdvFBHYqomATARyAADK4elP8Ly3IrUZKfWh23Xy20uBUmLS4Pfagu9+oyVa2iPgqRP3F2CTUsvJ7+RYnN8fFZbU/HVvxvcFFDKkiTqV5UBZ3Gz54JAKByi9hkKMZJvuGgcSYXFmw08UyoQyVdfTD1/dMkCHXcTGAKeROgArsvmRrQTLUOXioOHGK2QkjHuoYFgXciZoTJd6Fs5q1QX1G+p/e26hYsEf7QZD1nnIyl/SFkNtYYmmBhpBrxl9WbY0YpHWRuw2Ll/tj9mD8P4snVzJl4F9J+1arVeTb9E5r2ILH04qStjxQNwn3m4YNqxmaNbLAqW2TN6LidwuJRqS+NXbtqxoeDXpxeGWmxzSkWxjkyCkX4NQRme6q5SAcC+M7+9ETfA/EwrzQajKakCwYyeunP6ZFlxU2oMEn1Pz31zeStW74G406ZJFCl1wAXIoUKkWotYEpOuXB1uVNxJ63dpJEqfxBeptwIHNrPz8BllZoIcBoXwgfJ+8VAUnVPvRvexnw0Ma/WiGYuJO5y8QTvEYBigFmhUxY5RqzE8OcywN/8m4UYrlaniJO75XQ6KSo9+tWHlu+hMi0UVdiKQp7NelnoZUzNaIyBPVeOwK6GNp+FfHuPOoyhaWuNvTYFkvxscMQWDh+zeFCFkgwbXftiV23ywJ4+uwRqmg9k3KzwIQpzppt8DBBOMbrqwQM5Gb05sEwdKzMiAqOloaA/lr0KA+1pr0/+HiWoiIjHA/wir2nIuS3PeU/ji3O6ZwoxcR1SZ9FhtLC5S0FIzFhbBWcGVP/KpxOPSiUoAdWUpqKH++6Scz507iCcxYI6rdMBICPJZea7OcmeFw5mObJSiqpjg2UoWNIs+cFhyDSt6geV5qgi3FunmwwDoGSMgerFOZGX1m0dMCYo5XOruxO063dwENK9DbnVM9wYFREzh4vyU1WYYJ/LRRp6oxgjqP/X5a8/4Af6p6NWkQferzBmXme0zY/4nwMJm/wd1tIqSwGz+E3xPEAOoZlJit3XddD7/BT1pllzOx+8bmQtANQ/S6fZexc6qi3W+Q2xcmXTUhuS5mpHQRvcxZUN0S5+PL9lXWUAaRZhEH8hTdAcuNMMCuVNKTEGtSUKNi3O6KhSaTzck8csZ2vWRZ+d7mW8c4IKwXIYd25S/zIftPkwPzufjEvOHWVD1m+FjpDVUTV0DGDuHj6QnaEwLu/dEgdLQOg9E1Sro9XHJ8ykLAwtPu+pxqKDuFexqON1sKQm7rwbE1E68UCfA/erovrTCG+DBSNg0l4goDQvZN6uNlbyLpcZAwj2UclycvLpIZMgv4yRlpb3YuMftozorbcGVHt/VeDV3+Fdf1TP0iuaCsPi2G4XeGhsyF1ubVDxkoJhmniQ0/jSg/eYML9KLfnCFgISWkp91eauR3IQvED0nAPXK+6hPCYs+n3+hCZbiskmVMG2da+0EsZPonUeIY8EbfusQXjsK/eFDaosbPjEfQS0RKG7yj5GG69M7MeO1HmiUYocgygJHL6M1qzUDDwUSmr99V7Sdr2F3JjQAJY+F0yH33Iv3+C9M38eML7gTgmNu/r2bUMiPvpYbZ6v1/IaESirBHNa7mPKn4dEmYg7v/+HQgPN1G79jBQ1+soydfDC2r+h2Bl/KIc5KjMK7OH6nb1jLsNf0EHVe2KBiE51ox636uyG6Lho0t3J34L5QY/ilE3mikaF4HKXG1mG1rCevT1Vv6GavltxoQe/bMrpZvRggnBxSEPEeEzkEdOxTnPXHVjUYdw8JYvjB/o7Eegc3Ma+NUxLLnsK0kJlinPmUHzHGtrk5+CAbVzFOBqpyy3QVUnzTDfC/0XD94/okH+OB+i7g9lolhWIjSnfIb+Eq43ZXOWmwvjyV/qqD+t0e+7mTEM74qP/Ozt8nmC7mRpyu63OB4KnUzFc074SqoyPUAgM+/TJGFo6T44EHnQU4X4z6qannVqgw/U7zCpwcmXV1AubIrvOmkKHazJAR55ePjp5tLBsN8vAqs3NAHdcEHOR2xQ0lsNAFzSUuxFQCFYvXLZJdOj9p4fNq6p0HBGUik2YzaI4xySy91KzhQ0+q1hjxvImRwPRf76tChlRkhRCi74NXZ9qUNeIwP+s5p+3m5nwPdNOHgSLD79n7O9m1n1uDHiMntq4nkYwV5OZ1ENbXxFd4PgrlvavZsyUO4MqYlqqn1O8W/I1dEZq5dXhrbETLaZIbC2Kj/Aa/QM+fqUOHdf0tXAQ1huZ3cmWECWSXy/43j35+Mvq9xws7JKseriZ1pEWKc8qlzNrGPUGcVgOa9cPJYIJsGnJTAUsEcDOEVULO5x0rXBijc1lgXEzQQKhROf8zIV82w8eswc78YX11KYLWQRcgHNJElBxfXr72lS2RBSl07qTKorO2uUDZr3sFhYsvnhLZn0A94KRzJ/7DEGIAhW5ZWFpL8gEwu1aLA9MuWZzNwl8Oze9Y+bX+v9gywRVnoB5I/8kXTXU3141yRLYrIOOz6SOnyHNy4SieqzkBXharjfjqq1q6tklaEbA8Qfm2DaIPs7OTq/nvJBjKfO2H9bH2cCMh1+5gspfycu8f/cuuRmtDjyqZ7uCIMyjdV3a+p3fqmXsRx4C8lujezIFHnQiVTXLXuI1XrwN3+siYYj2HHTvESUx8DlOTXpak9qFRK+L3mgJ1WsD7F4cu1aJoFoYQnu+wGDMOjJM3kiBQWHCcvhJ/HRdxodOQp45YZaOTA22Nb4XKCVxqkbwMYFhzYQYIAnCW8FW14uf98jhUG2zrKhQQ0q0CEq0t5nXyvUyvR8DvD69LU+g3i+HFWQMQ8PqZuHD+sNKAV0+M6EJC0szq7rEr7B5bQ8BcNHzvDMc9eqB5ZCQdTf80Obn4uzjwpYU7SISdtV0QGa9D3Wrh2BDQtpBKxaNFV+/Cy2P/Sv+8s7Ud0Fd74X4+o/TNztWgETUapy+majNQ68Lq3ee0ZO48VEbTZYiH1Co4OlfWef82RWeyUXo7woM03PyapGfikTnQinoNq5z5veLpeMV3HCAMTaZmA1oGLAn7XS3XYsz+XK7VMQsc4XKrmDXOLU/pSXVNUq8dIqTba///3x6LiLS6xs1xuCAYSfcQ3+rQgmu7uvf3THKt5Ooo97TqcbRqxx7EASizaQCBQllG/rYxVapMLgtLbZS64w1MDBMXX+PQpBKNwqUKOf2DDRDUXQf9EhOS0Qj4nTmlA8dzSLz/G1d+Ud8MTy/6ghhdiLpeerGY/UlDOfiuqFsMUU5/UYlP+BAmgRLuNpvrUaLlVkrqDievNVEAwF+4CoM1MZTmjxjJMsKJq+u8Zd7tNCUFy6LiyYXRJQ4VyvEQFFaCGKsxIwQkk7EzZ6LTJq2hUuPhvAW+gQnSG6J+MszC+7QCRHcnqDdyNRJ6T9xyS87A6MDutbzKGvGktpbXqtzWtXb9HsfK2cBMomjN9a4y+TaJLnXxAeX/HWzmf4cR4vALt/P4w4qgKY04ml4ZdLOinFYS6cup3G/1ie4+t1eOnpBNlqGqs75ilzkT4+DsZQxNvaSKJ//6zIbbk/M7LOhFmRc/1R+kBtz7JFGdZm/COotIdvQoXpTqP/1uqEUmCb/QWoGLMwO5ANcHzxdY48IGP5+J+zKOTBFZ4Pid+GTM+Wq12MV/H86xEJptBa6T+p3kgpwLedManBHC2GgNrFpoN2xnrMz9WFWX/8/ygSBkavq2Uv7FdCsLEYLu9LLIvAU0bNRDtzYl+/vXmjpIvuJFYjmI0im6QEYqnIeMsNjXG4vIutIGHijeAG/9EDBozKV5cldkHbLxHh25vT+ZEzbhXlqvpzKJwcEgfNwLAKFeo0/pvEE10XDB+EXRTXtSzJozQKFFAJhMxYkVaCW+E9AL7tMeU8acxidHqzb6lX4691UsDpy/LLRmT+epgW56+5Cw8tB4kMUv6s9lh3eRKbyGs+H/4mQMaYzPTf2OOdokEn+zzgvoD3FqNKk8QqGAXVsqcGdXrT62fSPkR2vROFi68A6se86UxRUk4cajfPyCC4G5wDhD+zNq4jodQ4u4n/m37Lr36n4LIAAsVr02dFi9AiwA81MYs2rm4eDlDNmdMRvEKRHfBwW5DdMNp0jPFZMeARqF/wL4XBfd+EMLBfMzpH5GH6NaW+1vrvMdg+VxDzatk3MXgO3ro3P/DpcC6+Mo4MySJhKJhSR01SGGGp5hPWmrrUgrv3lDnP+HhcI3nt3YqBoVAVTBAQT5iuhTg8nvPtd8ZeYj6w1x6RqGUBrSku7+N1+BaasZvjTk64RoIDlL8brpEcJx3OmY7jLoZsswdtmhfC/G21llXhITOwmvRDDeTTPbyASOa16cF5/A1fZAidJpqju3wYAy9avPR1ya6eNp9K8XYrrtuxlqi+bDKwlfrYdR0RRiKRVTLOH85+ZY7XSmzRpfZBJjaTa81VDcJHpZnZnSQLASGYW9l51ZV/h7eVzTi3Hv6hUsgc/51AqJRTkpbFVLXXszoBL8nBX0u/0jBLT8nH+fJePbrwURT58OY+UieRjd1vs04w0VG5VN2U6MoGZkQzKN/ptz0Q366dxoTGmj7i1NQGHi9GgnquXFYdrCfZBmeb7s0T6yrdlZH5cZuwHFyIJ/kAtGsTg0xH5taAAq44BAk1CPk9KVVbqQzrCUiFdF/6gtlPQ8bHHc1G1W92MXGZ5HEHftyLYs8mbD/9xYRUWkHmlM0zC2ilJlnNgV4bfALpQghxOUoZL7VTqtCHIaQSXm+YUMnpkXybnV+A6xlm2CVy8fn0Xlm2XRa0+zzOa21JWWmixfiPMSCZ7qA4rS93VN3pkpF1s5TonQjisHf7iU9ZGvUPOAKZcR1pbeVf/Ul7OhepGCaId9wOtqo7pJ7yLcBZ0pFkOF28y4zEI/kcUNmutBHaQpBdNM8vjCS6HZRokkeo88TBAjGyG7SR+6vUgTcyK9Imalj0kuxz0wmK+byQU11AiJFk/ya5dNduRClcnU64yGu/ieWSeOos1t3ep+RPIWQ2pyTYVbZltTbsb7NiwSi3AV+8KLWk7LxCnfZUetEM8ThnsSoGH38/nyAwFguJp8FjvlHtcWZuU4hPva0rHfr0UhOOJ/F6vS62FW7KzkmRll2HEc7oUq4fyi5T70Vl7YVIfsPHUCdHesf9Lk7WNVWO75JDkYbMI8TOW8JKVtLY9d6UJRITO8oKo0xS+o99Yy04iniGHAaGj88kEWgwv0OrHdY/nr76DOGNS59hXCGXzTKUvDl9iKpLSWYN1lxIeyywdNpTkhay74w2jFT6NS8qkjo5CxA1yfSYwp6AJIZNKIeEK5PJAW7ORgWgwp0VgzYpqovMrWxbu+DGZ6Lhie1RAqpzm8VUzKJOH3mCzWuTOLsN3VT/dv2eeYe9UjbR8YTBsLz7q60VN1sU51k+um1f8JxD5pPhbhSC8rRaB454tmh6YUWrJI3+GWY0qeWioj/tbkYITOkJaeuGt4JrJvHA+l0Gu7kY7XOaa05alMnRWVCXqFgLIwSY4uF59Ue5SU4QKuc/HamDxbr0x6csCetXGoP7Qn1Bk/J9DsynO/UD6iZ1Hyrz+jit0hDCwi/E9OjgKTbB3ZQKQ/0ZOvevfNHG0NK4Aj3Cp7NpRk07RT1i/S0EL93Ag8GRgKI9CfpajKyK6+Jj/PI1KO5/85VAwz2AwzP8FTBb075IxCXv6T9RVvWT2tUaqxDS92zrGUbWzUYk9mSs82pECH+fkqsDt93VW++4YsR/dHCYcQSYTO/KaBMDj9LSD/J/+z20Kq8XvZUAIHtm9hRPP3ItbuAu2Hm5lkPs92pd7kCxgRs0xOVBnZ13ccdA0aunrwv9SdqElJRC3g+oCu+nXyCgmXUs9yMjTMAIHfxZV+aPKcZeUBWt057Xo85Ks1Ir5gzEHCWqZEhrLZMuF11ziGtFQUds/EESajhagzcKsxamcSZxGth4UII+adPhQkUnx2WyN+4YWR+r3f8MnkyGFuR4zjzxJS8WsQYR5PTyRaD9ixa6Mh741nBHbzfjXHskGDq179xaRNrCIB1z1xRfWfjqw2pHc1zk9xlPpL8sQWAIuETZZhbnmL54rceXVNRvUiKrrqIkeogsl0XXb17ylNb0f4GA9Wd44vffEG8FSZGHEL2fbaTGRcSiCeA8PmA/f6Hz8HCS76fXUHwgwkzSwlI71ekZ7Fapmlk/KC+Hs8hUcw3N2LN5LhkVYyizYFl/uPeVP5lsoJHhhfWvvSWruCUW1ZcJOeuTbrDgywJ/qG07gZJplnTvLcYdNaH0KMYOYMGX+rB4NGPFmQsNaIwlWrfCezxre8zXBrsMT+edVLbLqN1BqB76JH4BvZTqUIMfGwPGEn+EnmTV86fPBaYbFL3DFEhjB45CewkXEAtJxk4/Ms2pPXnaRqdky0HOYdcUcE2zcXq4vaIvW2/v0nHFJH2XXe22ueDmq/18XGtELSq85j9X8q0tcNSSKJIX8FTuJF/Pf8j5PhqG2u+osvsLxYrvvfeVJL+4tkcXcr9JV7v0ERmj/X6fM3NC4j6dS1+9Umr2oPavqiAydTZPLMNRGY23LO9zAVDly7jD+70G5TPPLdhRIl4WxcYjLnM+SNcJ26FOrkrISUtPObIz5Zb3AG612krnpy15RMW+1cQjlnWFI6538qky9axd2oJmHIHP08KyP0ubGO+TQNOYuv2uh17yCIvR8VcStw7o1g0NM60sk+8Tq7YfIBJrtp53GkvzXH7OA0p8/n/u1satf/VJhtR1l8Wa6Gmaug7haSpaCaYQax6ta0mkutlb+eAOSG1aobM81D9A4iS1RRlzBBoVX6tU1S6WE2N9ORY6DfeLRC4l9Rvr5h95XDWB2mR1d4WFudpsgVYwiTwT31ljskD8ZyDOlm5DkGh9N/UB/0AI5Xvb8ZBmai2hQ4BWMqFwYnzxwB26YHSOv9WgY3JXnvoN+2R4rqGVh/LLDMtpFP+SpMGJNWvbIl5SOodbCczW2RKleksPoUeGEzrjtKHVdtZA+kfqO+rVx/iclCqwoopepvJpSTDjT+b9GWylGRF8EDbGlw6eUzmJM95Ovoz+kwLX3c2fTjFeYEsE7vUZm3mqdGJuKh2w9/QGSaqRHs99aScGOdDqkFcACoqdbBoQqqjamhH6Q9ng39JCg3lrGJwd50Qk9ovnqBTr8MME7Ps2wiVfygUmPoUBJJfJWX5Nda0nuncbFkA=="));
}
var import_dist73;
var init_include = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js"() {
    import_dist73 = __toESM(require_dist());
    init_lib7();
    init_decoder();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var import_dist74, r2, VALID, IGNORED, MAPPED, EMOJI_ROOT;
var init_lib8 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js"() {
    import_dist74 = __toESM(require_dist());
    init_lib6();
    init_include();
    init_decoder();
    r2 = getData();
    VALID = new Set(read_member_array(r2));
    IGNORED = new Set(read_member_array(r2));
    MAPPED = read_mapped_map(r2);
    EMOJI_ROOT = read_emoji_trie(r2);
  }
});

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var import_dist75, logger5, Zeros;
var init_namehash = __esm({
  "node_modules/@ethersproject/hash/lib.esm/namehash.js"() {
    import_dist75 = __toESM(require_dist());
    init_lib2();
    init_lib6();
    init_lib3();
    init_lib();
    init_version5();
    init_lib8();
    logger5 = new Logger(version6);
    Zeros = new Uint8Array(32);
    Zeros.fill(0);
  }
});

// node_modules/@ethersproject/hash/lib.esm/message.js
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat2([
    toUtf8Bytes(messagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}
var import_dist76, messagePrefix;
var init_message = __esm({
  "node_modules/@ethersproject/hash/lib.esm/message.js"() {
    import_dist76 = __toESM(require_dist());
    init_lib2();
    init_lib3();
    init_lib6();
    messagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var import_dist77, version7;
var init_version6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
    import_dist77 = __toESM(require_dist());
    version7 = "rlp/5.7.0";
  }
});

// node_modules/@ethersproject/rlp/lib.esm/index.js
var import_dist78, logger6;
var init_lib9 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/index.js"() {
    "use strict";
    import_dist78 = __toESM(require_dist());
    init_lib2();
    init_lib();
    init_version6();
    logger6 = new Logger(version7);
  }
});

// node_modules/@ethersproject/address/lib.esm/_version.js
var import_dist79, version8;
var init_version7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/_version.js"() {
    import_dist79 = __toESM(require_dist());
    version8 = "address/5.7.0";
  }
});

// node_modules/@ethersproject/address/lib.esm/index.js
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i5 = 0; i5 < 40; i5++) {
    expanded[i5] = chars[i5].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i5 = 0; i5 < 40; i5 += 2) {
    if (hashed[i5 >> 1] >> 4 >= 8) {
      chars[i5] = chars[i5].toUpperCase();
    }
    if ((hashed[i5 >> 1] & 15) >= 8) {
      chars[i5 + 1] = chars[i5 + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function log10(x6) {
  if (Math.log10) {
    return Math.log10(x6);
  }
  return Math.log(x6) / Math.LN10;
}
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c5) => {
    return ibanLookup[c5];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger7.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger7.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
var import_dist80, logger7, MAX_SAFE_INTEGER, ibanLookup, safeDigits;
var init_lib10 = __esm({
  "node_modules/@ethersproject/address/lib.esm/index.js"() {
    "use strict";
    import_dist80 = __toESM(require_dist());
    init_lib2();
    init_lib4();
    init_lib3();
    init_lib9();
    init_lib();
    init_version7();
    logger7 = new Logger(version8);
    MAX_SAFE_INTEGER = 9007199254740991;
    ibanLookup = {};
    for (let i5 = 0; i5 < 10; i5++) {
      ibanLookup[String(i5)] = String(i5);
    }
    for (let i5 = 0; i5 < 26; i5++) {
      ibanLookup[String.fromCharCode(65 + i5)] = String(10 + i5);
    }
    safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  }
});

// node_modules/@ethersproject/properties/lib.esm/_version.js
var import_dist81, version9;
var init_version8 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/_version.js"() {
    import_dist81 = __toESM(require_dist());
    version9 = "properties/5.7.0";
  }
});

// node_modules/@ethersproject/properties/lib.esm/index.js
function defineReadOnly(object, name2, value) {
  Object.defineProperty(object, name2, {
    enumerable: true,
    value,
    writable: false
  });
}
var import_dist82, logger8;
var init_lib11 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/index.js"() {
    "use strict";
    import_dist82 = __toESM(require_dist());
    init_lib();
    init_version8();
    logger8 = new Logger(version9);
  }
});

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
function checkString(key2) {
  return function(value) {
    if (typeof value !== "string") {
      logger9.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
    }
    return value;
  };
}
var import_dist83, logger9, padding, NegativeOne3, Zero3, One2, MaxUint2562, hexTrue, hexFalse, domainChecks;
var init_typed_data = __esm({
  "node_modules/@ethersproject/hash/lib.esm/typed-data.js"() {
    import_dist83 = __toESM(require_dist());
    init_lib10();
    init_lib4();
    init_lib2();
    init_lib3();
    init_lib11();
    init_lib();
    init_version5();
    init_id();
    logger9 = new Logger(version6);
    padding = new Uint8Array(32);
    padding.fill(0);
    NegativeOne3 = BigNumber.from(-1);
    Zero3 = BigNumber.from(0);
    One2 = BigNumber.from(1);
    MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    hexTrue = hexZeroPad(One2.toHexString(), 32);
    hexFalse = hexZeroPad(Zero3.toHexString(), 32);
    domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(value) {
        try {
          return BigNumber.from(value).toString();
        } catch (error) {
        }
        return logger9.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
      },
      verifyingContract: function(value) {
        try {
          return getAddress(value).toLowerCase();
        } catch (error) {
        }
        return logger9.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        try {
          const bytes = arrayify(value);
          if (bytes.length !== 32) {
            throw new Error("bad length");
          }
          return hexlify(bytes);
        } catch (error) {
        }
        return logger9.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
      }
    };
  }
});

// node_modules/@ethersproject/hash/lib.esm/index.js
var import_dist84;
var init_lib12 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/index.js"() {
    "use strict";
    import_dist84 = __toESM(require_dist());
    init_id();
    init_namehash();
    init_message();
    init_namehash();
    init_typed_data();
  }
});

// node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base4, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base4 === "le" || base4 === "be") {
            endian = base4;
            base4 = 10;
          }
          this._init(number || 0, base4 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer_polyfill().Buffer;
        }
      } catch (e3) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min2(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base4, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base4, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base4, endian);
        }
        if (base4 === "hex") {
          base4 = 16;
        }
        assert2(base4 === (base4 | 0) && base4 >= 2 && base4 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base4 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base4, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base4, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base4, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base4, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base4, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i5 = 0; i5 < this.length; i5++) {
          this.words[i5] = 0;
        }
        var j3, w4;
        var off = 0;
        if (endian === "be") {
          for (i5 = number.length - 1, j3 = 0; i5 >= 0; i5 -= 3) {
            w4 = number[i5] | number[i5 - 1] << 8 | number[i5 - 2] << 16;
            this.words[j3] |= w4 << off & 67108863;
            this.words[j3 + 1] = w4 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        } else if (endian === "le") {
          for (i5 = 0, j3 = 0; i5 < number.length; i5 += 3) {
            w4 = number[i5] | number[i5 + 1] << 8 | number[i5 + 2] << 16;
            this.words[j3] |= w4 << off & 67108863;
            this.words[j3 + 1] = w4 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string3, index) {
        var c5 = string3.charCodeAt(index);
        if (c5 >= 48 && c5 <= 57) {
          return c5 - 48;
        } else if (c5 >= 65 && c5 <= 70) {
          return c5 - 55;
        } else if (c5 >= 97 && c5 <= 102) {
          return c5 - 87;
        } else {
          assert2(false, "Invalid character in " + string3);
        }
      }
      function parseHexByte(string3, lowerBound, index) {
        var r6 = parseHex4Bits(string3, index);
        if (index - 1 >= lowerBound) {
          r6 |= parseHex4Bits(string3, index - 1) << 4;
        }
        return r6;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i5 = 0; i5 < this.length; i5++) {
          this.words[i5] = 0;
        }
        var off = 0;
        var j3 = 0;
        var w4;
        if (endian === "be") {
          for (i5 = number.length - 1; i5 >= start; i5 -= 2) {
            w4 = parseHexByte(number, start, i5) << off;
            this.words[j3] |= w4 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w4 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i5 = parseLength % 2 === 0 ? start + 1 : start; i5 < number.length; i5 += 2) {
            w4 = parseHexByte(number, start, i5) << off;
            this.words[j3] |= w4 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w4 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str2, start, end, mul3) {
        var r6 = 0;
        var b4 = 0;
        var len = Math.min(str2.length, end);
        for (var i5 = start; i5 < len; i5++) {
          var c5 = str2.charCodeAt(i5) - 48;
          r6 *= mul3;
          if (c5 >= 49) {
            b4 = c5 - 49 + 10;
          } else if (c5 >= 17) {
            b4 = c5 - 17 + 10;
          } else {
            b4 = c5;
          }
          assert2(c5 >= 0 && b4 < mul3, "Invalid character");
          r6 += b4;
        }
        return r6;
      }
      BN3.prototype._parseBase = function _parseBase(number, base4, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base4) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base4 | 0;
        var total = number.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i5 = start; i5 < end; i5 += limbLen) {
          word = parseBase(number, i5, i5 + limbLen, base4);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow = 1;
          word = parseBase(number, i5, number.length, base4);
          for (i5 = 0; i5 < mod2; i5++) {
            pow *= base4;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i5 = 0; i5 < this.length; i5++) {
          dest.words[i5] = this.words[i5];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r6 = new BN3(null);
        this.copy(r6);
        return r6;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e3) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString4(base4, padding2) {
        base4 = base4 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base4 === 16 || base4 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i5 = 0; i5 < this.length; i5++) {
            var w4 = this.words[i5];
            var word = ((w4 << off | carry) & 16777215).toString(16);
            carry = w4 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i5--;
            }
            if (carry !== 0 || i5 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base4 === (base4 | 0) && base4 >= 2 && base4 <= 36) {
          var groupSize = groupSizes[base4];
          var groupBase = groupBases[base4];
          out = "";
          var c5 = this.clone();
          c5.negative = 0;
          while (!c5.isZero()) {
            var r6 = c5.modrn(groupBase).toString(base4);
            c5 = c5.idivn(groupBase);
            if (!c5.isZero()) {
              out = zeros2[groupSize - r6.length] + r6 + out;
            } else {
              out = r6 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length2) {
          return this.toArrayLike(Buffer2, endian, length2);
        };
      }
      BN3.prototype.toArray = function toArray2(endian, length2) {
        return this.toArrayLike(Array, endian, length2);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length2 || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i5 = 0, shift = 0; i5 < this.length; i5++) {
          var word = this.words[i5] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i5 = 0, shift = 0; i5 < this.length; i5++) {
          var word = this.words[i5] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w4) {
          return 32 - Math.clz32(w4);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w4) {
          var t3 = w4;
          var r6 = 0;
          if (t3 >= 4096) {
            r6 += 13;
            t3 >>>= 13;
          }
          if (t3 >= 64) {
            r6 += 7;
            t3 >>>= 7;
          }
          if (t3 >= 8) {
            r6 += 4;
            t3 >>>= 4;
          }
          if (t3 >= 2) {
            r6 += 2;
            t3 >>>= 2;
          }
          return r6 + t3;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w4) {
        if (w4 === 0) return 26;
        var t3 = w4;
        var r6 = 0;
        if ((t3 & 8191) === 0) {
          r6 += 13;
          t3 >>>= 13;
        }
        if ((t3 & 127) === 0) {
          r6 += 7;
          t3 >>>= 7;
        }
        if ((t3 & 15) === 0) {
          r6 += 4;
          t3 >>>= 4;
        }
        if ((t3 & 3) === 0) {
          r6 += 2;
          t3 >>>= 2;
        }
        if ((t3 & 1) === 0) {
          r6++;
        }
        return r6;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w4 = this.words[this.length - 1];
        var hi2 = this._countBits(w4);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w4 = new Array(num.bitLength());
        for (var bit = 0; bit < w4.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w4[bit] = num.words[off] >>> wbit & 1;
        }
        return w4;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r6 = 0;
        for (var i5 = 0; i5 < this.length; i5++) {
          var b4 = this._zeroBits(this.words[i5]);
          r6 += b4;
          if (b4 !== 26) break;
        }
        return r6;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i5 = 0; i5 < num.length; i5++) {
          this.words[i5] = this.words[i5] | num.words[i5];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or4(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b4;
        if (this.length > num.length) {
          b4 = num;
        } else {
          b4 = this;
        }
        for (var i5 = 0; i5 < b4.length; i5++) {
          this.words[i5] = this.words[i5] & num.words[i5];
        }
        this.length = b4.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a6;
        var b4;
        if (this.length > num.length) {
          a6 = this;
          b4 = num;
        } else {
          a6 = num;
          b4 = this;
        }
        for (var i5 = 0; i5 < b4.length; i5++) {
          this.words[i5] = a6.words[i5] ^ b4.words[i5];
        }
        if (this !== a6) {
          for (; i5 < a6.length; i5++) {
            this.words[i5] = a6.words[i5];
          }
        }
        this.length = a6.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i5 = 0; i5 < bytesNeeded; i5++) {
          this.words[i5] = ~this.words[i5] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i5] = ~this.words[i5] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r6;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r6 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r6 = this.isub(num);
          num.negative = 1;
          return r6._normSign();
        }
        var a6, b4;
        if (this.length > num.length) {
          a6 = this;
          b4 = num;
        } else {
          a6 = num;
          b4 = this;
        }
        var carry = 0;
        for (var i5 = 0; i5 < b4.length; i5++) {
          r6 = (a6.words[i5] | 0) + (b4.words[i5] | 0) + carry;
          this.words[i5] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        for (; carry !== 0 && i5 < a6.length; i5++) {
          r6 = (a6.words[i5] | 0) + carry;
          this.words[i5] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        this.length = a6.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a6 !== this) {
          for (; i5 < a6.length; i5++) {
            this.words[i5] = a6.words[i5];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r6 = this.iadd(num);
          num.negative = 1;
          return r6._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a6, b4;
        if (cmp > 0) {
          a6 = this;
          b4 = num;
        } else {
          a6 = num;
          b4 = this;
        }
        var carry = 0;
        for (var i5 = 0; i5 < b4.length; i5++) {
          r6 = (a6.words[i5] | 0) - (b4.words[i5] | 0) + carry;
          carry = r6 >> 26;
          this.words[i5] = r6 & 67108863;
        }
        for (; carry !== 0 && i5 < a6.length; i5++) {
          r6 = (a6.words[i5] | 0) + carry;
          carry = r6 >> 26;
          this.words[i5] = r6 & 67108863;
        }
        if (carry === 0 && i5 < a6.length && a6 !== this) {
          for (; i5 < a6.length; i5++) {
            this.words[i5] = a6.words[i5];
          }
        }
        this.length = Math.max(this.length, i5);
        if (a6 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a6 = self2.words[0] | 0;
        var b4 = num.words[0] | 0;
        var r6 = a6 * b4;
        var lo2 = r6 & 67108863;
        var carry = r6 / 67108864 | 0;
        out.words[0] = lo2;
        for (var k5 = 1; k5 < len; k5++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k5, num.length - 1);
          for (var j3 = Math.max(0, k5 - self2.length + 1); j3 <= maxJ; j3++) {
            var i5 = k5 - j3 | 0;
            a6 = self2.words[i5] | 0;
            b4 = num.words[j3] | 0;
            r6 = a6 * b4 + rword;
            ncarry += r6 / 67108864 | 0;
            rword = r6 & 67108863;
          }
          out.words[k5] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k5] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a6 = self2.words;
        var b4 = num.words;
        var o4 = out.words;
        var c5 = 0;
        var lo2;
        var mid;
        var hi2;
        var a0 = a6[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a6[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a6[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a6[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a42 = a6[4] | 0;
        var al4 = a42 & 8191;
        var ah4 = a42 >>> 13;
        var a52 = a6[5] | 0;
        var al5 = a52 & 8191;
        var ah5 = a52 >>> 13;
        var a62 = a6[6] | 0;
        var al6 = a62 & 8191;
        var ah6 = a62 >>> 13;
        var a7 = a6[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a6[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a6[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b4[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b4[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b4[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b4[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b42 = b4[4] | 0;
        var bl4 = b42 & 8191;
        var bh4 = b42 >>> 13;
        var b5 = b4[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b4[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b4[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b4[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b4[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo2 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo2 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo2 = lo2 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo2 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo2 = lo2 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo2 = lo2 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w22 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo2 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo2 = lo2 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo2 = lo2 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo2 = lo2 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w32 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
        w32 &= 67108863;
        lo2 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo2 = lo2 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo2 = lo2 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo2 = lo2 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo2 = lo2 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w4 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo2 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo2 = lo2 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo2 = lo2 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo2 = lo2 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo2 = lo2 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo2 = lo2 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w5 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo2 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo2 = lo2 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo2 = lo2 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo2 = lo2 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo2 = lo2 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo2 = lo2 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo2 = lo2 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo2 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo2 = lo2 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo2 = lo2 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo2 = lo2 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo2 = lo2 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo2 = lo2 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo2 = lo2 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo2 = lo2 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo2 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo2 = lo2 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo2 = lo2 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo2 = lo2 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo2 = lo2 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo2 = lo2 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo2 = lo2 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo2 = lo2 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo2 = lo2 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo2 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo2 = lo2 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo2 = lo2 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo2 = lo2 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo2 = lo2 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo2 = lo2 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo2 = lo2 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo2 = lo2 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo2 = lo2 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo2 = lo2 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo2 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo2 = lo2 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo2 = lo2 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo2 = lo2 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo2 = lo2 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo2 = lo2 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo2 = lo2 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo2 = lo2 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo2 = lo2 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo2 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo2 = lo2 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo2 = lo2 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo2 = lo2 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo2 = lo2 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo2 = lo2 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo2 = lo2 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo2 = lo2 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo2 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo2 = lo2 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo2 = lo2 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo2 = lo2 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo2 = lo2 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo2 = lo2 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo2 = lo2 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo2 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo2 = lo2 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo2 = lo2 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo2 = lo2 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo2 = lo2 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo2 = lo2 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo2 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo2 = lo2 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo2 = lo2 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo2 = lo2 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo2 = lo2 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo2 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo2 = lo2 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo2 = lo2 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo2 = lo2 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo2 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo2 = lo2 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo2 = lo2 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo2 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo2 = lo2 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo2 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o4[0] = w0;
        o4[1] = w1;
        o4[2] = w22;
        o4[3] = w32;
        o4[4] = w4;
        o4[5] = w5;
        o4[6] = w6;
        o4[7] = w7;
        o4[8] = w8;
        o4[9] = w9;
        o4[10] = w10;
        o4[11] = w11;
        o4[12] = w12;
        o4[13] = w13;
        o4[14] = w14;
        o4[15] = w15;
        o4[16] = w16;
        o4[17] = w17;
        o4[18] = w18;
        if (c5 !== 0) {
          o4[19] = c5;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k5 = 0; k5 < out.length - 1; k5++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k5, num.length - 1);
          for (var j3 = Math.max(0, k5 - self2.length + 1); j3 <= maxJ; j3++) {
            var i5 = k5 - j3;
            var a6 = self2.words[i5] | 0;
            var b4 = num.words[j3] | 0;
            var r6 = a6 * b4;
            var lo2 = r6 & 67108863;
            ncarry = ncarry + (r6 / 67108864 | 0) | 0;
            lo2 = lo2 + rword | 0;
            rword = lo2 & 67108863;
            ncarry = ncarry + (lo2 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k5] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k5] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x6, y5) {
        this.x = x6;
        this.y = y5;
      }
      FFTM.prototype.makeRBT = function makeRBT(N13) {
        var t3 = new Array(N13);
        var l6 = BN3.prototype._countBits(N13) - 1;
        for (var i5 = 0; i5 < N13; i5++) {
          t3[i5] = this.revBin(i5, l6, N13);
        }
        return t3;
      };
      FFTM.prototype.revBin = function revBin(x6, l6, N13) {
        if (x6 === 0 || x6 === N13 - 1) return x6;
        var rb = 0;
        for (var i5 = 0; i5 < l6; i5++) {
          rb |= (x6 & 1) << l6 - i5 - 1;
          x6 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N13) {
        for (var i5 = 0; i5 < N13; i5++) {
          rtws[i5] = rws[rbt[i5]];
          itws[i5] = iws[rbt[i5]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N13, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N13);
        for (var s4 = 1; s4 < N13; s4 <<= 1) {
          var l6 = s4 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l6);
          var itwdf = Math.sin(2 * Math.PI / l6);
          for (var p5 = 0; p5 < N13; p5 += l6) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j3 = 0; j3 < s4; j3++) {
              var re3 = rtws[p5 + j3];
              var ie2 = itws[p5 + j3];
              var ro2 = rtws[p5 + j3 + s4];
              var io2 = itws[p5 + j3 + s4];
              var rx = rtwdf_ * ro2 - itwdf_ * io2;
              io2 = rtwdf_ * io2 + itwdf_ * ro2;
              ro2 = rx;
              rtws[p5 + j3] = re3 + ro2;
              itws[p5 + j3] = ie2 + io2;
              rtws[p5 + j3 + s4] = re3 - ro2;
              itws[p5 + j3 + s4] = ie2 - io2;
              if (j3 !== l6) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n7, m5) {
        var N13 = Math.max(m5, n7) | 1;
        var odd = N13 & 1;
        var i5 = 0;
        for (N13 = N13 / 2 | 0; N13; N13 = N13 >>> 1) {
          i5++;
        }
        return 1 << i5 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N13) {
        if (N13 <= 1) return;
        for (var i5 = 0; i5 < N13 / 2; i5++) {
          var t3 = rws[i5];
          rws[i5] = rws[N13 - i5 - 1];
          rws[N13 - i5 - 1] = t3;
          t3 = iws[i5];
          iws[i5] = -iws[N13 - i5 - 1];
          iws[N13 - i5 - 1] = -t3;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N13) {
        var carry = 0;
        for (var i5 = 0; i5 < N13 / 2; i5++) {
          var w4 = Math.round(ws2[2 * i5 + 1] / N13) * 8192 + Math.round(ws2[2 * i5] / N13) + carry;
          ws2[i5] = w4 & 67108863;
          if (w4 < 67108864) {
            carry = 0;
          } else {
            carry = w4 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N13) {
        var carry = 0;
        for (var i5 = 0; i5 < len; i5++) {
          carry = carry + (ws2[i5] | 0);
          rws[2 * i5] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i5 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i5 = 2 * len; i5 < N13; ++i5) {
          rws[i5] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N13) {
        var ph = new Array(N13);
        for (var i5 = 0; i5 < N13; i5++) {
          ph[i5] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x6, y5, out) {
        var N13 = 2 * this.guessLen13b(x6.length, y5.length);
        var rbt = this.makeRBT(N13);
        var _5 = this.stub(N13);
        var rws = new Array(N13);
        var rwst = new Array(N13);
        var iwst = new Array(N13);
        var nrws = new Array(N13);
        var nrwst = new Array(N13);
        var niwst = new Array(N13);
        var rmws = out.words;
        rmws.length = N13;
        this.convert13b(x6.words, x6.length, rws, N13);
        this.convert13b(y5.words, y5.length, nrws, N13);
        this.transform(rws, _5, rwst, iwst, N13, rbt);
        this.transform(nrws, _5, nrwst, niwst, N13, rbt);
        for (var i5 = 0; i5 < N13; i5++) {
          var rx = rwst[i5] * nrwst[i5] - iwst[i5] * niwst[i5];
          iwst[i5] = rwst[i5] * niwst[i5] + iwst[i5] * nrwst[i5];
          rwst[i5] = rx;
        }
        this.conjugate(rwst, iwst, N13);
        this.transform(rwst, iwst, rmws, _5, N13, rbt);
        this.conjugate(rmws, _5, N13);
        this.normalize13b(rmws, N13);
        out.negative = x6.negative ^ y5.negative;
        out.length = x6.length + y5.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i5 = 0; i5 < this.length; i5++) {
          var w4 = (this.words[i5] | 0) * num;
          var lo2 = (w4 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w4 / 67108864 | 0;
          carry += lo2 >>> 26;
          this.words[i5] = lo2 & 67108863;
        }
        if (carry !== 0) {
          this.words[i5] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w4 = toBitArray(num);
        if (w4.length === 0) return new BN3(1);
        var res = this;
        for (var i5 = 0; i5 < w4.length; i5++, res = res.sqr()) {
          if (w4[i5] !== 0) break;
        }
        if (++i5 < w4.length) {
          for (var q2 = res.sqr(); i5 < w4.length; i5++, q2 = q2.sqr()) {
            if (w4[i5] === 0) continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s4 = (bits - r6) / 26;
        var carryMask = 67108863 >>> 26 - r6 << 26 - r6;
        var i5;
        if (r6 !== 0) {
          var carry = 0;
          for (i5 = 0; i5 < this.length; i5++) {
            var newCarry = this.words[i5] & carryMask;
            var c5 = (this.words[i5] | 0) - newCarry << r6;
            this.words[i5] = c5 | carry;
            carry = newCarry >>> 26 - r6;
          }
          if (carry) {
            this.words[i5] = carry;
            this.length++;
          }
        }
        if (s4 !== 0) {
          for (i5 = this.length - 1; i5 >= 0; i5--) {
            this.words[i5 + s4] = this.words[i5];
          }
          for (i5 = 0; i5 < s4; i5++) {
            this.words[i5] = 0;
          }
          this.length += s4;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h6;
        if (hint) {
          h6 = (hint - hint % 26) / 26;
        } else {
          h6 = 0;
        }
        var r6 = bits % 26;
        var s4 = Math.min((bits - r6) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r6 << r6;
        var maskedWords = extended;
        h6 -= s4;
        h6 = Math.max(0, h6);
        if (maskedWords) {
          for (var i5 = 0; i5 < s4; i5++) {
            maskedWords.words[i5] = this.words[i5];
          }
          maskedWords.length = s4;
        }
        if (s4 === 0) {
        } else if (this.length > s4) {
          this.length -= s4;
          for (i5 = 0; i5 < this.length; i5++) {
            this.words[i5] = this.words[i5 + s4];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i5 = this.length - 1; i5 >= 0 && (carry !== 0 || i5 >= h6); i5--) {
          var word = this.words[i5] | 0;
          this.words[i5] = carry << 26 - r6 | word >>> r6;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r6 = bit % 26;
        var s4 = (bit - r6) / 26;
        var q2 = 1 << r6;
        if (this.length <= s4) return false;
        var w4 = this.words[s4];
        return !!(w4 & q2);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s4 = (bits - r6) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s4) {
          return this;
        }
        if (r6 !== 0) {
          s4++;
        }
        this.length = Math.min(s4, this.length);
        if (r6 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r6 << r6;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i5 = 0; i5 < this.length && this.words[i5] >= 67108864; i5++) {
          this.words[i5] -= 67108864;
          if (i5 === this.length - 1) {
            this.words[i5 + 1] = 1;
          } else {
            this.words[i5 + 1]++;
          }
        }
        this.length = Math.max(this.length, i5 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i5 = 0; i5 < this.length && this.words[i5] < 0; i5++) {
            this.words[i5] += 67108864;
            this.words[i5 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i5;
        this._expand(len);
        var w4;
        var carry = 0;
        for (i5 = 0; i5 < num.length; i5++) {
          w4 = (this.words[i5 + shift] | 0) + carry;
          var right = (num.words[i5] | 0) * mul3;
          w4 -= right & 67108863;
          carry = (w4 >> 26) - (right / 67108864 | 0);
          this.words[i5 + shift] = w4 & 67108863;
        }
        for (; i5 < this.length - shift; i5++) {
          w4 = (this.words[i5 + shift] | 0) + carry;
          carry = w4 >> 26;
          this.words[i5 + shift] = w4 & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i5 = 0; i5 < this.length; i5++) {
          w4 = -(this.words[i5] | 0) + carry;
          carry = w4 >> 26;
          this.words[i5] = w4 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a6 = this.clone();
        var b4 = num;
        var bhi = b4.words[b4.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b4 = b4.ushln(shift);
          a6.iushln(shift);
          bhi = b4.words[b4.length - 1] | 0;
        }
        var m5 = a6.length - b4.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN3(null);
          q2.length = m5 + 1;
          q2.words = new Array(q2.length);
          for (var i5 = 0; i5 < q2.length; i5++) {
            q2.words[i5] = 0;
          }
        }
        var diff = a6.clone()._ishlnsubmul(b4, 1, m5);
        if (diff.negative === 0) {
          a6 = diff;
          if (q2) {
            q2.words[m5] = 1;
          }
        }
        for (var j3 = m5 - 1; j3 >= 0; j3--) {
          var qj = (a6.words[b4.length + j3] | 0) * 67108864 + (a6.words[b4.length + j3 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a6._ishlnsubmul(b4, qj, j3);
          while (a6.negative !== 0) {
            qj--;
            a6.negative = 0;
            a6._ishlnsubmul(b4, 1, j3);
            if (!a6.isZero()) {
              a6.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j3] = qj;
          }
        }
        if (q2) {
          q2._strip();
        }
        a6._strip();
        if (mode !== "div" && shift !== 0) {
          a6.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a6
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p5 = (1 << 26) % num;
        var acc = 0;
        for (var i5 = this.length - 1; i5 >= 0; i5--) {
          acc = (p5 * acc + (this.words[i5] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i5 = this.length - 1; i5 >= 0; i5--) {
          var w4 = (this.words[i5] | 0) + carry * 67108864;
          this.words[i5] = w4 / num | 0;
          carry = w4 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var x6 = this;
        var y5 = p5.clone();
        if (x6.negative !== 0) {
          x6 = x6.umod(p5);
        } else {
          x6 = x6.clone();
        }
        var A5 = new BN3(1);
        var B4 = new BN3(0);
        var C6 = new BN3(0);
        var D4 = new BN3(1);
        var g5 = 0;
        while (x6.isEven() && y5.isEven()) {
          x6.iushrn(1);
          y5.iushrn(1);
          ++g5;
        }
        var yp = y5.clone();
        var xp = x6.clone();
        while (!x6.isZero()) {
          for (var i5 = 0, im = 1; (x6.words[0] & im) === 0 && i5 < 26; ++i5, im <<= 1) ;
          if (i5 > 0) {
            x6.iushrn(i5);
            while (i5-- > 0) {
              if (A5.isOdd() || B4.isOdd()) {
                A5.iadd(yp);
                B4.isub(xp);
              }
              A5.iushrn(1);
              B4.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (y5.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
          if (j3 > 0) {
            y5.iushrn(j3);
            while (j3-- > 0) {
              if (C6.isOdd() || D4.isOdd()) {
                C6.iadd(yp);
                D4.isub(xp);
              }
              C6.iushrn(1);
              D4.iushrn(1);
            }
          }
          if (x6.cmp(y5) >= 0) {
            x6.isub(y5);
            A5.isub(C6);
            B4.isub(D4);
          } else {
            y5.isub(x6);
            C6.isub(A5);
            D4.isub(B4);
          }
        }
        return {
          a: C6,
          b: D4,
          gcd: y5.iushln(g5)
        };
      };
      BN3.prototype._invmp = function _invmp(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var a6 = this;
        var b4 = p5.clone();
        if (a6.negative !== 0) {
          a6 = a6.umod(p5);
        } else {
          a6 = a6.clone();
        }
        var x1 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b4.clone();
        while (a6.cmpn(1) > 0 && b4.cmpn(1) > 0) {
          for (var i5 = 0, im = 1; (a6.words[0] & im) === 0 && i5 < 26; ++i5, im <<= 1) ;
          if (i5 > 0) {
            a6.iushrn(i5);
            while (i5-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (b4.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
          if (j3 > 0) {
            b4.iushrn(j3);
            while (j3-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a6.cmp(b4) >= 0) {
            a6.isub(b4);
            x1.isub(x22);
          } else {
            b4.isub(a6);
            x22.isub(x1);
          }
        }
        var res;
        if (a6.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p5);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a6 = this.clone();
        var b4 = num.clone();
        a6.negative = 0;
        b4.negative = 0;
        for (var shift = 0; a6.isEven() && b4.isEven(); shift++) {
          a6.iushrn(1);
          b4.iushrn(1);
        }
        do {
          while (a6.isEven()) {
            a6.iushrn(1);
          }
          while (b4.isEven()) {
            b4.iushrn(1);
          }
          var r6 = a6.cmp(b4);
          if (r6 < 0) {
            var t3 = a6;
            a6 = b4;
            b4 = t3;
          } else if (r6 === 0 || b4.cmpn(1) === 0) {
            break;
          }
          a6.isub(b4);
        } while (true);
        return b4.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r6 = bit % 26;
        var s4 = (bit - r6) / 26;
        var q2 = 1 << r6;
        if (this.length <= s4) {
          this._expand(s4 + 1);
          this.words[s4] |= q2;
          return this;
        }
        var carry = q2;
        for (var i5 = s4; carry !== 0 && i5 < this.length; i5++) {
          var w4 = this.words[i5] | 0;
          w4 += carry;
          carry = w4 >>> 26;
          w4 &= 67108863;
          this.words[i5] = w4;
        }
        if (carry !== 0) {
          this.words[i5] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w4 = this.words[0] | 0;
          res = w4 === num ? 0 : w4 < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i5 = this.length - 1; i5 >= 0; i5--) {
          var a6 = this.words[i5] | 0;
          var b4 = num.words[i5] | 0;
          if (a6 === b4) continue;
          if (a6 < b4) {
            res = -1;
          } else if (a6 > b4) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt4(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt3(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p5) {
        this.name = name2;
        this.p = new BN3(p5, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r6 = num;
        var rlen;
        do {
          this.split(r6, this.tmp);
          r6 = this.imulK(r6);
          r6 = r6.iadd(this.tmp);
          rlen = r6.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r6.ucmp(this.p);
        if (cmp === 0) {
          r6.words[0] = 0;
          r6.length = 1;
        } else if (cmp > 0) {
          r6.isub(this.p);
        } else {
          if (r6.strip !== void 0) {
            r6.strip();
          } else {
            r6._strip();
          }
        }
        return r6;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i5 = 0; i5 < outLen; i5++) {
          output.words[i5] = input.words[i5];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i5 = 10; i5 < input.length; i5++) {
          var next = input.words[i5] | 0;
          input.words[i5 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i5 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo2 = 0;
        for (var i5 = 0; i5 < num.length; i5++) {
          var w4 = num.words[i5] | 0;
          lo2 += w4 * 977;
          num.words[i5] = lo2 & 67108863;
          lo2 = w4 * 64 + (lo2 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i5 = 0; i5 < num.length; i5++) {
          var hi2 = (num.words[i5] | 0) * 19 + carry;
          var lo2 = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i5] = lo2;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m5) {
        if (typeof m5 === "string") {
          var prime = BN3._prime(m5);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m5.gtn(1), "modulus must be greater than 1");
          this.m = m5;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a6) {
        assert2(a6.negative === 0, "red works only with positives");
        assert2(a6.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a6, b4) {
        assert2((a6.negative | b4.negative) === 0, "red works only with positives");
        assert2(
          a6.red && a6.red === b4.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a6) {
        if (this.prime) return this.prime.ireduce(a6)._forceRed(this);
        move(a6, a6.umod(this.m)._forceRed(this));
        return a6;
      };
      Red.prototype.neg = function neg3(a6) {
        if (a6.isZero()) {
          return a6.clone();
        }
        return this.m.sub(a6)._forceRed(this);
      };
      Red.prototype.add = function add3(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.add(b4);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.iadd(b4);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.sub(b4);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a6, b4) {
        this._verify2(a6, b4);
        var res = a6.isub(b4);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a6, num) {
        this._verify1(a6);
        return this.imod(a6.ushln(num));
      };
      Red.prototype.imul = function imul(a6, b4) {
        this._verify2(a6, b4);
        return this.imod(a6.imul(b4));
      };
      Red.prototype.mul = function mul3(a6, b4) {
        this._verify2(a6, b4);
        return this.imod(a6.mul(b4));
      };
      Red.prototype.isqr = function isqr(a6) {
        return this.imul(a6, a6.clone());
      };
      Red.prototype.sqr = function sqr(a6) {
        return this.mul(a6, a6);
      };
      Red.prototype.sqrt = function sqrt(a6) {
        if (a6.isZero()) return a6.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a6, pow);
        }
        var q2 = this.m.subn(1);
        var s4 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s4++;
          q2.iushrn(1);
        }
        assert2(!q2.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z6 = this.m.bitLength();
        z6 = new BN3(2 * z6 * z6).toRed(this);
        while (this.pow(z6, lpow).cmp(nOne) !== 0) {
          z6.redIAdd(nOne);
        }
        var c5 = this.pow(z6, q2);
        var r6 = this.pow(a6, q2.addn(1).iushrn(1));
        var t3 = this.pow(a6, q2);
        var m5 = s4;
        while (t3.cmp(one) !== 0) {
          var tmp = t3;
          for (var i5 = 0; tmp.cmp(one) !== 0; i5++) {
            tmp = tmp.redSqr();
          }
          assert2(i5 < m5);
          var b4 = this.pow(c5, new BN3(1).iushln(m5 - i5 - 1));
          r6 = r6.redMul(b4);
          c5 = b4.redSqr();
          t3 = t3.redMul(c5);
          m5 = i5;
        }
        return r6;
      };
      Red.prototype.invm = function invm(a6) {
        var inv = a6._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a6, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a6.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a6;
        for (var i5 = 2; i5 < wnd.length; i5++) {
          wnd[i5] = this.mul(wnd[i5 - 1], a6);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i5 = num.length - 1; i5 >= 0; i5--) {
          var word = num.words[i5];
          for (var j3 = start - 1; j3 >= 0; j3--) {
            var bit = word >> j3 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i5 !== 0 || j3 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r6 = num.umod(this.m);
        return r6 === num ? r6.clone() : r6;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m5) {
        Red.call(this, m5);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r6 = this.imod(num.mul(this.rinv));
        r6.red = null;
        return r6;
      };
      Mont.prototype.imul = function imul(a6, b4) {
        if (a6.isZero() || b4.isZero()) {
          a6.words[0] = 0;
          a6.length = 1;
          return a6;
        }
        var t3 = a6.imul(b4);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t3.isub(c5).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a6, b4) {
        if (a6.isZero() || b4.isZero()) return new BN3(0)._forceRed(this);
        var t3 = a6.mul(b4);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t3.isub(c5).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a6) {
        var res = this.imod(a6._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
function createCommonjsModule(fn3, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base4) {
      return commonjsRequire(path, base4 === void 0 || base4 === null ? module.path : base4);
    }
  }, fn3(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
function assert(val, msg) {
  if (!val)
    throw new Error(msg || "Assertion failed");
}
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
function ShortCurve(conf) {
  base3.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
function Point(curve, x6, y5, isRed) {
  base3.BasePoint.call(this, curve, "affine");
  if (x6 === null && y5 === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x6, 16);
    this.y = new import_bn2.default(y5, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
function JPoint(curve, x6, y5, z6) {
  base3.BasePoint.call(this, curve, "jacobian");
  if (x6 === null && y5 === null && z6 === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x6, 16);
    this.y = new import_bn2.default(y5, 16);
    this.z = new import_bn2.default(z6, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(
    entropy.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  );
  this._init(entropy, nonce, pers);
}
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
function Position() {
  this.place = 0;
}
function getLength(buf, p5) {
  var initial = buf[p5.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i5 = 0, off = p5.place; i5 < octetLen; i5++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }
  if (val <= 127) {
    return false;
  }
  p5.place = off;
  return val;
}
function rmPadding(buf) {
  var i5 = 0;
  var len = buf.length - 1;
  while (!buf[i5] && !(buf[i5 + 1] & 128) && i5 < len) {
    i5++;
  }
  if (i5 === 0) {
    return buf;
  }
  return buf.slice(i5);
}
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(
      Object.prototype.hasOwnProperty.call(curves_1, options),
      "Unknown curve " + options
    );
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var import_dist85, import_bn2, import_hash, minimalisticAssert, utils_1, utils_1$1, getNAF, getJSF, assert$1, base3, inherits_browser, assert$2, short_1, curve_1, curves_1, hmacDrbg, assert$3, key, assert$4, signature, rand, assert$5, ec, elliptic_1, EC$1;
var init_elliptic = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/elliptic.js"() {
    import_dist85 = __toESM(require_dist());
    import_bn2 = __toESM(require_bn2());
    import_hash = __toESM(require_hash());
    minimalisticAssert = assert;
    assert.equal = function assertEqual(l6, r6, msg) {
      if (l6 != r6)
        throw new Error(msg || "Assertion failed: " + l6 + " != " + r6);
    };
    utils_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils2 = exports;
      function toArray2(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i5 = 0; i5 < msg.length; i5++)
            res[i5] = msg[i5] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i5 = 0; i5 < msg.length; i5 += 2)
            res.push(parseInt(msg[i5] + msg[i5 + 1], 16));
        } else {
          for (var i5 = 0; i5 < msg.length; i5++) {
            var c5 = msg.charCodeAt(i5);
            var hi2 = c5 >> 8;
            var lo2 = c5 & 255;
            if (hi2)
              res.push(hi2, lo2);
            else
              res.push(lo2);
          }
        }
        return res;
      }
      utils2.toArray = toArray2;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils2.zero2 = zero2;
      function toHex2(msg) {
        var res = "";
        for (var i5 = 0; i5 < msg.length; i5++)
          res += zero2(msg[i5].toString(16));
        return res;
      }
      utils2.toHex = toHex2;
      utils2.encode = function encode8(arr, enc) {
        if (enc === "hex")
          return toHex2(arr);
        else
          return arr;
      };
    });
    utils_1$1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils2 = exports;
      utils2.assert = minimalisticAssert;
      utils2.toArray = utils_1.toArray;
      utils2.zero2 = utils_1.zero2;
      utils2.toHex = utils_1.toHex;
      utils2.encode = utils_1.encode;
      function getNAF2(num, w4, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws2 = 1 << w4 + 1;
        var k5 = num.clone();
        for (var i5 = 0; i5 < naf.length; i5++) {
          var z6;
          var mod2 = k5.andln(ws2 - 1);
          if (k5.isOdd()) {
            if (mod2 > (ws2 >> 1) - 1)
              z6 = (ws2 >> 1) - mod2;
            else
              z6 = mod2;
            k5.isubn(z6);
          } else {
            z6 = 0;
          }
          naf[i5] = z6;
          k5.iushrn(1);
        }
        return naf;
      }
      utils2.getNAF = getNAF2;
      function getJSF2(k1, k22) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k22 = k22.clone();
        var d1 = 0;
        var d22 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k22.andln(3) + d22 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);
          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = k22.andln(7) + d22 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d22 === u2 + 1)
            d22 = 1 - d22;
          k1.iushrn(1);
          k22.iushrn(1);
        }
        return jsf;
      }
      utils2.getJSF = getJSF2;
      function cachedProperty(obj, name2, computer) {
        var key2 = "_" + name2;
        obj.prototype[name2] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils2.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
      }
      utils2.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new import_bn2.default(bytes, "hex", "le");
      }
      utils2.intFromLE = intFromLE;
    });
    getNAF = utils_1$1.getNAF;
    getJSF = utils_1$1.getJSF;
    assert$1 = utils_1$1.assert;
    base3 = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p5, k5) {
      assert$1(p5.precomputed);
      var doubles = p5._getDoubles();
      var naf = getNAF(k5, 1, this._bitLength);
      var I5 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I5 /= 3;
      var repr = [];
      var j3;
      var nafW;
      for (j3 = 0; j3 < naf.length; j3 += doubles.step) {
        nafW = 0;
        for (var l6 = j3 + doubles.step - 1; l6 >= j3; l6--)
          nafW = (nafW << 1) + naf[l6];
        repr.push(nafW);
      }
      var a6 = this.jpoint(null, null, null);
      var b4 = this.jpoint(null, null, null);
      for (var i5 = I5; i5 > 0; i5--) {
        for (j3 = 0; j3 < repr.length; j3++) {
          nafW = repr[j3];
          if (nafW === i5)
            b4 = b4.mixedAdd(doubles.points[j3]);
          else if (nafW === -i5)
            b4 = b4.mixedAdd(doubles.points[j3].neg());
        }
        a6 = a6.add(b4);
      }
      return a6.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p5, k5) {
      var w4 = 4;
      var nafPoints = p5._getNAFPoints(w4);
      w4 = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k5, w4, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i5 = naf.length - 1; i5 >= 0; i5--) {
        for (var l6 = 0; i5 >= 0 && naf[i5] === 0; i5--)
          l6++;
        if (i5 >= 0)
          l6++;
        acc = acc.dblp(l6);
        if (i5 < 0)
          break;
        var z6 = naf[i5];
        assert$1(z6 !== 0);
        if (p5.type === "affine") {
          if (z6 > 0)
            acc = acc.mixedAdd(wnd[z6 - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z6 - 1 >> 1].neg());
        } else {
          if (z6 > 0)
            acc = acc.add(wnd[z6 - 1 >> 1]);
          else
            acc = acc.add(wnd[-z6 - 1 >> 1].neg());
        }
      }
      return p5.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max2 = 0;
      var i5;
      var j3;
      var p5;
      for (i5 = 0; i5 < len; i5++) {
        p5 = points[i5];
        var nafPoints = p5._getNAFPoints(defW);
        wndWidth[i5] = nafPoints.wnd;
        wnd[i5] = nafPoints.points;
      }
      for (i5 = len - 1; i5 >= 1; i5 -= 2) {
        var a6 = i5 - 1;
        var b4 = i5;
        if (wndWidth[a6] !== 1 || wndWidth[b4] !== 1) {
          naf[a6] = getNAF(coeffs[a6], wndWidth[a6], this._bitLength);
          naf[b4] = getNAF(coeffs[b4], wndWidth[b4], this._bitLength);
          max2 = Math.max(naf[a6].length, max2);
          max2 = Math.max(naf[b4].length, max2);
          continue;
        }
        var comb = [
          points[a6],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b4]
          /* 7 */
        ];
        if (points[a6].y.cmp(points[b4].y) === 0) {
          comb[1] = points[a6].add(points[b4]);
          comb[2] = points[a6].toJ().mixedAdd(points[b4].neg());
        } else if (points[a6].y.cmp(points[b4].y.redNeg()) === 0) {
          comb[1] = points[a6].toJ().mixedAdd(points[b4]);
          comb[2] = points[a6].add(points[b4].neg());
        } else {
          comb[1] = points[a6].toJ().mixedAdd(points[b4]);
          comb[2] = points[a6].toJ().mixedAdd(points[b4].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a6], coeffs[b4]);
        max2 = Math.max(jsf[0].length, max2);
        naf[a6] = new Array(max2);
        naf[b4] = new Array(max2);
        for (j3 = 0; j3 < max2; j3++) {
          var ja = jsf[0][j3] | 0;
          var jb = jsf[1][j3] | 0;
          naf[a6][j3] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b4][j3] = 0;
          wnd[a6] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i5 = max2; i5 >= 0; i5--) {
        var k5 = 0;
        while (i5 >= 0) {
          var zero = true;
          for (j3 = 0; j3 < len; j3++) {
            tmp[j3] = naf[j3][i5] | 0;
            if (tmp[j3] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k5++;
          i5--;
        }
        if (i5 >= 0)
          k5++;
        acc = acc.dblp(k5);
        if (i5 < 0)
          break;
        for (j3 = 0; j3 < len; j3++) {
          var z6 = tmp[j3];
          p5;
          if (z6 === 0)
            continue;
          else if (z6 > 0)
            p5 = wnd[j3][z6 - 1 >> 1];
          else if (z6 < 0)
            p5 = wnd[j3][-z6 - 1 >> 1].neg();
          if (p5.type === "affine")
            acc = acc.mixedAdd(p5);
          else
            acc = acc.add(p5);
        }
      }
      for (i5 = 0; i5 < len; i5++)
        wnd[i5] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert$1(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x6 = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x6);
      return [4].concat(x6, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode7(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k5) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k5.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i5 = 0; i5 < power; i5 += step) {
        for (var j3 = 0; j3 < step; j3++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max2 = (1 << wnd) - 1;
      var dbl3 = max2 === 1 ? null : this.dbl();
      for (var i5 = 1; i5 < max2; i5++)
        res[i5] = res[i5 - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k5) {
      var r6 = this;
      for (var i5 = 0; i5 < k5; i5++)
        r6 = r6.dbl();
      return r6;
    };
    inherits_browser = createCommonjsModule(function(module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    });
    assert$2 = utils_1$1.assert;
    inherits_browser(ShortCurve, base3);
    short_1 = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new import_bn2.default(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new import_bn2.default(vec.a, 16),
            b: new import_bn2.default(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : import_bn2.default.mont(num);
      var tinv = new import_bn2.default(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s4 = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s4).fromRed();
      var l22 = ntinv.redSub(s4).fromRed();
      return [l1, l22];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u2 = lambda;
      var v8 = this.n.clone();
      var x1 = new import_bn2.default(1);
      var y1 = new import_bn2.default(0);
      var x22 = new import_bn2.default(0);
      var y22 = new import_bn2.default(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a22;
      var b22;
      var prevR;
      var i5 = 0;
      var r6;
      var x6;
      while (u2.cmpn(0) !== 0) {
        var q2 = v8.div(u2);
        r6 = v8.sub(q2.mul(u2));
        x6 = x22.sub(q2.mul(x1));
        var y5 = y22.sub(q2.mul(y1));
        if (!a1 && r6.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r6.neg();
          b1 = x6;
        } else if (a1 && ++i5 === 2) {
          break;
        }
        prevR = r6;
        v8 = u2;
        u2 = r6;
        x22 = x1;
        x1 = x6;
        y22 = y1;
        y1 = y5;
      }
      a22 = r6.neg();
      b22 = x6;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a22.sqr().add(b22.sqr());
      if (len2.cmp(len1) >= 0) {
        a22 = a0;
        b22 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a22.negative) {
        a22 = a22.neg();
        b22 = b22.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a22, b: b22 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k5) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v22 = basis[1];
      var c1 = v22.b.mul(k5).divRound(this.n);
      var c22 = v1.b.neg().mul(k5).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p22 = c22.mul(v22.a);
      var q1 = c1.mul(v1.b);
      var q2 = c22.mul(v22.b);
      var k1 = k5.sub(p1).sub(p22);
      var k22 = q1.add(q2).neg();
      return { k1, k2: k22 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x6, odd) {
      x6 = new import_bn2.default(x6, 16);
      if (!x6.red)
        x6 = x6.toRed(this.red);
      var y22 = x6.redSqr().redMul(x6).redIAdd(x6.redMul(this.a)).redIAdd(this.b);
      var y5 = y22.redSqrt();
      if (y5.redSqr().redSub(y22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y5.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y5 = y5.redNeg();
      return this.point(x6, y5);
    };
    ShortCurve.prototype.validate = function validate3(point3) {
      if (point3.inf)
        return true;
      var x6 = point3.x;
      var y5 = point3.y;
      var ax = this.a.redMul(x6);
      var rhs = x6.redSqr().redMul(x6).redIAdd(ax).redIAdd(this.b);
      return y5.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i5 = 0; i5 < points.length; i5++) {
        var split = this._endoSplit(coeffs[i5]);
        var p5 = points[i5];
        var beta = p5._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p5 = p5.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i5 * 2] = p5;
        npoints[i5 * 2 + 1] = beta;
        ncoeffs[i5 * 2] = split.k1;
        ncoeffs[i5 * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i5 * 2, jacobianResult);
      for (var j3 = 0; j3 < i5 * 2; j3++) {
        npoints[j3] = null;
        ncoeffs[j3] = null;
      }
      return res;
    };
    inherits_browser(Point, base3.BasePoint);
    ShortCurve.prototype.point = function point2(x6, y5, isRed) {
      return new Point(this, x6, y5, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta2() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p5) {
          return curve.point(p5.x.redMul(curve.endo.beta), p5.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p5) {
      if (this.inf)
        return p5;
      if (p5.inf)
        return this;
      if (this.eq(p5))
        return this.dbl();
      if (this.neg().eq(p5))
        return this.curve.point(null, null);
      if (this.x.cmp(p5.x) === 0)
        return this.curve.point(null, null);
      var c5 = this.y.redSub(p5.y);
      if (c5.cmpn(0) !== 0)
        c5 = c5.redMul(this.x.redSub(p5.x).redInvm());
      var nx = c5.redSqr().redISub(this.x).redISub(p5.x);
      var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a6 = this.curve.a;
      var x22 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c5 = x22.redAdd(x22).redIAdd(x22).redIAdd(a6).redMul(dyinv);
      var nx = c5.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k5) {
      k5 = new import_bn2.default(k5, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k5))
        return this.curve._fixedNafMul(this, k5);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k5]);
      else
        return this.curve._wnafMul(this, k5);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq2(p5) {
      return this === p5 || this.inf === p5.inf && (this.inf || this.x.cmp(p5.x) === 0 && this.y.cmp(p5.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p5) {
          return p5.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    inherits_browser(JPoint, base3.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x6, y5, z6) {
      return new JPoint(this, x6, y5, z6);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg2() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add2(p5) {
      if (this.isInfinity())
        return p5;
      if (p5.isInfinity())
        return this;
      var pz2 = p5.z.redSqr();
      var z22 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p5.x.redMul(z22);
      var s1 = this.y.redMul(pz2.redMul(p5.z));
      var s22 = p5.y.redMul(z22.redMul(this.z));
      var h6 = u1.redSub(u2);
      var r6 = s1.redSub(s22);
      if (h6.cmpn(0) === 0) {
        if (r6.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h6.redSqr();
      var h32 = h22.redMul(h6);
      var v8 = u1.redMul(h22);
      var nx = r6.redSqr().redIAdd(h32).redISub(v8).redISub(v8);
      var ny = r6.redMul(v8.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(p5.z).redMul(h6);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p5) {
      if (this.isInfinity())
        return p5.toJ();
      if (p5.isInfinity())
        return this;
      var z22 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p5.x.redMul(z22);
      var s1 = this.y;
      var s22 = p5.y.redMul(z22).redMul(this.z);
      var h6 = u1.redSub(u2);
      var r6 = s1.redSub(s22);
      if (h6.cmpn(0) === 0) {
        if (r6.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h6.redSqr();
      var h32 = h22.redMul(h6);
      var v8 = u1.redMul(h22);
      var nx = r6.redSqr().redIAdd(h32).redISub(v8).redISub(v8);
      var ny = r6.redMul(v8.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(h6);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp2(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i5;
      if (this.curve.zeroA || this.curve.threeA) {
        var r6 = this;
        for (i5 = 0; i5 < pow; i5++)
          r6 = r6.dbl();
        return r6;
      }
      var a6 = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i5 = 0; i5 < pow; i5++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a6.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c5.redSqr().redISub(t1.redAdd(t1));
        var t22 = t1.redISub(nx);
        var dny = c5.redMul(t22);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i5 + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl2() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s4 = s4.redIAdd(s4);
        var m5 = xx.redAdd(xx).redIAdd(xx);
        var t3 = m5.redSqr().redISub(s4).redISub(s4);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t3;
        ny = m5.redMul(s4.redISub(t3)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a6 = this.x.redSqr();
        var b4 = this.y.redSqr();
        var c5 = b4.redSqr();
        var d4 = this.x.redAdd(b4).redSqr().redISub(a6).redISub(c5);
        d4 = d4.redIAdd(d4);
        var e3 = a6.redAdd(a6).redIAdd(a6);
        var f3 = e3.redSqr();
        var c8 = c5.redIAdd(c5);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f3.redISub(d4).redISub(d4);
        ny = e3.redMul(d4.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s4 = s4.redIAdd(s4);
        var m5 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t3 = m5.redSqr().redISub(s4).redISub(s4);
        nx = t3;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m5.redMul(s4.redISub(t3)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a6 = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a6.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c5.redSqr().redISub(t1.redAdd(t1));
      var t22 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c5.redMul(t22).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m5 = xx.redAdd(xx).redIAdd(xx);
      var mm = m5.redSqr();
      var e3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e3 = e3.redIAdd(e3);
      e3 = e3.redAdd(e3).redIAdd(e3);
      e3 = e3.redISub(mm);
      var ee2 = e3.redSqr();
      var t3 = yyyy.redIAdd(yyyy);
      t3 = t3.redIAdd(t3);
      t3 = t3.redIAdd(t3);
      t3 = t3.redIAdd(t3);
      var u2 = m5.redIAdd(e3).redSqr().redISub(mm).redISub(ee2).redISub(t3);
      var yyu4 = yy.redMul(u2);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee2).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u2.redMul(t3.redISub(u2)).redISub(e3.redMul(ee2)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e3).redSqr().redISub(zz).redISub(ee2);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul2(k5, kbase) {
      k5 = new import_bn2.default(k5, kbase);
      return this.curve._wnafMul(this, k5);
    };
    JPoint.prototype.eq = function eq3(p5) {
      if (p5.type === "affine")
        return this.eq(p5.toJ());
      if (this === p5)
        return true;
      var z22 = this.z.redSqr();
      var pz2 = p5.z.redSqr();
      if (this.x.redMul(pz2).redISub(p5.x.redMul(z22)).cmpn(0) !== 0)
        return false;
      var z32 = z22.redMul(this.z);
      var pz3 = pz2.redMul(p5.z);
      return this.y.redMul(pz3).redISub(p5.y.redMul(z32)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x6) {
      var zs2 = this.z.redSqr();
      var rx = x6.toRed(this.curve.red).redMul(zs2);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x6.clone();
      var t3 = this.curve.redN.redMul(zs2);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t3);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity2() {
      return this.z.cmpn(0) === 0;
    };
    curve_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curve = exports;
      curve.base = base3;
      curve.short = short_1;
      curve.mont = /*RicMoo:ethers:require(./mont)*/
      null;
      curve.edwards = /*RicMoo:ethers:require(./edwards)*/
      null;
    });
    curves_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curves = exports;
      var assert2 = utils_1$1.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve_1.short(options);
        else if (options.type === "edwards")
          this.curve = new curve_1.edwards(options);
        else
          this.curve = new curve_1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert2(this.g.validate(), "Invalid curve");
        assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name2, options) {
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name2, {
              configurable: true,
              enumerable: true,
              value: curve
            });
            return curve;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: import_hash.default.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: import_hash.default.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: import_hash.default.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: import_hash.default.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: import_hash.default.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash.default.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash.default.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          // 4/5
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
        null.crash();
      } catch (e3) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: import_hash.default.sha256,
        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    });
    hmacDrbg = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i5 = 0; i5 < this.V.length; i5++) {
        this.K[i5] = 0;
        this.V[i5] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new import_hash.default.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add3;
        add3 = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils_1.toArray(entropy, entropyEnc);
      add3 = utils_1.toArray(add3, addEnc);
      minimalisticAssert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add3 || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add3;
        add3 = enc;
        enc = null;
      }
      if (add3) {
        add3 = utils_1.toArray(add3, addEnc || "hex");
        this._update(add3);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add3);
      this._reseed++;
      return utils_1.encode(res, enc);
    };
    assert$3 = utils_1$1.assert;
    key = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate4() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
      this.priv = new import_bn2.default(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert$3(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert$3(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert$3(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign2(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify2(msg, signature2) {
      return this.ec.verify(msg, signature2, this);
    };
    KeyPair.prototype.inspect = function inspect3() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    assert$4 = utils_1$1.assert;
    signature = Signature;
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p5 = new Position();
      if (data[p5.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p5);
      if (len === false) {
        return false;
      }
      if (len + p5.place !== data.length) {
        return false;
      }
      if (data[p5.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p5);
      if (rlen === false) {
        return false;
      }
      var r6 = data.slice(p5.place, rlen + p5.place);
      p5.place += rlen;
      if (data[p5.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p5);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p5.place) {
        return false;
      }
      var s4 = data.slice(p5.place, slen + p5.place);
      if (r6[0] === 0) {
        if (r6[1] & 128) {
          r6 = r6.slice(1);
        } else {
          return false;
        }
      }
      if (s4[0] === 0) {
        if (s4[1] & 128) {
          s4 = s4.slice(1);
        } else {
          return false;
        }
      }
      this.r = new import_bn2.default(r6);
      this.s = new import_bn2.default(s4);
      this.recoveryParam = null;
      return true;
    };
    Signature.prototype.toDER = function toDER(enc) {
      var r6 = this.r.toArray();
      var s4 = this.s.toArray();
      if (r6[0] & 128)
        r6 = [0].concat(r6);
      if (s4[0] & 128)
        s4 = [0].concat(s4);
      r6 = rmPadding(r6);
      s4 = rmPadding(s4);
      while (!s4[0] && !(s4[1] & 128)) {
        s4 = s4.slice(1);
      }
      var arr = [2];
      constructLength(arr, r6.length);
      arr = arr.concat(r6);
      arr.push(2);
      constructLength(arr, s4.length);
      var backHalf = arr.concat(s4);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };
    rand = /*RicMoo:ethers:require(brorand)*/
    function() {
      throw new Error("unsupported");
    };
    assert$5 = utils_1$1.assert;
    ec = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new import_bn2.default(2));
      for (; ; ) {
        var priv = new import_bn2.default(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign3(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new import_bn2.default(1));
      for (var iter = 0; ; iter++) {
        var k5 = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
        k5 = this._truncateToN(k5, true);
        if (k5.cmpn(1) <= 0 || k5.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k5);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r6 = kpX.umod(this.n);
        if (r6.cmpn(0) === 0)
          continue;
        var s4 = k5.invm(this.n).mul(r6.mul(key2.getPrivate()).iadd(msg));
        s4 = s4.umod(this.n);
        if (s4.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r6) !== 0 ? 2 : 0);
        if (options.canonical && s4.cmp(this.nh) > 0) {
          s4 = this.n.sub(s4);
          recoveryParam ^= 1;
        }
        return new signature({ r: r6, s: s4, recoveryParam });
      }
    };
    EC.prototype.verify = function verify3(msg, signature$1, key2, enc) {
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      key2 = this.keyFromPublic(key2, enc);
      signature$1 = new signature(signature$1, "hex");
      var r6 = signature$1.r;
      var s4 = signature$1.s;
      if (r6.cmpn(1) < 0 || r6.cmp(this.n) >= 0)
        return false;
      if (s4.cmpn(1) < 0 || s4.cmp(this.n) >= 0)
        return false;
      var sinv = s4.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r6).umod(this.n);
      var p5;
      if (!this.curve._maxwellTrick) {
        p5 = this.g.mulAdd(u1, key2.getPublic(), u2);
        if (p5.isInfinity())
          return false;
        return p5.getX().umod(this.n).cmp(r6) === 0;
      }
      p5 = this.g.jmulAdd(u1, key2.getPublic(), u2);
      if (p5.isInfinity())
        return false;
      return p5.eqXToP(r6);
    };
    EC.prototype.recoverPubKey = function(msg, signature$1, j3, enc) {
      assert$5((3 & j3) === j3, "The recovery param is more than two bits");
      signature$1 = new signature(signature$1, enc);
      var n7 = this.n;
      var e3 = new import_bn2.default(msg);
      var r6 = signature$1.r;
      var s4 = signature$1.s;
      var isYOdd = j3 & 1;
      var isSecondKey = j3 >> 1;
      if (r6.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r6 = this.curve.pointFromX(r6.add(this.curve.n), isYOdd);
      else
        r6 = this.curve.pointFromX(r6, isYOdd);
      var rInv = signature$1.r.invm(n7);
      var s1 = n7.sub(e3).mul(rInv).umod(n7);
      var s22 = s4.mul(rInv).umod(n7);
      return this.g.mulAdd(s1, r6, s22);
    };
    EC.prototype.getKeyRecoveryParam = function(e3, signature$1, Q4, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;
      for (var i5 = 0; i5 < 4; i5++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e3, signature$1, i5);
        } catch (e4) {
          continue;
        }
        if (Qprime.eq(Q4))
          return i5;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    elliptic_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var elliptic = exports;
      elliptic.version = /*RicMoo:ethers*/
      { version: "6.5.4" }.version;
      elliptic.utils = utils_1$1;
      elliptic.rand = /*RicMoo:ethers:require(brorand)*/
      function() {
        throw new Error("unsupported");
      };
      elliptic.curve = curve_1;
      elliptic.curves = curves_1;
      elliptic.ec = ec;
      elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
      null;
    });
    EC$1 = elliptic_1.ec;
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/_version.js
var import_dist86, version10;
var init_version9 = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/_version.js"() {
    import_dist86 = __toESM(require_dist());
    version10 = "signing-key/5.7.0";
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/index.js
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
function recoverPublicKey(digest2, signature2) {
  const sig = splitSignature(signature2);
  const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest2), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes = arrayify(key2);
  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger10.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
var import_dist87, logger10, _curve, SigningKey;
var init_lib13 = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/index.js"() {
    "use strict";
    import_dist87 = __toESM(require_dist());
    init_elliptic();
    init_lib2();
    init_lib11();
    init_lib();
    init_version9();
    logger10 = new Logger(version10);
    _curve = null;
    SigningKey = class {
      constructor(privateKey) {
        defineReadOnly(this, "curve", "secp256k1");
        defineReadOnly(this, "privateKey", hexlify(privateKey));
        if (hexDataLength(this.privateKey) !== 32) {
          logger10.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
        }
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
        defineReadOnly(this, "_isSigningKey", true);
      }
      _addPoint(other) {
        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
        const p1 = getCurve().keyFromPublic(arrayify(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
      }
      signDigest(digest2) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const digestBytes = arrayify(digest2);
        if (digestBytes.length !== 32) {
          logger10.throwArgumentError("bad digest length", "digest", digest2);
        }
        const signature2 = keyPair2.sign(digestBytes, { canonical: true });
        return splitSignature({
          recoveryParam: signature2.recoveryParam,
          r: hexZeroPad("0x" + signature2.r.toString(16), 32),
          s: hexZeroPad("0x" + signature2.s.toString(16), 32)
        });
      }
      computeSharedSecret(otherKey) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
        return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
      }
      static isSigningKey(value) {
        return !!(value && value._isSigningKey);
      }
    };
  }
});

// node_modules/@ethersproject/transactions/lib.esm/_version.js
var import_dist88, version11;
var init_version10 = __esm({
  "node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
    import_dist88 = __toESM(require_dist());
    version11 = "transactions/5.7.0";
  }
});

// node_modules/@ethersproject/transactions/lib.esm/index.js
function computeAddress(key2) {
  const publicKey = computePublicKey(key2);
  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest2, signature2) {
  return computeAddress(recoverPublicKey(arrayify(digest2), signature2));
}
var import_dist89, logger11, TransactionTypes;
var init_lib14 = __esm({
  "node_modules/@ethersproject/transactions/lib.esm/index.js"() {
    "use strict";
    import_dist89 = __toESM(require_dist());
    init_lib10();
    init_lib4();
    init_lib2();
    init_lib5();
    init_lib3();
    init_lib11();
    init_lib9();
    init_lib13();
    init_lib();
    init_version10();
    logger11 = new Logger(version11);
    (function(TransactionTypes2) {
      TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
      TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
      TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
  }
});

// node_modules/@stablelib/chacha/lib/chacha.js
var require_chacha = __commonJS({
  "node_modules/@stablelib/chacha/lib/chacha.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    var ROUNDS = 20;
    function core(out, input, key2) {
      var j0 = 1634760805;
      var j1 = 857760878;
      var j22 = 2036477234;
      var j3 = 1797285236;
      var j4 = key2[3] << 24 | key2[2] << 16 | key2[1] << 8 | key2[0];
      var j5 = key2[7] << 24 | key2[6] << 16 | key2[5] << 8 | key2[4];
      var j6 = key2[11] << 24 | key2[10] << 16 | key2[9] << 8 | key2[8];
      var j7 = key2[15] << 24 | key2[14] << 16 | key2[13] << 8 | key2[12];
      var j8 = key2[19] << 24 | key2[18] << 16 | key2[17] << 8 | key2[16];
      var j9 = key2[23] << 24 | key2[22] << 16 | key2[21] << 8 | key2[20];
      var j10 = key2[27] << 24 | key2[26] << 16 | key2[25] << 8 | key2[24];
      var j11 = key2[31] << 24 | key2[30] << 16 | key2[29] << 8 | key2[28];
      var j12 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];
      var j13 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];
      var j14 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];
      var j15 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];
      var x0 = j0;
      var x1 = j1;
      var x22 = j22;
      var x32 = j3;
      var x42 = j4;
      var x52 = j5;
      var x6 = j6;
      var x7 = j7;
      var x8 = j8;
      var x9 = j9;
      var x10 = j10;
      var x11 = j11;
      var x12 = j12;
      var x13 = j13;
      var x14 = j14;
      var x15 = j15;
      for (var i5 = 0; i5 < ROUNDS; i5 += 2) {
        x0 = x0 + x42 | 0;
        x12 ^= x0;
        x12 = x12 >>> 32 - 16 | x12 << 16;
        x8 = x8 + x12 | 0;
        x42 ^= x8;
        x42 = x42 >>> 32 - 12 | x42 << 12;
        x1 = x1 + x52 | 0;
        x13 ^= x1;
        x13 = x13 >>> 32 - 16 | x13 << 16;
        x9 = x9 + x13 | 0;
        x52 ^= x9;
        x52 = x52 >>> 32 - 12 | x52 << 12;
        x22 = x22 + x6 | 0;
        x14 ^= x22;
        x14 = x14 >>> 32 - 16 | x14 << 16;
        x10 = x10 + x14 | 0;
        x6 ^= x10;
        x6 = x6 >>> 32 - 12 | x6 << 12;
        x32 = x32 + x7 | 0;
        x15 ^= x32;
        x15 = x15 >>> 32 - 16 | x15 << 16;
        x11 = x11 + x15 | 0;
        x7 ^= x11;
        x7 = x7 >>> 32 - 12 | x7 << 12;
        x22 = x22 + x6 | 0;
        x14 ^= x22;
        x14 = x14 >>> 32 - 8 | x14 << 8;
        x10 = x10 + x14 | 0;
        x6 ^= x10;
        x6 = x6 >>> 32 - 7 | x6 << 7;
        x32 = x32 + x7 | 0;
        x15 ^= x32;
        x15 = x15 >>> 32 - 8 | x15 << 8;
        x11 = x11 + x15 | 0;
        x7 ^= x11;
        x7 = x7 >>> 32 - 7 | x7 << 7;
        x1 = x1 + x52 | 0;
        x13 ^= x1;
        x13 = x13 >>> 32 - 8 | x13 << 8;
        x9 = x9 + x13 | 0;
        x52 ^= x9;
        x52 = x52 >>> 32 - 7 | x52 << 7;
        x0 = x0 + x42 | 0;
        x12 ^= x0;
        x12 = x12 >>> 32 - 8 | x12 << 8;
        x8 = x8 + x12 | 0;
        x42 ^= x8;
        x42 = x42 >>> 32 - 7 | x42 << 7;
        x0 = x0 + x52 | 0;
        x15 ^= x0;
        x15 = x15 >>> 32 - 16 | x15 << 16;
        x10 = x10 + x15 | 0;
        x52 ^= x10;
        x52 = x52 >>> 32 - 12 | x52 << 12;
        x1 = x1 + x6 | 0;
        x12 ^= x1;
        x12 = x12 >>> 32 - 16 | x12 << 16;
        x11 = x11 + x12 | 0;
        x6 ^= x11;
        x6 = x6 >>> 32 - 12 | x6 << 12;
        x22 = x22 + x7 | 0;
        x13 ^= x22;
        x13 = x13 >>> 32 - 16 | x13 << 16;
        x8 = x8 + x13 | 0;
        x7 ^= x8;
        x7 = x7 >>> 32 - 12 | x7 << 12;
        x32 = x32 + x42 | 0;
        x14 ^= x32;
        x14 = x14 >>> 32 - 16 | x14 << 16;
        x9 = x9 + x14 | 0;
        x42 ^= x9;
        x42 = x42 >>> 32 - 12 | x42 << 12;
        x22 = x22 + x7 | 0;
        x13 ^= x22;
        x13 = x13 >>> 32 - 8 | x13 << 8;
        x8 = x8 + x13 | 0;
        x7 ^= x8;
        x7 = x7 >>> 32 - 7 | x7 << 7;
        x32 = x32 + x42 | 0;
        x14 ^= x32;
        x14 = x14 >>> 32 - 8 | x14 << 8;
        x9 = x9 + x14 | 0;
        x42 ^= x9;
        x42 = x42 >>> 32 - 7 | x42 << 7;
        x1 = x1 + x6 | 0;
        x12 ^= x1;
        x12 = x12 >>> 32 - 8 | x12 << 8;
        x11 = x11 + x12 | 0;
        x6 ^= x11;
        x6 = x6 >>> 32 - 7 | x6 << 7;
        x0 = x0 + x52 | 0;
        x15 ^= x0;
        x15 = x15 >>> 32 - 8 | x15 << 8;
        x10 = x10 + x15 | 0;
        x52 ^= x10;
        x52 = x52 >>> 32 - 7 | x52 << 7;
      }
      binary_1.writeUint32LE(x0 + j0 | 0, out, 0);
      binary_1.writeUint32LE(x1 + j1 | 0, out, 4);
      binary_1.writeUint32LE(x22 + j22 | 0, out, 8);
      binary_1.writeUint32LE(x32 + j3 | 0, out, 12);
      binary_1.writeUint32LE(x42 + j4 | 0, out, 16);
      binary_1.writeUint32LE(x52 + j5 | 0, out, 20);
      binary_1.writeUint32LE(x6 + j6 | 0, out, 24);
      binary_1.writeUint32LE(x7 + j7 | 0, out, 28);
      binary_1.writeUint32LE(x8 + j8 | 0, out, 32);
      binary_1.writeUint32LE(x9 + j9 | 0, out, 36);
      binary_1.writeUint32LE(x10 + j10 | 0, out, 40);
      binary_1.writeUint32LE(x11 + j11 | 0, out, 44);
      binary_1.writeUint32LE(x12 + j12 | 0, out, 48);
      binary_1.writeUint32LE(x13 + j13 | 0, out, 52);
      binary_1.writeUint32LE(x14 + j14 | 0, out, 56);
      binary_1.writeUint32LE(x15 + j15 | 0, out, 60);
    }
    function streamXOR(key2, nonce, src2, dst, nonceInplaceCounterLength) {
      if (nonceInplaceCounterLength === void 0) {
        nonceInplaceCounterLength = 0;
      }
      if (key2.length !== 32) {
        throw new Error("ChaCha: key size must be 32 bytes");
      }
      if (dst.length < src2.length) {
        throw new Error("ChaCha: destination is shorter than source");
      }
      var nc;
      var counterLength;
      if (nonceInplaceCounterLength === 0) {
        if (nonce.length !== 8 && nonce.length !== 12) {
          throw new Error("ChaCha nonce must be 8 or 12 bytes");
        }
        nc = new Uint8Array(16);
        counterLength = nc.length - nonce.length;
        nc.set(nonce, counterLength);
      } else {
        if (nonce.length !== 16) {
          throw new Error("ChaCha nonce with counter must be 16 bytes");
        }
        nc = nonce;
        counterLength = nonceInplaceCounterLength;
      }
      var block = new Uint8Array(64);
      for (var i5 = 0; i5 < src2.length; i5 += 64) {
        core(block, nc, key2);
        for (var j3 = i5; j3 < i5 + 64 && j3 < src2.length; j3++) {
          dst[j3] = src2[j3] ^ block[j3 - i5];
        }
        incrementCounter(nc, 0, counterLength);
      }
      wipe_1.wipe(block);
      if (nonceInplaceCounterLength === 0) {
        wipe_1.wipe(nc);
      }
      return dst;
    }
    exports.streamXOR = streamXOR;
    function stream(key2, nonce, dst, nonceInplaceCounterLength) {
      if (nonceInplaceCounterLength === void 0) {
        nonceInplaceCounterLength = 0;
      }
      wipe_1.wipe(dst);
      return streamXOR(key2, nonce, dst, dst, nonceInplaceCounterLength);
    }
    exports.stream = stream;
    function incrementCounter(counter, pos, len) {
      var carry = 1;
      while (len--) {
        carry = carry + (counter[pos] & 255) | 0;
        counter[pos] = carry & 255;
        carry >>>= 8;
        pos++;
      }
      if (carry > 0) {
        throw new Error("ChaCha: counter overflow");
      }
    }
  }
});

// node_modules/@stablelib/constant-time/lib/constant-time.js
var require_constant_time = __commonJS({
  "node_modules/@stablelib/constant-time/lib/constant-time.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    function select(subject, resultIfOne, resultIfZero) {
      return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;
    }
    exports.select = select;
    function lessOrEqual(a6, b4) {
      return (a6 | 0) - (b4 | 0) - 1 >>> 31 & 1;
    }
    exports.lessOrEqual = lessOrEqual;
    function compare2(a6, b4) {
      if (a6.length !== b4.length) {
        return 0;
      }
      var result = 0;
      for (var i5 = 0; i5 < a6.length; i5++) {
        result |= a6[i5] ^ b4[i5];
      }
      return 1 & result - 1 >>> 8;
    }
    exports.compare = compare2;
    function equal(a6, b4) {
      if (a6.length === 0 || b4.length === 0) {
        return false;
      }
      return compare2(a6, b4) !== 0;
    }
    exports.equal = equal;
  }
});

// node_modules/@stablelib/poly1305/lib/poly1305.js
var require_poly1305 = __commonJS({
  "node_modules/@stablelib/poly1305/lib/poly1305.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var constant_time_1 = require_constant_time();
    var wipe_1 = require_wipe();
    exports.DIGEST_LENGTH = 16;
    var Poly1305 = (
      /** @class */
      function() {
        function Poly13052(key2) {
          this.digestLength = exports.DIGEST_LENGTH;
          this._buffer = new Uint8Array(16);
          this._r = new Uint16Array(10);
          this._h = new Uint16Array(10);
          this._pad = new Uint16Array(8);
          this._leftover = 0;
          this._fin = 0;
          this._finished = false;
          var t0 = key2[0] | key2[1] << 8;
          this._r[0] = t0 & 8191;
          var t1 = key2[2] | key2[3] << 8;
          this._r[1] = (t0 >>> 13 | t1 << 3) & 8191;
          var t22 = key2[4] | key2[5] << 8;
          this._r[2] = (t1 >>> 10 | t22 << 6) & 7939;
          var t3 = key2[6] | key2[7] << 8;
          this._r[3] = (t22 >>> 7 | t3 << 9) & 8191;
          var t4 = key2[8] | key2[9] << 8;
          this._r[4] = (t3 >>> 4 | t4 << 12) & 255;
          this._r[5] = t4 >>> 1 & 8190;
          var t5 = key2[10] | key2[11] << 8;
          this._r[6] = (t4 >>> 14 | t5 << 2) & 8191;
          var t6 = key2[12] | key2[13] << 8;
          this._r[7] = (t5 >>> 11 | t6 << 5) & 8065;
          var t7 = key2[14] | key2[15] << 8;
          this._r[8] = (t6 >>> 8 | t7 << 8) & 8191;
          this._r[9] = t7 >>> 5 & 127;
          this._pad[0] = key2[16] | key2[17] << 8;
          this._pad[1] = key2[18] | key2[19] << 8;
          this._pad[2] = key2[20] | key2[21] << 8;
          this._pad[3] = key2[22] | key2[23] << 8;
          this._pad[4] = key2[24] | key2[25] << 8;
          this._pad[5] = key2[26] | key2[27] << 8;
          this._pad[6] = key2[28] | key2[29] << 8;
          this._pad[7] = key2[30] | key2[31] << 8;
        }
        Poly13052.prototype._blocks = function(m5, mpos, bytes) {
          var hibit = this._fin ? 0 : 1 << 11;
          var h0 = this._h[0], h1 = this._h[1], h22 = this._h[2], h32 = this._h[3], h42 = this._h[4], h52 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];
          var r0 = this._r[0], r1 = this._r[1], r22 = this._r[2], r32 = this._r[3], r42 = this._r[4], r52 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];
          while (bytes >= 16) {
            var t0 = m5[mpos + 0] | m5[mpos + 1] << 8;
            h0 += t0 & 8191;
            var t1 = m5[mpos + 2] | m5[mpos + 3] << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 8191;
            var t22 = m5[mpos + 4] | m5[mpos + 5] << 8;
            h22 += (t1 >>> 10 | t22 << 6) & 8191;
            var t3 = m5[mpos + 6] | m5[mpos + 7] << 8;
            h32 += (t22 >>> 7 | t3 << 9) & 8191;
            var t4 = m5[mpos + 8] | m5[mpos + 9] << 8;
            h42 += (t3 >>> 4 | t4 << 12) & 8191;
            h52 += t4 >>> 1 & 8191;
            var t5 = m5[mpos + 10] | m5[mpos + 11] << 8;
            h6 += (t4 >>> 14 | t5 << 2) & 8191;
            var t6 = m5[mpos + 12] | m5[mpos + 13] << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 8191;
            var t7 = m5[mpos + 14] | m5[mpos + 15] << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 8191;
            h9 += t7 >>> 5 | hibit;
            var c5 = 0;
            var d0 = c5;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h22 * (5 * r8);
            d0 += h32 * (5 * r7);
            d0 += h42 * (5 * r6);
            c5 = d0 >>> 13;
            d0 &= 8191;
            d0 += h52 * (5 * r52);
            d0 += h6 * (5 * r42);
            d0 += h7 * (5 * r32);
            d0 += h8 * (5 * r22);
            d0 += h9 * (5 * r1);
            c5 += d0 >>> 13;
            d0 &= 8191;
            var d1 = c5;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h22 * (5 * r9);
            d1 += h32 * (5 * r8);
            d1 += h42 * (5 * r7);
            c5 = d1 >>> 13;
            d1 &= 8191;
            d1 += h52 * (5 * r6);
            d1 += h6 * (5 * r52);
            d1 += h7 * (5 * r42);
            d1 += h8 * (5 * r32);
            d1 += h9 * (5 * r22);
            c5 += d1 >>> 13;
            d1 &= 8191;
            var d22 = c5;
            d22 += h0 * r22;
            d22 += h1 * r1;
            d22 += h22 * r0;
            d22 += h32 * (5 * r9);
            d22 += h42 * (5 * r8);
            c5 = d22 >>> 13;
            d22 &= 8191;
            d22 += h52 * (5 * r7);
            d22 += h6 * (5 * r6);
            d22 += h7 * (5 * r52);
            d22 += h8 * (5 * r42);
            d22 += h9 * (5 * r32);
            c5 += d22 >>> 13;
            d22 &= 8191;
            var d32 = c5;
            d32 += h0 * r32;
            d32 += h1 * r22;
            d32 += h22 * r1;
            d32 += h32 * r0;
            d32 += h42 * (5 * r9);
            c5 = d32 >>> 13;
            d32 &= 8191;
            d32 += h52 * (5 * r8);
            d32 += h6 * (5 * r7);
            d32 += h7 * (5 * r6);
            d32 += h8 * (5 * r52);
            d32 += h9 * (5 * r42);
            c5 += d32 >>> 13;
            d32 &= 8191;
            var d4 = c5;
            d4 += h0 * r42;
            d4 += h1 * r32;
            d4 += h22 * r22;
            d4 += h32 * r1;
            d4 += h42 * r0;
            c5 = d4 >>> 13;
            d4 &= 8191;
            d4 += h52 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r52);
            c5 += d4 >>> 13;
            d4 &= 8191;
            var d5 = c5;
            d5 += h0 * r52;
            d5 += h1 * r42;
            d5 += h22 * r32;
            d5 += h32 * r22;
            d5 += h42 * r1;
            c5 = d5 >>> 13;
            d5 &= 8191;
            d5 += h52 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c5 += d5 >>> 13;
            d5 &= 8191;
            var d6 = c5;
            d6 += h0 * r6;
            d6 += h1 * r52;
            d6 += h22 * r42;
            d6 += h32 * r32;
            d6 += h42 * r22;
            c5 = d6 >>> 13;
            d6 &= 8191;
            d6 += h52 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c5 += d6 >>> 13;
            d6 &= 8191;
            var d7 = c5;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h22 * r52;
            d7 += h32 * r42;
            d7 += h42 * r32;
            c5 = d7 >>> 13;
            d7 &= 8191;
            d7 += h52 * r22;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c5 += d7 >>> 13;
            d7 &= 8191;
            var d8 = c5;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h22 * r6;
            d8 += h32 * r52;
            d8 += h42 * r42;
            c5 = d8 >>> 13;
            d8 &= 8191;
            d8 += h52 * r32;
            d8 += h6 * r22;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c5 += d8 >>> 13;
            d8 &= 8191;
            var d9 = c5;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h22 * r7;
            d9 += h32 * r6;
            d9 += h42 * r52;
            c5 = d9 >>> 13;
            d9 &= 8191;
            d9 += h52 * r42;
            d9 += h6 * r32;
            d9 += h7 * r22;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c5 += d9 >>> 13;
            d9 &= 8191;
            c5 = (c5 << 2) + c5 | 0;
            c5 = c5 + d0 | 0;
            d0 = c5 & 8191;
            c5 = c5 >>> 13;
            d1 += c5;
            h0 = d0;
            h1 = d1;
            h22 = d22;
            h32 = d32;
            h42 = d4;
            h52 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
          }
          this._h[0] = h0;
          this._h[1] = h1;
          this._h[2] = h22;
          this._h[3] = h32;
          this._h[4] = h42;
          this._h[5] = h52;
          this._h[6] = h6;
          this._h[7] = h7;
          this._h[8] = h8;
          this._h[9] = h9;
        };
        Poly13052.prototype.finish = function(mac, macpos) {
          if (macpos === void 0) {
            macpos = 0;
          }
          var g5 = new Uint16Array(10);
          var c5;
          var mask;
          var f3;
          var i5;
          if (this._leftover) {
            i5 = this._leftover;
            this._buffer[i5++] = 1;
            for (; i5 < 16; i5++) {
              this._buffer[i5] = 0;
            }
            this._fin = 1;
            this._blocks(this._buffer, 0, 16);
          }
          c5 = this._h[1] >>> 13;
          this._h[1] &= 8191;
          for (i5 = 2; i5 < 10; i5++) {
            this._h[i5] += c5;
            c5 = this._h[i5] >>> 13;
            this._h[i5] &= 8191;
          }
          this._h[0] += c5 * 5;
          c5 = this._h[0] >>> 13;
          this._h[0] &= 8191;
          this._h[1] += c5;
          c5 = this._h[1] >>> 13;
          this._h[1] &= 8191;
          this._h[2] += c5;
          g5[0] = this._h[0] + 5;
          c5 = g5[0] >>> 13;
          g5[0] &= 8191;
          for (i5 = 1; i5 < 10; i5++) {
            g5[i5] = this._h[i5] + c5;
            c5 = g5[i5] >>> 13;
            g5[i5] &= 8191;
          }
          g5[9] -= 1 << 13;
          mask = (c5 ^ 1) - 1;
          for (i5 = 0; i5 < 10; i5++) {
            g5[i5] &= mask;
          }
          mask = ~mask;
          for (i5 = 0; i5 < 10; i5++) {
            this._h[i5] = this._h[i5] & mask | g5[i5];
          }
          this._h[0] = (this._h[0] | this._h[1] << 13) & 65535;
          this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 65535;
          this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 65535;
          this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 65535;
          this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 65535;
          this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 65535;
          this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 65535;
          this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 65535;
          f3 = this._h[0] + this._pad[0];
          this._h[0] = f3 & 65535;
          for (i5 = 1; i5 < 8; i5++) {
            f3 = (this._h[i5] + this._pad[i5] | 0) + (f3 >>> 16) | 0;
            this._h[i5] = f3 & 65535;
          }
          mac[macpos + 0] = this._h[0] >>> 0;
          mac[macpos + 1] = this._h[0] >>> 8;
          mac[macpos + 2] = this._h[1] >>> 0;
          mac[macpos + 3] = this._h[1] >>> 8;
          mac[macpos + 4] = this._h[2] >>> 0;
          mac[macpos + 5] = this._h[2] >>> 8;
          mac[macpos + 6] = this._h[3] >>> 0;
          mac[macpos + 7] = this._h[3] >>> 8;
          mac[macpos + 8] = this._h[4] >>> 0;
          mac[macpos + 9] = this._h[4] >>> 8;
          mac[macpos + 10] = this._h[5] >>> 0;
          mac[macpos + 11] = this._h[5] >>> 8;
          mac[macpos + 12] = this._h[6] >>> 0;
          mac[macpos + 13] = this._h[6] >>> 8;
          mac[macpos + 14] = this._h[7] >>> 0;
          mac[macpos + 15] = this._h[7] >>> 8;
          this._finished = true;
          return this;
        };
        Poly13052.prototype.update = function(m5) {
          var mpos = 0;
          var bytes = m5.length;
          var want;
          if (this._leftover) {
            want = 16 - this._leftover;
            if (want > bytes) {
              want = bytes;
            }
            for (var i5 = 0; i5 < want; i5++) {
              this._buffer[this._leftover + i5] = m5[mpos + i5];
            }
            bytes -= want;
            mpos += want;
            this._leftover += want;
            if (this._leftover < 16) {
              return this;
            }
            this._blocks(this._buffer, 0, 16);
            this._leftover = 0;
          }
          if (bytes >= 16) {
            want = bytes - bytes % 16;
            this._blocks(m5, mpos, want);
            mpos += want;
            bytes -= want;
          }
          if (bytes) {
            for (var i5 = 0; i5 < bytes; i5++) {
              this._buffer[this._leftover + i5] = m5[mpos + i5];
            }
            this._leftover += bytes;
          }
          return this;
        };
        Poly13052.prototype.digest = function() {
          if (this._finished) {
            throw new Error("Poly1305 was finished");
          }
          var mac = new Uint8Array(16);
          this.finish(mac);
          return mac;
        };
        Poly13052.prototype.clean = function() {
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._r);
          wipe_1.wipe(this._h);
          wipe_1.wipe(this._pad);
          this._leftover = 0;
          this._fin = 0;
          this._finished = true;
          return this;
        };
        return Poly13052;
      }()
    );
    exports.Poly1305 = Poly1305;
    function oneTimeAuth(key2, data) {
      var h6 = new Poly1305(key2);
      h6.update(data);
      var digest2 = h6.digest();
      h6.clean();
      return digest2;
    }
    exports.oneTimeAuth = oneTimeAuth;
    function equal(a6, b4) {
      if (a6.length !== exports.DIGEST_LENGTH || b4.length !== exports.DIGEST_LENGTH) {
        return false;
      }
      return constant_time_1.equal(a6, b4);
    }
    exports.equal = equal;
  }
});

// node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js
var require_chacha20poly1305 = __commonJS({
  "node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var chacha_1 = require_chacha();
    var poly1305_1 = require_poly1305();
    var wipe_1 = require_wipe();
    var binary_1 = require_binary();
    var constant_time_1 = require_constant_time();
    exports.KEY_LENGTH = 32;
    exports.NONCE_LENGTH = 12;
    exports.TAG_LENGTH = 16;
    var ZEROS = new Uint8Array(16);
    var ChaCha20Poly1305 = (
      /** @class */
      function() {
        function ChaCha20Poly13052(key2) {
          this.nonceLength = exports.NONCE_LENGTH;
          this.tagLength = exports.TAG_LENGTH;
          if (key2.length !== exports.KEY_LENGTH) {
            throw new Error("ChaCha20Poly1305 needs 32-byte key");
          }
          this._key = new Uint8Array(key2);
        }
        ChaCha20Poly13052.prototype.seal = function(nonce, plaintext, associatedData, dst) {
          if (nonce.length > 16) {
            throw new Error("ChaCha20Poly1305: incorrect nonce length");
          }
          var counter = new Uint8Array(16);
          counter.set(nonce, counter.length - nonce.length);
          var authKey = new Uint8Array(32);
          chacha_1.stream(this._key, counter, authKey, 4);
          var resultLength = plaintext.length + this.tagLength;
          var result;
          if (dst) {
            if (dst.length !== resultLength) {
              throw new Error("ChaCha20Poly1305: incorrect destination length");
            }
            result = dst;
          } else {
            result = new Uint8Array(resultLength);
          }
          chacha_1.streamXOR(this._key, counter, plaintext, result, 4);
          this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);
          wipe_1.wipe(counter);
          return result;
        };
        ChaCha20Poly13052.prototype.open = function(nonce, sealed, associatedData, dst) {
          if (nonce.length > 16) {
            throw new Error("ChaCha20Poly1305: incorrect nonce length");
          }
          if (sealed.length < this.tagLength) {
            return null;
          }
          var counter = new Uint8Array(16);
          counter.set(nonce, counter.length - nonce.length);
          var authKey = new Uint8Array(32);
          chacha_1.stream(this._key, counter, authKey, 4);
          var calculatedTag = new Uint8Array(this.tagLength);
          this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);
          if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {
            return null;
          }
          var resultLength = sealed.length - this.tagLength;
          var result;
          if (dst) {
            if (dst.length !== resultLength) {
              throw new Error("ChaCha20Poly1305: incorrect destination length");
            }
            result = dst;
          } else {
            result = new Uint8Array(resultLength);
          }
          chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);
          wipe_1.wipe(counter);
          return result;
        };
        ChaCha20Poly13052.prototype.clean = function() {
          wipe_1.wipe(this._key);
          return this;
        };
        ChaCha20Poly13052.prototype._authenticate = function(tagOut, authKey, ciphertext, associatedData) {
          var h6 = new poly1305_1.Poly1305(authKey);
          if (associatedData) {
            h6.update(associatedData);
            if (associatedData.length % 16 > 0) {
              h6.update(ZEROS.subarray(associatedData.length % 16));
            }
          }
          h6.update(ciphertext);
          if (ciphertext.length % 16 > 0) {
            h6.update(ZEROS.subarray(ciphertext.length % 16));
          }
          var length2 = new Uint8Array(8);
          if (associatedData) {
            binary_1.writeUint64LE(associatedData.length, length2);
          }
          h6.update(length2);
          binary_1.writeUint64LE(ciphertext.length, length2);
          h6.update(length2);
          var tag = h6.digest();
          for (var i5 = 0; i5 < tag.length; i5++) {
            tagOut[i5] = tag[i5];
          }
          h6.clean();
          wipe_1.wipe(tag);
          wipe_1.wipe(length2);
        };
        return ChaCha20Poly13052;
      }()
    );
    exports.ChaCha20Poly1305 = ChaCha20Poly1305;
  }
});

// node_modules/@stablelib/hash/lib/hash.js
var require_hash2 = __commonJS({
  "node_modules/@stablelib/hash/lib/hash.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    function isSerializableHash(h6) {
      return typeof h6.saveState !== "undefined" && typeof h6.restoreState !== "undefined" && typeof h6.cleanSavedState !== "undefined";
    }
    exports.isSerializableHash = isSerializableHash;
  }
});

// node_modules/@stablelib/hmac/lib/hmac.js
var require_hmac = __commonJS({
  "node_modules/@stablelib/hmac/lib/hmac.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var hash_1 = require_hash2();
    var constant_time_1 = require_constant_time();
    var wipe_1 = require_wipe();
    var HMAC = (
      /** @class */
      function() {
        function HMAC2(hash2, key2) {
          this._finished = false;
          this._inner = new hash2();
          this._outer = new hash2();
          this.blockSize = this._outer.blockSize;
          this.digestLength = this._outer.digestLength;
          var pad = new Uint8Array(this.blockSize);
          if (key2.length > this.blockSize) {
            this._inner.update(key2).finish(pad).clean();
          } else {
            pad.set(key2);
          }
          for (var i5 = 0; i5 < pad.length; i5++) {
            pad[i5] ^= 54;
          }
          this._inner.update(pad);
          for (var i5 = 0; i5 < pad.length; i5++) {
            pad[i5] ^= 54 ^ 92;
          }
          this._outer.update(pad);
          if (hash_1.isSerializableHash(this._inner) && hash_1.isSerializableHash(this._outer)) {
            this._innerKeyedState = this._inner.saveState();
            this._outerKeyedState = this._outer.saveState();
          }
          wipe_1.wipe(pad);
        }
        HMAC2.prototype.reset = function() {
          if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
            throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");
          }
          this._inner.restoreState(this._innerKeyedState);
          this._outer.restoreState(this._outerKeyedState);
          this._finished = false;
          return this;
        };
        HMAC2.prototype.clean = function() {
          if (hash_1.isSerializableHash(this._inner)) {
            this._inner.cleanSavedState(this._innerKeyedState);
          }
          if (hash_1.isSerializableHash(this._outer)) {
            this._outer.cleanSavedState(this._outerKeyedState);
          }
          this._inner.clean();
          this._outer.clean();
        };
        HMAC2.prototype.update = function(data) {
          this._inner.update(data);
          return this;
        };
        HMAC2.prototype.finish = function(out) {
          if (this._finished) {
            this._outer.finish(out);
            return this;
          }
          this._inner.finish(out);
          this._outer.update(out.subarray(0, this.digestLength)).finish(out);
          this._finished = true;
          return this;
        };
        HMAC2.prototype.digest = function() {
          var out = new Uint8Array(this.digestLength);
          this.finish(out);
          return out;
        };
        HMAC2.prototype.saveState = function() {
          if (!hash_1.isSerializableHash(this._inner)) {
            throw new Error("hmac: can't saveState() because hash doesn't implement it");
          }
          return this._inner.saveState();
        };
        HMAC2.prototype.restoreState = function(savedState) {
          if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
            throw new Error("hmac: can't restoreState() because hash doesn't implement it");
          }
          this._inner.restoreState(savedState);
          this._outer.restoreState(this._outerKeyedState);
          this._finished = false;
          return this;
        };
        HMAC2.prototype.cleanSavedState = function(savedState) {
          if (!hash_1.isSerializableHash(this._inner)) {
            throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");
          }
          this._inner.cleanSavedState(savedState);
        };
        return HMAC2;
      }()
    );
    exports.HMAC = HMAC;
    function hmac2(hash2, key2, data) {
      var h6 = new HMAC(hash2, key2);
      h6.update(data);
      var digest2 = h6.digest();
      h6.clean();
      return digest2;
    }
    exports.hmac = hmac2;
    exports.equal = constant_time_1.equal;
  }
});

// node_modules/@stablelib/hkdf/lib/hkdf.js
var require_hkdf = __commonJS({
  "node_modules/@stablelib/hkdf/lib/hkdf.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var hmac_1 = require_hmac();
    var wipe_1 = require_wipe();
    var HKDF = (
      /** @class */
      function() {
        function HKDF2(hash2, key2, salt, info) {
          if (salt === void 0) {
            salt = new Uint8Array(0);
          }
          this._counter = new Uint8Array(1);
          this._hash = hash2;
          this._info = info;
          var okm = hmac_1.hmac(this._hash, salt, key2);
          this._hmac = new hmac_1.HMAC(hash2, okm);
          this._buffer = new Uint8Array(this._hmac.digestLength);
          this._bufpos = this._buffer.length;
        }
        HKDF2.prototype._fillBuffer = function() {
          this._counter[0]++;
          var ctr = this._counter[0];
          if (ctr === 0) {
            throw new Error("hkdf: cannot expand more");
          }
          this._hmac.reset();
          if (ctr > 1) {
            this._hmac.update(this._buffer);
          }
          if (this._info) {
            this._hmac.update(this._info);
          }
          this._hmac.update(this._counter);
          this._hmac.finish(this._buffer);
          this._bufpos = 0;
        };
        HKDF2.prototype.expand = function(length2) {
          var out = new Uint8Array(length2);
          for (var i5 = 0; i5 < out.length; i5++) {
            if (this._bufpos === this._buffer.length) {
              this._fillBuffer();
            }
            out[i5] = this._buffer[this._bufpos++];
          }
          return out;
        };
        HKDF2.prototype.clean = function() {
          this._hmac.clean();
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._counter);
          this._bufpos = 0;
        };
        return HKDF2;
      }()
    );
    exports.HKDF = HKDF;
  }
});

// node_modules/@stablelib/sha256/lib/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@stablelib/sha256/lib/sha256.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    exports.DIGEST_LENGTH = 32;
    exports.BLOCK_SIZE = 64;
    var SHA256 = (
      /** @class */
      function() {
        function SHA2562() {
          this.digestLength = exports.DIGEST_LENGTH;
          this.blockSize = exports.BLOCK_SIZE;
          this._state = new Int32Array(8);
          this._temp = new Int32Array(64);
          this._buffer = new Uint8Array(128);
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          this.reset();
        }
        SHA2562.prototype._initState = function() {
          this._state[0] = 1779033703;
          this._state[1] = 3144134277;
          this._state[2] = 1013904242;
          this._state[3] = 2773480762;
          this._state[4] = 1359893119;
          this._state[5] = 2600822924;
          this._state[6] = 528734635;
          this._state[7] = 1541459225;
        };
        SHA2562.prototype.reset = function() {
          this._initState();
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          return this;
        };
        SHA2562.prototype.clean = function() {
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._temp);
          this.reset();
        };
        SHA2562.prototype.update = function(data, dataLength) {
          if (dataLength === void 0) {
            dataLength = data.length;
          }
          if (this._finished) {
            throw new Error("SHA256: can't update because hash was finished.");
          }
          var dataPos = 0;
          this._bytesHashed += dataLength;
          if (this._bufferLength > 0) {
            while (this._bufferLength < this.blockSize && dataLength > 0) {
              this._buffer[this._bufferLength++] = data[dataPos++];
              dataLength--;
            }
            if (this._bufferLength === this.blockSize) {
              hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
              this._bufferLength = 0;
            }
          }
          if (dataLength >= this.blockSize) {
            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
            dataLength %= this.blockSize;
          }
          while (dataLength > 0) {
            this._buffer[this._bufferLength++] = data[dataPos++];
            dataLength--;
          }
          return this;
        };
        SHA2562.prototype.finish = function(out) {
          if (!this._finished) {
            var bytesHashed = this._bytesHashed;
            var left = this._bufferLength;
            var bitLenHi = bytesHashed / 536870912 | 0;
            var bitLenLo = bytesHashed << 3;
            var padLength = bytesHashed % 64 < 56 ? 64 : 128;
            this._buffer[left] = 128;
            for (var i5 = left + 1; i5 < padLength - 8; i5++) {
              this._buffer[i5] = 0;
            }
            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
            this._finished = true;
          }
          for (var i5 = 0; i5 < this.digestLength / 4; i5++) {
            binary_1.writeUint32BE(this._state[i5], out, i5 * 4);
          }
          return this;
        };
        SHA2562.prototype.digest = function() {
          var out = new Uint8Array(this.digestLength);
          this.finish(out);
          return out;
        };
        SHA2562.prototype.saveState = function() {
          if (this._finished) {
            throw new Error("SHA256: cannot save finished state");
          }
          return {
            state: new Int32Array(this._state),
            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
            bufferLength: this._bufferLength,
            bytesHashed: this._bytesHashed
          };
        };
        SHA2562.prototype.restoreState = function(savedState) {
          this._state.set(savedState.state);
          this._bufferLength = savedState.bufferLength;
          if (savedState.buffer) {
            this._buffer.set(savedState.buffer);
          }
          this._bytesHashed = savedState.bytesHashed;
          this._finished = false;
          return this;
        };
        SHA2562.prototype.cleanSavedState = function(savedState) {
          wipe_1.wipe(savedState.state);
          if (savedState.buffer) {
            wipe_1.wipe(savedState.buffer);
          }
          savedState.bufferLength = 0;
          savedState.bytesHashed = 0;
        };
        return SHA2562;
      }()
    );
    exports.SHA256 = SHA256;
    var K4 = new Int32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    function hashBlocks(w4, v8, p5, pos, len) {
      while (len >= 64) {
        var a6 = v8[0];
        var b4 = v8[1];
        var c5 = v8[2];
        var d4 = v8[3];
        var e3 = v8[4];
        var f3 = v8[5];
        var g5 = v8[6];
        var h6 = v8[7];
        for (var i5 = 0; i5 < 16; i5++) {
          var j3 = pos + i5 * 4;
          w4[i5] = binary_1.readUint32BE(p5, j3);
        }
        for (var i5 = 16; i5 < 64; i5++) {
          var u2 = w4[i5 - 2];
          var t1 = (u2 >>> 17 | u2 << 32 - 17) ^ (u2 >>> 19 | u2 << 32 - 19) ^ u2 >>> 10;
          u2 = w4[i5 - 15];
          var t22 = (u2 >>> 7 | u2 << 32 - 7) ^ (u2 >>> 18 | u2 << 32 - 18) ^ u2 >>> 3;
          w4[i5] = (t1 + w4[i5 - 7] | 0) + (t22 + w4[i5 - 16] | 0);
        }
        for (var i5 = 0; i5 < 64; i5++) {
          var t1 = (((e3 >>> 6 | e3 << 32 - 6) ^ (e3 >>> 11 | e3 << 32 - 11) ^ (e3 >>> 25 | e3 << 32 - 25)) + (e3 & f3 ^ ~e3 & g5) | 0) + (h6 + (K4[i5] + w4[i5] | 0) | 0) | 0;
          var t22 = ((a6 >>> 2 | a6 << 32 - 2) ^ (a6 >>> 13 | a6 << 32 - 13) ^ (a6 >>> 22 | a6 << 32 - 22)) + (a6 & b4 ^ a6 & c5 ^ b4 & c5) | 0;
          h6 = g5;
          g5 = f3;
          f3 = e3;
          e3 = d4 + t1 | 0;
          d4 = c5;
          c5 = b4;
          b4 = a6;
          a6 = t1 + t22 | 0;
        }
        v8[0] += a6;
        v8[1] += b4;
        v8[2] += c5;
        v8[3] += d4;
        v8[4] += e3;
        v8[5] += f3;
        v8[6] += g5;
        v8[7] += h6;
        pos += 64;
        len -= 64;
      }
      return pos;
    }
    function hash2(data) {
      var h6 = new SHA256();
      h6.update(data);
      var digest2 = h6.digest();
      h6.clean();
      return digest2;
    }
    exports.hash = hash2;
  }
});

// node_modules/@stablelib/x25519/lib/x25519.js
var require_x25519 = __commonJS({
  "node_modules/@stablelib/x25519/lib/x25519.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sharedKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.scalarMultBase = exports.scalarMult = exports.SHARED_KEY_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = void 0;
    var random_1 = require_random();
    var wipe_1 = require_wipe();
    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 32;
    exports.SHARED_KEY_LENGTH = 32;
    function gf(init2) {
      const r6 = new Float64Array(16);
      if (init2) {
        for (let i5 = 0; i5 < init2.length; i5++) {
          r6[i5] = init2[i5];
        }
      }
      return r6;
    }
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var _121665 = gf([56129, 1]);
    function car25519(o4) {
      let c5 = 1;
      for (let i5 = 0; i5 < 16; i5++) {
        let v8 = o4[i5] + c5 + 65535;
        c5 = Math.floor(v8 / 65536);
        o4[i5] = v8 - c5 * 65536;
      }
      o4[0] += c5 - 1 + 37 * (c5 - 1);
    }
    function sel25519(p5, q2, b4) {
      const c5 = ~(b4 - 1);
      for (let i5 = 0; i5 < 16; i5++) {
        const t3 = c5 & (p5[i5] ^ q2[i5]);
        p5[i5] ^= t3;
        q2[i5] ^= t3;
      }
    }
    function pack25519(o4, n7) {
      const m5 = gf();
      const t3 = gf();
      for (let i5 = 0; i5 < 16; i5++) {
        t3[i5] = n7[i5];
      }
      car25519(t3);
      car25519(t3);
      car25519(t3);
      for (let j3 = 0; j3 < 2; j3++) {
        m5[0] = t3[0] - 65517;
        for (let i5 = 1; i5 < 15; i5++) {
          m5[i5] = t3[i5] - 65535 - (m5[i5 - 1] >> 16 & 1);
          m5[i5 - 1] &= 65535;
        }
        m5[15] = t3[15] - 32767 - (m5[14] >> 16 & 1);
        const b4 = m5[15] >> 16 & 1;
        m5[14] &= 65535;
        sel25519(t3, m5, 1 - b4);
      }
      for (let i5 = 0; i5 < 16; i5++) {
        o4[2 * i5] = t3[i5] & 255;
        o4[2 * i5 + 1] = t3[i5] >> 8;
      }
    }
    function unpack25519(o4, n7) {
      for (let i5 = 0; i5 < 16; i5++) {
        o4[i5] = n7[2 * i5] + (n7[2 * i5 + 1] << 8);
      }
      o4[15] &= 32767;
    }
    function add3(o4, a6, b4) {
      for (let i5 = 0; i5 < 16; i5++) {
        o4[i5] = a6[i5] + b4[i5];
      }
    }
    function sub(o4, a6, b4) {
      for (let i5 = 0; i5 < 16; i5++) {
        o4[i5] = a6[i5] - b4[i5];
      }
    }
    function mul3(o4, a6, b4) {
      let v8, c5, t0 = 0, t1 = 0, t22 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t222 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b4[0], b1 = b4[1], b22 = b4[2], b32 = b4[3], b42 = b4[4], b5 = b4[5], b6 = b4[6], b7 = b4[7], b8 = b4[8], b9 = b4[9], b10 = b4[10], b11 = b4[11], b12 = b4[12], b13 = b4[13], b14 = b4[14], b15 = b4[15];
      v8 = a6[0];
      t0 += v8 * b0;
      t1 += v8 * b1;
      t22 += v8 * b22;
      t3 += v8 * b32;
      t4 += v8 * b42;
      t5 += v8 * b5;
      t6 += v8 * b6;
      t7 += v8 * b7;
      t8 += v8 * b8;
      t9 += v8 * b9;
      t10 += v8 * b10;
      t11 += v8 * b11;
      t12 += v8 * b12;
      t13 += v8 * b13;
      t14 += v8 * b14;
      t15 += v8 * b15;
      v8 = a6[1];
      t1 += v8 * b0;
      t22 += v8 * b1;
      t3 += v8 * b22;
      t4 += v8 * b32;
      t5 += v8 * b42;
      t6 += v8 * b5;
      t7 += v8 * b6;
      t8 += v8 * b7;
      t9 += v8 * b8;
      t10 += v8 * b9;
      t11 += v8 * b10;
      t12 += v8 * b11;
      t13 += v8 * b12;
      t14 += v8 * b13;
      t15 += v8 * b14;
      t16 += v8 * b15;
      v8 = a6[2];
      t22 += v8 * b0;
      t3 += v8 * b1;
      t4 += v8 * b22;
      t5 += v8 * b32;
      t6 += v8 * b42;
      t7 += v8 * b5;
      t8 += v8 * b6;
      t9 += v8 * b7;
      t10 += v8 * b8;
      t11 += v8 * b9;
      t12 += v8 * b10;
      t13 += v8 * b11;
      t14 += v8 * b12;
      t15 += v8 * b13;
      t16 += v8 * b14;
      t17 += v8 * b15;
      v8 = a6[3];
      t3 += v8 * b0;
      t4 += v8 * b1;
      t5 += v8 * b22;
      t6 += v8 * b32;
      t7 += v8 * b42;
      t8 += v8 * b5;
      t9 += v8 * b6;
      t10 += v8 * b7;
      t11 += v8 * b8;
      t12 += v8 * b9;
      t13 += v8 * b10;
      t14 += v8 * b11;
      t15 += v8 * b12;
      t16 += v8 * b13;
      t17 += v8 * b14;
      t18 += v8 * b15;
      v8 = a6[4];
      t4 += v8 * b0;
      t5 += v8 * b1;
      t6 += v8 * b22;
      t7 += v8 * b32;
      t8 += v8 * b42;
      t9 += v8 * b5;
      t10 += v8 * b6;
      t11 += v8 * b7;
      t12 += v8 * b8;
      t13 += v8 * b9;
      t14 += v8 * b10;
      t15 += v8 * b11;
      t16 += v8 * b12;
      t17 += v8 * b13;
      t18 += v8 * b14;
      t19 += v8 * b15;
      v8 = a6[5];
      t5 += v8 * b0;
      t6 += v8 * b1;
      t7 += v8 * b22;
      t8 += v8 * b32;
      t9 += v8 * b42;
      t10 += v8 * b5;
      t11 += v8 * b6;
      t12 += v8 * b7;
      t13 += v8 * b8;
      t14 += v8 * b9;
      t15 += v8 * b10;
      t16 += v8 * b11;
      t17 += v8 * b12;
      t18 += v8 * b13;
      t19 += v8 * b14;
      t20 += v8 * b15;
      v8 = a6[6];
      t6 += v8 * b0;
      t7 += v8 * b1;
      t8 += v8 * b22;
      t9 += v8 * b32;
      t10 += v8 * b42;
      t11 += v8 * b5;
      t12 += v8 * b6;
      t13 += v8 * b7;
      t14 += v8 * b8;
      t15 += v8 * b9;
      t16 += v8 * b10;
      t17 += v8 * b11;
      t18 += v8 * b12;
      t19 += v8 * b13;
      t20 += v8 * b14;
      t21 += v8 * b15;
      v8 = a6[7];
      t7 += v8 * b0;
      t8 += v8 * b1;
      t9 += v8 * b22;
      t10 += v8 * b32;
      t11 += v8 * b42;
      t12 += v8 * b5;
      t13 += v8 * b6;
      t14 += v8 * b7;
      t15 += v8 * b8;
      t16 += v8 * b9;
      t17 += v8 * b10;
      t18 += v8 * b11;
      t19 += v8 * b12;
      t20 += v8 * b13;
      t21 += v8 * b14;
      t222 += v8 * b15;
      v8 = a6[8];
      t8 += v8 * b0;
      t9 += v8 * b1;
      t10 += v8 * b22;
      t11 += v8 * b32;
      t12 += v8 * b42;
      t13 += v8 * b5;
      t14 += v8 * b6;
      t15 += v8 * b7;
      t16 += v8 * b8;
      t17 += v8 * b9;
      t18 += v8 * b10;
      t19 += v8 * b11;
      t20 += v8 * b12;
      t21 += v8 * b13;
      t222 += v8 * b14;
      t23 += v8 * b15;
      v8 = a6[9];
      t9 += v8 * b0;
      t10 += v8 * b1;
      t11 += v8 * b22;
      t12 += v8 * b32;
      t13 += v8 * b42;
      t14 += v8 * b5;
      t15 += v8 * b6;
      t16 += v8 * b7;
      t17 += v8 * b8;
      t18 += v8 * b9;
      t19 += v8 * b10;
      t20 += v8 * b11;
      t21 += v8 * b12;
      t222 += v8 * b13;
      t23 += v8 * b14;
      t24 += v8 * b15;
      v8 = a6[10];
      t10 += v8 * b0;
      t11 += v8 * b1;
      t12 += v8 * b22;
      t13 += v8 * b32;
      t14 += v8 * b42;
      t15 += v8 * b5;
      t16 += v8 * b6;
      t17 += v8 * b7;
      t18 += v8 * b8;
      t19 += v8 * b9;
      t20 += v8 * b10;
      t21 += v8 * b11;
      t222 += v8 * b12;
      t23 += v8 * b13;
      t24 += v8 * b14;
      t25 += v8 * b15;
      v8 = a6[11];
      t11 += v8 * b0;
      t12 += v8 * b1;
      t13 += v8 * b22;
      t14 += v8 * b32;
      t15 += v8 * b42;
      t16 += v8 * b5;
      t17 += v8 * b6;
      t18 += v8 * b7;
      t19 += v8 * b8;
      t20 += v8 * b9;
      t21 += v8 * b10;
      t222 += v8 * b11;
      t23 += v8 * b12;
      t24 += v8 * b13;
      t25 += v8 * b14;
      t26 += v8 * b15;
      v8 = a6[12];
      t12 += v8 * b0;
      t13 += v8 * b1;
      t14 += v8 * b22;
      t15 += v8 * b32;
      t16 += v8 * b42;
      t17 += v8 * b5;
      t18 += v8 * b6;
      t19 += v8 * b7;
      t20 += v8 * b8;
      t21 += v8 * b9;
      t222 += v8 * b10;
      t23 += v8 * b11;
      t24 += v8 * b12;
      t25 += v8 * b13;
      t26 += v8 * b14;
      t27 += v8 * b15;
      v8 = a6[13];
      t13 += v8 * b0;
      t14 += v8 * b1;
      t15 += v8 * b22;
      t16 += v8 * b32;
      t17 += v8 * b42;
      t18 += v8 * b5;
      t19 += v8 * b6;
      t20 += v8 * b7;
      t21 += v8 * b8;
      t222 += v8 * b9;
      t23 += v8 * b10;
      t24 += v8 * b11;
      t25 += v8 * b12;
      t26 += v8 * b13;
      t27 += v8 * b14;
      t28 += v8 * b15;
      v8 = a6[14];
      t14 += v8 * b0;
      t15 += v8 * b1;
      t16 += v8 * b22;
      t17 += v8 * b32;
      t18 += v8 * b42;
      t19 += v8 * b5;
      t20 += v8 * b6;
      t21 += v8 * b7;
      t222 += v8 * b8;
      t23 += v8 * b9;
      t24 += v8 * b10;
      t25 += v8 * b11;
      t26 += v8 * b12;
      t27 += v8 * b13;
      t28 += v8 * b14;
      t29 += v8 * b15;
      v8 = a6[15];
      t15 += v8 * b0;
      t16 += v8 * b1;
      t17 += v8 * b22;
      t18 += v8 * b32;
      t19 += v8 * b42;
      t20 += v8 * b5;
      t21 += v8 * b6;
      t222 += v8 * b7;
      t23 += v8 * b8;
      t24 += v8 * b9;
      t25 += v8 * b10;
      t26 += v8 * b11;
      t27 += v8 * b12;
      t28 += v8 * b13;
      t29 += v8 * b14;
      t30 += v8 * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t22 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t222;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c5 = 1;
      v8 = t0 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t0 = v8 - c5 * 65536;
      v8 = t1 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t1 = v8 - c5 * 65536;
      v8 = t22 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t22 = v8 - c5 * 65536;
      v8 = t3 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t3 = v8 - c5 * 65536;
      v8 = t4 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t4 = v8 - c5 * 65536;
      v8 = t5 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t5 = v8 - c5 * 65536;
      v8 = t6 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t6 = v8 - c5 * 65536;
      v8 = t7 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t7 = v8 - c5 * 65536;
      v8 = t8 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t8 = v8 - c5 * 65536;
      v8 = t9 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t9 = v8 - c5 * 65536;
      v8 = t10 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t10 = v8 - c5 * 65536;
      v8 = t11 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t11 = v8 - c5 * 65536;
      v8 = t12 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t12 = v8 - c5 * 65536;
      v8 = t13 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t13 = v8 - c5 * 65536;
      v8 = t14 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t14 = v8 - c5 * 65536;
      v8 = t15 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t15 = v8 - c5 * 65536;
      t0 += c5 - 1 + 37 * (c5 - 1);
      c5 = 1;
      v8 = t0 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t0 = v8 - c5 * 65536;
      v8 = t1 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t1 = v8 - c5 * 65536;
      v8 = t22 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t22 = v8 - c5 * 65536;
      v8 = t3 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t3 = v8 - c5 * 65536;
      v8 = t4 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t4 = v8 - c5 * 65536;
      v8 = t5 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t5 = v8 - c5 * 65536;
      v8 = t6 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t6 = v8 - c5 * 65536;
      v8 = t7 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t7 = v8 - c5 * 65536;
      v8 = t8 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t8 = v8 - c5 * 65536;
      v8 = t9 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t9 = v8 - c5 * 65536;
      v8 = t10 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t10 = v8 - c5 * 65536;
      v8 = t11 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t11 = v8 - c5 * 65536;
      v8 = t12 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t12 = v8 - c5 * 65536;
      v8 = t13 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t13 = v8 - c5 * 65536;
      v8 = t14 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t14 = v8 - c5 * 65536;
      v8 = t15 + c5 + 65535;
      c5 = Math.floor(v8 / 65536);
      t15 = v8 - c5 * 65536;
      t0 += c5 - 1 + 37 * (c5 - 1);
      o4[0] = t0;
      o4[1] = t1;
      o4[2] = t22;
      o4[3] = t3;
      o4[4] = t4;
      o4[5] = t5;
      o4[6] = t6;
      o4[7] = t7;
      o4[8] = t8;
      o4[9] = t9;
      o4[10] = t10;
      o4[11] = t11;
      o4[12] = t12;
      o4[13] = t13;
      o4[14] = t14;
      o4[15] = t15;
    }
    function square(o4, a6) {
      mul3(o4, a6, a6);
    }
    function inv25519(o4, inp) {
      const c5 = gf();
      for (let i5 = 0; i5 < 16; i5++) {
        c5[i5] = inp[i5];
      }
      for (let i5 = 253; i5 >= 0; i5--) {
        square(c5, c5);
        if (i5 !== 2 && i5 !== 4) {
          mul3(c5, c5, inp);
        }
      }
      for (let i5 = 0; i5 < 16; i5++) {
        o4[i5] = c5[i5];
      }
    }
    function scalarMult(n7, p5) {
      const z6 = new Uint8Array(32);
      const x6 = new Float64Array(80);
      const a6 = gf(), b4 = gf(), c5 = gf(), d4 = gf(), e3 = gf(), f3 = gf();
      for (let i5 = 0; i5 < 31; i5++) {
        z6[i5] = n7[i5];
      }
      z6[31] = n7[31] & 127 | 64;
      z6[0] &= 248;
      unpack25519(x6, p5);
      for (let i5 = 0; i5 < 16; i5++) {
        b4[i5] = x6[i5];
      }
      a6[0] = d4[0] = 1;
      for (let i5 = 254; i5 >= 0; --i5) {
        const r6 = z6[i5 >>> 3] >>> (i5 & 7) & 1;
        sel25519(a6, b4, r6);
        sel25519(c5, d4, r6);
        add3(e3, a6, c5);
        sub(a6, a6, c5);
        add3(c5, b4, d4);
        sub(b4, b4, d4);
        square(d4, e3);
        square(f3, a6);
        mul3(a6, c5, a6);
        mul3(c5, b4, e3);
        add3(e3, a6, c5);
        sub(a6, a6, c5);
        square(b4, a6);
        sub(c5, d4, f3);
        mul3(a6, c5, _121665);
        add3(a6, a6, d4);
        mul3(c5, c5, a6);
        mul3(a6, d4, f3);
        mul3(d4, b4, x6);
        square(b4, e3);
        sel25519(a6, b4, r6);
        sel25519(c5, d4, r6);
      }
      for (let i5 = 0; i5 < 16; i5++) {
        x6[i5 + 16] = a6[i5];
        x6[i5 + 32] = c5[i5];
        x6[i5 + 48] = b4[i5];
        x6[i5 + 64] = d4[i5];
      }
      const x32 = x6.subarray(32);
      const x16 = x6.subarray(16);
      inv25519(x32, x32);
      mul3(x16, x16, x32);
      const q2 = new Uint8Array(32);
      pack25519(q2, x16);
      return q2;
    }
    exports.scalarMult = scalarMult;
    function scalarMultBase(n7) {
      return scalarMult(n7, _9);
    }
    exports.scalarMultBase = scalarMultBase;
    function generateKeyPairFromSeed2(seed) {
      if (seed.length !== exports.SECRET_KEY_LENGTH) {
        throw new Error(`x25519: seed must be ${exports.SECRET_KEY_LENGTH} bytes`);
      }
      const secretKey = new Uint8Array(seed);
      const publicKey = scalarMultBase(secretKey);
      return {
        publicKey,
        secretKey
      };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed2;
    function generateKeyPair3(prng) {
      const seed = (0, random_1.randomBytes)(32, prng);
      const result = generateKeyPairFromSeed2(seed);
      (0, wipe_1.wipe)(seed);
      return result;
    }
    exports.generateKeyPair = generateKeyPair3;
    function sharedKey2(mySecretKey, theirPublicKey, rejectZero = false) {
      if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {
        throw new Error("X25519: incorrect secret key length");
      }
      if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {
        throw new Error("X25519: incorrect public key length");
      }
      const result = scalarMult(mySecretKey, theirPublicKey);
      if (rejectZero) {
        let zeros2 = 0;
        for (let i5 = 0; i5 < result.length; i5++) {
          zeros2 |= result[i5];
        }
        if (zeros2 === 0) {
          throw new Error("X25519: invalid shared key");
        }
      }
      return result;
    }
    exports.sharedKey = sharedKey2;
  }
});

// node_modules/uint8arrays/esm/src/compare.js
var import_dist90;
var init_compare = __esm({
  "node_modules/uint8arrays/esm/src/compare.js"() {
    import_dist90 = __toESM(require_dist(), 1);
  }
});

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe2(size = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return globalThis.Buffer.allocUnsafe(size);
  }
  return new Uint8Array(size);
}
var import_dist91;
var init_alloc2 = __esm({
  "node_modules/uint8arrays/esm/src/alloc.js"() {
    import_dist91 = __toESM(require_dist(), 1);
  }
});

// node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe2(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return output;
}
var import_dist92;
var init_concat2 = __esm({
  "node_modules/uint8arrays/esm/src/concat.js"() {
    import_dist92 = __toESM(require_dist(), 1);
    init_alloc2();
  }
});

// node_modules/uint8arrays/esm/src/equals.js
var import_dist93;
var init_equals = __esm({
  "node_modules/uint8arrays/esm/src/equals.js"() {
    import_dist93 = __toESM(require_dist(), 1);
  }
});

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec2(name2, prefix, encode8, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode8
    },
    decoder: { decode: decode8 }
  };
}
var import_dist94, string2, ascii2, BASES2, bases_default2;
var init_bases2 = __esm({
  "node_modules/uint8arrays/esm/src/util/bases.js"() {
    import_dist94 = __toESM(require_dist(), 1);
    init_basics();
    init_alloc2();
    string2 = createCodec2("utf8", "u", (buf) => {
      const decoder = new TextDecoder("utf8");
      return "u" + decoder.decode(buf);
    }, (str2) => {
      const encoder = new TextEncoder();
      return encoder.encode(str2.substring(1));
    });
    ascii2 = createCodec2("ascii", "a", (buf) => {
      let string3 = "a";
      for (let i5 = 0; i5 < buf.length; i5++) {
        string3 += String.fromCharCode(buf[i5]);
      }
      return string3;
    }, (str2) => {
      str2 = str2.substring(1);
      const buf = allocUnsafe2(str2.length);
      for (let i5 = 0; i5 < str2.length; i5++) {
        buf[i5] = str2.charCodeAt(i5);
      }
      return buf;
    });
    BASES2 = {
      utf8: string2,
      "utf-8": string2,
      hex: bases.base16,
      latin1: ascii2,
      ascii: ascii2,
      binary: ascii2,
      ...bases
    };
    bases_default2 = BASES2;
  }
});

// node_modules/uint8arrays/esm/src/from-string.js
function fromString3(string3, encoding = "utf8") {
  const base4 = bases_default2[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(string3, "utf8");
  }
  return base4.decoder.decode(`${base4.prefix}${string3}`);
}
var import_dist95;
var init_from_string2 = __esm({
  "node_modules/uint8arrays/esm/src/from-string.js"() {
    import_dist95 = __toESM(require_dist(), 1);
    init_bases2();
  }
});

// node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base4 = bases_default2[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base4.encoder.encode(array).substring(1);
}
var import_dist96;
var init_to_string2 = __esm({
  "node_modules/uint8arrays/esm/src/to-string.js"() {
    import_dist96 = __toESM(require_dist(), 1);
    init_bases2();
  }
});

// node_modules/uint8arrays/esm/src/xor.js
var import_dist97;
var init_xor = __esm({
  "node_modules/uint8arrays/esm/src/xor.js"() {
    import_dist97 = __toESM(require_dist(), 1);
    init_alloc2();
  }
});

// node_modules/uint8arrays/esm/src/index.js
var import_dist98;
var init_src2 = __esm({
  "node_modules/uint8arrays/esm/src/index.js"() {
    import_dist98 = __toESM(require_dist());
    init_compare();
    init_concat2();
    init_equals();
    init_from_string2();
    init_to_string2();
    init_xor();
  }
});

// node_modules/@walletconnect/relay-api/dist/index.es.js
var import_dist99, C3;
var init_index_es5 = __esm({
  "node_modules/@walletconnect/relay-api/dist/index.es.js"() {
    import_dist99 = __toESM(require_dist());
    C3 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };
  }
});

// node_modules/@walletconnect/utils/dist/index.es.js
var index_es_exports = {};
__export(index_es_exports, {
  BASE10: () => ye,
  BASE16: () => g3,
  BASE64: () => ge,
  BASE64URL: () => pr,
  COLON: () => Et,
  DEFAULT_DEPTH: () => ie,
  EMPTY_SPACE: () => J,
  ENV_MAP: () => y4,
  INTERNAL_ERRORS: () => Mn,
  MemoryStore: () => bo,
  ONE_THOUSAND: () => wt,
  REACT_NATIVE_PRODUCT: () => qe,
  RELAYER_DEFAULT_PROTOCOL: () => Sn,
  SDK_ERRORS: () => Vn,
  SDK_TYPE: () => He,
  SLASH: () => Be,
  TYPE_0: () => ve,
  TYPE_1: () => D2,
  TYPE_2: () => M2,
  UTF8: () => k3,
  addResourceToRecap: () => vn,
  appendToQueryString: () => We,
  assertType: () => jt,
  assignAbilityToActions: () => pe,
  base64Decode: () => yn,
  base64Encode: () => hn,
  buildApprovedNamespaces: () => Gr,
  buildAuthObject: () => sr,
  buildNamespacesFromAuth: () => Yr,
  buildRecapStatement: () => En,
  calcExpiry: () => Lt,
  capitalize: () => kt,
  capitalizeWord: () => Ze,
  createDelayedPromise: () => Dt,
  createEncodedRecap: () => ur,
  createExpiringPromise: () => xt,
  createRecap: () => gn,
  decodeRecap: () => I2,
  decodeTypeByte: () => C4,
  decodeTypeTwoEnvelope: () => Nr,
  decrypt: () => Or,
  deriveSymKey: () => gr,
  deserialize: () => Q2,
  encodeRecap: () => G,
  encodeTypeByte: () => Ee,
  encodeTypeTwoEnvelope: () => wr,
  encrypt: () => Er,
  engineEvent: () => qt,
  enumify: () => _t,
  formatAccountId: () => De,
  formatAccountWithChain: () => ft,
  formatChainId: () => ke,
  formatDeeplinkUrl: () => Xe,
  formatExpirerTarget: () => ae,
  formatIdTarget: () => Mt,
  formatMessage: () => dn,
  formatMessageContext: () => Tt,
  formatRelayParams: () => Tn,
  formatRelayRpcUrl: () => It,
  formatStatementFromRecap: () => he,
  formatTopicTarget: () => Vt,
  formatUA: () => Ge,
  formatUri: () => Mr,
  fromBase64: () => le,
  generateKeyPair: () => hr,
  generateRandomBytes32: () => yr,
  getAccountsChains: () => U2,
  getAccountsFromNamespaces: () => mt,
  getAddressFromAccount: () => xe,
  getAddressesFromAccounts: () => pt,
  getAppId: () => St,
  getAppMetadata: () => $t,
  getBrowserOnlineStatus: () => Yn,
  getChainFromAccount: () => Ve,
  getChainsFromAccounts: () => Me,
  getChainsFromNamespace: () => W,
  getChainsFromNamespaces: () => ht,
  getChainsFromRecap: () => fr,
  getChainsFromRequiredNamespaces: () => yt,
  getCommonValuesInArrays: () => ue,
  getCryptoKeyFromKeyData: () => Nn,
  getDecodedRecapFromResources: () => fn,
  getDeepLink: () => Ht,
  getDidAddress: () => fe,
  getDidAddressSegments: () => z3,
  getDidChainId: () => un,
  getEnvironment: () => A2,
  getHttpUrl: () => Pt,
  getInternalError: () => S3,
  getJavascriptID: () => ze,
  getJavascriptOS: () => Je,
  getLastItems: () => Qe,
  getLinkModeURL: () => Kr,
  getMethodsFromRecap: () => dr,
  getNamespacedDidChainId: () => ln,
  getNamespacesChains: () => Un,
  getNamespacesEventsForChainId: () => kn,
  getNamespacesFromAccounts: () => xn,
  getNamespacesMethodsForChainId: () => _n,
  getNodeOnlineStatus: () => Zn,
  getReCapActions: () => mn,
  getReactNativeOnlineStatus: () => Qn,
  getRecapAbilitiesFromResource: () => ar,
  getRecapFromResources: () => Y,
  getRecapResource: () => pn,
  getRelayClientMetadata: () => Rt,
  getRelayProtocolApi: () => Ar,
  getRelayProtocolName: () => Tr,
  getRequiredNamespacesFromNamespaces: () => zr,
  getSdkError: () => _3,
  getSearchParamFromURL: () => Wt,
  getUniqueValues: () => se,
  handleDeeplinkRedirect: () => Bt2,
  hasOverlap: () => R,
  hashKey: () => vr,
  hashMessage: () => br,
  isAndroid: () => Ot,
  isBrowser: () => V,
  isCaipNamespace: () => Oe,
  isConformingNamespaces: () => zn,
  isExpired: () => Ft,
  isIos: () => Nt,
  isNode: () => ce,
  isOnline: () => go,
  isProposalStruct: () => Xr,
  isReactNative: () => $,
  isRecap: () => me,
  isSessionCompatible: () => Qr,
  isSessionStruct: () => eo,
  isTelegram: () => en,
  isTestRun: () => zt,
  isTypeOneEnvelope: () => $r,
  isTypeTwoEnvelope: () => Rr,
  isUndefined: () => P2,
  isValidAccountId: () => Kn,
  isValidAccounts: () => qn,
  isValidActions: () => Hn,
  isValidArray: () => L2,
  isValidChainId: () => F,
  isValidChains: () => Ln,
  isValidController: () => no,
  isValidEip1271Signature: () => on,
  isValidEip191Signature: () => rn,
  isValidErrorReason: () => io,
  isValidEvent: () => uo,
  isValidId: () => oo,
  isValidNamespaceAccounts: () => Bn,
  isValidNamespaceActions: () => $e,
  isValidNamespaceChains: () => Fn,
  isValidNamespaceMethodsOrEvents: () => Se,
  isValidNamespaces: () => Wn,
  isValidNamespacesChainId: () => lo,
  isValidNamespacesEvent: () => po,
  isValidNamespacesRequest: () => fo,
  isValidNumber: () => X,
  isValidObject: () => Z,
  isValidParams: () => so,
  isValidRecap: () => O3,
  isValidRelay: () => Jn,
  isValidRelays: () => ro,
  isValidRequest: () => co,
  isValidRequestExpiry: () => yo,
  isValidRequiredNamespaces: () => to,
  isValidResponse: () => ao,
  isValidString: () => b2,
  isValidUrl: () => Zr,
  mapEntries: () => Ut,
  mapToObj: () => At,
  mergeArrays: () => N10,
  mergeEncodedRecaps: () => lr,
  mergeRecaps: () => bn,
  normalizeNamespaces: () => Ne,
  objToMap: () => Ct,
  parseAccountId: () => oe,
  parseChainId: () => re,
  parseContextNames: () => Ye,
  parseExpirerTarget: () => Kt,
  parseNamespaceKey: () => Dn,
  parseRelayParams: () => Pn,
  parseTopic: () => jn,
  parseUri: () => Vr,
  populateAuthPayload: () => ir,
  recapHasResource: () => cr,
  serialize: () => we,
  sleep: () => Gt,
  subscribeToBrowserNetworkChange: () => Xn,
  subscribeToNetworkChange: () => vo,
  subscribeToReactNativeNetworkChange: () => et,
  toBase64: () => nn,
  uuidv4: () => Jt,
  validateDecoding: () => Sr,
  validateEncoding: () => On,
  validateSignedCacao: () => or2,
  verifyP256Jwt: () => jr,
  verifySignature: () => tn
});
function re(e3) {
  const [n7, t3] = e3.split(H);
  return { namespace: n7, reference: t3 };
}
function ke(e3) {
  const { namespace: n7, reference: t3 } = e3;
  return [n7, t3].join(H);
}
function oe(e3) {
  const [n7, t3, r6] = e3.split(H);
  return { namespace: n7, reference: t3, address: r6 };
}
function De(e3) {
  const { namespace: n7, reference: t3, address: r6 } = e3;
  return [n7, t3, r6].join(H);
}
function se(e3, n7) {
  const t3 = [];
  return e3.forEach((r6) => {
    const o4 = n7(r6);
    t3.includes(o4) || t3.push(o4);
  }), t3;
}
function xe(e3) {
  const { address: n7 } = oe(e3);
  return n7;
}
function Ve(e3) {
  const { namespace: n7, reference: t3 } = oe(e3);
  return ke({ namespace: n7, reference: t3 });
}
function ft(e3, n7) {
  const { namespace: t3, reference: r6 } = re(n7);
  return De({ namespace: t3, reference: r6, address: e3 });
}
function pt(e3) {
  return se(e3, xe);
}
function Me(e3) {
  return se(e3, Ve);
}
function mt(e3, n7 = []) {
  const t3 = [];
  return Object.keys(e3).forEach((r6) => {
    if (n7.length && !n7.includes(r6)) return;
    const o4 = e3[r6];
    t3.push(...o4.accounts);
  }), t3;
}
function ht(e3, n7 = []) {
  const t3 = [];
  return Object.keys(e3).forEach((r6) => {
    if (n7.length && !n7.includes(r6)) return;
    const o4 = e3[r6];
    t3.push(...Me(o4.accounts));
  }), t3;
}
function yt(e3, n7 = []) {
  const t3 = [];
  return Object.keys(e3).forEach((r6) => {
    if (n7.length && !n7.includes(r6)) return;
    const o4 = e3[r6];
    t3.push(...W(r6, o4));
  }), t3;
}
function W(e3, n7) {
  return e3.includes(":") ? [e3] : n7.chains || [];
}
function ce() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function $() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === qe;
}
function Ot() {
  return $() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Nt() {
  return $() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function V() {
  return !ce() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function A2() {
  return $() ? y4.reactNative : ce() ? y4.node : V() ? y4.browser : y4.unknown;
}
function St() {
  var e3;
  try {
    return $() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (e3 = global.Application) == null ? void 0 : e3.applicationId : void 0;
  } catch {
    return;
  }
}
function We(e3, n7) {
  let t3 = q.parse(e3);
  return t3 = Fe(Fe({}, t3), n7), e3 = q.stringify(t3), e3;
}
function $t() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function Rt(e3, n7) {
  var t3;
  const r6 = A2(), o4 = { protocol: e3, version: n7, env: r6 };
  return r6 === "browser" && (o4.host = ((t3 = (0, import_window_getters.getLocation)()) == null ? void 0 : t3.host) || "unknown"), o4;
}
function Je() {
  if (A2() === y4.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: t3, Version: r6 } = global.Platform;
    return [t3, r6].join("-");
  }
  const e3 = detect();
  if (e3 === null) return "unknown";
  const n7 = e3.os ? e3.os.replace(" ", "").toLowerCase() : "unknown";
  return e3.type === "browser" ? [n7, e3.name, e3.version].join("-") : [n7, e3.version].join("-");
}
function ze() {
  var e3;
  const n7 = A2();
  return n7 === y4.browser ? [n7, ((e3 = (0, import_window_getters.getLocation)()) == null ? void 0 : e3.host) || "unknown"].join(":") : n7;
}
function Ge(e3, n7, t3) {
  const r6 = Je(), o4 = ze();
  return [[e3, n7].join("-"), [He, t3].join("-"), r6, o4].join("/");
}
function It({ protocol: e3, version: n7, relayUrl: t3, sdkVersion: r6, auth: o4, projectId: s4, useOnCloseEvent: i5, bundleId: u2, packageName: l6 }) {
  const c5 = t3.split("?"), d4 = Ge(e3, n7, r6), a6 = { auth: o4, ua: d4, projectId: s4, useOnCloseEvent: i5 || void 0, packageName: l6 || void 0, bundleId: u2 || void 0 }, f3 = We(c5[1] || "", a6);
  return c5[0] + "?" + f3;
}
function Pt(e3) {
  let n7 = (e3.match(/^[^:]+(?=:\/\/)/gi) || [])[0];
  const t3 = typeof n7 < "u" ? e3.split("://")[1] : e3;
  return n7 = n7 === "wss" ? "https" : "http", [n7, t3].join("://");
}
function jt(e3, n7, t3) {
  if (!e3[n7] || typeof e3[n7] !== t3) throw new Error(`Missing or invalid "${n7}" param`);
}
function Ye(e3, n7 = ie) {
  return Qe(e3.split(Be), n7);
}
function Tt(e3) {
  return Ye(e3).join(J);
}
function R(e3, n7) {
  return e3.filter((t3) => n7.includes(t3)).length === e3.length;
}
function Qe(e3, n7 = ie) {
  return e3.slice(Math.max(e3.length - n7, 0));
}
function At(e3) {
  return Object.fromEntries(e3.entries());
}
function Ct(e3) {
  return new Map(Object.entries(e3));
}
function Ut(e3, n7) {
  const t3 = {};
  return Object.keys(e3).forEach((r6) => {
    t3[r6] = n7(e3[r6]);
  }), t3;
}
function Ze(e3) {
  return e3.trim().replace(/^\w/, (n7) => n7.toUpperCase());
}
function kt(e3) {
  return e3.split(J).map((n7) => Ze(n7)).join(J);
}
function Dt(e3 = import_time3.FIVE_MINUTES, n7) {
  const t3 = (0, import_time3.toMiliseconds)(e3 || import_time3.FIVE_MINUTES);
  let r6, o4, s4, i5;
  return { resolve: (u2) => {
    s4 && r6 && (clearTimeout(s4), r6(u2), i5 = Promise.resolve(u2));
  }, reject: (u2) => {
    s4 && o4 && (clearTimeout(s4), o4(u2));
  }, done: () => new Promise((u2, l6) => {
    if (i5) return u2(i5);
    s4 = setTimeout(() => {
      const c5 = new Error(n7);
      i5 = Promise.reject(c5), l6(c5);
    }, t3), r6 = u2, o4 = l6;
  }) };
}
function xt(e3, n7, t3) {
  return new Promise(async (r6, o4) => {
    const s4 = setTimeout(() => o4(new Error(t3)), n7);
    try {
      const i5 = await e3;
      r6(i5);
    } catch (i5) {
      o4(i5);
    }
    clearTimeout(s4);
  });
}
function ae(e3, n7) {
  if (typeof n7 == "string" && n7.startsWith(`${e3}:`)) return n7;
  if (e3.toLowerCase() === "topic") {
    if (typeof n7 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${n7}`;
  } else if (e3.toLowerCase() === "id") {
    if (typeof n7 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${n7}`;
  }
  throw new Error(`Unknown expirer target type: ${e3}`);
}
function Vt(e3) {
  return ae("topic", e3);
}
function Mt(e3) {
  return ae("id", e3);
}
function Kt(e3) {
  const [n7, t3] = e3.split(":"), r6 = { id: void 0, topic: void 0 };
  if (n7 === "topic" && typeof t3 == "string") r6.topic = t3;
  else if (n7 === "id" && Number.isInteger(Number(t3))) r6.id = Number(t3);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${n7}:${t3}`);
  return r6;
}
function Lt(e3, n7) {
  return (0, import_time3.fromMiliseconds)((n7 || Date.now()) + (0, import_time3.toMiliseconds)(e3));
}
function Ft(e3) {
  return Date.now() >= (0, import_time3.toMiliseconds)(e3);
}
function qt(e3, n7) {
  return `${e3}${n7 ? `:${n7}` : ""}`;
}
function N10(e3 = [], n7 = []) {
  return [.../* @__PURE__ */ new Set([...e3, ...n7])];
}
async function Bt2({ id: e3, topic: n7, wcDeepLink: t3 }) {
  var r6;
  try {
    if (!t3) return;
    const o4 = typeof t3 == "string" ? JSON.parse(t3) : t3, s4 = o4 == null ? void 0 : o4.href;
    if (typeof s4 != "string") return;
    const i5 = Xe(s4, e3, n7), u2 = A2();
    if (u2 === y4.browser) {
      if (!((r6 = (0, import_window_getters.getDocument)()) != null && r6.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      i5.startsWith("https://") || i5.startsWith("http://") ? window.open(i5, "_blank", "noreferrer noopener") : window.open(i5, en() ? "_blank" : "_self", "noreferrer noopener");
    } else u2 === y4.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i5);
  } catch (o4) {
    console.error(o4);
  }
}
function Xe(e3, n7, t3) {
  const r6 = `requestId=${n7}&sessionTopic=${t3}`;
  e3.endsWith("/") && (e3 = e3.slice(0, -1));
  let o4 = `${e3}`;
  if (e3.startsWith("https://t.me")) {
    const s4 = e3.includes("?") ? "&startapp=" : "?startapp=";
    o4 = `${o4}${s4}${nn(r6, true)}`;
  } else o4 = `${o4}/wc?${r6}`;
  return o4;
}
async function Ht(e3, n7) {
  let t3 = "";
  try {
    if (V() && (t3 = localStorage.getItem(n7), t3)) return t3;
    t3 = await e3.getItem(n7);
  } catch (r6) {
    console.error(r6);
  }
  return t3;
}
function ue(e3, n7) {
  return e3.filter((t3) => n7.includes(t3));
}
function Wt(e3, n7) {
  if (!e3.includes(n7)) return null;
  const t3 = e3.split(/([&,?,=])/), r6 = t3.indexOf(n7);
  return t3[r6 + 2];
}
function Jt() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (e3) => {
    const n7 = Math.random() * 16 | 0;
    return (e3 === "x" ? n7 : n7 & 3 | 8).toString(16);
  });
}
function zt() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function en() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function nn(e3, n7 = false) {
  const t3 = Buffer.from(e3).toString("base64");
  return n7 ? t3.replace(/[=]/g, "") : t3;
}
function le(e3) {
  return Buffer.from(e3, "base64").toString("utf-8");
}
function Gt(e3) {
  return new Promise((n7) => setTimeout(n7, e3));
}
async function tn(e3, n7, t3, r6, o4, s4) {
  switch (t3.t) {
    case "eip191":
      return rn(e3, n7, t3.s);
    case "eip1271":
      return await on(e3, n7, t3.s, r6, o4, s4);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${t3.t}`);
  }
}
function rn(e3, n7, t3) {
  return recoverAddress(hashMessage(n7), t3).toLowerCase() === e3.toLowerCase();
}
async function on(e3, n7, t3, r6, o4, s4) {
  const i5 = re(r6);
  if (!i5.namespace || !i5.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r6}`);
  try {
    const u2 = "0x1626ba7e", l6 = "0000000000000000000000000000000000000000000000000000000000000040", c5 = "0000000000000000000000000000000000000000000000000000000000000041", d4 = t3.substring(2), a6 = hashMessage(n7).substring(2), f3 = u2 + a6 + l6 + c5 + d4, h6 = await fetch(`${s4 || Yt}/?chainId=${r6}&projectId=${o4}`, { method: "POST", body: JSON.stringify({ id: Qt(), jsonrpc: "2.0", method: "eth_call", params: [{ to: e3, data: f3 }, "latest"] }) }), { result: p5 } = await h6.json();
    return p5 ? p5.slice(0, u2.length).toLowerCase() === u2.toLowerCase() : false;
  } catch (u2) {
    return console.error("isValidEip1271Signature: ", u2), false;
  }
}
function Qt() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
async function or2(e3) {
  const { cacao: n7, projectId: t3 } = e3, { s: r6, p: o4 } = n7, s4 = dn(o4, o4.iss), i5 = fe(o4.iss);
  return await tn(i5, s4, r6, ln(o4.iss), t3);
}
function sr(e3, n7, t3) {
  return t3.includes("did:pkh:") || (t3 = `did:pkh:${t3}`), { h: { t: "caip122" }, p: { iss: t3, domain: e3.domain, aud: e3.aud, version: e3.version, nonce: e3.nonce, iat: e3.iat, statement: e3.statement, requestId: e3.requestId, resources: e3.resources, nbf: e3.nbf, exp: e3.exp }, s: n7 };
}
function ir(e3) {
  var n7;
  const { authPayload: t3, chains: r6, methods: o4 } = e3, s4 = t3.statement || "";
  if (!(r6 != null && r6.length)) return t3;
  const i5 = t3.chains, u2 = ue(i5, r6);
  if (!(u2 != null && u2.length)) throw new Error("No supported chains");
  const l6 = fn(t3.resources);
  if (!l6) return t3;
  O3(l6);
  const c5 = pn(l6, "eip155");
  let d4 = (t3 == null ? void 0 : t3.resources) || [];
  if (c5 != null && c5.length) {
    const a6 = mn(c5), f3 = ue(a6, o4);
    if (!(f3 != null && f3.length)) throw new Error(`Supported methods don't satisfy the requested: ${JSON.stringify(a6)}, supported: ${JSON.stringify(o4)}`);
    const h6 = pe("request", f3, { chains: u2 }), p5 = vn(l6, "eip155", h6);
    d4 = ((n7 = t3 == null ? void 0 : t3.resources) == null ? void 0 : n7.slice(0, -1)) || [], d4.push(G(p5));
  }
  return an(de({}, t3), { statement: En(s4, Y(d4)), chains: u2, resources: t3 != null && t3.resources || d4.length > 0 ? d4 : void 0 });
}
function fn(e3) {
  const n7 = Y(e3);
  if (n7 && me(n7)) return I2(n7);
}
function cr(e3, n7) {
  var t3;
  return (t3 = e3 == null ? void 0 : e3.att) == null ? void 0 : t3.hasOwnProperty(n7);
}
function pn(e3, n7) {
  var t3, r6;
  return (t3 = e3 == null ? void 0 : e3.att) != null && t3[n7] ? Object.keys((r6 = e3 == null ? void 0 : e3.att) == null ? void 0 : r6[n7]) : [];
}
function ar(e3) {
  return (e3 == null ? void 0 : e3.map((n7) => Object.keys(n7))) || [];
}
function mn(e3) {
  return (e3 == null ? void 0 : e3.map((n7) => {
    var t3;
    return (t3 = n7.split("/")) == null ? void 0 : t3[1];
  })) || [];
}
function hn(e3) {
  return Buffer.from(JSON.stringify(e3)).toString("base64");
}
function yn(e3) {
  return JSON.parse(Buffer.from(e3, "base64").toString("utf-8"));
}
function O3(e3) {
  if (!e3) throw new Error("No recap provided, value is undefined");
  if (!e3.att) throw new Error("No `att` property found");
  const n7 = Object.keys(e3.att);
  if (!(n7 != null && n7.length)) throw new Error("No resources found in `att` property");
  n7.forEach((t3) => {
    const r6 = e3.att[t3];
    if (Array.isArray(r6)) throw new Error(`Resource must be an object: ${t3}`);
    if (typeof r6 != "object") throw new Error(`Resource must be an object: ${t3}`);
    if (!Object.keys(r6).length) throw new Error(`Resource object is empty: ${t3}`);
    Object.keys(r6).forEach((o4) => {
      const s4 = r6[o4];
      if (!Array.isArray(s4)) throw new Error(`Ability limits ${o4} must be an array of objects, found: ${s4}`);
      if (!s4.length) throw new Error(`Value of ${o4} is empty array, must be an array with objects`);
      s4.forEach((i5) => {
        if (typeof i5 != "object") throw new Error(`Ability limits (${o4}) must be an array of objects, found: ${i5}`);
      });
    });
  });
}
function gn(e3, n7, t3, r6 = {}) {
  return t3 == null ? void 0 : t3.sort((o4, s4) => o4.localeCompare(s4)), { att: { [e3]: pe(n7, t3, r6) } };
}
function vn(e3, n7, t3) {
  var r6;
  return e3.att[n7] = de({}, t3), ((r6 = Object.keys(e3.att)) == null ? void 0 : r6.sort((o4, s4) => o4.localeCompare(s4))).reduce((o4, s4) => (o4.att[s4] = e3.att[s4], o4), { att: {} });
}
function pe(e3, n7, t3 = {}) {
  n7 = n7 == null ? void 0 : n7.sort((o4, s4) => o4.localeCompare(s4));
  const r6 = n7.map((o4) => ({ [`${e3}/${o4}`]: [t3] }));
  return Object.assign({}, ...r6);
}
function G(e3) {
  return O3(e3), `urn:recap:${hn(e3).replace(/=/g, "")}`;
}
function I2(e3) {
  const n7 = yn(e3.replace("urn:recap:", ""));
  return O3(n7), n7;
}
function ur(e3, n7, t3) {
  const r6 = gn(e3, n7, t3);
  return G(r6);
}
function me(e3) {
  return e3 && e3.includes("urn:recap:");
}
function lr(e3, n7) {
  const t3 = I2(e3), r6 = I2(n7), o4 = bn(t3, r6);
  return G(o4);
}
function bn(e3, n7) {
  O3(e3), O3(n7);
  const t3 = Object.keys(e3.att).concat(Object.keys(n7.att)).sort((o4, s4) => o4.localeCompare(s4)), r6 = { att: {} };
  return t3.forEach((o4) => {
    var s4, i5;
    Object.keys(((s4 = e3.att) == null ? void 0 : s4[o4]) || {}).concat(Object.keys(((i5 = n7.att) == null ? void 0 : i5[o4]) || {})).sort((u2, l6) => u2.localeCompare(l6)).forEach((u2) => {
      var l6, c5;
      r6.att[o4] = an(de({}, r6.att[o4]), { [u2]: ((l6 = e3.att[o4]) == null ? void 0 : l6[u2]) || ((c5 = n7.att[o4]) == null ? void 0 : c5[u2]) });
    });
  }), r6;
}
function he(e3 = "", n7) {
  O3(n7);
  const t3 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (e3.includes(t3)) return e3;
  const r6 = [];
  let o4 = 0;
  Object.keys(n7.att).forEach((u2) => {
    const l6 = Object.keys(n7.att[u2]).map((a6) => ({ ability: a6.split("/")[0], action: a6.split("/")[1] }));
    l6.sort((a6, f3) => a6.action.localeCompare(f3.action));
    const c5 = {};
    l6.forEach((a6) => {
      c5[a6.ability] || (c5[a6.ability] = []), c5[a6.ability].push(a6.action);
    });
    const d4 = Object.keys(c5).map((a6) => (o4++, `(${o4}) '${a6}': '${c5[a6].join("', '")}' for '${u2}'.`));
    r6.push(d4.join(", ").replace(".,", "."));
  });
  const s4 = r6.join(" "), i5 = `${t3}${s4}`;
  return `${e3 ? e3 + " " : ""}${i5}`;
}
function dr(e3) {
  var n7;
  const t3 = I2(e3);
  O3(t3);
  const r6 = (n7 = t3.att) == null ? void 0 : n7.eip155;
  return r6 ? Object.keys(r6).map((o4) => o4.split("/")[1]) : [];
}
function fr(e3) {
  const n7 = I2(e3);
  O3(n7);
  const t3 = [];
  return Object.values(n7.att).forEach((r6) => {
    Object.values(r6).forEach((o4) => {
      var s4;
      (s4 = o4 == null ? void 0 : o4[0]) != null && s4.chains && t3.push(o4[0].chains);
    });
  }), [...new Set(t3.flat())];
}
function En(e3, n7) {
  if (!n7) return e3;
  const t3 = I2(n7);
  return O3(t3), he(e3, t3);
}
function Y(e3) {
  if (!e3) return;
  const n7 = e3 == null ? void 0 : e3[e3.length - 1];
  return me(n7) ? n7 : void 0;
}
function hr() {
  const e3 = _e.generateKeyPair();
  return { privateKey: toString3(e3.secretKey, g3), publicKey: toString3(e3.publicKey, g3) };
}
function yr() {
  const e3 = (0, import_random2.randomBytes)(be);
  return toString3(e3, g3);
}
function gr(e3, n7) {
  const t3 = _e.sharedKey(fromString3(e3, g3), fromString3(n7, g3), true), r6 = new import_hkdf.HKDF(import_sha256.SHA256, t3).expand(be);
  return toString3(r6, g3);
}
function vr(e3) {
  const n7 = (0, import_sha256.hash)(fromString3(e3, g3));
  return toString3(n7, g3);
}
function br(e3) {
  const n7 = (0, import_sha256.hash)(fromString3(e3, k3));
  return toString3(n7, g3);
}
function Ee(e3) {
  return fromString3(`${e3}`, ye);
}
function C4(e3) {
  return Number(toString3(e3, ye));
}
function Er(e3) {
  const n7 = Ee(typeof e3.type < "u" ? e3.type : ve);
  if (C4(n7) === D2 && typeof e3.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const t3 = typeof e3.senderPublicKey < "u" ? fromString3(e3.senderPublicKey, g3) : void 0, r6 = typeof e3.iv < "u" ? fromString3(e3.iv, g3) : (0, import_random2.randomBytes)(K2), o4 = new import_chacha20poly1305.ChaCha20Poly1305(fromString3(e3.symKey, g3)).seal(r6, fromString3(e3.message, k3));
  return we({ type: n7, sealed: o4, iv: r6, senderPublicKey: t3, encoding: e3.encoding });
}
function wr(e3, n7) {
  const t3 = Ee(M2), r6 = (0, import_random2.randomBytes)(K2), o4 = fromString3(e3, k3);
  return we({ type: t3, sealed: o4, iv: r6, encoding: n7 });
}
function Or(e3) {
  const n7 = new import_chacha20poly1305.ChaCha20Poly1305(fromString3(e3.symKey, g3)), { sealed: t3, iv: r6 } = Q2({ encoded: e3.encoded, encoding: e3 == null ? void 0 : e3.encoding }), o4 = n7.open(r6, t3);
  if (o4 === null) throw new Error("Failed to decrypt");
  return toString3(o4, k3);
}
function Nr(e3, n7) {
  const { sealed: t3 } = Q2({ encoded: e3, encoding: n7 });
  return toString3(t3, k3);
}
function we(e3) {
  const { encoding: n7 = ge } = e3;
  if (C4(e3.type) === M2) return toString3(concat3([e3.type, e3.sealed]), n7);
  if (C4(e3.type) === D2) {
    if (typeof e3.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([e3.type, e3.senderPublicKey, e3.iv, e3.sealed]), n7);
  }
  return toString3(concat3([e3.type, e3.iv, e3.sealed]), n7);
}
function Q2(e3) {
  const { encoded: n7, encoding: t3 = ge } = e3, r6 = fromString3(n7, t3), o4 = r6.slice(mr, wn), s4 = wn;
  if (C4(o4) === D2) {
    const c5 = s4 + be, d4 = c5 + K2, a6 = r6.slice(s4, c5), f3 = r6.slice(c5, d4), h6 = r6.slice(d4);
    return { type: o4, sealed: h6, iv: f3, senderPublicKey: a6 };
  }
  if (C4(o4) === M2) {
    const c5 = r6.slice(s4), d4 = (0, import_random2.randomBytes)(K2);
    return { type: o4, sealed: c5, iv: d4 };
  }
  const i5 = s4 + K2, u2 = r6.slice(s4, i5), l6 = r6.slice(i5);
  return { type: o4, sealed: l6, iv: u2 };
}
function Sr(e3, n7) {
  const t3 = Q2({ encoded: e3, encoding: n7 == null ? void 0 : n7.encoding });
  return On({ type: C4(t3.type), senderPublicKey: typeof t3.senderPublicKey < "u" ? toString3(t3.senderPublicKey, g3) : void 0, receiverPublicKey: n7 == null ? void 0 : n7.receiverPublicKey });
}
function On(e3) {
  const n7 = (e3 == null ? void 0 : e3.type) || ve;
  if (n7 === D2) {
    if (typeof (e3 == null ? void 0 : e3.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (e3 == null ? void 0 : e3.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: n7, senderPublicKey: e3 == null ? void 0 : e3.senderPublicKey, receiverPublicKey: e3 == null ? void 0 : e3.receiverPublicKey };
}
function $r(e3) {
  return e3.type === D2 && typeof e3.senderPublicKey == "string" && typeof e3.receiverPublicKey == "string";
}
function Rr(e3) {
  return e3.type === M2;
}
function Nn(e3) {
  return new import_elliptic2.ec("p256").keyFromPublic({ x: Buffer.from(e3.x, "base64").toString("hex"), y: Buffer.from(e3.y, "base64").toString("hex") }, "hex");
}
function Ir(e3) {
  let n7 = e3.replace(/-/g, "+").replace(/_/g, "/");
  const t3 = n7.length % 4;
  return t3 > 0 && (n7 += "=".repeat(4 - t3)), n7;
}
function Pr(e3) {
  return Buffer.from(Ir(e3), "base64");
}
function jr(e3, n7) {
  const [t3, r6, o4] = e3.split("."), s4 = Pr(o4);
  if (s4.length !== 64) throw new Error("Invalid signature length");
  const i5 = s4.slice(0, 32).toString("hex"), u2 = s4.slice(32, 64).toString("hex"), l6 = `${t3}.${r6}`, c5 = new import_sha256.SHA256().update(Buffer.from(l6)).digest(), d4 = Nn(n7), a6 = Buffer.from(c5).toString("hex");
  if (!d4.verify(a6, { r: i5, s: u2 })) throw new Error("Invalid signature");
  return decodeJWT(e3).payload;
}
function Tr(e3) {
  return (e3 == null ? void 0 : e3.relay) || { protocol: Sn };
}
function Ar(e3) {
  const n7 = C3[e3];
  if (typeof n7 > "u") throw new Error(`Relay Protocol not supported: ${e3}`);
  return n7;
}
function Pn(e3, n7 = "-") {
  const t3 = {}, r6 = "relay" + n7;
  return Object.keys(e3).forEach((o4) => {
    if (o4.startsWith(r6)) {
      const s4 = o4.replace(r6, ""), i5 = e3[o4];
      t3[s4] = i5;
    }
  }), t3;
}
function Vr(e3) {
  if (!e3.includes("wc:")) {
    const l6 = le(e3);
    l6 != null && l6.includes("wc:") && (e3 = l6);
  }
  e3 = e3.includes("wc://") ? e3.replace("wc://", "") : e3, e3 = e3.includes("wc:") ? e3.replace("wc:", "") : e3;
  const n7 = e3.indexOf(":"), t3 = e3.indexOf("?") !== -1 ? e3.indexOf("?") : void 0, r6 = e3.substring(0, n7), o4 = e3.substring(n7 + 1, t3).split("@"), s4 = typeof t3 < "u" ? e3.substring(t3) : "", i5 = q.parse(s4), u2 = typeof i5.methods == "string" ? i5.methods.split(",") : void 0;
  return { protocol: r6, topic: jn(o4[0]), version: parseInt(o4[1], 10), symKey: i5.symKey, relay: Pn(i5), methods: u2, expiryTimestamp: i5.expiryTimestamp ? parseInt(i5.expiryTimestamp, 10) : void 0 };
}
function jn(e3) {
  return e3.startsWith("//") ? e3.substring(2) : e3;
}
function Tn(e3, n7 = "-") {
  const t3 = "relay", r6 = {};
  return Object.keys(e3).forEach((o4) => {
    const s4 = t3 + n7 + o4;
    e3[o4] && (r6[s4] = e3[o4]);
  }), r6;
}
function Mr(e3) {
  return `${e3.protocol}:${e3.topic}@${e3.version}?` + q.stringify(In(xr(In({ symKey: e3.symKey }, Tn(e3.relay)), { expiryTimestamp: e3.expiryTimestamp }), e3.methods ? { methods: e3.methods.join(",") } : {}));
}
function Kr(e3, n7, t3) {
  return `${e3}?wc_ev=${t3}&topic=${n7}`;
}
function U2(e3) {
  const n7 = [];
  return e3.forEach((t3) => {
    const [r6, o4] = t3.split(":");
    n7.push(`${r6}:${o4}`);
  }), n7;
}
function Un(e3) {
  const n7 = [];
  return Object.values(e3).forEach((t3) => {
    n7.push(...U2(t3.accounts));
  }), n7;
}
function _n(e3, n7) {
  const t3 = [];
  return Object.values(e3).forEach((r6) => {
    U2(r6.accounts).includes(n7) && t3.push(...r6.methods);
  }), t3;
}
function kn(e3, n7) {
  const t3 = [];
  return Object.values(e3).forEach((r6) => {
    U2(r6.accounts).includes(n7) && t3.push(...r6.events);
  }), t3;
}
function zr(e3, n7) {
  const t3 = Wn(e3, n7);
  if (t3) throw new Error(t3.message);
  const r6 = {};
  for (const [o4, s4] of Object.entries(e3)) r6[o4] = { methods: s4.methods, events: s4.events, chains: s4.accounts.map((i5) => `${i5.split(":")[0]}:${i5.split(":")[1]}`) };
  return r6;
}
function Gr(e3) {
  const { proposal: { requiredNamespaces: n7, optionalNamespaces: t3 = {} }, supportedNamespaces: r6 } = e3, o4 = Ne(n7), s4 = Ne(t3), i5 = {};
  Object.keys(r6).forEach((c5) => {
    const d4 = r6[c5].chains, a6 = r6[c5].methods, f3 = r6[c5].events, h6 = r6[c5].accounts;
    d4.forEach((p5) => {
      if (!h6.some((m5) => m5.includes(p5))) throw new Error(`No accounts provided for chain ${p5} in namespace ${c5}`);
    }), i5[c5] = { chains: d4, methods: a6, events: f3, accounts: h6 };
  });
  const u2 = zn(n7, i5, "approve()");
  if (u2) throw new Error(u2.message);
  const l6 = {};
  return !Object.keys(n7).length && !Object.keys(t3).length ? i5 : (Object.keys(o4).forEach((c5) => {
    const d4 = r6[c5].chains.filter((p5) => {
      var m5, E5;
      return (E5 = (m5 = o4[c5]) == null ? void 0 : m5.chains) == null ? void 0 : E5.includes(p5);
    }), a6 = r6[c5].methods.filter((p5) => {
      var m5, E5;
      return (E5 = (m5 = o4[c5]) == null ? void 0 : m5.methods) == null ? void 0 : E5.includes(p5);
    }), f3 = r6[c5].events.filter((p5) => {
      var m5, E5;
      return (E5 = (m5 = o4[c5]) == null ? void 0 : m5.events) == null ? void 0 : E5.includes(p5);
    }), h6 = d4.map((p5) => r6[c5].accounts.filter((m5) => m5.includes(`${p5}:`))).flat();
    l6[c5] = { chains: d4, methods: a6, events: f3, accounts: h6 };
  }), Object.keys(s4).forEach((c5) => {
    var d4, a6, f3, h6, p5, m5;
    if (!r6[c5]) return;
    const E5 = (a6 = (d4 = s4[c5]) == null ? void 0 : d4.chains) == null ? void 0 : a6.filter((j3) => r6[c5].chains.includes(j3)), nt3 = r6[c5].methods.filter((j3) => {
      var T4, x6;
      return (x6 = (T4 = s4[c5]) == null ? void 0 : T4.methods) == null ? void 0 : x6.includes(j3);
    }), tt2 = r6[c5].events.filter((j3) => {
      var T4, x6;
      return (x6 = (T4 = s4[c5]) == null ? void 0 : T4.events) == null ? void 0 : x6.includes(j3);
    }), rt3 = E5 == null ? void 0 : E5.map((j3) => r6[c5].accounts.filter((T4) => T4.includes(`${j3}:`))).flat();
    l6[c5] = { chains: N10((f3 = l6[c5]) == null ? void 0 : f3.chains, E5), methods: N10((h6 = l6[c5]) == null ? void 0 : h6.methods, nt3), events: N10((p5 = l6[c5]) == null ? void 0 : p5.events, tt2), accounts: N10((m5 = l6[c5]) == null ? void 0 : m5.accounts, rt3) };
  }), l6);
}
function Oe(e3) {
  return e3.includes(":");
}
function Dn(e3) {
  return Oe(e3) ? e3.split(":")[0] : e3;
}
function Ne(e3) {
  var n7, t3, r6;
  const o4 = {};
  if (!Z(e3)) return o4;
  for (const [s4, i5] of Object.entries(e3)) {
    const u2 = Oe(s4) ? [s4] : i5.chains, l6 = i5.methods || [], c5 = i5.events || [], d4 = Dn(s4);
    o4[d4] = Jr(Wr({}, o4[d4]), { chains: N10(u2, (n7 = o4[d4]) == null ? void 0 : n7.chains), methods: N10(l6, (t3 = o4[d4]) == null ? void 0 : t3.methods), events: N10(c5, (r6 = o4[d4]) == null ? void 0 : r6.events) });
  }
  return o4;
}
function xn(e3) {
  const n7 = {};
  return e3 == null ? void 0 : e3.forEach((t3) => {
    const [r6, o4] = t3.split(":");
    n7[r6] || (n7[r6] = { accounts: [], chains: [], events: [] }), n7[r6].accounts.push(t3), n7[r6].chains.push(`${r6}:${o4}`);
  }), n7;
}
function Yr(e3, n7) {
  n7 = n7.map((r6) => r6.replace("did:pkh:", ""));
  const t3 = xn(n7);
  for (const [r6, o4] of Object.entries(t3)) o4.methods ? o4.methods = N10(o4.methods, e3) : o4.methods = e3, o4.events = ["chainChanged", "accountsChanged"];
  return t3;
}
function S3(e3, n7) {
  const { message: t3, code: r6 } = Mn[e3];
  return { message: n7 ? `${t3} ${n7}` : t3, code: r6 };
}
function _3(e3, n7) {
  const { message: t3, code: r6 } = Vn[e3];
  return { message: n7 ? `${t3} ${n7}` : t3, code: r6 };
}
function L2(e3, n7) {
  return Array.isArray(e3) ? typeof n7 < "u" && e3.length ? e3.every(n7) : true : false;
}
function Z(e3) {
  return Object.getPrototypeOf(e3) === Object.prototype && Object.keys(e3).length;
}
function P2(e3) {
  return typeof e3 > "u";
}
function b2(e3, n7) {
  return n7 && P2(e3) ? true : typeof e3 == "string" && !!e3.trim().length;
}
function X(e3, n7) {
  return n7 && P2(e3) ? true : typeof e3 == "number" && !isNaN(e3);
}
function Qr(e3, n7) {
  const { requiredNamespaces: t3 } = n7, r6 = Object.keys(e3.namespaces), o4 = Object.keys(t3);
  let s4 = true;
  return R(o4, r6) ? (r6.forEach((i5) => {
    const { accounts: u2, methods: l6, events: c5 } = e3.namespaces[i5], d4 = U2(u2), a6 = t3[i5];
    (!R(W(i5, a6), d4) || !R(a6.methods, l6) || !R(a6.events, c5)) && (s4 = false);
  }), s4) : false;
}
function F(e3) {
  return b2(e3, false) && e3.includes(":") ? e3.split(":").length === 2 : false;
}
function Kn(e3) {
  if (b2(e3, false) && e3.includes(":")) {
    const n7 = e3.split(":");
    if (n7.length === 3) {
      const t3 = n7[0] + ":" + n7[1];
      return !!n7[2] && F(t3);
    }
  }
  return false;
}
function Zr(e3) {
  function n7(t3) {
    try {
      return typeof new URL(t3) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (b2(e3, false)) {
      if (n7(e3)) return true;
      const t3 = le(e3);
      return n7(t3);
    }
  } catch {
  }
  return false;
}
function Xr(e3) {
  var n7;
  return (n7 = e3 == null ? void 0 : e3.proposer) == null ? void 0 : n7.publicKey;
}
function eo(e3) {
  return e3 == null ? void 0 : e3.topic;
}
function no(e3, n7) {
  let t3 = null;
  return b2(e3 == null ? void 0 : e3.publicKey, false) || (t3 = S3("MISSING_OR_INVALID", `${n7} controller public key should be a string`)), t3;
}
function Se(e3) {
  let n7 = true;
  return L2(e3) ? e3.length && (n7 = e3.every((t3) => b2(t3, false))) : n7 = false, n7;
}
function Ln(e3, n7, t3) {
  let r6 = null;
  return L2(n7) && n7.length ? n7.forEach((o4) => {
    r6 || F(o4) || (r6 = _3("UNSUPPORTED_CHAINS", `${t3}, chain ${o4} should be a string and conform to "namespace:chainId" format`));
  }) : F(e3) || (r6 = _3("UNSUPPORTED_CHAINS", `${t3}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r6;
}
function Fn(e3, n7, t3) {
  let r6 = null;
  return Object.entries(e3).forEach(([o4, s4]) => {
    if (r6) return;
    const i5 = Ln(o4, W(o4, s4), `${n7} ${t3}`);
    i5 && (r6 = i5);
  }), r6;
}
function qn(e3, n7) {
  let t3 = null;
  return L2(e3) ? e3.forEach((r6) => {
    t3 || Kn(r6) || (t3 = _3("UNSUPPORTED_ACCOUNTS", `${n7}, account ${r6} should be a string and conform to "namespace:chainId:address" format`));
  }) : t3 = _3("UNSUPPORTED_ACCOUNTS", `${n7}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), t3;
}
function Bn(e3, n7) {
  let t3 = null;
  return Object.values(e3).forEach((r6) => {
    if (t3) return;
    const o4 = qn(r6 == null ? void 0 : r6.accounts, `${n7} namespace`);
    o4 && (t3 = o4);
  }), t3;
}
function Hn(e3, n7) {
  let t3 = null;
  return Se(e3 == null ? void 0 : e3.methods) ? Se(e3 == null ? void 0 : e3.events) || (t3 = _3("UNSUPPORTED_EVENTS", `${n7}, events should be an array of strings or empty array for no events`)) : t3 = _3("UNSUPPORTED_METHODS", `${n7}, methods should be an array of strings or empty array for no methods`), t3;
}
function $e(e3, n7) {
  let t3 = null;
  return Object.values(e3).forEach((r6) => {
    if (t3) return;
    const o4 = Hn(r6, `${n7}, namespace`);
    o4 && (t3 = o4);
  }), t3;
}
function to(e3, n7, t3) {
  let r6 = null;
  if (e3 && Z(e3)) {
    const o4 = $e(e3, n7);
    o4 && (r6 = o4);
    const s4 = Fn(e3, n7, t3);
    s4 && (r6 = s4);
  } else r6 = S3("MISSING_OR_INVALID", `${n7}, ${t3} should be an object with data`);
  return r6;
}
function Wn(e3, n7) {
  let t3 = null;
  if (e3 && Z(e3)) {
    const r6 = $e(e3, n7);
    r6 && (t3 = r6);
    const o4 = Bn(e3, n7);
    o4 && (t3 = o4);
  } else t3 = S3("MISSING_OR_INVALID", `${n7}, namespaces should be an object with data`);
  return t3;
}
function Jn(e3) {
  return b2(e3.protocol, true);
}
function ro(e3, n7) {
  let t3 = false;
  return n7 && !e3 ? t3 = true : e3 && L2(e3) && e3.length && e3.forEach((r6) => {
    t3 = Jn(r6);
  }), t3;
}
function oo(e3) {
  return typeof e3 == "number";
}
function so(e3) {
  return typeof e3 < "u" && typeof e3 !== null;
}
function io(e3) {
  return !(!e3 || typeof e3 != "object" || !e3.code || !X(e3.code, false) || !e3.message || !b2(e3.message, false));
}
function co(e3) {
  return !(P2(e3) || !b2(e3.method, false));
}
function ao(e3) {
  return !(P2(e3) || P2(e3.result) && P2(e3.error) || !X(e3.id, false) || !b2(e3.jsonrpc, false));
}
function uo(e3) {
  return !(P2(e3) || !b2(e3.name, false));
}
function lo(e3, n7) {
  return !(!F(n7) || !Un(e3).includes(n7));
}
function fo(e3, n7, t3) {
  return b2(t3, false) ? _n(e3, n7).includes(t3) : false;
}
function po(e3, n7, t3) {
  return b2(t3, false) ? kn(e3, n7).includes(t3) : false;
}
function zn(e3, n7, t3) {
  let r6 = null;
  const o4 = mo(e3), s4 = ho(n7), i5 = Object.keys(o4), u2 = Object.keys(s4), l6 = Gn(Object.keys(e3)), c5 = Gn(Object.keys(n7)), d4 = l6.filter((a6) => !c5.includes(a6));
  return d4.length && (r6 = S3("NON_CONFORMING_NAMESPACES", `${t3} namespaces keys don't satisfy requiredNamespaces.
      Required: ${d4.toString()}
      Received: ${Object.keys(n7).toString()}`)), R(i5, u2) || (r6 = S3("NON_CONFORMING_NAMESPACES", `${t3} namespaces chains don't satisfy required namespaces.
      Required: ${i5.toString()}
      Approved: ${u2.toString()}`)), Object.keys(n7).forEach((a6) => {
    if (!a6.includes(":") || r6) return;
    const f3 = U2(n7[a6].accounts);
    f3.includes(a6) || (r6 = S3("NON_CONFORMING_NAMESPACES", `${t3} namespaces accounts don't satisfy namespace accounts for ${a6}
        Required: ${a6}
        Approved: ${f3.toString()}`));
  }), i5.forEach((a6) => {
    r6 || (R(o4[a6].methods, s4[a6].methods) ? R(o4[a6].events, s4[a6].events) || (r6 = S3("NON_CONFORMING_NAMESPACES", `${t3} namespaces events don't satisfy namespace events for ${a6}`)) : r6 = S3("NON_CONFORMING_NAMESPACES", `${t3} namespaces methods don't satisfy namespace methods for ${a6}`));
  }), r6;
}
function mo(e3) {
  const n7 = {};
  return Object.keys(e3).forEach((t3) => {
    var r6;
    t3.includes(":") ? n7[t3] = e3[t3] : (r6 = e3[t3].chains) == null || r6.forEach((o4) => {
      n7[o4] = { methods: e3[t3].methods, events: e3[t3].events };
    });
  }), n7;
}
function Gn(e3) {
  return [...new Set(e3.map((n7) => n7.includes(":") ? n7.split(":")[0] : n7))];
}
function ho(e3) {
  const n7 = {};
  return Object.keys(e3).forEach((t3) => {
    if (t3.includes(":")) n7[t3] = e3[t3];
    else {
      const r6 = U2(e3[t3].accounts);
      r6 == null ? void 0 : r6.forEach((o4) => {
        n7[o4] = { accounts: e3[t3].accounts.filter((s4) => s4.includes(`${o4}:`)), methods: e3[t3].methods, events: e3[t3].events };
      });
    }
  }), n7;
}
function yo(e3, n7) {
  return X(e3, false) && e3 <= n7.max && e3 >= n7.min;
}
function go() {
  const e3 = A2();
  return new Promise((n7) => {
    switch (e3) {
      case y4.browser:
        n7(Yn());
        break;
      case y4.reactNative:
        n7(Qn());
        break;
      case y4.node:
        n7(Zn());
        break;
      default:
        n7(true);
    }
  });
}
function Yn() {
  return V() && (navigator == null ? void 0 : navigator.onLine);
}
async function Qn() {
  if ($() && typeof global < "u" && global != null && global.NetInfo) {
    const e3 = await (global == null ? void 0 : global.NetInfo.fetch());
    return e3 == null ? void 0 : e3.isConnected;
  }
  return true;
}
function Zn() {
  return true;
}
function vo(e3) {
  switch (A2()) {
    case y4.browser:
      Xn(e3);
      break;
    case y4.reactNative:
      et(e3);
      break;
    case y4.node:
      break;
  }
}
function Xn(e3) {
  !$() && V() && (window.addEventListener("online", () => e3(true)), window.addEventListener("offline", () => e3(false)));
}
function et(e3) {
  $() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((n7) => e3(n7 == null ? void 0 : n7.isConnected)));
}
var import_dist100, import_time3, import_window_getters, import_window_metadata, q, import_chacha20poly1305, import_hkdf, import_random2, import_sha256, _e, import_elliptic2, H, gt, Ke, vt, bt, Le, Fe, qe, y4, J, Et, Be, ie, wt, He, _t, Yt, Zt, Xt, er, sn, nr, tr, cn, de, an, rr, z3, un, ln, fe, dn, ye, g3, ge, pr, k3, ve, D2, M2, mr, wn, K2, be, Sn, Cr, Ur, _r, $n, kr, Dr, Rn, In, xr, Lr, Fr, qr, An, Br, Hr, Cn, Wr, Jr, Vn, Mn, Re, bo;
var init_index_es6 = __esm({
  "node_modules/@walletconnect/utils/dist/index.es.js"() {
    import_dist100 = __toESM(require_dist());
    init_es();
    import_time3 = __toESM(require_cjs());
    import_window_getters = __toESM(require_cjs2());
    import_window_metadata = __toESM(require_cjs3());
    q = __toESM(require_query_string());
    init_lib12();
    init_lib14();
    import_chacha20poly1305 = __toESM(require_chacha20poly1305());
    import_hkdf = __toESM(require_hkdf());
    import_random2 = __toESM(require_random());
    import_sha256 = __toESM(require_sha256());
    _e = __toESM(require_x25519());
    init_src2();
    import_elliptic2 = __toESM(require_elliptic());
    init_esm3();
    init_index_es5();
    H = ":";
    gt = Object.defineProperty;
    Ke = Object.getOwnPropertySymbols;
    vt = Object.prototype.hasOwnProperty;
    bt = Object.prototype.propertyIsEnumerable;
    Le = (e3, n7, t3) => n7 in e3 ? gt(e3, n7, { enumerable: true, configurable: true, writable: true, value: t3 }) : e3[n7] = t3;
    Fe = (e3, n7) => {
      for (var t3 in n7 || (n7 = {})) vt.call(n7, t3) && Le(e3, t3, n7[t3]);
      if (Ke) for (var t3 of Ke(n7)) bt.call(n7, t3) && Le(e3, t3, n7[t3]);
      return e3;
    };
    qe = "ReactNative";
    y4 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
    J = " ";
    Et = ":";
    Be = "/";
    ie = 2;
    wt = 1e3;
    He = "js";
    _t = (e3) => e3;
    Yt = "https://rpc.walletconnect.org/v1";
    Zt = Object.defineProperty;
    Xt = Object.defineProperties;
    er = Object.getOwnPropertyDescriptors;
    sn = Object.getOwnPropertySymbols;
    nr = Object.prototype.hasOwnProperty;
    tr = Object.prototype.propertyIsEnumerable;
    cn = (e3, n7, t3) => n7 in e3 ? Zt(e3, n7, { enumerable: true, configurable: true, writable: true, value: t3 }) : e3[n7] = t3;
    de = (e3, n7) => {
      for (var t3 in n7 || (n7 = {})) nr.call(n7, t3) && cn(e3, t3, n7[t3]);
      if (sn) for (var t3 of sn(n7)) tr.call(n7, t3) && cn(e3, t3, n7[t3]);
      return e3;
    };
    an = (e3, n7) => Xt(e3, er(n7));
    rr = "did:pkh:";
    z3 = (e3) => e3 == null ? void 0 : e3.split(":");
    un = (e3) => {
      const n7 = e3 && z3(e3);
      if (n7) return e3.includes(rr) ? n7[3] : n7[1];
    };
    ln = (e3) => {
      const n7 = e3 && z3(e3);
      if (n7) return n7[2] + ":" + n7[3];
    };
    fe = (e3) => {
      const n7 = e3 && z3(e3);
      if (n7) return n7.pop();
    };
    dn = (e3, n7) => {
      const t3 = `${e3.domain} wants you to sign in with your Ethereum account:`, r6 = fe(n7);
      if (!e3.aud && !e3.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
      let o4 = e3.statement || void 0;
      const s4 = `URI: ${e3.aud || e3.uri}`, i5 = `Version: ${e3.version}`, u2 = `Chain ID: ${un(n7)}`, l6 = `Nonce: ${e3.nonce}`, c5 = `Issued At: ${e3.iat}`, d4 = e3.exp ? `Expiration Time: ${e3.exp}` : void 0, a6 = e3.nbf ? `Not Before: ${e3.nbf}` : void 0, f3 = e3.requestId ? `Request ID: ${e3.requestId}` : void 0, h6 = e3.resources ? `Resources:${e3.resources.map((m5) => `
- ${m5}`).join("")}` : void 0, p5 = Y(e3.resources);
      if (p5) {
        const m5 = I2(p5);
        o4 = he(o4, m5);
      }
      return [t3, r6, "", o4, "", s4, i5, u2, l6, c5, d4, a6, f3, h6].filter((m5) => m5 != null).join(`
`);
    };
    ye = "base10";
    g3 = "base16";
    ge = "base64pad";
    pr = "base64url";
    k3 = "utf8";
    ve = 0;
    D2 = 1;
    M2 = 2;
    mr = 0;
    wn = 1;
    K2 = 12;
    be = 32;
    Sn = "irn";
    Cr = Object.defineProperty;
    Ur = Object.defineProperties;
    _r = Object.getOwnPropertyDescriptors;
    $n = Object.getOwnPropertySymbols;
    kr = Object.prototype.hasOwnProperty;
    Dr = Object.prototype.propertyIsEnumerable;
    Rn = (e3, n7, t3) => n7 in e3 ? Cr(e3, n7, { enumerable: true, configurable: true, writable: true, value: t3 }) : e3[n7] = t3;
    In = (e3, n7) => {
      for (var t3 in n7 || (n7 = {})) kr.call(n7, t3) && Rn(e3, t3, n7[t3]);
      if ($n) for (var t3 of $n(n7)) Dr.call(n7, t3) && Rn(e3, t3, n7[t3]);
      return e3;
    };
    xr = (e3, n7) => Ur(e3, _r(n7));
    Lr = Object.defineProperty;
    Fr = Object.defineProperties;
    qr = Object.getOwnPropertyDescriptors;
    An = Object.getOwnPropertySymbols;
    Br = Object.prototype.hasOwnProperty;
    Hr = Object.prototype.propertyIsEnumerable;
    Cn = (e3, n7, t3) => n7 in e3 ? Lr(e3, n7, { enumerable: true, configurable: true, writable: true, value: t3 }) : e3[n7] = t3;
    Wr = (e3, n7) => {
      for (var t3 in n7 || (n7 = {})) Br.call(n7, t3) && Cn(e3, t3, n7[t3]);
      if (An) for (var t3 of An(n7)) Hr.call(n7, t3) && Cn(e3, t3, n7[t3]);
      return e3;
    };
    Jr = (e3, n7) => Fr(e3, qr(n7));
    Vn = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
    Mn = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
    Re = {};
    bo = class {
      static get(n7) {
        return Re[n7];
      }
      static set(n7, t3) {
        Re[n7] = t3;
      }
      static delete(n7) {
        delete Re[n7];
      }
    };
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var import_dist101, PARSE_ERROR, INVALID_REQUEST, METHOD_NOT_FOUND, INVALID_PARAMS, INTERNAL_ERROR, SERVER_ERROR, RESERVED_ERROR_CODES, SERVER_ERROR_CODE_RANGE, STANDARD_ERROR_MAP, DEFAULT_ERROR;
var init_constants2 = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js"() {
    import_dist101 = __toESM(require_dist());
    PARSE_ERROR = "PARSE_ERROR";
    INVALID_REQUEST = "INVALID_REQUEST";
    METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
    INVALID_PARAMS = "INVALID_PARAMS";
    INTERNAL_ERROR = "INTERNAL_ERROR";
    SERVER_ERROR = "SERVER_ERROR";
    RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
    SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
    STANDARD_ERROR_MAP = {
      [PARSE_ERROR]: { code: -32700, message: "Parse error" },
      [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
      [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
      [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
      [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
      [SERVER_ERROR]: { code: -32e3, message: "Server error" }
    };
    DEFAULT_ERROR = SERVER_ERROR;
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e3) => e3.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e3, url, type) {
  return e3.message.includes("getaddrinfo ENOTFOUND") || e3.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e3;
}
var import_dist102;
var init_error = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js"() {
    import_dist102 = __toESM(require_dist());
    init_constants2();
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_dist103, import_environment, isNodeJs;
var init_env = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js"() {
    import_dist103 = __toESM(require_dist());
    import_environment = __toESM(require_cjs4());
    __reExport(env_exports, __toESM(require_cjs4()));
    isNodeJs = import_environment.isNode;
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id3) {
  return {
    id: id3 || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id3, result) {
  return {
    id: id3,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id3, error, data) {
  return {
    id: id3,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}
var import_dist104;
var init_format = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js"() {
    import_dist104 = __toESM(require_dist());
    init_error();
    init_constants2();
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x6) => x6.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}
var import_dist105;
var init_routing = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js"() {
    import_dist105 = __toESM(require_dist());
  }
});

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var import_dist106, e2, o2, n4, r3;
var init_index_es7 = __esm({
  "node_modules/@walletconnect/jsonrpc-types/dist/index.es.js"() {
    import_dist106 = __toESM(require_dist());
    e2 = class {
    };
    o2 = class extends e2 {
      constructor(c5) {
        super();
      }
    };
    n4 = class extends e2 {
      constructor() {
        super();
      }
    };
    r3 = class extends n4 {
      constructor(c5) {
        super();
      }
    };
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js
var import_dist107;
var init_types2 = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js"() {
    import_dist107 = __toESM(require_dist());
    init_index_es7();
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}
var import_dist108, HTTP_REGEX, WS_REGEX;
var init_url = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js"() {
    import_dist108 = __toESM(require_dist());
    HTTP_REGEX = "^https?:";
    WS_REGEX = "^wss?:";
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}
var import_dist109;
var init_validators = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js"() {
    import_dist109 = __toESM(require_dist());
  }
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n4,
  IEvents: () => e2,
  IJsonRpcConnection: () => o2,
  IJsonRpcProvider: () => r3,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});
var import_dist110;
var init_esm4 = __esm({
  "node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js"() {
    import_dist110 = __toESM(require_dist());
    init_constants2();
    init_error();
    init_env();
    __reExport(esm_exports, env_exports);
    init_format();
    init_routing();
    init_types2();
    init_url();
    init_validators();
  }
});

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_dist111, import_events5, o3;
var init_index_es8 = __esm({
  "node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js"() {
    import_dist111 = __toESM(require_dist());
    import_events5 = __toESM(require_events());
    init_esm4();
    o3 = class extends r3 {
      constructor(t3) {
        super(t3), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t3), this.connection.connected && this.registerEventListeners();
      }
      async connect(t3 = this.connection) {
        await this.open(t3);
      }
      async disconnect() {
        await this.close();
      }
      on(t3, e3) {
        this.events.on(t3, e3);
      }
      once(t3, e3) {
        this.events.once(t3, e3);
      }
      off(t3, e3) {
        this.events.off(t3, e3);
      }
      removeListener(t3, e3) {
        this.events.removeListener(t3, e3);
      }
      async request(t3, e3) {
        return this.requestStrict(formatJsonRpcRequest(t3.method, t3.params || [], t3.id || getBigIntRpcId().toString()), e3);
      }
      async requestStrict(t3, e3) {
        return new Promise(async (i5, s4) => {
          if (!this.connection.connected) try {
            await this.open();
          } catch (n7) {
            s4(n7);
          }
          this.events.on(`${t3.id}`, (n7) => {
            isJsonRpcError(n7) ? s4(n7.error) : i5(n7.result);
          });
          try {
            await this.connection.send(t3, e3);
          } catch (n7) {
            s4(n7);
          }
        });
      }
      setConnection(t3 = this.connection) {
        return t3;
      }
      onPayload(t3) {
        this.events.emit("payload", t3), isJsonRpcResponse(t3) ? this.events.emit(`${t3.id}`, t3) : this.events.emit("message", { type: t3.method, data: t3.params });
      }
      onClose(t3) {
        t3 && t3.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t3.code} ${t3.reason ? `(${t3.reason})` : ""}`)), this.events.emit("disconnect");
      }
      async open(t3 = this.connection) {
        this.connection === t3 && this.connection.connected || (this.connection.connected && this.close(), typeof t3 == "string" && (await this.connection.open(t3), t3 = this.connection), this.connection = this.setConnection(t3), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
      }
      async close() {
        await this.connection.close();
      }
      registerEventListeners() {
        this.hasRegisteredEventListeners || (this.connection.on("payload", (t3) => this.onPayload(t3)), this.connection.on("close", (t3) => this.onClose(t3)), this.connection.on("error", (t3) => this.events.emit("error", t3)), this.connection.on("register_error", (t3) => this.onClose()), this.hasRegisteredEventListeners = true);
      }
    };
  }
});

// node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js
var require_browser3 = __commonJS({
  "node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_dist112, import_events6, v4, w2, d3, h4, b3, f2;
var init_index_es9 = __esm({
  "node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js"() {
    import_dist112 = __toESM(require_dist());
    import_events6 = __toESM(require_events());
    init_esm2();
    init_esm4();
    v4 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser3();
    w2 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
    d3 = (r6) => r6.split("?")[0];
    h4 = 10;
    b3 = v4();
    f2 = class {
      constructor(e3) {
        if (this.url = e3, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e3)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
        this.url = e3;
      }
      get connected() {
        return typeof this.socket < "u";
      }
      get connecting() {
        return this.registering;
      }
      on(e3, t3) {
        this.events.on(e3, t3);
      }
      once(e3, t3) {
        this.events.once(e3, t3);
      }
      off(e3, t3) {
        this.events.off(e3, t3);
      }
      removeListener(e3, t3) {
        this.events.removeListener(e3, t3);
      }
      async open(e3 = this.url) {
        await this.register(e3);
      }
      async close() {
        return new Promise((e3, t3) => {
          if (typeof this.socket > "u") {
            t3(new Error("Connection already closed"));
            return;
          }
          this.socket.onclose = (n7) => {
            this.onClose(n7), e3();
          }, this.socket.close();
        });
      }
      async send(e3) {
        typeof this.socket > "u" && (this.socket = await this.register());
        try {
          this.socket.send(safeJsonStringify(e3));
        } catch (t3) {
          this.onError(e3.id, t3);
        }
      }
      register(e3 = this.url) {
        if (!isWsUrl(e3)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
        if (this.registering) {
          const t3 = this.events.getMaxListeners();
          return (this.events.listenerCount("register_error") >= t3 || this.events.listenerCount("open") >= t3) && this.events.setMaxListeners(t3 + 1), new Promise((n7, s4) => {
            this.events.once("register_error", (o4) => {
              this.resetMaxListeners(), s4(o4);
            }), this.events.once("open", () => {
              if (this.resetMaxListeners(), typeof this.socket > "u") return s4(new Error("WebSocket connection is missing or invalid"));
              n7(this.socket);
            });
          });
        }
        return this.url = e3, this.registering = true, new Promise((t3, n7) => {
          const s4 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e3) }, o4 = new b3(e3, [], s4);
          w2() ? o4.onerror = (i5) => {
            const a6 = i5;
            n7(this.emitError(a6.error));
          } : o4.on("error", (i5) => {
            n7(this.emitError(i5));
          }), o4.onopen = () => {
            this.onOpen(o4), t3(o4);
          };
        });
      }
      onOpen(e3) {
        e3.onmessage = (t3) => this.onPayload(t3), e3.onclose = (t3) => this.onClose(t3), this.socket = e3, this.registering = false, this.events.emit("open");
      }
      onClose(e3) {
        this.socket = void 0, this.registering = false, this.events.emit("close", e3);
      }
      onPayload(e3) {
        if (typeof e3.data > "u") return;
        const t3 = typeof e3.data == "string" ? safeJsonParse(e3.data) : e3.data;
        this.events.emit("payload", t3);
      }
      onError(e3, t3) {
        const n7 = this.parseError(t3), s4 = n7.message || n7.toString(), o4 = formatJsonRpcError(e3, s4);
        this.events.emit("payload", o4);
      }
      parseError(e3, t3 = this.url) {
        return parseConnectionError(e3, d3(t3), "WS");
      }
      resetMaxListeners() {
        this.events.getMaxListeners() > h4 && this.events.setMaxListeners(h4);
      }
      emitError(e3) {
        const t3 = this.parseError(new Error((e3 == null ? void 0 : e3.message) || `WebSocket connection failed for host: ${d3(this.url)}`));
        return this.events.emit("register_error", t3), t3;
      }
    };
  }
});

// node_modules/@walletconnect/core/dist/index.es.js
function zs(o4, e3) {
  if (o4.length >= 255) throw new TypeError("Alphabet too long");
  for (var t3 = new Uint8Array(256), s4 = 0; s4 < t3.length; s4++) t3[s4] = 255;
  for (var i5 = 0; i5 < o4.length; i5++) {
    var r6 = o4.charAt(i5), n7 = r6.charCodeAt(0);
    if (t3[n7] !== 255) throw new TypeError(r6 + " is ambiguous");
    t3[n7] = i5;
  }
  var a6 = o4.length, c5 = o4.charAt(0), h6 = Math.log(a6) / Math.log(256), u2 = Math.log(256) / Math.log(a6);
  function d4(l6) {
    if (l6 instanceof Uint8Array || (ArrayBuffer.isView(l6) ? l6 = new Uint8Array(l6.buffer, l6.byteOffset, l6.byteLength) : Array.isArray(l6) && (l6 = Uint8Array.from(l6))), !(l6 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (l6.length === 0) return "";
    for (var g5 = 0, w4 = 0, b4 = 0, D4 = l6.length; b4 !== D4 && l6[b4] === 0; ) b4++, g5++;
    for (var P5 = (D4 - b4) * u2 + 1 >>> 0, f3 = new Uint8Array(P5); b4 !== D4; ) {
      for (var N13 = l6[b4], k5 = 0, O5 = P5 - 1; (N13 !== 0 || k5 < w4) && O5 !== -1; O5--, k5++) N13 += 256 * f3[O5] >>> 0, f3[O5] = N13 % a6 >>> 0, N13 = N13 / a6 >>> 0;
      if (N13 !== 0) throw new Error("Non-zero carry");
      w4 = k5, b4++;
    }
    for (var L3 = P5 - w4; L3 !== P5 && f3[L3] === 0; ) L3++;
    for (var ee2 = c5.repeat(g5); L3 < P5; ++L3) ee2 += o4.charAt(f3[L3]);
    return ee2;
  }
  function y5(l6) {
    if (typeof l6 != "string") throw new TypeError("Expected String");
    if (l6.length === 0) return new Uint8Array();
    var g5 = 0;
    if (l6[g5] !== " ") {
      for (var w4 = 0, b4 = 0; l6[g5] === c5; ) w4++, g5++;
      for (var D4 = (l6.length - g5) * h6 + 1 >>> 0, P5 = new Uint8Array(D4); l6[g5]; ) {
        var f3 = t3[l6.charCodeAt(g5)];
        if (f3 === 255) return;
        for (var N13 = 0, k5 = D4 - 1; (f3 !== 0 || N13 < b4) && k5 !== -1; k5--, N13++) f3 += a6 * P5[k5] >>> 0, P5[k5] = f3 % 256 >>> 0, f3 = f3 / 256 >>> 0;
        if (f3 !== 0) throw new Error("Non-zero carry");
        b4 = N13, g5++;
      }
      if (l6[g5] !== " ") {
        for (var O5 = D4 - b4; O5 !== D4 && P5[O5] === 0; ) O5++;
        for (var L3 = new Uint8Array(w4 + (D4 - O5)), ee2 = w4; O5 !== D4; ) L3[ee2++] = P5[O5++];
        return L3;
      }
    }
  }
  function m5(l6) {
    var g5 = y5(l6);
    if (g5) return g5;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: d4, decodeUnsafe: y5, decode: m5 };
}
function Tr2(o4) {
  return o4.reduce((e3, t3) => (e3 += wr2[t3], e3), "");
}
function Cr2(o4) {
  const e3 = [];
  for (const t3 of o4) {
    const s4 = Ir2[t3.codePointAt(0)];
    if (s4 === void 0) throw new Error(`Non-base256emoji character: ${t3}`);
    e3.push(s4);
  }
  return new Uint8Array(e3);
}
function Lt2(o4, e3, t3) {
  e3 = e3 || [], t3 = t3 || 0;
  for (var s4 = t3; o4 >= Ar2; ) e3[t3++] = o4 & 255 | zt2, o4 /= 128;
  for (; o4 & Or2; ) e3[t3++] = o4 & 255 | zt2, o4 >>>= 7;
  return e3[t3] = o4 | 0, Lt2.bytes = t3 - s4 + 1, e3;
}
function _e2(o4, s4) {
  var t3 = 0, s4 = s4 || 0, i5 = 0, r6 = s4, n7, a6 = o4.length;
  do {
    if (r6 >= a6) throw _e2.bytes = 0, new RangeError("Could not decode varint");
    n7 = o4[r6++], t3 += i5 < 28 ? (n7 & $t2) << i5 : (n7 & $t2) * Math.pow(2, i5), i5 += 7;
  } while (n7 >= zr2);
  return _e2.bytes = r6 - s4, t3;
}
function tn2(o4 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(o4) : new Uint8Array(o4);
}
function qt2(o4, e3, t3, s4) {
  return { name: o4, prefix: e3, encoder: { name: o4, prefix: e3, encode: t3 }, decoder: { decode: s4 } };
}
function rn2(o4, e3 = "utf8") {
  const t3 = sn2[e3];
  if (!t3) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(o4, "utf8") : t3.decoder.decode(`${t3.prefix}${o4}`);
}
var import_dist113, import_events7, import_time4, import_lodash, import_window_getters2, ye2, De2, J2, A3, Xe2, We2, Ze2, me2, Qe2, et2, tt, it2, st2, be2, rt, nt, ot, fe2, at2, v5, ct, C5, ht2, re2, M3, lt, ut2, ve2, T3, dt, pt2, gt2, yt2, Dt2, V2, j2, R2, mt2, bt2, ft2, x4, vt2, _t2, Ss, Et2, X2, wt2, It2, Tt2, Ct2, z4, $2, xs, Os, As, Ns, Pt2, St2, Rt2, xt2, Ls, $s, Ot2, ks, Us, Fs, Ms, Ks, At2, Bs, ne2, W2, Vs, js, _4, qs, Gs, Hs, Ys, Js, Xs, Ws, Zs, Qs, er2, tr2, ir2, sr2, rr2, nr2, or3, ar2, cr2, hr2, lr2, ur2, dr2, pr2, gr2, yr2, Dr2, mr2, br2, fr2, vr2, _r2, Er2, Nt2, wr2, Ir2, Pr2, Sr2, Rr2, zt2, xr2, Or2, Ar2, Nr2, zr2, $t2, Lr2, $r2, kr2, Ur2, Fr2, Mr2, Kr2, Br2, Vr2, jr2, qr2, kt2, Ut2, Ft2, Ee2, Gr2, Mt2, Hr2, Kt2, Yr2, Jr2, Xr2, Bt3, Wr2, Vt2, Zr2, Qr2, en2, jt2, Gt2, we2, sn2, Ht2, Yt2, Jt2, nn2, on2, an2, Xt2, cn2, hn2, Wt2, Zt2, Qt2, ln2, un2, dn2, pn2, gn2, ei, yn2, Dn2, ti, Z2, Ie2, ii, mn2, si, bn2, fn2, ri, ni, oi, vn2, ai, _n2, En2, ci, hi, li, ui, di, pi, gi, yi, wn2, Di, In2, Tn2, mi, Q3, bi, Cn2, fi, Pn2, Sn2, vi, _i, oe2, Rn2;
var init_index_es10 = __esm({
  "node_modules/@walletconnect/core/dist/index.es.js"() {
    import_dist113 = __toESM(require_dist());
    import_events7 = __toESM(require_events());
    init_index_es();
    init_index_es2();
    init_index_es3();
    init_index_es4();
    import_time4 = __toESM(require_cjs());
    init_esm2();
    init_esm3();
    init_esm3();
    init_index_es6();
    init_src2();
    init_index_es8();
    init_esm4();
    init_index_es9();
    import_lodash = __toESM(require_lodash());
    import_window_getters2 = __toESM(require_cjs2());
    ye2 = "wc";
    De2 = 2;
    J2 = "core";
    A3 = `${ye2}@2:${J2}:`;
    Xe2 = { name: J2, logger: "error" };
    We2 = { database: ":memory:" };
    Ze2 = "crypto";
    me2 = "client_ed25519_seed";
    Qe2 = import_time4.ONE_DAY;
    et2 = "keychain";
    tt = "0.3";
    it2 = "messages";
    st2 = "0.3";
    be2 = import_time4.SIX_HOURS;
    rt = "publisher";
    nt = "irn";
    ot = "error";
    fe2 = "wss://relay.walletconnect.org";
    at2 = "relayer";
    v5 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
    ct = "_subscription";
    C5 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
    ht2 = 0.1;
    re2 = "2.17.3";
    M3 = { link_mode: "link_mode", relay: "relay" };
    lt = "0.3";
    ut2 = "WALLETCONNECT_CLIENT_ID";
    ve2 = "WALLETCONNECT_LINK_MODE_APPS";
    T3 = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
    dt = "subscription";
    pt2 = "0.3";
    gt2 = import_time4.FIVE_SECONDS * 1e3;
    yt2 = "pairing";
    Dt2 = "0.3";
    V2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
    j2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
    R2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
    mt2 = "history";
    bt2 = "0.3";
    ft2 = "expirer";
    x4 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
    vt2 = "0.3";
    _t2 = "verify-api";
    Ss = "https://verify.walletconnect.com";
    Et2 = "https://verify.walletconnect.org";
    X2 = Et2;
    wt2 = `${X2}/v3`;
    It2 = [Ss, Et2];
    Tt2 = "echo";
    Ct2 = "https://echo.walletconnect.com";
    z4 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
    $2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
    xs = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
    Os = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
    As = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
    Ns = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
    Pt2 = 0.1;
    St2 = "event-client";
    Rt2 = 86400;
    xt2 = "https://pulse.walletconnect.org/batch";
    Ls = zs;
    $s = Ls;
    Ot2 = (o4) => {
      if (o4 instanceof Uint8Array && o4.constructor.name === "Uint8Array") return o4;
      if (o4 instanceof ArrayBuffer) return new Uint8Array(o4);
      if (ArrayBuffer.isView(o4)) return new Uint8Array(o4.buffer, o4.byteOffset, o4.byteLength);
      throw new Error("Unknown type, must be binary type");
    };
    ks = (o4) => new TextEncoder().encode(o4);
    Us = (o4) => new TextDecoder().decode(o4);
    Fs = class {
      constructor(e3, t3, s4) {
        this.name = e3, this.prefix = t3, this.baseEncode = s4;
      }
      encode(e3) {
        if (e3 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e3)}`;
        throw Error("Unknown type, must be binary type");
      }
    };
    Ms = class {
      constructor(e3, t3, s4) {
        if (this.name = e3, this.prefix = t3, t3.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
        this.prefixCodePoint = t3.codePointAt(0), this.baseDecode = s4;
      }
      decode(e3) {
        if (typeof e3 == "string") {
          if (e3.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
          return this.baseDecode(e3.slice(this.prefix.length));
        } else throw Error("Can only multibase decode strings");
      }
      or(e3) {
        return At2(this, e3);
      }
    };
    Ks = class {
      constructor(e3) {
        this.decoders = e3;
      }
      or(e3) {
        return At2(this, e3);
      }
      decode(e3) {
        const t3 = e3[0], s4 = this.decoders[t3];
        if (s4) return s4.decode(e3);
        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
      }
    };
    At2 = (o4, e3) => new Ks({ ...o4.decoders || { [o4.prefix]: o4 }, ...e3.decoders || { [e3.prefix]: e3 } });
    Bs = class {
      constructor(e3, t3, s4, i5) {
        this.name = e3, this.prefix = t3, this.baseEncode = s4, this.baseDecode = i5, this.encoder = new Fs(e3, t3, s4), this.decoder = new Ms(e3, t3, i5);
      }
      encode(e3) {
        return this.encoder.encode(e3);
      }
      decode(e3) {
        return this.decoder.decode(e3);
      }
    };
    ne2 = ({ name: o4, prefix: e3, encode: t3, decode: s4 }) => new Bs(o4, e3, t3, s4);
    W2 = ({ prefix: o4, name: e3, alphabet: t3 }) => {
      const { encode: s4, decode: i5 } = $s(t3, e3);
      return ne2({ prefix: o4, name: e3, encode: s4, decode: (r6) => Ot2(i5(r6)) });
    };
    Vs = (o4, e3, t3, s4) => {
      const i5 = {};
      for (let u2 = 0; u2 < e3.length; ++u2) i5[e3[u2]] = u2;
      let r6 = o4.length;
      for (; o4[r6 - 1] === "="; ) --r6;
      const n7 = new Uint8Array(r6 * t3 / 8 | 0);
      let a6 = 0, c5 = 0, h6 = 0;
      for (let u2 = 0; u2 < r6; ++u2) {
        const d4 = i5[o4[u2]];
        if (d4 === void 0) throw new SyntaxError(`Non-${s4} character`);
        c5 = c5 << t3 | d4, a6 += t3, a6 >= 8 && (a6 -= 8, n7[h6++] = 255 & c5 >> a6);
      }
      if (a6 >= t3 || 255 & c5 << 8 - a6) throw new SyntaxError("Unexpected end of data");
      return n7;
    };
    js = (o4, e3, t3) => {
      const s4 = e3[e3.length - 1] === "=", i5 = (1 << t3) - 1;
      let r6 = "", n7 = 0, a6 = 0;
      for (let c5 = 0; c5 < o4.length; ++c5) for (a6 = a6 << 8 | o4[c5], n7 += 8; n7 > t3; ) n7 -= t3, r6 += e3[i5 & a6 >> n7];
      if (n7 && (r6 += e3[i5 & a6 << t3 - n7]), s4) for (; r6.length * t3 & 7; ) r6 += "=";
      return r6;
    };
    _4 = ({ name: o4, prefix: e3, bitsPerChar: t3, alphabet: s4 }) => ne2({ prefix: e3, name: o4, encode(i5) {
      return js(i5, s4, t3);
    }, decode(i5) {
      return Vs(i5, s4, t3, o4);
    } });
    qs = ne2({ prefix: "\0", name: "identity", encode: (o4) => Us(o4), decode: (o4) => ks(o4) });
    Gs = Object.freeze({ __proto__: null, identity: qs });
    Hs = _4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
    Ys = Object.freeze({ __proto__: null, base2: Hs });
    Js = _4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
    Xs = Object.freeze({ __proto__: null, base8: Js });
    Ws = W2({ prefix: "9", name: "base10", alphabet: "0123456789" });
    Zs = Object.freeze({ __proto__: null, base10: Ws });
    Qs = _4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
    er2 = _4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
    tr2 = Object.freeze({ __proto__: null, base16: Qs, base16upper: er2 });
    ir2 = _4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
    sr2 = _4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
    rr2 = _4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
    nr2 = _4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
    or3 = _4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
    ar2 = _4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
    cr2 = _4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
    hr2 = _4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
    lr2 = _4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
    ur2 = Object.freeze({ __proto__: null, base32: ir2, base32upper: sr2, base32pad: rr2, base32padupper: nr2, base32hex: or3, base32hexupper: ar2, base32hexpad: cr2, base32hexpadupper: hr2, base32z: lr2 });
    dr2 = W2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
    pr2 = W2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
    gr2 = Object.freeze({ __proto__: null, base36: dr2, base36upper: pr2 });
    yr2 = W2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
    Dr2 = W2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
    mr2 = Object.freeze({ __proto__: null, base58btc: yr2, base58flickr: Dr2 });
    br2 = _4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
    fr2 = _4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
    vr2 = _4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
    _r2 = _4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
    Er2 = Object.freeze({ __proto__: null, base64: br2, base64pad: fr2, base64url: vr2, base64urlpad: _r2 });
    Nt2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
    wr2 = Nt2.reduce((o4, e3, t3) => (o4[t3] = e3, o4), []);
    Ir2 = Nt2.reduce((o4, e3, t3) => (o4[e3.codePointAt(0)] = t3, o4), []);
    Pr2 = ne2({ prefix: "🚀", name: "base256emoji", encode: Tr2, decode: Cr2 });
    Sr2 = Object.freeze({ __proto__: null, base256emoji: Pr2 });
    Rr2 = Lt2;
    zt2 = 128;
    xr2 = 127;
    Or2 = ~xr2;
    Ar2 = Math.pow(2, 31);
    Nr2 = _e2;
    zr2 = 128;
    $t2 = 127;
    Lr2 = Math.pow(2, 7);
    $r2 = Math.pow(2, 14);
    kr2 = Math.pow(2, 21);
    Ur2 = Math.pow(2, 28);
    Fr2 = Math.pow(2, 35);
    Mr2 = Math.pow(2, 42);
    Kr2 = Math.pow(2, 49);
    Br2 = Math.pow(2, 56);
    Vr2 = Math.pow(2, 63);
    jr2 = function(o4) {
      return o4 < Lr2 ? 1 : o4 < $r2 ? 2 : o4 < kr2 ? 3 : o4 < Ur2 ? 4 : o4 < Fr2 ? 5 : o4 < Mr2 ? 6 : o4 < Kr2 ? 7 : o4 < Br2 ? 8 : o4 < Vr2 ? 9 : 10;
    };
    qr2 = { encode: Rr2, decode: Nr2, encodingLength: jr2 };
    kt2 = qr2;
    Ut2 = (o4, e3, t3 = 0) => (kt2.encode(o4, e3, t3), e3);
    Ft2 = (o4) => kt2.encodingLength(o4);
    Ee2 = (o4, e3) => {
      const t3 = e3.byteLength, s4 = Ft2(o4), i5 = s4 + Ft2(t3), r6 = new Uint8Array(i5 + t3);
      return Ut2(o4, r6, 0), Ut2(t3, r6, s4), r6.set(e3, i5), new Gr2(o4, t3, e3, r6);
    };
    Gr2 = class {
      constructor(e3, t3, s4, i5) {
        this.code = e3, this.size = t3, this.digest = s4, this.bytes = i5;
      }
    };
    Mt2 = ({ name: o4, code: e3, encode: t3 }) => new Hr2(o4, e3, t3);
    Hr2 = class {
      constructor(e3, t3, s4) {
        this.name = e3, this.code = t3, this.encode = s4;
      }
      digest(e3) {
        if (e3 instanceof Uint8Array) {
          const t3 = this.encode(e3);
          return t3 instanceof Uint8Array ? Ee2(this.code, t3) : t3.then((s4) => Ee2(this.code, s4));
        } else throw Error("Unknown type, must be binary type");
      }
    };
    Kt2 = (o4) => async (e3) => new Uint8Array(await crypto.subtle.digest(o4, e3));
    Yr2 = Mt2({ name: "sha2-256", code: 18, encode: Kt2("SHA-256") });
    Jr2 = Mt2({ name: "sha2-512", code: 19, encode: Kt2("SHA-512") });
    Xr2 = Object.freeze({ __proto__: null, sha256: Yr2, sha512: Jr2 });
    Bt3 = 0;
    Wr2 = "identity";
    Vt2 = Ot2;
    Zr2 = (o4) => Ee2(Bt3, Vt2(o4));
    Qr2 = { code: Bt3, name: Wr2, encode: Vt2, digest: Zr2 };
    en2 = Object.freeze({ __proto__: null, identity: Qr2 });
    new TextEncoder(), new TextDecoder();
    jt2 = { ...Gs, ...Ys, ...Xs, ...Zs, ...tr2, ...ur2, ...gr2, ...mr2, ...Er2, ...Sr2 };
    ({ ...Xr2, ...en2 });
    Gt2 = qt2("utf8", "u", (o4) => "u" + new TextDecoder("utf8").decode(o4), (o4) => new TextEncoder().encode(o4.substring(1)));
    we2 = qt2("ascii", "a", (o4) => {
      let e3 = "a";
      for (let t3 = 0; t3 < o4.length; t3++) e3 += String.fromCharCode(o4[t3]);
      return e3;
    }, (o4) => {
      o4 = o4.substring(1);
      const e3 = tn2(o4.length);
      for (let t3 = 0; t3 < o4.length; t3++) e3[t3] = o4.charCodeAt(t3);
      return e3;
    });
    sn2 = { utf8: Gt2, "utf-8": Gt2, hex: jt2.base16, latin1: we2, ascii: we2, binary: we2, ...jt2 };
    Ht2 = class {
      constructor(e3, t3) {
        this.core = e3, this.logger = t3, this.keychain = /* @__PURE__ */ new Map(), this.name = et2, this.version = tt, this.initialized = false, this.storagePrefix = A3, this.init = async () => {
          if (!this.initialized) {
            const s4 = await this.getKeyChain();
            typeof s4 < "u" && (this.keychain = s4), this.initialized = true;
          }
        }, this.has = (s4) => (this.isInitialized(), this.keychain.has(s4)), this.set = async (s4, i5) => {
          this.isInitialized(), this.keychain.set(s4, i5), await this.persist();
        }, this.get = (s4) => {
          this.isInitialized();
          const i5 = this.keychain.get(s4);
          if (typeof i5 > "u") {
            const { message: r6 } = S3("NO_MATCHING_KEY", `${this.name}: ${s4}`);
            throw new Error(r6);
          }
          return i5;
        }, this.del = async (s4) => {
          this.isInitialized(), this.keychain.delete(s4), await this.persist();
        }, this.core = e3, this.logger = E2(t3, this.name);
      }
      get context() {
        return y2(this.logger);
      }
      get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
      }
      async setKeyChain(e3) {
        await this.core.storage.setItem(this.storageKey, At(e3));
      }
      async getKeyChain() {
        const e3 = await this.core.storage.getItem(this.storageKey);
        return typeof e3 < "u" ? Ct(e3) : void 0;
      }
      async persist() {
        await this.setKeyChain(this.keychain);
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
    };
    Yt2 = class {
      constructor(e3, t3, s4) {
        this.core = e3, this.logger = t3, this.name = Ze2, this.randomSessionIdentifier = yr(), this.initialized = false, this.init = async () => {
          this.initialized || (await this.keychain.init(), this.initialized = true);
        }, this.hasKeys = (i5) => (this.isInitialized(), this.keychain.has(i5)), this.getClientId = async () => {
          this.isInitialized();
          const i5 = await this.getClientSeed(), r6 = generateKeyPair(i5);
          return encodeIss(r6.publicKey);
        }, this.generateKeyPair = () => {
          this.isInitialized();
          const i5 = hr();
          return this.setPrivateKey(i5.publicKey, i5.privateKey);
        }, this.signJWT = async (i5) => {
          this.isInitialized();
          const r6 = await this.getClientSeed(), n7 = generateKeyPair(r6), a6 = this.randomSessionIdentifier, c5 = Qe2;
          return await signJWT(a6, i5, c5, n7);
        }, this.generateSharedKey = (i5, r6, n7) => {
          this.isInitialized();
          const a6 = this.getPrivateKey(i5), c5 = gr(a6, r6);
          return this.setSymKey(c5, n7);
        }, this.setSymKey = async (i5, r6) => {
          this.isInitialized();
          const n7 = r6 || vr(i5);
          return await this.keychain.set(n7, i5), n7;
        }, this.deleteKeyPair = async (i5) => {
          this.isInitialized(), await this.keychain.del(i5);
        }, this.deleteSymKey = async (i5) => {
          this.isInitialized(), await this.keychain.del(i5);
        }, this.encode = async (i5, r6, n7) => {
          this.isInitialized();
          const a6 = On(n7), c5 = safeJsonStringify(r6);
          if (Rr(a6)) return wr(c5, n7 == null ? void 0 : n7.encoding);
          if ($r(a6)) {
            const y5 = a6.senderPublicKey, m5 = a6.receiverPublicKey;
            i5 = await this.generateSharedKey(y5, m5);
          }
          const h6 = this.getSymKey(i5), { type: u2, senderPublicKey: d4 } = a6;
          return Er({ type: u2, symKey: h6, message: c5, senderPublicKey: d4, encoding: n7 == null ? void 0 : n7.encoding });
        }, this.decode = async (i5, r6, n7) => {
          this.isInitialized();
          const a6 = Sr(r6, n7);
          if (Rr(a6)) {
            const c5 = Nr(r6, n7 == null ? void 0 : n7.encoding);
            return safeJsonParse(c5);
          }
          if ($r(a6)) {
            const c5 = a6.receiverPublicKey, h6 = a6.senderPublicKey;
            i5 = await this.generateSharedKey(c5, h6);
          }
          try {
            const c5 = this.getSymKey(i5), h6 = Or({ symKey: c5, encoded: r6, encoding: n7 == null ? void 0 : n7.encoding });
            return safeJsonParse(h6);
          } catch (c5) {
            this.logger.error(`Failed to decode message from topic: '${i5}', clientId: '${await this.getClientId()}'`), this.logger.error(c5);
          }
        }, this.getPayloadType = (i5, r6 = ge) => {
          const n7 = Q2({ encoded: i5, encoding: r6 });
          return C4(n7.type);
        }, this.getPayloadSenderPublicKey = (i5, r6 = ge) => {
          const n7 = Q2({ encoded: i5, encoding: r6 });
          return n7.senderPublicKey ? toString3(n7.senderPublicKey, g3) : void 0;
        }, this.core = e3, this.logger = E2(t3, this.name), this.keychain = s4 || new Ht2(this.core, this.logger);
      }
      get context() {
        return y2(this.logger);
      }
      async setPrivateKey(e3, t3) {
        return await this.keychain.set(e3, t3), e3;
      }
      getPrivateKey(e3) {
        return this.keychain.get(e3);
      }
      async getClientSeed() {
        let e3 = "";
        try {
          e3 = this.keychain.get(me2);
        } catch {
          e3 = yr(), await this.keychain.set(me2, e3);
        }
        return rn2(e3, "base16");
      }
      getSymKey(e3) {
        return this.keychain.get(e3);
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
    };
    Jt2 = class extends a2 {
      constructor(e3, t3) {
        super(e3, t3), this.logger = e3, this.core = t3, this.messages = /* @__PURE__ */ new Map(), this.name = it2, this.version = st2, this.initialized = false, this.storagePrefix = A3, this.init = async () => {
          if (!this.initialized) {
            this.logger.trace("Initialized");
            try {
              const s4 = await this.getRelayerMessages();
              typeof s4 < "u" && (this.messages = s4), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
            } catch (s4) {
              this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s4);
            } finally {
              this.initialized = true;
            }
          }
        }, this.set = async (s4, i5) => {
          this.isInitialized();
          const r6 = br(i5);
          let n7 = this.messages.get(s4);
          return typeof n7 > "u" && (n7 = {}), typeof n7[r6] < "u" || (n7[r6] = i5, this.messages.set(s4, n7), await this.persist()), r6;
        }, this.get = (s4) => {
          this.isInitialized();
          let i5 = this.messages.get(s4);
          return typeof i5 > "u" && (i5 = {}), i5;
        }, this.has = (s4, i5) => {
          this.isInitialized();
          const r6 = this.get(s4), n7 = br(i5);
          return typeof r6[n7] < "u";
        }, this.del = async (s4) => {
          this.isInitialized(), this.messages.delete(s4), await this.persist();
        }, this.logger = E2(e3, this.name), this.core = t3;
      }
      get context() {
        return y2(this.logger);
      }
      get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
      }
      async setRelayerMessages(e3) {
        await this.core.storage.setItem(this.storageKey, At(e3));
      }
      async getRelayerMessages() {
        const e3 = await this.core.storage.getItem(this.storageKey);
        return typeof e3 < "u" ? Ct(e3) : void 0;
      }
      async persist() {
        await this.setRelayerMessages(this.messages);
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
    };
    nn2 = Object.defineProperty;
    on2 = Object.defineProperties;
    an2 = Object.getOwnPropertyDescriptors;
    Xt2 = Object.getOwnPropertySymbols;
    cn2 = Object.prototype.hasOwnProperty;
    hn2 = Object.prototype.propertyIsEnumerable;
    Wt2 = (o4, e3, t3) => e3 in o4 ? nn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
    Zt2 = (o4, e3) => {
      for (var t3 in e3 || (e3 = {})) cn2.call(e3, t3) && Wt2(o4, t3, e3[t3]);
      if (Xt2) for (var t3 of Xt2(e3)) hn2.call(e3, t3) && Wt2(o4, t3, e3[t3]);
      return o4;
    };
    Qt2 = (o4, e3) => on2(o4, an2(e3));
    ln2 = class extends g2 {
      constructor(e3, t3) {
        super(e3, t3), this.relayer = e3, this.logger = t3, this.events = new import_events7.EventEmitter(), this.name = rt, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE), this.initialPublishTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15), this.needsTransportRestart = false, this.publish = async (s4, i5, r6) => {
          var n7;
          this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s4, message: i5, opts: r6 } });
          const a6 = (r6 == null ? void 0 : r6.ttl) || be2, c5 = Tr(r6), h6 = (r6 == null ? void 0 : r6.prompt) || false, u2 = (r6 == null ? void 0 : r6.tag) || 0, d4 = (r6 == null ? void 0 : r6.id) || getBigIntRpcId().toString(), y5 = { topic: s4, message: i5, opts: { ttl: a6, relay: c5, prompt: h6, tag: u2, id: d4, attestation: r6 == null ? void 0 : r6.attestation } }, m5 = `Failed to publish payload, please try again. id:${d4} tag:${u2}`;
          try {
            const l6 = new Promise(async (g5) => {
              const w4 = ({ id: D4 }) => {
                y5.opts.id === D4 && (this.removeRequestFromQueue(D4), this.relayer.events.removeListener(v5.publish, w4), g5(y5));
              };
              this.relayer.events.on(v5.publish, w4);
              const b4 = xt(new Promise((D4, P5) => {
                this.rpcPublish({ topic: s4, message: i5, ttl: a6, prompt: h6, tag: u2, id: d4, attestation: r6 == null ? void 0 : r6.attestation }).then(D4).catch((f3) => {
                  this.logger.warn(f3, f3 == null ? void 0 : f3.message), P5(f3);
                });
              }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d4} tag:${u2}`);
              try {
                await b4, this.events.removeListener(v5.publish, w4);
              } catch (D4) {
                this.queue.set(d4, Qt2(Zt2({}, y5), { attempt: 1 })), this.logger.warn(D4, D4 == null ? void 0 : D4.message);
              }
            });
            this.logger.trace({ type: "method", method: "publish", params: { id: d4, topic: s4, message: i5, opts: r6 } }), await xt(l6, this.publishTimeout, m5);
          } catch (l6) {
            if (this.logger.debug("Failed to Publish Payload"), this.logger.error(l6), (n7 = r6 == null ? void 0 : r6.internal) != null && n7.throwOnFailedPublish) throw l6;
          } finally {
            this.queue.delete(d4);
          }
        }, this.on = (s4, i5) => {
          this.events.on(s4, i5);
        }, this.once = (s4, i5) => {
          this.events.once(s4, i5);
        }, this.off = (s4, i5) => {
          this.events.off(s4, i5);
        }, this.removeListener = (s4, i5) => {
          this.events.removeListener(s4, i5);
        }, this.relayer = e3, this.logger = E2(t3, this.name), this.registerEventListeners();
      }
      get context() {
        return y2(this.logger);
      }
      async rpcPublish(e3) {
        var t3, s4, i5, r6;
        const { topic: n7, message: a6, ttl: c5 = be2, prompt: h6, tag: u2, id: d4, attestation: y5 } = e3, m5 = { method: Ar(Tr().protocol).publish, params: { topic: n7, message: a6, ttl: c5, prompt: h6, tag: u2, attestation: y5 }, id: d4 };
        P2((t3 = m5.params) == null ? void 0 : t3.prompt) && ((s4 = m5.params) == null || delete s4.prompt), P2((i5 = m5.params) == null ? void 0 : i5.tag) && ((r6 = m5.params) == null || delete r6.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: m5 });
        const l6 = await this.relayer.request(m5);
        return this.relayer.events.emit(v5.publish, e3), this.logger.debug("Successfully Published Payload"), l6;
      }
      removeRequestFromQueue(e3) {
        this.queue.delete(e3);
      }
      checkQueue() {
        this.queue.forEach(async (e3, t3) => {
          const s4 = e3.attempt + 1;
          this.queue.set(t3, Qt2(Zt2({}, e3), { attempt: s4 }));
          const { topic: i5, message: r6, opts: n7, attestation: a6 } = e3;
          this.logger.warn({}, `Publisher: queue->publishing: ${e3.opts.id}, tag: ${e3.opts.tag}, attempt: ${s4}`), await this.rpcPublish({ topic: i5, message: r6, ttl: n7.ttl, prompt: n7.prompt, tag: n7.tag, id: n7.id, attestation: a6 }), this.logger.warn({}, `Publisher: queue->published: ${e3.opts.id}`);
        });
      }
      registerEventListeners() {
        this.relayer.core.heartbeat.on(r.pulse, () => {
          if (this.needsTransportRestart) {
            this.needsTransportRestart = false, this.relayer.events.emit(v5.connection_stalled);
            return;
          }
          this.checkQueue();
        }), this.relayer.on(v5.message_ack, (e3) => {
          this.removeRequestFromQueue(e3.id.toString());
        });
      }
    };
    un2 = class {
      constructor() {
        this.map = /* @__PURE__ */ new Map(), this.set = (e3, t3) => {
          const s4 = this.get(e3);
          this.exists(e3, t3) || this.map.set(e3, [...s4, t3]);
        }, this.get = (e3) => this.map.get(e3) || [], this.exists = (e3, t3) => this.get(e3).includes(t3), this.delete = (e3, t3) => {
          if (typeof t3 > "u") {
            this.map.delete(e3);
            return;
          }
          if (!this.map.has(e3)) return;
          const s4 = this.get(e3);
          if (!this.exists(e3, t3)) return;
          const i5 = s4.filter((r6) => r6 !== t3);
          if (!i5.length) {
            this.map.delete(e3);
            return;
          }
          this.map.set(e3, i5);
        }, this.clear = () => {
          this.map.clear();
        };
      }
      get topics() {
        return Array.from(this.map.keys());
      }
    };
    dn2 = Object.defineProperty;
    pn2 = Object.defineProperties;
    gn2 = Object.getOwnPropertyDescriptors;
    ei = Object.getOwnPropertySymbols;
    yn2 = Object.prototype.hasOwnProperty;
    Dn2 = Object.prototype.propertyIsEnumerable;
    ti = (o4, e3, t3) => e3 in o4 ? dn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
    Z2 = (o4, e3) => {
      for (var t3 in e3 || (e3 = {})) yn2.call(e3, t3) && ti(o4, t3, e3[t3]);
      if (ei) for (var t3 of ei(e3)) Dn2.call(e3, t3) && ti(o4, t3, e3[t3]);
      return o4;
    };
    Ie2 = (o4, e3) => pn2(o4, gn2(e3));
    ii = class extends d2 {
      constructor(e3, t3) {
        super(e3, t3), this.relayer = e3, this.logger = t3, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new un2(), this.events = new import_events7.EventEmitter(), this.name = dt, this.version = pt2, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = false, this.pendingSubscriptionWatchLabel = "pending_sub_watch_label", this.pollingInterval = 20, this.storagePrefix = A3, this.subscribeTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE), this.initialSubscribeTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15), this.batchSubscribeTopicsLimit = 500, this.init = async () => {
          this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId(), await this.restore()), this.initialized = true;
        }, this.subscribe = async (s4, i5) => {
          this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s4, opts: i5 } });
          try {
            const r6 = Tr(i5), n7 = { topic: s4, relay: r6, transportType: i5 == null ? void 0 : i5.transportType };
            this.pending.set(s4, n7);
            const a6 = await this.rpcSubscribe(s4, r6, i5);
            return typeof a6 == "string" && (this.onSubscribe(a6, n7), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s4, opts: i5 } })), a6;
          } catch (r6) {
            throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(r6), r6;
          }
        }, this.unsubscribe = async (s4, i5) => {
          await this.restartToComplete(), this.isInitialized(), typeof (i5 == null ? void 0 : i5.id) < "u" ? await this.unsubscribeById(s4, i5.id, i5) : await this.unsubscribeByTopic(s4, i5);
        }, this.isSubscribed = async (s4) => {
          if (this.topics.includes(s4)) return true;
          const i5 = `${this.pendingSubscriptionWatchLabel}_${s4}`;
          return await new Promise((r6, n7) => {
            const a6 = new import_time4.Watch();
            a6.start(i5);
            const c5 = setInterval(() => {
              (!this.pending.has(s4) && this.topics.includes(s4) || this.cached.some((h6) => h6.topic === s4)) && (clearInterval(c5), a6.stop(i5), r6(true)), a6.elapsed(i5) >= gt2 && (clearInterval(c5), a6.stop(i5), n7(new Error("Subscription resolution timeout")));
            }, this.pollingInterval);
          }).catch(() => false);
        }, this.on = (s4, i5) => {
          this.events.on(s4, i5);
        }, this.once = (s4, i5) => {
          this.events.once(s4, i5);
        }, this.off = (s4, i5) => {
          this.events.off(s4, i5);
        }, this.removeListener = (s4, i5) => {
          this.events.removeListener(s4, i5);
        }, this.start = async () => {
          await this.onConnect();
        }, this.stop = async () => {
          await this.onDisconnect();
        }, this.restart = async () => {
          await this.restore(), await this.onRestart();
        }, this.checkPending = async () => {
          if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
          const s4 = [];
          this.pending.forEach((i5) => {
            s4.push(i5);
          }), await this.batchSubscribe(s4);
        }, this.registerEventListeners = () => {
          this.relayer.core.heartbeat.on(r.pulse, async () => {
            await this.checkPending();
          }), this.events.on(T3.created, async (s4) => {
            const i5 = T3.created;
            this.logger.info(`Emitting ${i5}`), this.logger.debug({ type: "event", event: i5, data: s4 }), await this.persist();
          }), this.events.on(T3.deleted, async (s4) => {
            const i5 = T3.deleted;
            this.logger.info(`Emitting ${i5}`), this.logger.debug({ type: "event", event: i5, data: s4 }), await this.persist();
          });
        }, this.relayer = e3, this.logger = E2(t3, this.name), this.clientId = "";
      }
      get context() {
        return y2(this.logger);
      }
      get storageKey() {
        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
      }
      get length() {
        return this.subscriptions.size;
      }
      get ids() {
        return Array.from(this.subscriptions.keys());
      }
      get values() {
        return Array.from(this.subscriptions.values());
      }
      get topics() {
        return this.topicMap.topics;
      }
      hasSubscription(e3, t3) {
        let s4 = false;
        try {
          s4 = this.getSubscription(e3).topic === t3;
        } catch {
        }
        return s4;
      }
      reset() {
        this.cached = [], this.initialized = true;
      }
      onDisable() {
        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
      }
      async unsubscribeByTopic(e3, t3) {
        const s4 = this.topicMap.get(e3);
        await Promise.all(s4.map(async (i5) => await this.unsubscribeById(e3, i5, t3)));
      }
      async unsubscribeById(e3, t3, s4) {
        this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t3, opts: s4 } });
        try {
          const i5 = Tr(s4);
          await this.rpcUnsubscribe(e3, t3, i5);
          const r6 = _3("USER_DISCONNECTED", `${this.name}, ${e3}`);
          await this.onUnsubscribe(e3, t3, r6), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t3, opts: s4 } });
        } catch (i5) {
          throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(i5), i5;
        }
      }
      async rpcSubscribe(e3, t3, s4) {
        var i5;
        (s4 == null ? void 0 : s4.transportType) === M3.relay && await this.restartToComplete();
        const r6 = { method: Ar(t3.protocol).subscribe, params: { topic: e3 } };
        this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: r6 });
        const n7 = (i5 = s4 == null ? void 0 : s4.internal) == null ? void 0 : i5.throwOnFailedPublish;
        try {
          const a6 = this.getSubscriptionId(e3);
          if ((s4 == null ? void 0 : s4.transportType) === M3.link_mode) return setTimeout(() => {
            (this.relayer.connected || this.relayer.connecting) && this.relayer.request(r6).catch((u2) => this.logger.warn(u2));
          }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), a6;
          const c5 = new Promise(async (u2) => {
            const d4 = (y5) => {
              y5.topic === e3 && (this.events.removeListener(T3.created, d4), u2(y5.id));
            };
            this.events.on(T3.created, d4);
            try {
              const y5 = await xt(new Promise((m5, l6) => {
                this.relayer.request(r6).catch((g5) => {
                  this.logger.warn(g5, g5 == null ? void 0 : g5.message), l6(g5);
                }).then(m5);
              }), this.initialSubscribeTimeout, `Subscribing to ${e3} failed, please try again`);
              this.events.removeListener(T3.created, d4), u2(y5);
            } catch {
            }
          }), h6 = await xt(c5, this.subscribeTimeout, `Subscribing to ${e3} failed, please try again`);
          if (!h6 && n7) throw new Error(`Subscribing to ${e3} failed, please try again`);
          return h6 ? a6 : null;
        } catch (a6) {
          if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(v5.connection_stalled), n7) throw a6;
        }
        return null;
      }
      async rpcBatchSubscribe(e3) {
        if (!e3.length) return;
        const t3 = e3[0].relay, s4 = { method: Ar(t3.protocol).batchSubscribe, params: { topics: e3.map((i5) => i5.topic) } };
        this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 });
        try {
          await await xt(new Promise((i5) => {
            this.relayer.request(s4).catch((r6) => this.logger.warn(r6)).then(i5);
          }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
        } catch {
          this.relayer.events.emit(v5.connection_stalled);
        }
      }
      async rpcBatchFetchMessages(e3) {
        if (!e3.length) return;
        const t3 = e3[0].relay, s4 = { method: Ar(t3.protocol).batchFetchMessages, params: { topics: e3.map((r6) => r6.topic) } };
        this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 });
        let i5;
        try {
          i5 = await await xt(new Promise((r6, n7) => {
            this.relayer.request(s4).catch((a6) => {
              this.logger.warn(a6), n7(a6);
            }).then(r6);
          }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
        } catch {
          this.relayer.events.emit(v5.connection_stalled);
        }
        return i5;
      }
      rpcUnsubscribe(e3, t3, s4) {
        const i5 = { method: Ar(s4.protocol).unsubscribe, params: { topic: e3, id: t3 } };
        return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i5 }), this.relayer.request(i5);
      }
      onSubscribe(e3, t3) {
        this.setSubscription(e3, Ie2(Z2({}, t3), { id: e3 })), this.pending.delete(t3.topic);
      }
      onBatchSubscribe(e3) {
        e3.length && e3.forEach((t3) => {
          this.setSubscription(t3.id, Z2({}, t3)), this.pending.delete(t3.topic);
        });
      }
      async onUnsubscribe(e3, t3, s4) {
        this.events.removeAllListeners(t3), this.hasSubscription(t3, e3) && this.deleteSubscription(t3, s4), await this.relayer.messages.del(e3);
      }
      async setRelayerSubscriptions(e3) {
        await this.relayer.core.storage.setItem(this.storageKey, e3);
      }
      async getRelayerSubscriptions() {
        return await this.relayer.core.storage.getItem(this.storageKey);
      }
      setSubscription(e3, t3) {
        this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e3, subscription: t3 }), this.addSubscription(e3, t3);
      }
      addSubscription(e3, t3) {
        this.subscriptions.set(e3, Z2({}, t3)), this.topicMap.set(t3.topic, e3), this.events.emit(T3.created, t3);
      }
      getSubscription(e3) {
        this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e3 });
        const t3 = this.subscriptions.get(e3);
        if (!t3) {
          const { message: s4 } = S3("NO_MATCHING_KEY", `${this.name}: ${e3}`);
          throw new Error(s4);
        }
        return t3;
      }
      deleteSubscription(e3, t3) {
        this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e3, reason: t3 });
        const s4 = this.getSubscription(e3);
        this.subscriptions.delete(e3), this.topicMap.delete(s4.topic, e3), this.events.emit(T3.deleted, Ie2(Z2({}, s4), { reason: t3 }));
      }
      async persist() {
        await this.setRelayerSubscriptions(this.values), this.events.emit(T3.sync);
      }
      async onRestart() {
        if (this.cached.length) {
          const e3 = [...this.cached], t3 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
          for (let s4 = 0; s4 < t3; s4++) {
            const i5 = e3.splice(0, this.batchSubscribeTopicsLimit);
            await this.batchSubscribe(i5);
          }
        }
        this.events.emit(T3.resubscribed);
      }
      async restore() {
        try {
          const e3 = await this.getRelayerSubscriptions();
          if (typeof e3 > "u" || !e3.length) return;
          if (this.subscriptions.size) {
            const { message: t3 } = S3("RESTORE_WILL_OVERRIDE", this.name);
            throw this.logger.error(t3), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t3);
          }
          this.cached = e3, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
        } catch (e3) {
          this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e3);
        }
      }
      async batchSubscribe(e3) {
        e3.length && (await this.rpcBatchSubscribe(e3), this.onBatchSubscribe(e3.map((t3) => Ie2(Z2({}, t3), { id: this.getSubscriptionId(t3.topic) }))));
      }
      async batchFetchMessages(e3) {
        if (!e3.length) return;
        this.logger.trace(`Fetching batch messages for ${e3.length} subscriptions`);
        const t3 = await this.rpcBatchFetchMessages(e3);
        t3 && t3.messages && (await Gt((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t3.messages));
      }
      async onConnect() {
        await this.restart(), this.reset();
      }
      onDisconnect() {
        this.onDisable();
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
      async restartToComplete() {
        !this.relayer.connected && !this.relayer.connecting && await this.relayer.transportOpen();
      }
      getSubscriptionId(e3) {
        return br(e3 + this.clientId);
      }
    };
    mn2 = Object.defineProperty;
    si = Object.getOwnPropertySymbols;
    bn2 = Object.prototype.hasOwnProperty;
    fn2 = Object.prototype.propertyIsEnumerable;
    ri = (o4, e3, t3) => e3 in o4 ? mn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
    ni = (o4, e3) => {
      for (var t3 in e3 || (e3 = {})) bn2.call(e3, t3) && ri(o4, t3, e3[t3]);
      if (si) for (var t3 of si(e3)) fn2.call(e3, t3) && ri(o4, t3, e3[t3]);
      return o4;
    };
    oi = class extends u {
      constructor(e3) {
        super(e3), this.protocol = "wc", this.version = 2, this.events = new import_events7.EventEmitter(), this.name = at2, this.transportExplicitlyClosed = false, this.initialized = false, this.connectionAttemptInProgress = false, this.hasExperiencedNetworkDisruption = false, this.heartBeatTimeout = (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS), this.requestsInFlight = [], this.connectTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15), this.request = async (t3) => {
          var s4, i5;
          this.logger.debug("Publishing Request Payload");
          const r6 = t3.id || getBigIntRpcId().toString();
          await this.toEstablishConnection();
          try {
            this.logger.trace({ id: r6, method: t3.method, topic: (s4 = t3.params) == null ? void 0 : s4.topic }, "relayer.request - publishing...");
            const n7 = `${r6}:${((i5 = t3.params) == null ? void 0 : i5.tag) || ""}`;
            this.requestsInFlight.push(n7);
            const a6 = await this.provider.request(t3);
            return this.requestsInFlight = this.requestsInFlight.filter((c5) => c5 !== n7), a6;
          } catch (n7) {
            throw this.logger.debug(`Failed to Publish Request: ${r6}`), n7;
          }
        }, this.resetPingTimeout = () => {
          if (ce()) try {
            clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
              var t3, s4, i5;
              this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (i5 = (s4 = (t3 = this.provider) == null ? void 0 : t3.connection) == null ? void 0 : s4.socket) == null || i5.terminate();
            }, this.heartBeatTimeout);
          } catch (t3) {
            this.logger.warn(t3, t3 == null ? void 0 : t3.message);
          }
        }, this.onPayloadHandler = (t3) => {
          this.onProviderPayload(t3), this.resetPingTimeout();
        }, this.onConnectHandler = () => {
          this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(v5.connect);
        }, this.onDisconnectHandler = () => {
          this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
        }, this.onProviderErrorHandler = (t3) => {
          this.logger.fatal(t3, `Fatal socket error: ${t3 == null ? void 0 : t3.message}`), this.events.emit(v5.error, t3), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
        }, this.registerProviderListeners = () => {
          this.provider.on(C5.payload, this.onPayloadHandler), this.provider.on(C5.connect, this.onConnectHandler), this.provider.on(C5.disconnect, this.onDisconnectHandler), this.provider.on(C5.error, this.onProviderErrorHandler);
        }, this.core = e3.core, this.logger = typeof e3.logger < "u" && typeof e3.logger != "string" ? E2(e3.logger, this.name) : (0, import_pino2.default)(k2({ level: e3.logger || ot })), this.messages = new Jt2(this.logger, e3.core), this.subscriber = new ii(this, this.logger), this.publisher = new ln2(this, this.logger), this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || fe2, this.projectId = e3.projectId, Ot() ? this.packageName = St() : Nt() && (this.bundleId = St()), this.provider = {};
      }
      async init() {
        if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.cached.length > 0) try {
          await this.transportOpen();
        } catch (e3) {
          this.logger.warn(e3, e3 == null ? void 0 : e3.message);
        }
      }
      get context() {
        return y2(this.logger);
      }
      get connected() {
        var e3, t3, s4;
        return ((s4 = (t3 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t3.socket) == null ? void 0 : s4.readyState) === 1;
      }
      get connecting() {
        var e3, t3, s4;
        return ((s4 = (t3 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t3.socket) == null ? void 0 : s4.readyState) === 0;
      }
      async publish(e3, t3, s4) {
        this.isInitialized(), await this.publisher.publish(e3, t3, s4), await this.recordMessageEvent({ topic: e3, message: t3, publishedAt: Date.now(), transportType: M3.relay });
      }
      async subscribe(e3, t3) {
        var s4, i5, r6;
        this.isInitialized(), (!(t3 != null && t3.transportType) || (t3 == null ? void 0 : t3.transportType) === "relay") && await this.toEstablishConnection();
        const n7 = typeof ((s4 = t3 == null ? void 0 : t3.internal) == null ? void 0 : s4.throwOnFailedPublish) > "u" ? true : (i5 = t3 == null ? void 0 : t3.internal) == null ? void 0 : i5.throwOnFailedPublish;
        let a6 = ((r6 = this.subscriber.topicMap.get(e3)) == null ? void 0 : r6[0]) || "", c5;
        const h6 = (u2) => {
          u2.topic === e3 && (this.subscriber.off(T3.created, h6), c5());
        };
        return await Promise.all([new Promise((u2) => {
          c5 = u2, this.subscriber.on(T3.created, h6);
        }), new Promise(async (u2, d4) => {
          a6 = await this.subscriber.subscribe(e3, ni({ internal: { throwOnFailedPublish: n7 } }, t3)).catch((y5) => {
            n7 && d4(y5);
          }) || a6, u2();
        })]), a6;
      }
      async unsubscribe(e3, t3) {
        this.isInitialized(), await this.subscriber.unsubscribe(e3, t3);
      }
      on(e3, t3) {
        this.events.on(e3, t3);
      }
      once(e3, t3) {
        this.events.once(e3, t3);
      }
      off(e3, t3) {
        this.events.off(e3, t3);
      }
      removeListener(e3, t3) {
        this.events.removeListener(e3, t3);
      }
      async transportDisconnect() {
        this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await xt(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
      }
      async transportClose() {
        this.transportExplicitlyClosed = true, await this.transportDisconnect();
      }
      async transportOpen(e3) {
        if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t3, s4) => {
          await this.connect(e3).then(t3).catch(s4).finally(() => {
            this.connectPromise = void 0;
          });
        }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
      }
      async restartTransport(e3) {
        this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e3 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
      }
      async confirmOnlineStateOrThrow() {
        if (!await go()) throw new Error("No internet connection detected. Please restart your network and try again.");
      }
      async handleBatchMessageEvents(e3) {
        if ((e3 == null ? void 0 : e3.length) === 0) {
          this.logger.trace("Batch message events is empty. Ignoring...");
          return;
        }
        const t3 = e3.sort((s4, i5) => s4.publishedAt - i5.publishedAt);
        this.logger.debug(`Batch of ${t3.length} message events sorted`);
        for (const s4 of t3) try {
          await this.onMessageEvent(s4);
        } catch (i5) {
          this.logger.warn(i5, "Error while processing batch message event: " + (i5 == null ? void 0 : i5.message));
        }
        this.logger.trace(`Batch of ${t3.length} message events processed`);
      }
      async onLinkMessageEvent(e3, t3) {
        const { topic: s4 } = e3;
        if (!t3.sessionExists) {
          const i5 = Lt(import_time4.FIVE_MINUTES), r6 = { topic: s4, expiry: i5, relay: { protocol: "irn" }, active: false };
          await this.core.pairing.pairings.set(s4, r6);
        }
        this.events.emit(v5.message, e3), await this.recordMessageEvent(e3);
      }
      async connect(e3) {
        await this.confirmOnlineStateOrThrow(), e3 && e3 !== this.relayUrl && (this.relayUrl = e3, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
        let t3 = 1;
        for (; t3 < 6; ) {
          try {
            this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t3}...`), await this.createProvider(), await new Promise(async (s4, i5) => {
              const r6 = () => {
                i5(new Error("Connection interrupted while trying to subscribe"));
              };
              this.provider.once(C5.disconnect, r6), await xt(new Promise((n7, a6) => {
                this.provider.connect().then(n7).catch(a6);
              }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((n7) => {
                i5(n7);
              }).finally(() => {
                this.provider.off(C5.disconnect, r6), clearTimeout(this.reconnectTimeout), this.reconnectTimeout = void 0;
              }), await new Promise(async (n7, a6) => {
                const c5 = () => {
                  a6(new Error("Connection interrupted while trying to subscribe"));
                };
                this.provider.once(C5.disconnect, c5), await this.subscriber.start().then(n7).catch(a6).finally(() => {
                  this.provider.off(C5.disconnect, c5);
                });
              }), this.hasExperiencedNetworkDisruption = false, s4();
            });
          } catch (s4) {
            await this.subscriber.stop();
            const i5 = s4;
            this.logger.warn({}, i5.message), this.hasExperiencedNetworkDisruption = true;
          } finally {
            this.connectionAttemptInProgress = false;
          }
          if (this.connected) {
            this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t3}`);
            break;
          }
          await new Promise((s4) => setTimeout(s4, (0, import_time4.toMiliseconds)(t3 * 1))), t3++;
        }
      }
      startPingTimeout() {
        var e3, t3, s4, i5, r6;
        if (ce()) try {
          (t3 = (e3 = this.provider) == null ? void 0 : e3.connection) != null && t3.socket && ((r6 = (i5 = (s4 = this.provider) == null ? void 0 : s4.connection) == null ? void 0 : i5.socket) == null || r6.on("ping", () => {
            this.resetPingTimeout();
          })), this.resetPingTimeout();
        } catch (n7) {
          this.logger.warn(n7, n7 == null ? void 0 : n7.message);
        }
      }
      async createProvider() {
        this.provider.connection && this.unregisterProviderListeners();
        const e3 = await this.core.crypto.signJWT(this.relayUrl);
        this.provider = new o3(new f2(It({ sdkVersion: re2, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e3, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
      }
      async recordMessageEvent(e3) {
        const { topic: t3, message: s4 } = e3;
        await this.messages.set(t3, s4);
      }
      async shouldIgnoreMessageEvent(e3) {
        const { topic: t3, message: s4 } = e3;
        if (!s4 || s4.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${s4}`), true;
        if (!await this.subscriber.isSubscribed(t3)) return this.logger.warn(`Ignoring message for non-subscribed topic ${t3}`), true;
        const i5 = this.messages.has(t3, s4);
        return i5 && this.logger.warn(`Ignoring duplicate message: ${s4}`), i5;
      }
      async onProviderPayload(e3) {
        if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e3 }), isJsonRpcRequest(e3)) {
          if (!e3.method.endsWith(ct)) return;
          const t3 = e3.params, { topic: s4, message: i5, publishedAt: r6, attestation: n7 } = t3.data, a6 = { topic: s4, message: i5, publishedAt: r6, transportType: M3.relay, attestation: n7 };
          this.logger.debug("Emitting Relayer Payload"), this.logger.trace(ni({ type: "event", event: t3.id }, a6)), this.events.emit(t3.id, a6), await this.acknowledgePayload(e3), await this.onMessageEvent(a6);
        } else isJsonRpcResponse(e3) && this.events.emit(v5.message_ack, e3);
      }
      async onMessageEvent(e3) {
        await this.shouldIgnoreMessageEvent(e3) || (this.events.emit(v5.message, e3), await this.recordMessageEvent(e3));
      }
      async acknowledgePayload(e3) {
        const t3 = formatJsonRpcResult(e3.id, true);
        await this.provider.connection.send(t3);
      }
      unregisterProviderListeners() {
        this.provider.off(C5.payload, this.onPayloadHandler), this.provider.off(C5.connect, this.onConnectHandler), this.provider.off(C5.disconnect, this.onDisconnectHandler), this.provider.off(C5.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
      }
      async registerEventListeners() {
        let e3 = await go();
        vo(async (t3) => {
          e3 !== t3 && (e3 = t3, t3 ? await this.transportOpen().catch((s4) => this.logger.error(s4, s4 == null ? void 0 : s4.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
        });
      }
      async onProviderDisconnect() {
        await this.subscriber.stop(), clearTimeout(this.pingTimeout), this.events.emit(v5.disconnect), this.connectionAttemptInProgress = false, !this.transportExplicitlyClosed && (this.reconnectTimeout || this.connectPromise || (this.reconnectTimeout = setTimeout(async () => {
          clearTimeout(this.reconnectTimeout), await this.transportOpen().catch((e3) => this.logger.error(e3, e3 == null ? void 0 : e3.message));
        }, (0, import_time4.toMiliseconds)(ht2))));
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
      async toEstablishConnection() {
        await this.confirmOnlineStateOrThrow(), !this.connected && await this.transportOpen();
      }
    };
    vn2 = Object.defineProperty;
    ai = Object.getOwnPropertySymbols;
    _n2 = Object.prototype.hasOwnProperty;
    En2 = Object.prototype.propertyIsEnumerable;
    ci = (o4, e3, t3) => e3 in o4 ? vn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
    hi = (o4, e3) => {
      for (var t3 in e3 || (e3 = {})) _n2.call(e3, t3) && ci(o4, t3, e3[t3]);
      if (ai) for (var t3 of ai(e3)) En2.call(e3, t3) && ci(o4, t3, e3[t3]);
      return o4;
    };
    li = class extends p2 {
      constructor(e3, t3, s4, i5 = A3, r6 = void 0) {
        super(e3, t3, s4, i5), this.core = e3, this.logger = t3, this.name = s4, this.map = /* @__PURE__ */ new Map(), this.version = lt, this.cached = [], this.initialized = false, this.storagePrefix = A3, this.recentlyDeleted = [], this.recentlyDeletedLimit = 200, this.init = async () => {
          this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((n7) => {
            this.getKey && n7 !== null && !P2(n7) ? this.map.set(this.getKey(n7), n7) : Xr(n7) ? this.map.set(n7.id, n7) : eo(n7) && this.map.set(n7.topic, n7);
          }), this.cached = [], this.initialized = true);
        }, this.set = async (n7, a6) => {
          this.isInitialized(), this.map.has(n7) ? await this.update(n7, a6) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: n7, value: a6 }), this.map.set(n7, a6), await this.persist());
        }, this.get = (n7) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: n7 }), this.getData(n7)), this.getAll = (n7) => (this.isInitialized(), n7 ? this.values.filter((a6) => Object.keys(n7).every((c5) => (0, import_lodash.default)(a6[c5], n7[c5]))) : this.values), this.update = async (n7, a6) => {
          this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: n7, update: a6 });
          const c5 = hi(hi({}, this.getData(n7)), a6);
          this.map.set(n7, c5), await this.persist();
        }, this.delete = async (n7, a6) => {
          this.isInitialized(), this.map.has(n7) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: n7, reason: a6 }), this.map.delete(n7), this.addToRecentlyDeleted(n7), await this.persist());
        }, this.logger = E2(t3, this.name), this.storagePrefix = i5, this.getKey = r6;
      }
      get context() {
        return y2(this.logger);
      }
      get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
      }
      get length() {
        return this.map.size;
      }
      get keys() {
        return Array.from(this.map.keys());
      }
      get values() {
        return Array.from(this.map.values());
      }
      addToRecentlyDeleted(e3) {
        this.recentlyDeleted.push(e3), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
      }
      async setDataStore(e3) {
        await this.core.storage.setItem(this.storageKey, e3);
      }
      async getDataStore() {
        return await this.core.storage.getItem(this.storageKey);
      }
      getData(e3) {
        const t3 = this.map.get(e3);
        if (!t3) {
          if (this.recentlyDeleted.includes(e3)) {
            const { message: i5 } = S3("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e3}`);
            throw this.logger.error(i5), new Error(i5);
          }
          const { message: s4 } = S3("NO_MATCHING_KEY", `${this.name}: ${e3}`);
          throw this.logger.error(s4), new Error(s4);
        }
        return t3;
      }
      async persist() {
        await this.setDataStore(this.values);
      }
      async restore() {
        try {
          const e3 = await this.getDataStore();
          if (typeof e3 > "u" || !e3.length) return;
          if (this.map.size) {
            const { message: t3 } = S3("RESTORE_WILL_OVERRIDE", this.name);
            throw this.logger.error(t3), new Error(t3);
          }
          this.cached = e3, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
        } catch (e3) {
          this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e3);
        }
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
    };
    ui = class {
      constructor(e3, t3) {
        this.core = e3, this.logger = t3, this.name = yt2, this.version = Dt2, this.events = new import_events7.default(), this.initialized = false, this.storagePrefix = A3, this.ignoredPayloadTypes = [D2], this.registeredMethods = [], this.init = async () => {
          this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
        }, this.register = ({ methods: s4 }) => {
          this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s4])];
        }, this.create = async (s4) => {
          this.isInitialized();
          const i5 = yr(), r6 = await this.core.crypto.setSymKey(i5), n7 = Lt(import_time4.FIVE_MINUTES), a6 = { protocol: nt }, c5 = { topic: r6, expiry: n7, relay: a6, active: false, methods: s4 == null ? void 0 : s4.methods }, h6 = Mr({ protocol: this.core.protocol, version: this.core.version, topic: r6, symKey: i5, relay: a6, expiryTimestamp: n7, methods: s4 == null ? void 0 : s4.methods });
          return this.events.emit(j2.create, c5), this.core.expirer.set(r6, n7), await this.pairings.set(r6, c5), await this.core.relayer.subscribe(r6, { transportType: s4 == null ? void 0 : s4.transportType }), { topic: r6, uri: h6 };
        }, this.pair = async (s4) => {
          this.isInitialized();
          const i5 = this.core.eventClient.createEvent({ properties: { topic: s4 == null ? void 0 : s4.uri, trace: [z4.pairing_started] } });
          this.isValidPair(s4, i5);
          const { topic: r6, symKey: n7, relay: a6, expiryTimestamp: c5, methods: h6 } = Vr(s4.uri);
          i5.props.properties.topic = r6, i5.addTrace(z4.pairing_uri_validation_success), i5.addTrace(z4.pairing_uri_not_expired);
          let u2;
          if (this.pairings.keys.includes(r6)) {
            if (u2 = this.pairings.get(r6), i5.addTrace(z4.existing_pairing), u2.active) throw i5.setError($2.active_pairing_already_exists), new Error(`Pairing already exists: ${r6}. Please try again with a new connection URI.`);
            i5.addTrace(z4.pairing_not_expired);
          }
          const d4 = c5 || Lt(import_time4.FIVE_MINUTES), y5 = { topic: r6, relay: a6, expiry: d4, active: false, methods: h6 };
          this.core.expirer.set(r6, d4), await this.pairings.set(r6, y5), i5.addTrace(z4.store_new_pairing), s4.activatePairing && await this.activate({ topic: r6 }), this.events.emit(j2.create, y5), i5.addTrace(z4.emit_inactive_pairing), this.core.crypto.keychain.has(r6) || await this.core.crypto.setSymKey(n7, r6), i5.addTrace(z4.subscribing_pairing_topic);
          try {
            await this.core.relayer.confirmOnlineStateOrThrow();
          } catch {
            i5.setError($2.no_internet_connection);
          }
          try {
            await this.core.relayer.subscribe(r6, { relay: a6 });
          } catch (m5) {
            throw i5.setError($2.subscribe_pairing_topic_failure), m5;
          }
          return i5.addTrace(z4.subscribe_pairing_topic_success), y5;
        }, this.activate = async ({ topic: s4 }) => {
          this.isInitialized();
          const i5 = Lt(import_time4.THIRTY_DAYS);
          this.core.expirer.set(s4, i5), await this.pairings.update(s4, { active: true, expiry: i5 });
        }, this.ping = async (s4) => {
          this.isInitialized(), await this.isValidPing(s4);
          const { topic: i5 } = s4;
          if (this.pairings.keys.includes(i5)) {
            const r6 = await this.sendRequest(i5, "wc_pairingPing", {}), { done: n7, resolve: a6, reject: c5 } = Dt();
            this.events.once(qt("pairing_ping", r6), ({ error: h6 }) => {
              h6 ? c5(h6) : a6();
            }), await n7();
          }
        }, this.updateExpiry = async ({ topic: s4, expiry: i5 }) => {
          this.isInitialized(), await this.pairings.update(s4, { expiry: i5 });
        }, this.updateMetadata = async ({ topic: s4, metadata: i5 }) => {
          this.isInitialized(), await this.pairings.update(s4, { peerMetadata: i5 });
        }, this.getPairings = () => (this.isInitialized(), this.pairings.values), this.disconnect = async (s4) => {
          this.isInitialized(), await this.isValidDisconnect(s4);
          const { topic: i5 } = s4;
          this.pairings.keys.includes(i5) && (await this.sendRequest(i5, "wc_pairingDelete", _3("USER_DISCONNECTED")), await this.deletePairing(i5));
        }, this.formatUriFromPairing = (s4) => {
          this.isInitialized();
          const { topic: i5, relay: r6, expiry: n7, methods: a6 } = s4, c5 = this.core.crypto.keychain.get(i5);
          return Mr({ protocol: this.core.protocol, version: this.core.version, topic: i5, symKey: c5, relay: r6, expiryTimestamp: n7, methods: a6 });
        }, this.sendRequest = async (s4, i5, r6) => {
          const n7 = formatJsonRpcRequest(i5, r6), a6 = await this.core.crypto.encode(s4, n7), c5 = V2[i5].req;
          return this.core.history.set(s4, n7), this.core.relayer.publish(s4, a6, c5), n7.id;
        }, this.sendResult = async (s4, i5, r6) => {
          const n7 = formatJsonRpcResult(s4, r6), a6 = await this.core.crypto.encode(i5, n7), c5 = await this.core.history.get(i5, s4), h6 = V2[c5.request.method].res;
          await this.core.relayer.publish(i5, a6, h6), await this.core.history.resolve(n7);
        }, this.sendError = async (s4, i5, r6) => {
          const n7 = formatJsonRpcError(s4, r6), a6 = await this.core.crypto.encode(i5, n7), c5 = await this.core.history.get(i5, s4), h6 = V2[c5.request.method] ? V2[c5.request.method].res : V2.unregistered_method.res;
          await this.core.relayer.publish(i5, a6, h6), await this.core.history.resolve(n7);
        }, this.deletePairing = async (s4, i5) => {
          await this.core.relayer.unsubscribe(s4), await Promise.all([this.pairings.delete(s4, _3("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s4), i5 ? Promise.resolve() : this.core.expirer.del(s4)]);
        }, this.cleanup = async () => {
          const s4 = this.pairings.getAll().filter((i5) => Ft(i5.expiry));
          await Promise.all(s4.map((i5) => this.deletePairing(i5.topic)));
        }, this.onRelayEventRequest = (s4) => {
          const { topic: i5, payload: r6 } = s4;
          switch (r6.method) {
            case "wc_pairingPing":
              return this.onPairingPingRequest(i5, r6);
            case "wc_pairingDelete":
              return this.onPairingDeleteRequest(i5, r6);
            default:
              return this.onUnknownRpcMethodRequest(i5, r6);
          }
        }, this.onRelayEventResponse = async (s4) => {
          const { topic: i5, payload: r6 } = s4, n7 = (await this.core.history.get(i5, r6.id)).request.method;
          switch (n7) {
            case "wc_pairingPing":
              return this.onPairingPingResponse(i5, r6);
            default:
              return this.onUnknownRpcMethodResponse(n7);
          }
        }, this.onPairingPingRequest = async (s4, i5) => {
          const { id: r6 } = i5;
          try {
            this.isValidPing({ topic: s4 }), await this.sendResult(r6, s4, true), this.events.emit(j2.ping, { id: r6, topic: s4 });
          } catch (n7) {
            await this.sendError(r6, s4, n7), this.logger.error(n7);
          }
        }, this.onPairingPingResponse = (s4, i5) => {
          const { id: r6 } = i5;
          setTimeout(() => {
            isJsonRpcResult(i5) ? this.events.emit(qt("pairing_ping", r6), {}) : isJsonRpcError(i5) && this.events.emit(qt("pairing_ping", r6), { error: i5.error });
          }, 500);
        }, this.onPairingDeleteRequest = async (s4, i5) => {
          const { id: r6 } = i5;
          try {
            this.isValidDisconnect({ topic: s4 }), await this.deletePairing(s4), this.events.emit(j2.delete, { id: r6, topic: s4 });
          } catch (n7) {
            await this.sendError(r6, s4, n7), this.logger.error(n7);
          }
        }, this.onUnknownRpcMethodRequest = async (s4, i5) => {
          const { id: r6, method: n7 } = i5;
          try {
            if (this.registeredMethods.includes(n7)) return;
            const a6 = _3("WC_METHOD_UNSUPPORTED", n7);
            await this.sendError(r6, s4, a6), this.logger.error(a6);
          } catch (a6) {
            await this.sendError(r6, s4, a6), this.logger.error(a6);
          }
        }, this.onUnknownRpcMethodResponse = (s4) => {
          this.registeredMethods.includes(s4) || this.logger.error(_3("WC_METHOD_UNSUPPORTED", s4));
        }, this.isValidPair = (s4, i5) => {
          var r6;
          if (!so(s4)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `pair() params: ${s4}`);
            throw i5.setError($2.malformed_pairing_uri), new Error(a6);
          }
          if (!Zr(s4.uri)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `pair() uri: ${s4.uri}`);
            throw i5.setError($2.malformed_pairing_uri), new Error(a6);
          }
          const n7 = Vr(s4 == null ? void 0 : s4.uri);
          if (!((r6 = n7 == null ? void 0 : n7.relay) != null && r6.protocol)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", "pair() uri#relay-protocol");
            throw i5.setError($2.malformed_pairing_uri), new Error(a6);
          }
          if (!(n7 != null && n7.symKey)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", "pair() uri#symKey");
            throw i5.setError($2.malformed_pairing_uri), new Error(a6);
          }
          if (n7 != null && n7.expiryTimestamp && (0, import_time4.toMiliseconds)(n7 == null ? void 0 : n7.expiryTimestamp) < Date.now()) {
            i5.setError($2.pairing_expired);
            const { message: a6 } = S3("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
            throw new Error(a6);
          }
        }, this.isValidPing = async (s4) => {
          if (!so(s4)) {
            const { message: r6 } = S3("MISSING_OR_INVALID", `ping() params: ${s4}`);
            throw new Error(r6);
          }
          const { topic: i5 } = s4;
          await this.isValidPairingTopic(i5);
        }, this.isValidDisconnect = async (s4) => {
          if (!so(s4)) {
            const { message: r6 } = S3("MISSING_OR_INVALID", `disconnect() params: ${s4}`);
            throw new Error(r6);
          }
          const { topic: i5 } = s4;
          await this.isValidPairingTopic(i5);
        }, this.isValidPairingTopic = async (s4) => {
          if (!b2(s4, false)) {
            const { message: i5 } = S3("MISSING_OR_INVALID", `pairing topic should be a string: ${s4}`);
            throw new Error(i5);
          }
          if (!this.pairings.keys.includes(s4)) {
            const { message: i5 } = S3("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s4}`);
            throw new Error(i5);
          }
          if (Ft(this.pairings.get(s4).expiry)) {
            await this.deletePairing(s4);
            const { message: i5 } = S3("EXPIRED", `pairing topic: ${s4}`);
            throw new Error(i5);
          }
        }, this.core = e3, this.logger = E2(t3, this.name), this.pairings = new li(this.core, this.logger, this.name, this.storagePrefix);
      }
      get context() {
        return y2(this.logger);
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
      registerRelayerEvents() {
        this.core.relayer.on(v5.message, async (e3) => {
          const { topic: t3, message: s4, transportType: i5 } = e3;
          if (!this.pairings.keys.includes(t3) || i5 === M3.link_mode || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s4))) return;
          const r6 = await this.core.crypto.decode(t3, s4);
          try {
            isJsonRpcRequest(r6) ? (this.core.history.set(t3, r6), this.onRelayEventRequest({ topic: t3, payload: r6 })) : isJsonRpcResponse(r6) && (await this.core.history.resolve(r6), await this.onRelayEventResponse({ topic: t3, payload: r6 }), this.core.history.delete(t3, r6.id));
          } catch (n7) {
            this.logger.error(n7);
          }
        });
      }
      registerExpirerEvents() {
        this.core.expirer.on(x4.expired, async (e3) => {
          const { topic: t3 } = Kt(e3.target);
          t3 && this.pairings.keys.includes(t3) && (await this.deletePairing(t3, true), this.events.emit(j2.expire, { topic: t3 }));
        });
      }
    };
    di = class extends h3 {
      constructor(e3, t3) {
        super(e3, t3), this.core = e3, this.logger = t3, this.records = /* @__PURE__ */ new Map(), this.events = new import_events7.EventEmitter(), this.name = mt2, this.version = bt2, this.cached = [], this.initialized = false, this.storagePrefix = A3, this.init = async () => {
          this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s4) => this.records.set(s4.id, s4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
        }, this.set = (s4, i5, r6) => {
          if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s4, request: i5, chainId: r6 }), this.records.has(i5.id)) return;
          const n7 = { id: i5.id, topic: s4, request: { method: i5.method, params: i5.params || null }, chainId: r6, expiry: Lt(import_time4.THIRTY_DAYS) };
          this.records.set(n7.id, n7), this.persist(), this.events.emit(R2.created, n7);
        }, this.resolve = async (s4) => {
          if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s4 }), !this.records.has(s4.id)) return;
          const i5 = await this.getRecord(s4.id);
          typeof i5.response > "u" && (i5.response = isJsonRpcError(s4) ? { error: s4.error } : { result: s4.result }, this.records.set(i5.id, i5), this.persist(), this.events.emit(R2.updated, i5));
        }, this.get = async (s4, i5) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s4, id: i5 }), await this.getRecord(i5)), this.delete = (s4, i5) => {
          this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: i5 }), this.values.forEach((r6) => {
            if (r6.topic === s4) {
              if (typeof i5 < "u" && r6.id !== i5) return;
              this.records.delete(r6.id), this.events.emit(R2.deleted, r6);
            }
          }), this.persist();
        }, this.exists = async (s4, i5) => (this.isInitialized(), this.records.has(i5) ? (await this.getRecord(i5)).topic === s4 : false), this.on = (s4, i5) => {
          this.events.on(s4, i5);
        }, this.once = (s4, i5) => {
          this.events.once(s4, i5);
        }, this.off = (s4, i5) => {
          this.events.off(s4, i5);
        }, this.removeListener = (s4, i5) => {
          this.events.removeListener(s4, i5);
        }, this.logger = E2(t3, this.name);
      }
      get context() {
        return y2(this.logger);
      }
      get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
      }
      get size() {
        return this.records.size;
      }
      get keys() {
        return Array.from(this.records.keys());
      }
      get values() {
        return Array.from(this.records.values());
      }
      get pending() {
        const e3 = [];
        return this.values.forEach((t3) => {
          if (typeof t3.response < "u") return;
          const s4 = { topic: t3.topic, request: formatJsonRpcRequest(t3.request.method, t3.request.params, t3.id), chainId: t3.chainId };
          return e3.push(s4);
        }), e3;
      }
      async setJsonRpcRecords(e3) {
        await this.core.storage.setItem(this.storageKey, e3);
      }
      async getJsonRpcRecords() {
        return await this.core.storage.getItem(this.storageKey);
      }
      getRecord(e3) {
        this.isInitialized();
        const t3 = this.records.get(e3);
        if (!t3) {
          const { message: s4 } = S3("NO_MATCHING_KEY", `${this.name}: ${e3}`);
          throw new Error(s4);
        }
        return t3;
      }
      async persist() {
        await this.setJsonRpcRecords(this.values), this.events.emit(R2.sync);
      }
      async restore() {
        try {
          const e3 = await this.getJsonRpcRecords();
          if (typeof e3 > "u" || !e3.length) return;
          if (this.records.size) {
            const { message: t3 } = S3("RESTORE_WILL_OVERRIDE", this.name);
            throw this.logger.error(t3), new Error(t3);
          }
          this.cached = e3, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
        } catch (e3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e3);
        }
      }
      registerEventListeners() {
        this.events.on(R2.created, (e3) => {
          const t3 = R2.created;
          this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e3 });
        }), this.events.on(R2.updated, (e3) => {
          const t3 = R2.updated;
          this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e3 });
        }), this.events.on(R2.deleted, (e3) => {
          const t3 = R2.deleted;
          this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e3 });
        }), this.core.heartbeat.on(r.pulse, () => {
          this.cleanup();
        });
      }
      cleanup() {
        try {
          this.isInitialized();
          let e3 = false;
          this.records.forEach((t3) => {
            (0, import_time4.toMiliseconds)(t3.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t3.id}`), this.records.delete(t3.id), this.events.emit(R2.deleted, t3, false), e3 = true);
          }), e3 && this.persist();
        } catch (e3) {
          this.logger.warn(e3);
        }
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
    };
    pi = class extends x3 {
      constructor(e3, t3) {
        super(e3, t3), this.core = e3, this.logger = t3, this.expirations = /* @__PURE__ */ new Map(), this.events = new import_events7.EventEmitter(), this.name = ft2, this.version = vt2, this.cached = [], this.initialized = false, this.storagePrefix = A3, this.init = async () => {
          this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s4) => this.expirations.set(s4.target, s4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
        }, this.has = (s4) => {
          try {
            const i5 = this.formatTarget(s4);
            return typeof this.getExpiration(i5) < "u";
          } catch {
            return false;
          }
        }, this.set = (s4, i5) => {
          this.isInitialized();
          const r6 = this.formatTarget(s4), n7 = { target: r6, expiry: i5 };
          this.expirations.set(r6, n7), this.checkExpiry(r6, n7), this.events.emit(x4.created, { target: r6, expiration: n7 });
        }, this.get = (s4) => {
          this.isInitialized();
          const i5 = this.formatTarget(s4);
          return this.getExpiration(i5);
        }, this.del = (s4) => {
          if (this.isInitialized(), this.has(s4)) {
            const i5 = this.formatTarget(s4), r6 = this.getExpiration(i5);
            this.expirations.delete(i5), this.events.emit(x4.deleted, { target: i5, expiration: r6 });
          }
        }, this.on = (s4, i5) => {
          this.events.on(s4, i5);
        }, this.once = (s4, i5) => {
          this.events.once(s4, i5);
        }, this.off = (s4, i5) => {
          this.events.off(s4, i5);
        }, this.removeListener = (s4, i5) => {
          this.events.removeListener(s4, i5);
        }, this.logger = E2(t3, this.name);
      }
      get context() {
        return y2(this.logger);
      }
      get storageKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
      }
      get length() {
        return this.expirations.size;
      }
      get keys() {
        return Array.from(this.expirations.keys());
      }
      get values() {
        return Array.from(this.expirations.values());
      }
      formatTarget(e3) {
        if (typeof e3 == "string") return Vt(e3);
        if (typeof e3 == "number") return Mt(e3);
        const { message: t3 } = S3("UNKNOWN_TYPE", `Target type: ${typeof e3}`);
        throw new Error(t3);
      }
      async setExpirations(e3) {
        await this.core.storage.setItem(this.storageKey, e3);
      }
      async getExpirations() {
        return await this.core.storage.getItem(this.storageKey);
      }
      async persist() {
        await this.setExpirations(this.values), this.events.emit(x4.sync);
      }
      async restore() {
        try {
          const e3 = await this.getExpirations();
          if (typeof e3 > "u" || !e3.length) return;
          if (this.expirations.size) {
            const { message: t3 } = S3("RESTORE_WILL_OVERRIDE", this.name);
            throw this.logger.error(t3), new Error(t3);
          }
          this.cached = e3, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
        } catch (e3) {
          this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e3);
        }
      }
      getExpiration(e3) {
        const t3 = this.expirations.get(e3);
        if (!t3) {
          const { message: s4 } = S3("NO_MATCHING_KEY", `${this.name}: ${e3}`);
          throw this.logger.warn(s4), new Error(s4);
        }
        return t3;
      }
      checkExpiry(e3, t3) {
        const { expiry: s4 } = t3;
        (0, import_time4.toMiliseconds)(s4) - Date.now() <= 0 && this.expire(e3, t3);
      }
      expire(e3, t3) {
        this.expirations.delete(e3), this.events.emit(x4.expired, { target: e3, expiration: t3 });
      }
      checkExpirations() {
        this.core.relayer.connected && this.expirations.forEach((e3, t3) => this.checkExpiry(t3, e3));
      }
      registerEventListeners() {
        this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(x4.created, (e3) => {
          const t3 = x4.created;
          this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), this.persist();
        }), this.events.on(x4.expired, (e3) => {
          const t3 = x4.expired;
          this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), this.persist();
        }), this.events.on(x4.deleted, (e3) => {
          const t3 = x4.deleted;
          this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), this.persist();
        });
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: e3 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(e3);
        }
      }
    };
    gi = class extends y3 {
      constructor(e3, t3, s4) {
        super(e3, t3, s4), this.core = e3, this.logger = t3, this.store = s4, this.name = _t2, this.verifyUrlV3 = wt2, this.storagePrefix = A3, this.version = De2, this.init = async () => {
          var i5;
          this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((i5 = this.publicKey) == null ? void 0 : i5.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
        }, this.register = async (i5) => {
          if (!V() || this.isDevEnv) return;
          const r6 = window.location.origin, { id: n7, decryptedId: a6 } = i5, c5 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${r6}&id=${n7}&decryptedId=${a6}`;
          try {
            const h6 = (0, import_window_getters2.getDocument)(), u2 = this.startAbortTimer(import_time4.ONE_SECOND * 5), d4 = await new Promise((y5, m5) => {
              const l6 = () => {
                window.removeEventListener("message", w4), h6.body.removeChild(g5), m5("attestation aborted");
              };
              this.abortController.signal.addEventListener("abort", l6);
              const g5 = h6.createElement("iframe");
              g5.src = c5, g5.style.display = "none", g5.addEventListener("error", l6, { signal: this.abortController.signal });
              const w4 = (b4) => {
                if (b4.data && typeof b4.data == "string") try {
                  const D4 = JSON.parse(b4.data);
                  if (D4.type === "verify_attestation") {
                    if (decodeJWT(D4.attestation).payload.id !== n7) return;
                    clearInterval(u2), h6.body.removeChild(g5), this.abortController.signal.removeEventListener("abort", l6), window.removeEventListener("message", w4), y5(D4.attestation === null ? "" : D4.attestation);
                  }
                } catch (D4) {
                  this.logger.warn(D4);
                }
              };
              h6.body.appendChild(g5), window.addEventListener("message", w4, { signal: this.abortController.signal });
            });
            return this.logger.debug("jwt attestation", d4), d4;
          } catch (h6) {
            this.logger.warn(h6);
          }
          return "";
        }, this.resolve = async (i5) => {
          if (this.isDevEnv) return "";
          const { attestationId: r6, hash: n7, encryptedId: a6 } = i5;
          if (r6 === "") {
            this.logger.debug("resolve: attestationId is empty, skipping");
            return;
          }
          if (r6) {
            if (decodeJWT(r6).payload.id !== a6) return;
            const h6 = await this.isValidJwtAttestation(r6);
            if (h6) {
              if (!h6.isVerified) {
                this.logger.warn("resolve: jwt attestation: origin url not verified");
                return;
              }
              return h6;
            }
          }
          if (!n7) return;
          const c5 = this.getVerifyUrl(i5 == null ? void 0 : i5.verifyUrl);
          return this.fetchAttestation(n7, c5);
        }, this.fetchAttestation = async (i5, r6) => {
          this.logger.debug(`resolving attestation: ${i5} from url: ${r6}`);
          const n7 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a6 = await fetch(`${r6}/attestation/${i5}?v2Supported=true`, { signal: this.abortController.signal });
          return clearTimeout(n7), a6.status === 200 ? await a6.json() : void 0;
        }, this.getVerifyUrl = (i5) => {
          let r6 = i5 || X2;
          return It2.includes(r6) || (this.logger.info(`verify url: ${r6}, not included in trusted list, assigning default: ${X2}`), r6 = X2), r6;
        }, this.fetchPublicKey = async () => {
          try {
            this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
            const i5 = this.startAbortTimer(import_time4.FIVE_SECONDS), r6 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
            return clearTimeout(i5), await r6.json();
          } catch (i5) {
            this.logger.warn(i5);
          }
        }, this.persistPublicKey = async (i5) => {
          this.logger.debug("persisting public key to local storage", i5), await this.store.setItem(this.storeKey, i5), this.publicKey = i5;
        }, this.removePublicKey = async () => {
          this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
        }, this.isValidJwtAttestation = async (i5) => {
          const r6 = await this.getPublicKey();
          try {
            if (r6) return this.validateAttestation(i5, r6);
          } catch (a6) {
            this.logger.error(a6), this.logger.warn("error validating attestation");
          }
          const n7 = await this.fetchAndPersistPublicKey();
          try {
            if (n7) return this.validateAttestation(i5, n7);
          } catch (a6) {
            this.logger.error(a6), this.logger.warn("error validating attestation");
          }
        }, this.getPublicKey = async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey(), this.fetchAndPersistPublicKey = async () => {
          if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
          this.fetchPromise = new Promise(async (r6) => {
            const n7 = await this.fetchPublicKey();
            n7 && (await this.persistPublicKey(n7), r6(n7));
          });
          const i5 = await this.fetchPromise;
          return this.fetchPromise = void 0, i5;
        }, this.validateAttestation = (i5, r6) => {
          const n7 = jr(i5, r6.publicKey), a6 = { hasExpired: (0, import_time4.toMiliseconds)(n7.exp) < Date.now(), payload: n7 };
          if (a6.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
          return { origin: a6.payload.origin, isScam: a6.payload.isScam, isVerified: a6.payload.isVerified };
        }, this.logger = E2(t3, this.name), this.abortController = new AbortController(), this.isDevEnv = zt(), this.init();
      }
      get storeKey() {
        return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
      }
      get context() {
        return y2(this.logger);
      }
      startAbortTimer(e3) {
        return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e3));
      }
    };
    yi = class extends v3 {
      constructor(e3, t3) {
        super(e3, t3), this.projectId = e3, this.logger = t3, this.context = Tt2, this.registerDeviceToken = async (s4) => {
          const { clientId: i5, token: r6, notificationType: n7, enableEncrypted: a6 = false } = s4, c5 = `${Ct2}/${this.projectId}/clients`;
          await fetch(c5, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: i5, type: n7, token: r6, always_raw: a6 }) });
        }, this.logger = E2(t3, this.context);
      }
    };
    wn2 = Object.defineProperty;
    Di = Object.getOwnPropertySymbols;
    In2 = Object.prototype.hasOwnProperty;
    Tn2 = Object.prototype.propertyIsEnumerable;
    mi = (o4, e3, t3) => e3 in o4 ? wn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
    Q3 = (o4, e3) => {
      for (var t3 in e3 || (e3 = {})) In2.call(e3, t3) && mi(o4, t3, e3[t3]);
      if (Di) for (var t3 of Di(e3)) Tn2.call(e3, t3) && mi(o4, t3, e3[t3]);
      return o4;
    };
    bi = class extends C2 {
      constructor(e3, t3, s4 = true) {
        super(e3, t3, s4), this.core = e3, this.logger = t3, this.context = St2, this.storagePrefix = A3, this.storageVersion = Pt2, this.events = /* @__PURE__ */ new Map(), this.shouldPersist = false, this.init = async () => {
          if (!zt()) try {
            const i5 = { eventId: Jt(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Ge(this.core.relayer.protocol, this.core.relayer.version, re2) } } };
            await this.sendEvent([i5]);
          } catch (i5) {
            this.logger.warn(i5);
          }
        }, this.createEvent = (i5) => {
          const { event: r6 = "ERROR", type: n7 = "", properties: { topic: a6, trace: c5 } } = i5, h6 = Jt(), u2 = this.core.projectId || "", d4 = Date.now(), y5 = Q3({ eventId: h6, timestamp: d4, props: { event: r6, type: n7, properties: { topic: a6, trace: c5 } }, bundleId: u2, domain: this.getAppDomain() }, this.setMethods(h6));
          return this.telemetryEnabled && (this.events.set(h6, y5), this.shouldPersist = true), y5;
        }, this.getEvent = (i5) => {
          const { eventId: r6, topic: n7 } = i5;
          if (r6) return this.events.get(r6);
          const a6 = Array.from(this.events.values()).find((c5) => c5.props.properties.topic === n7);
          if (a6) return Q3(Q3({}, a6), this.setMethods(a6.eventId));
        }, this.deleteEvent = (i5) => {
          const { eventId: r6 } = i5;
          this.events.delete(r6), this.shouldPersist = true;
        }, this.setEventListeners = () => {
          this.core.heartbeat.on(r.pulse, async () => {
            this.shouldPersist && await this.persist(), this.events.forEach((i5) => {
              (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(i5.timestamp) > Rt2 && (this.events.delete(i5.eventId), this.shouldPersist = true);
            });
          });
        }, this.setMethods = (i5) => ({ addTrace: (r6) => this.addTrace(i5, r6), setError: (r6) => this.setError(i5, r6) }), this.addTrace = (i5, r6) => {
          const n7 = this.events.get(i5);
          n7 && (n7.props.properties.trace.push(r6), this.events.set(i5, n7), this.shouldPersist = true);
        }, this.setError = (i5, r6) => {
          const n7 = this.events.get(i5);
          n7 && (n7.props.type = r6, n7.timestamp = Date.now(), this.events.set(i5, n7), this.shouldPersist = true);
        }, this.persist = async () => {
          await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
        }, this.restore = async () => {
          try {
            const i5 = await this.core.storage.getItem(this.storageKey) || [];
            if (!i5.length) return;
            i5.forEach((r6) => {
              this.events.set(r6.eventId, Q3(Q3({}, r6), this.setMethods(r6.eventId)));
            });
          } catch (i5) {
            this.logger.warn(i5);
          }
        }, this.submit = async () => {
          if (!this.telemetryEnabled || this.events.size === 0) return;
          const i5 = [];
          for (const [r6, n7] of this.events) n7.props.type && i5.push(n7);
          if (i5.length !== 0) try {
            if ((await this.sendEvent(i5)).ok) for (const r6 of i5) this.events.delete(r6.eventId), this.shouldPersist = true;
          } catch (r6) {
            this.logger.warn(r6);
          }
        }, this.sendEvent = async (i5) => {
          const r6 = this.getAppDomain() ? "" : "&sp=desktop";
          return await fetch(`${xt2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${re2}${r6}`, { method: "POST", body: JSON.stringify(i5) });
        }, this.getAppDomain = () => $t().url, this.logger = E2(t3, this.context), this.telemetryEnabled = s4, s4 ? this.restore().then(async () => {
          await this.submit(), this.setEventListeners();
        }) : this.persist();
      }
      get storageKey() {
        return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
      }
    };
    Cn2 = Object.defineProperty;
    fi = Object.getOwnPropertySymbols;
    Pn2 = Object.prototype.hasOwnProperty;
    Sn2 = Object.prototype.propertyIsEnumerable;
    vi = (o4, e3, t3) => e3 in o4 ? Cn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
    _i = (o4, e3) => {
      for (var t3 in e3 || (e3 = {})) Pn2.call(e3, t3) && vi(o4, t3, e3[t3]);
      if (fi) for (var t3 of fi(e3)) Sn2.call(e3, t3) && vi(o4, t3, e3[t3]);
      return o4;
    };
    oe2 = class _oe extends n3 {
      constructor(e3) {
        var t3;
        super(e3), this.protocol = ye2, this.version = De2, this.name = J2, this.events = new import_events7.EventEmitter(), this.initialized = false, this.on = (n7, a6) => this.events.on(n7, a6), this.once = (n7, a6) => this.events.once(n7, a6), this.off = (n7, a6) => this.events.off(n7, a6), this.removeListener = (n7, a6) => this.events.removeListener(n7, a6), this.dispatchEnvelope = ({ topic: n7, message: a6, sessionExists: c5 }) => {
          if (!n7 || !a6) return;
          const h6 = { topic: n7, message: a6, publishedAt: Date.now(), transportType: M3.link_mode };
          this.relayer.onLinkMessageEvent(h6, { sessionExists: c5 });
        }, this.projectId = e3 == null ? void 0 : e3.projectId, this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || fe2, this.customStoragePrefix = e3 != null && e3.customStoragePrefix ? `:${e3.customStoragePrefix}` : "";
        const s4 = k2({ level: typeof (e3 == null ? void 0 : e3.logger) == "string" && e3.logger ? e3.logger : Xe2.logger, name: J2 }), { logger: i5, chunkLoggerController: r6 } = A({ opts: s4, maxSizeInBytes: e3 == null ? void 0 : e3.maxLogBlobSizeInBytes, loggerOverride: e3 == null ? void 0 : e3.logger });
        this.logChunkController = r6, (t3 = this.logChunkController) != null && t3.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
          var n7, a6;
          (n7 = this.logChunkController) != null && n7.downloadLogsBlobInBrowser && ((a6 = this.logChunkController) == null || a6.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
        }), this.logger = E2(i5, this.name), this.heartbeat = new i(), this.crypto = new Yt2(this, this.logger, e3 == null ? void 0 : e3.keychain), this.history = new di(this, this.logger), this.expirer = new pi(this, this.logger), this.storage = e3 != null && e3.storage ? e3.storage : new h(_i(_i({}, We2), e3 == null ? void 0 : e3.storageOptions)), this.relayer = new oi({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new ui(this, this.logger), this.verify = new gi(this, this.logger, this.storage), this.echoClient = new yi(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new bi(this, this.logger, e3 == null ? void 0 : e3.telemetryEnabled);
      }
      static async init(e3) {
        const t3 = new _oe(e3);
        await t3.initialize();
        const s4 = await t3.crypto.getClientId();
        return await t3.storage.setItem(ut2, s4), t3;
      }
      get context() {
        return y2(this.logger);
      }
      async start() {
        this.initialized || await this.initialize();
      }
      async getLogsBlob() {
        var e3;
        return (e3 = this.logChunkController) == null ? void 0 : e3.logsToBlob({ clientId: await this.crypto.getClientId() });
      }
      async addLinkModeSupportedApp(e3) {
        this.linkModeSupportedApps.includes(e3) || (this.linkModeSupportedApps.push(e3), await this.storage.setItem(ve2, this.linkModeSupportedApps));
      }
      async initialize() {
        this.logger.trace("Initialized");
        try {
          await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.eventClient.init(), this.linkModeSupportedApps = await this.storage.getItem(ve2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
        } catch (e3) {
          throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e3), this.logger.error(e3.message), e3;
        }
      }
    };
    Rn2 = oe2;
  }
});

// node_modules/@walletconnect/sign-client/dist/index.es.js
var index_es_exports2 = {};
__export(index_es_exports2, {
  AUTH_CONTEXT: () => pt3,
  AUTH_KEYS_CONTEXT: () => ht3,
  AUTH_PAIRING_TOPIC_CONTEXT: () => dt2,
  AUTH_PROTOCOL: () => lt2,
  AUTH_PUBLIC_KEY_NAME: () => ae3,
  AUTH_REQUEST_CONTEXT: () => ut3,
  AUTH_STORAGE_PREFIX: () => oe3,
  AUTH_VERSION: () => gs,
  ENGINE_CONTEXT: () => ot2,
  ENGINE_QUEUE_STATES: () => x5,
  ENGINE_RPC_OPTS: () => v6,
  HISTORY_CONTEXT: () => hs,
  HISTORY_EVENTS: () => ps,
  HISTORY_STORAGE_VERSION: () => ds,
  METHODS_TO_VERIFY: () => ct2,
  PROPOSAL_CONTEXT: () => it3,
  PROPOSAL_EXPIRY: () => us,
  PROPOSAL_EXPIRY_MESSAGE: () => rt2,
  REQUEST_CONTEXT: () => at3,
  SESSION_CONTEXT: () => nt2,
  SESSION_EXPIRY: () => H2,
  SESSION_REQUEST_EXPIRY_BOUNDARIES: () => me3,
  SIGN_CLIENT_CONTEXT: () => xe2,
  SIGN_CLIENT_DEFAULT: () => we3,
  SIGN_CLIENT_EVENTS: () => cs,
  SIGN_CLIENT_PROTOCOL: () => Ce3,
  SIGN_CLIENT_STORAGE_OPTIONS: () => ls,
  SIGN_CLIENT_STORAGE_PREFIX: () => ye3,
  SIGN_CLIENT_VERSION: () => Le2,
  SessionStore: () => Ns2,
  SignClient: () => Ps,
  WALLETCONNECT_DEEPLINK_CHOICE: () => De3,
  default: () => _e3
});
var import_dist114, import_time5, import_events8, Ce3, Le2, xe2, ye3, we3, cs, ls, De3, ps, hs, ds, it3, us, rt2, nt2, H2, ot2, v6, me3, x5, at3, ct2, lt2, gs, pt3, ht3, dt2, ut3, oe3, ae3, ys, ws, ms, gt3, _s2, Es2, yt3, I3, D3, Rs, Ss2, wt3, Is, fs, vs, qs2, Ts, _e3, Ns2, Ps;
var init_index_es11 = __esm({
  "node_modules/@walletconnect/sign-client/dist/index.es.js"() {
    import_dist114 = __toESM(require_dist());
    init_index_es10();
    init_index_es3();
    init_index_es4();
    import_time5 = __toESM(require_cjs());
    init_index_es6();
    import_events8 = __toESM(require_events());
    init_esm4();
    Ce3 = "wc";
    Le2 = 2;
    xe2 = "client";
    ye3 = `${Ce3}@${Le2}:${xe2}:`;
    we3 = { name: xe2, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
    cs = { session_proposal: "session_proposal", session_update: "session_update", session_extend: "session_extend", session_ping: "session_ping", session_delete: "session_delete", session_expire: "session_expire", session_request: "session_request", session_request_sent: "session_request_sent", session_event: "session_event", proposal_expire: "proposal_expire", session_authenticate: "session_authenticate", session_request_expire: "session_request_expire" };
    ls = { database: ":memory:" };
    De3 = "WALLETCONNECT_DEEPLINK_CHOICE";
    ps = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
    hs = "history";
    ds = "0.3";
    it3 = "proposal";
    us = import_time5.THIRTY_DAYS;
    rt2 = "Proposal expired";
    nt2 = "session";
    H2 = import_time5.SEVEN_DAYS;
    ot2 = "engine";
    v6 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
    me3 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
    x5 = { idle: "IDLE", active: "ACTIVE" };
    at3 = "request";
    ct2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
    lt2 = "wc";
    gs = 1.5;
    pt3 = "auth";
    ht3 = "authKeys";
    dt2 = "pairingTopics";
    ut3 = "requests";
    oe3 = `${lt2}@${1.5}:${pt3}:`;
    ae3 = `${oe3}:PUB_KEY`;
    ys = Object.defineProperty;
    ws = Object.defineProperties;
    ms = Object.getOwnPropertyDescriptors;
    gt3 = Object.getOwnPropertySymbols;
    _s2 = Object.prototype.hasOwnProperty;
    Es2 = Object.prototype.propertyIsEnumerable;
    yt3 = (q2, o4, e3) => o4 in q2 ? ys(q2, o4, { enumerable: true, configurable: true, writable: true, value: e3 }) : q2[o4] = e3;
    I3 = (q2, o4) => {
      for (var e3 in o4 || (o4 = {})) _s2.call(o4, e3) && yt3(q2, e3, o4[e3]);
      if (gt3) for (var e3 of gt3(o4)) Es2.call(o4, e3) && yt3(q2, e3, o4[e3]);
      return q2;
    };
    D3 = (q2, o4) => ws(q2, ms(o4));
    Rs = class extends M {
      constructor(o4) {
        super(o4), this.name = ot2, this.events = new import_events8.default(), this.initialized = false, this.requestQueue = { state: x5.idle, queue: [] }, this.sessionRequestQueue = { state: x5.idle, queue: [] }, this.requestQueueDelay = import_time5.ONE_SECOND, this.expectedPairingMethodMap = /* @__PURE__ */ new Map(), this.recentlyDeletedMap = /* @__PURE__ */ new Map(), this.recentlyDeletedLimit = 200, this.relayMessageCache = [], this.init = async () => {
          this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(v6) }), this.initialized = true, setTimeout(() => {
            this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
          }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
        }, this.connect = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow();
          const t3 = D3(I3({}, e3), { requiredNamespaces: e3.requiredNamespaces || {}, optionalNamespaces: e3.optionalNamespaces || {} });
          await this.isValidConnect(t3);
          const { pairingTopic: s4, requiredNamespaces: i5, optionalNamespaces: r6, sessionProperties: n7, relays: a6 } = t3;
          let c5 = s4, h6, p5 = false;
          try {
            c5 && (p5 = this.client.core.pairing.pairings.get(c5).active);
          } catch (E5) {
            throw this.client.logger.error(`connect() -> pairing.get(${c5}) failed`), E5;
          }
          if (!c5 || !p5) {
            const { topic: E5, uri: S4 } = await this.client.core.pairing.create();
            c5 = E5, h6 = S4;
          }
          if (!c5) {
            const { message: E5 } = S3("NO_MATCHING_KEY", `connect() pairing topic: ${c5}`);
            throw new Error(E5);
          }
          const d4 = await this.client.core.crypto.generateKeyPair(), l6 = v6.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, w4 = Lt(l6), m5 = I3({ requiredNamespaces: i5, optionalNamespaces: r6, relays: a6 ?? [{ protocol: nt }], proposer: { publicKey: d4, metadata: this.client.metadata }, expiryTimestamp: w4, pairingTopic: c5 }, n7 && { sessionProperties: n7 }), { reject: y5, resolve: _5, done: R3 } = Dt(l6, rt2);
          this.events.once(qt("session_connect"), async ({ error: E5, session: S4 }) => {
            if (E5) y5(E5);
            else if (S4) {
              S4.self.publicKey = d4;
              const M4 = D3(I3({}, S4), { pairingTopic: m5.pairingTopic, requiredNamespaces: m5.requiredNamespaces, optionalNamespaces: m5.optionalNamespaces, transportType: M3.relay });
              await this.client.session.set(S4.topic, M4), await this.setExpiry(S4.topic, S4.expiry), c5 && await this.client.core.pairing.updateMetadata({ topic: c5, metadata: S4.peer.metadata }), this.cleanupDuplicatePairings(M4), _5(M4);
            }
          });
          const V4 = await this.sendRequest({ topic: c5, method: "wc_sessionPropose", params: m5, throwOnFailedPublish: true });
          return await this.setProposal(V4, I3({ id: V4 }, m5)), { uri: h6, approval: R3 };
        }, this.pair = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow();
          try {
            return await this.client.core.pairing.pair(e3);
          } catch (t3) {
            throw this.client.logger.error("pair() failed"), t3;
          }
        }, this.approve = async (e3) => {
          var t3, s4, i5;
          const r6 = this.client.core.eventClient.createEvent({ properties: { topic: (t3 = e3 == null ? void 0 : e3.id) == null ? void 0 : t3.toString(), trace: [xs.session_approve_started] } });
          try {
            this.isInitialized(), await this.confirmOnlineStateOrThrow();
          } catch (N13) {
            throw r6.setError(Os.no_internet_connection), N13;
          }
          try {
            await this.isValidProposalId(e3 == null ? void 0 : e3.id);
          } catch (N13) {
            throw this.client.logger.error(`approve() -> proposal.get(${e3 == null ? void 0 : e3.id}) failed`), r6.setError(Os.proposal_not_found), N13;
          }
          try {
            await this.isValidApprove(e3);
          } catch (N13) {
            throw this.client.logger.error("approve() -> isValidApprove() failed"), r6.setError(Os.session_approve_namespace_validation_failure), N13;
          }
          const { id: n7, relayProtocol: a6, namespaces: c5, sessionProperties: h6, sessionConfig: p5 } = e3, d4 = this.client.proposal.get(n7);
          this.client.core.eventClient.deleteEvent({ eventId: r6.eventId });
          const { pairingTopic: l6, proposer: w4, requiredNamespaces: m5, optionalNamespaces: y5 } = d4;
          let _5 = (s4 = this.client.core.eventClient) == null ? void 0 : s4.getEvent({ topic: l6 });
          _5 || (_5 = (i5 = this.client.core.eventClient) == null ? void 0 : i5.createEvent({ type: xs.session_approve_started, properties: { topic: l6, trace: [xs.session_approve_started, xs.session_namespaces_validation_success] } }));
          const R3 = await this.client.core.crypto.generateKeyPair(), V4 = w4.publicKey, E5 = await this.client.core.crypto.generateSharedKey(R3, V4), S4 = I3(I3({ relay: { protocol: a6 ?? "irn" }, namespaces: c5, controller: { publicKey: R3, metadata: this.client.metadata }, expiry: Lt(H2) }, h6 && { sessionProperties: h6 }), p5 && { sessionConfig: p5 }), M4 = M3.relay;
          _5.addTrace(xs.subscribing_session_topic);
          try {
            await this.client.core.relayer.subscribe(E5, { transportType: M4 });
          } catch (N13) {
            throw _5.setError(Os.subscribe_session_topic_failure), N13;
          }
          _5.addTrace(xs.subscribe_session_topic_success);
          const W4 = D3(I3({}, S4), { topic: E5, requiredNamespaces: m5, optionalNamespaces: y5, pairingTopic: l6, acknowledged: false, self: S4.controller, peer: { publicKey: w4.publicKey, metadata: w4.metadata }, controller: R3, transportType: M3.relay });
          await this.client.session.set(E5, W4), _5.addTrace(xs.store_session);
          try {
            _5.addTrace(xs.publishing_session_settle), await this.sendRequest({ topic: E5, method: "wc_sessionSettle", params: S4, throwOnFailedPublish: true }).catch((N13) => {
              throw _5 == null ? void 0 : _5.setError(Os.session_settle_publish_failure), N13;
            }), _5.addTrace(xs.session_settle_publish_success), _5.addTrace(xs.publishing_session_approve), await this.sendResult({ id: n7, topic: l6, result: { relay: { protocol: a6 ?? "irn" }, responderPublicKey: R3 }, throwOnFailedPublish: true }).catch((N13) => {
              throw _5 == null ? void 0 : _5.setError(Os.session_approve_publish_failure), N13;
            }), _5.addTrace(xs.session_approve_publish_success);
          } catch (N13) {
            throw this.client.logger.error(N13), this.client.session.delete(E5, _3("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(E5), N13;
          }
          return this.client.core.eventClient.deleteEvent({ eventId: _5.eventId }), await this.client.core.pairing.updateMetadata({ topic: l6, metadata: w4.metadata }), await this.client.proposal.delete(n7, _3("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: l6 }), await this.setExpiry(E5, Lt(H2)), { topic: E5, acknowledged: () => Promise.resolve(this.client.session.get(E5)) };
        }, this.reject = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow();
          try {
            await this.isValidReject(e3);
          } catch (r6) {
            throw this.client.logger.error("reject() -> isValidReject() failed"), r6;
          }
          const { id: t3, reason: s4 } = e3;
          let i5;
          try {
            i5 = this.client.proposal.get(t3).pairingTopic;
          } catch (r6) {
            throw this.client.logger.error(`reject() -> proposal.get(${t3}) failed`), r6;
          }
          i5 && (await this.sendError({ id: t3, topic: i5, error: s4, rpcOpts: v6.wc_sessionPropose.reject }), await this.client.proposal.delete(t3, _3("USER_DISCONNECTED")));
        }, this.update = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow();
          try {
            await this.isValidUpdate(e3);
          } catch (p5) {
            throw this.client.logger.error("update() -> isValidUpdate() failed"), p5;
          }
          const { topic: t3, namespaces: s4 } = e3, { done: i5, resolve: r6, reject: n7 } = Dt(), a6 = payloadId(), c5 = getBigIntRpcId().toString(), h6 = this.client.session.get(t3).namespaces;
          return this.events.once(qt("session_update", a6), ({ error: p5 }) => {
            p5 ? n7(p5) : r6();
          }), await this.client.session.update(t3, { namespaces: s4 }), await this.sendRequest({ topic: t3, method: "wc_sessionUpdate", params: { namespaces: s4 }, throwOnFailedPublish: true, clientRpcId: a6, relayRpcId: c5 }).catch((p5) => {
            this.client.logger.error(p5), this.client.session.update(t3, { namespaces: h6 }), n7(p5);
          }), { acknowledged: i5 };
        }, this.extend = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow();
          try {
            await this.isValidExtend(e3);
          } catch (a6) {
            throw this.client.logger.error("extend() -> isValidExtend() failed"), a6;
          }
          const { topic: t3 } = e3, s4 = payloadId(), { done: i5, resolve: r6, reject: n7 } = Dt();
          return this.events.once(qt("session_extend", s4), ({ error: a6 }) => {
            a6 ? n7(a6) : r6();
          }), await this.setExpiry(t3, Lt(H2)), this.sendRequest({ topic: t3, method: "wc_sessionExtend", params: {}, clientRpcId: s4, throwOnFailedPublish: true }).catch((a6) => {
            n7(a6);
          }), { acknowledged: i5 };
        }, this.request = async (e3) => {
          this.isInitialized();
          try {
            await this.isValidRequest(e3);
          } catch (w4) {
            throw this.client.logger.error("request() -> isValidRequest() failed"), w4;
          }
          const { chainId: t3, request: s4, topic: i5, expiry: r6 = v6.wc_sessionRequest.req.ttl } = e3, n7 = this.client.session.get(i5);
          (n7 == null ? void 0 : n7.transportType) === M3.relay && await this.confirmOnlineStateOrThrow();
          const a6 = payloadId(), c5 = getBigIntRpcId().toString(), { done: h6, resolve: p5, reject: d4 } = Dt(r6, "Request expired. Please try again.");
          this.events.once(qt("session_request", a6), ({ error: w4, result: m5 }) => {
            w4 ? d4(w4) : p5(m5);
          });
          const l6 = this.getAppLinkIfEnabled(n7.peer.metadata, n7.transportType);
          return l6 ? (await this.sendRequest({ clientRpcId: a6, relayRpcId: c5, topic: i5, method: "wc_sessionRequest", params: { request: D3(I3({}, s4), { expiryTimestamp: Lt(r6) }), chainId: t3 }, expiry: r6, throwOnFailedPublish: true, appLink: l6 }).catch((w4) => d4(w4)), this.client.events.emit("session_request_sent", { topic: i5, request: s4, chainId: t3, id: a6 }), await h6()) : await Promise.all([new Promise(async (w4) => {
            await this.sendRequest({ clientRpcId: a6, relayRpcId: c5, topic: i5, method: "wc_sessionRequest", params: { request: D3(I3({}, s4), { expiryTimestamp: Lt(r6) }), chainId: t3 }, expiry: r6, throwOnFailedPublish: true }).catch((m5) => d4(m5)), this.client.events.emit("session_request_sent", { topic: i5, request: s4, chainId: t3, id: a6 }), w4();
          }), new Promise(async (w4) => {
            var m5;
            if (!((m5 = n7.sessionConfig) != null && m5.disableDeepLink)) {
              const y5 = await Ht(this.client.core.storage, De3);
              await Bt2({ id: a6, topic: i5, wcDeepLink: y5 });
            }
            w4();
          }), h6()]).then((w4) => w4[2]);
        }, this.respond = async (e3) => {
          this.isInitialized(), await this.isValidRespond(e3);
          const { topic: t3, response: s4 } = e3, { id: i5 } = s4, r6 = this.client.session.get(t3);
          r6.transportType === M3.relay && await this.confirmOnlineStateOrThrow();
          const n7 = this.getAppLinkIfEnabled(r6.peer.metadata, r6.transportType);
          isJsonRpcResult(s4) ? await this.sendResult({ id: i5, topic: t3, result: s4.result, throwOnFailedPublish: true, appLink: n7 }) : isJsonRpcError(s4) && await this.sendError({ id: i5, topic: t3, error: s4.error, appLink: n7 }), this.cleanupAfterResponse(e3);
        }, this.ping = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow();
          try {
            await this.isValidPing(e3);
          } catch (s4) {
            throw this.client.logger.error("ping() -> isValidPing() failed"), s4;
          }
          const { topic: t3 } = e3;
          if (this.client.session.keys.includes(t3)) {
            const s4 = payloadId(), i5 = getBigIntRpcId().toString(), { done: r6, resolve: n7, reject: a6 } = Dt();
            this.events.once(qt("session_ping", s4), ({ error: c5 }) => {
              c5 ? a6(c5) : n7();
            }), await Promise.all([this.sendRequest({ topic: t3, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s4, relayRpcId: i5 }), r6()]);
          } else this.client.core.pairing.pairings.keys.includes(t3) && await this.client.core.pairing.ping({ topic: t3 });
        }, this.emit = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e3);
          const { topic: t3, event: s4, chainId: i5 } = e3, r6 = getBigIntRpcId().toString(), n7 = payloadId();
          await this.sendRequest({ topic: t3, method: "wc_sessionEvent", params: { event: s4, chainId: i5 }, throwOnFailedPublish: true, relayRpcId: r6, clientRpcId: n7 });
        }, this.disconnect = async (e3) => {
          this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e3);
          const { topic: t3 } = e3;
          if (this.client.session.keys.includes(t3)) await this.sendRequest({ topic: t3, method: "wc_sessionDelete", params: _3("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t3, emitEvent: false });
          else if (this.client.core.pairing.pairings.keys.includes(t3)) await this.client.core.pairing.disconnect({ topic: t3 });
          else {
            const { message: s4 } = S3("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t3}`);
            throw new Error(s4);
          }
        }, this.find = (e3) => (this.isInitialized(), this.client.session.getAll().filter((t3) => Qr(t3, e3))), this.getPendingSessionRequests = () => this.client.pendingRequest.getAll(), this.authenticate = async (e3, t3) => {
          var s4;
          this.isInitialized(), this.isValidAuthenticate(e3);
          const i5 = t3 && this.client.core.linkModeSupportedApps.includes(t3) && ((s4 = this.client.metadata.redirect) == null ? void 0 : s4.linkMode), r6 = i5 ? M3.link_mode : M3.relay;
          r6 === M3.relay && await this.confirmOnlineStateOrThrow();
          const { chains: n7, statement: a6 = "", uri: c5, domain: h6, nonce: p5, type: d4, exp: l6, nbf: w4, methods: m5 = [], expiry: y5 } = e3, _5 = [...e3.resources || []], { topic: R3, uri: V4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r6 });
          this.client.logger.info({ message: "Generated new pairing", pairing: { topic: R3, uri: V4 } });
          const E5 = await this.client.core.crypto.generateKeyPair(), S4 = vr(E5);
          if (await Promise.all([this.client.auth.authKeys.set(ae3, { responseTopic: S4, publicKey: E5 }), this.client.auth.pairingTopics.set(S4, { topic: S4, pairingTopic: R3 })]), await this.client.core.relayer.subscribe(S4, { transportType: r6 }), this.client.logger.info(`sending request to new pairing topic: ${R3}`), m5.length > 0) {
            const { namespace: O5 } = re(n7[0]);
            let T4 = ur(O5, "request", m5);
            Y(_5) && (T4 = lr(T4, _5.pop())), _5.push(T4);
          }
          const M4 = y5 && y5 > v6.wc_sessionAuthenticate.req.ttl ? y5 : v6.wc_sessionAuthenticate.req.ttl, W4 = { authPayload: { type: d4 ?? "caip122", chains: n7, statement: a6, aud: c5, domain: h6, version: "1", nonce: p5, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: l6, nbf: w4, resources: _5 }, requester: { publicKey: E5, metadata: this.client.metadata }, expiryTimestamp: Lt(M4) }, N13 = { eip155: { chains: n7, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m5])], events: ["chainChanged", "accountsChanged"] } }, Ve2 = { requiredNamespaces: {}, optionalNamespaces: N13, relays: [{ protocol: "irn" }], pairingTopic: R3, proposer: { publicKey: E5, metadata: this.client.metadata }, expiryTimestamp: Lt(v6.wc_sessionPropose.req.ttl) }, { done: mt3, resolve: Me2, reject: Ee3 } = Dt(M4, "Request expired"), ce3 = async ({ error: O5, session: T4 }) => {
            if (this.events.off(qt("session_request", G3), Re2), O5) Ee3(O5);
            else if (T4) {
              T4.self.publicKey = E5, await this.client.session.set(T4.topic, T4), await this.setExpiry(T4.topic, T4.expiry), R3 && await this.client.core.pairing.updateMetadata({ topic: R3, metadata: T4.peer.metadata });
              const le2 = this.client.session.get(T4.topic);
              await this.deleteProposal(Z3), Me2({ session: le2 });
            }
          }, Re2 = async (O5) => {
            var T4, le2, ke2;
            if (await this.deletePendingAuthRequest(G3, { message: "fulfilled", code: 0 }), O5.error) {
              const te2 = _3("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
              return O5.error.code === te2.code ? void 0 : (this.events.off(qt("session_connect"), ce3), Ee3(O5.error.message));
            }
            await this.deleteProposal(Z3), this.events.off(qt("session_connect"), ce3);
            const { cacaos: $e2, responder: j3 } = O5.result, Ie3 = [], Ke2 = [];
            for (const te2 of $e2) {
              await or2({ cacao: te2, projectId: this.client.core.projectId }) || (this.client.logger.error(te2, "Signature verification failed"), Ee3(_3("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
              const { p: fe3 } = te2, ve3 = Y(fe3.resources), Ue2 = [ln(fe3.iss)], _t3 = fe(fe3.iss);
              if (ve3) {
                const qe2 = dr(ve3), Et3 = fr(ve3);
                Ie3.push(...qe2), Ue2.push(...Et3);
              }
              for (const qe2 of Ue2) Ke2.push(`${qe2}:${_t3}`);
            }
            const ee2 = await this.client.core.crypto.generateSharedKey(E5, j3.publicKey);
            let pe2;
            Ie3.length > 0 && (pe2 = { topic: ee2, acknowledged: true, self: { publicKey: E5, metadata: this.client.metadata }, peer: j3, controller: j3.publicKey, expiry: Lt(H2), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: R3, namespaces: Yr([...new Set(Ie3)], [...new Set(Ke2)]), transportType: r6 }, await this.client.core.relayer.subscribe(ee2, { transportType: r6 }), await this.client.session.set(ee2, pe2), R3 && await this.client.core.pairing.updateMetadata({ topic: R3, metadata: j3.metadata }), pe2 = this.client.session.get(ee2)), (T4 = this.client.metadata.redirect) != null && T4.linkMode && (le2 = j3.metadata.redirect) != null && le2.linkMode && (ke2 = j3.metadata.redirect) != null && ke2.universal && t3 && (this.client.core.addLinkModeSupportedApp(j3.metadata.redirect.universal), this.client.session.update(ee2, { transportType: M3.link_mode })), Me2({ auths: $e2, session: pe2 });
          }, G3 = payloadId(), Z3 = payloadId();
          this.events.once(qt("session_connect"), ce3), this.events.once(qt("session_request", G3), Re2);
          let Se2;
          try {
            if (i5) {
              const O5 = formatJsonRpcRequest("wc_sessionAuthenticate", W4, G3);
              this.client.core.history.set(R3, O5);
              const T4 = await this.client.core.crypto.encode("", O5, { type: M2, encoding: pr });
              Se2 = Kr(t3, R3, T4);
            } else await Promise.all([this.sendRequest({ topic: R3, method: "wc_sessionAuthenticate", params: W4, expiry: e3.expiry, throwOnFailedPublish: true, clientRpcId: G3 }), this.sendRequest({ topic: R3, method: "wc_sessionPropose", params: Ve2, expiry: v6.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: Z3 })]);
          } catch (O5) {
            throw this.events.off(qt("session_connect"), ce3), this.events.off(qt("session_request", G3), Re2), O5;
          }
          return await this.setProposal(Z3, I3({ id: Z3 }, Ve2)), await this.setAuthRequest(G3, { request: D3(I3({}, W4), { verifyContext: {} }), pairingTopic: R3, transportType: r6 }), { uri: Se2 ?? V4, response: mt3 };
        }, this.approveSessionAuthenticate = async (e3) => {
          const { id: t3, auths: s4 } = e3, i5 = this.client.core.eventClient.createEvent({ properties: { topic: t3.toString(), trace: [As.authenticated_session_approve_started] } });
          try {
            this.isInitialized();
          } catch (y5) {
            throw i5.setError(Ns.no_internet_connection), y5;
          }
          const r6 = this.getPendingAuthRequest(t3);
          if (!r6) throw i5.setError(Ns.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t3}`);
          const n7 = r6.transportType || M3.relay;
          n7 === M3.relay && await this.confirmOnlineStateOrThrow();
          const a6 = r6.requester.publicKey, c5 = await this.client.core.crypto.generateKeyPair(), h6 = vr(a6), p5 = { type: D2, receiverPublicKey: a6, senderPublicKey: c5 }, d4 = [], l6 = [];
          for (const y5 of s4) {
            if (!await or2({ cacao: y5, projectId: this.client.core.projectId })) {
              i5.setError(Ns.invalid_cacao);
              const S4 = _3("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
              throw await this.sendError({ id: t3, topic: h6, error: S4, encodeOpts: p5 }), new Error(S4.message);
            }
            i5.addTrace(As.cacaos_verified);
            const { p: _5 } = y5, R3 = Y(_5.resources), V4 = [ln(_5.iss)], E5 = fe(_5.iss);
            if (R3) {
              const S4 = dr(R3), M4 = fr(R3);
              d4.push(...S4), V4.push(...M4);
            }
            for (const S4 of V4) l6.push(`${S4}:${E5}`);
          }
          const w4 = await this.client.core.crypto.generateSharedKey(c5, a6);
          i5.addTrace(As.create_authenticated_session_topic);
          let m5;
          if ((d4 == null ? void 0 : d4.length) > 0) {
            m5 = { topic: w4, acknowledged: true, self: { publicKey: c5, metadata: this.client.metadata }, peer: { publicKey: a6, metadata: r6.requester.metadata }, controller: a6, expiry: Lt(H2), authentication: s4, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r6.pairingTopic, namespaces: Yr([...new Set(d4)], [...new Set(l6)]), transportType: n7 }, i5.addTrace(As.subscribing_authenticated_session_topic);
            try {
              await this.client.core.relayer.subscribe(w4, { transportType: n7 });
            } catch (y5) {
              throw i5.setError(Ns.subscribe_authenticated_session_topic_failure), y5;
            }
            i5.addTrace(As.subscribe_authenticated_session_topic_success), await this.client.session.set(w4, m5), i5.addTrace(As.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r6.pairingTopic, metadata: r6.requester.metadata });
          }
          i5.addTrace(As.publishing_authenticated_session_approve);
          try {
            await this.sendResult({ topic: h6, id: t3, result: { cacaos: s4, responder: { publicKey: c5, metadata: this.client.metadata } }, encodeOpts: p5, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r6.requester.metadata, n7) });
          } catch (y5) {
            throw i5.setError(Ns.authenticated_session_approve_publish_failure), y5;
          }
          return await this.client.auth.requests.delete(t3, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r6.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i5.eventId }), { session: m5 };
        }, this.rejectSessionAuthenticate = async (e3) => {
          this.isInitialized();
          const { id: t3, reason: s4 } = e3, i5 = this.getPendingAuthRequest(t3);
          if (!i5) throw new Error(`Could not find pending auth request with id ${t3}`);
          i5.transportType === M3.relay && await this.confirmOnlineStateOrThrow();
          const r6 = i5.requester.publicKey, n7 = await this.client.core.crypto.generateKeyPair(), a6 = vr(r6), c5 = { type: D2, receiverPublicKey: r6, senderPublicKey: n7 };
          await this.sendError({ id: t3, topic: a6, error: s4, encodeOpts: c5, rpcOpts: v6.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i5.requester.metadata, i5.transportType) }), await this.client.auth.requests.delete(t3, { message: "rejected", code: 0 }), await this.client.proposal.delete(t3, _3("USER_DISCONNECTED"));
        }, this.formatAuthMessage = (e3) => {
          this.isInitialized();
          const { request: t3, iss: s4 } = e3;
          return dn(t3, s4);
        }, this.processRelayMessageCache = () => {
          setTimeout(async () => {
            if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
              const e3 = this.relayMessageCache.shift();
              e3 && await this.onRelayMessage(e3);
            } catch (e3) {
              this.client.logger.error(e3);
            }
          }, 50);
        }, this.cleanupDuplicatePairings = async (e3) => {
          if (e3.pairingTopic) try {
            const t3 = this.client.core.pairing.pairings.get(e3.pairingTopic), s4 = this.client.core.pairing.pairings.getAll().filter((i5) => {
              var r6, n7;
              return ((r6 = i5.peerMetadata) == null ? void 0 : r6.url) && ((n7 = i5.peerMetadata) == null ? void 0 : n7.url) === e3.peer.metadata.url && i5.topic && i5.topic !== t3.topic;
            });
            if (s4.length === 0) return;
            this.client.logger.info(`Cleaning up ${s4.length} duplicate pairing(s)`), await Promise.all(s4.map((i5) => this.client.core.pairing.disconnect({ topic: i5.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
          } catch (t3) {
            this.client.logger.error(t3);
          }
        }, this.deleteSession = async (e3) => {
          var t3;
          const { topic: s4, expirerHasDeleted: i5 = false, emitEvent: r6 = true, id: n7 = 0 } = e3, { self: a6 } = this.client.session.get(s4);
          await this.client.core.relayer.unsubscribe(s4), await this.client.session.delete(s4, _3("USER_DISCONNECTED")), this.addToRecentlyDeleted(s4, "session"), this.client.core.crypto.keychain.has(a6.publicKey) && await this.client.core.crypto.deleteKeyPair(a6.publicKey), this.client.core.crypto.keychain.has(s4) && await this.client.core.crypto.deleteSymKey(s4), i5 || this.client.core.expirer.del(s4), this.client.core.storage.removeItem(De3).catch((c5) => this.client.logger.warn(c5)), this.getPendingSessionRequests().forEach((c5) => {
            c5.topic === s4 && this.deletePendingSessionRequest(c5.id, _3("USER_DISCONNECTED"));
          }), s4 === ((t3 = this.sessionRequestQueue.queue[0]) == null ? void 0 : t3.topic) && (this.sessionRequestQueue.state = x5.idle), r6 && this.client.events.emit("session_delete", { id: n7, topic: s4 });
        }, this.deleteProposal = async (e3, t3) => {
          if (t3) try {
            const s4 = this.client.proposal.get(e3), i5 = this.client.core.eventClient.getEvent({ topic: s4.pairingTopic });
            i5 == null ? void 0 : i5.setError(Os.proposal_expired);
          } catch {
          }
          await Promise.all([this.client.proposal.delete(e3, _3("USER_DISCONNECTED")), t3 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "proposal");
        }, this.deletePendingSessionRequest = async (e3, t3, s4 = false) => {
          await Promise.all([this.client.pendingRequest.delete(e3, t3), s4 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i5) => i5.id !== e3), s4 && (this.sessionRequestQueue.state = x5.idle, this.client.events.emit("session_request_expire", { id: e3 }));
        }, this.deletePendingAuthRequest = async (e3, t3, s4 = false) => {
          await Promise.all([this.client.auth.requests.delete(e3, t3), s4 ? Promise.resolve() : this.client.core.expirer.del(e3)]);
        }, this.setExpiry = async (e3, t3) => {
          this.client.session.keys.includes(e3) && (this.client.core.expirer.set(e3, t3), await this.client.session.update(e3, { expiry: t3 }));
        }, this.setProposal = async (e3, t3) => {
          this.client.core.expirer.set(e3, Lt(v6.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e3, t3);
        }, this.setAuthRequest = async (e3, t3) => {
          const { request: s4, pairingTopic: i5, transportType: r6 = M3.relay } = t3;
          this.client.core.expirer.set(e3, s4.expiryTimestamp), await this.client.auth.requests.set(e3, { authPayload: s4.authPayload, requester: s4.requester, expiryTimestamp: s4.expiryTimestamp, id: e3, pairingTopic: i5, verifyContext: s4.verifyContext, transportType: r6 });
        }, this.setPendingSessionRequest = async (e3) => {
          const { id: t3, topic: s4, params: i5, verifyContext: r6 } = e3, n7 = i5.request.expiryTimestamp || Lt(v6.wc_sessionRequest.req.ttl);
          this.client.core.expirer.set(t3, n7), await this.client.pendingRequest.set(t3, { id: t3, topic: s4, params: i5, verifyContext: r6 });
        }, this.sendRequest = async (e3) => {
          const { topic: t3, method: s4, params: i5, expiry: r6, relayRpcId: n7, clientRpcId: a6, throwOnFailedPublish: c5, appLink: h6 } = e3, p5 = formatJsonRpcRequest(s4, i5, a6);
          let d4;
          const l6 = !!h6;
          try {
            const y5 = l6 ? pr : ge;
            d4 = await this.client.core.crypto.encode(t3, p5, { encoding: y5 });
          } catch (y5) {
            throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t3} failed`), y5;
          }
          let w4;
          if (ct2.includes(s4)) {
            const y5 = br(JSON.stringify(p5)), _5 = br(d4);
            w4 = await this.client.core.verify.register({ id: _5, decryptedId: y5 });
          }
          const m5 = v6[s4].req;
          if (m5.attestation = w4, r6 && (m5.ttl = r6), n7 && (m5.id = n7), this.client.core.history.set(t3, p5), l6) {
            const y5 = Kr(h6, t3, d4);
            await global.Linking.openURL(y5, this.client.name);
          } else {
            const y5 = v6[s4].req;
            r6 && (y5.ttl = r6), n7 && (y5.id = n7), c5 ? (y5.internal = D3(I3({}, y5.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t3, d4, y5)) : this.client.core.relayer.publish(t3, d4, y5).catch((_5) => this.client.logger.error(_5));
          }
          return p5.id;
        }, this.sendResult = async (e3) => {
          const { id: t3, topic: s4, result: i5, throwOnFailedPublish: r6, encodeOpts: n7, appLink: a6 } = e3, c5 = formatJsonRpcResult(t3, i5);
          let h6;
          const p5 = a6 && typeof (global == null ? void 0 : global.Linking) < "u";
          try {
            const l6 = p5 ? pr : ge;
            h6 = await this.client.core.crypto.encode(s4, c5, D3(I3({}, n7 || {}), { encoding: l6 }));
          } catch (l6) {
            throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s4} failed`), l6;
          }
          let d4;
          try {
            d4 = await this.client.core.history.get(s4, t3);
          } catch (l6) {
            throw this.client.logger.error(`sendResult() -> history.get(${s4}, ${t3}) failed`), l6;
          }
          if (p5) {
            const l6 = Kr(a6, s4, h6);
            await global.Linking.openURL(l6, this.client.name);
          } else {
            const l6 = v6[d4.request.method].res;
            r6 ? (l6.internal = D3(I3({}, l6.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s4, h6, l6)) : this.client.core.relayer.publish(s4, h6, l6).catch((w4) => this.client.logger.error(w4));
          }
          await this.client.core.history.resolve(c5);
        }, this.sendError = async (e3) => {
          const { id: t3, topic: s4, error: i5, encodeOpts: r6, rpcOpts: n7, appLink: a6 } = e3, c5 = formatJsonRpcError(t3, i5);
          let h6;
          const p5 = a6 && typeof (global == null ? void 0 : global.Linking) < "u";
          try {
            const l6 = p5 ? pr : ge;
            h6 = await this.client.core.crypto.encode(s4, c5, D3(I3({}, r6 || {}), { encoding: l6 }));
          } catch (l6) {
            throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s4} failed`), l6;
          }
          let d4;
          try {
            d4 = await this.client.core.history.get(s4, t3);
          } catch (l6) {
            throw this.client.logger.error(`sendError() -> history.get(${s4}, ${t3}) failed`), l6;
          }
          if (p5) {
            const l6 = Kr(a6, s4, h6);
            await global.Linking.openURL(l6, this.client.name);
          } else {
            const l6 = n7 || v6[d4.request.method].res;
            this.client.core.relayer.publish(s4, h6, l6);
          }
          await this.client.core.history.resolve(c5);
        }, this.cleanup = async () => {
          const e3 = [], t3 = [];
          this.client.session.getAll().forEach((s4) => {
            let i5 = false;
            Ft(s4.expiry) && (i5 = true), this.client.core.crypto.keychain.has(s4.topic) || (i5 = true), i5 && e3.push(s4.topic);
          }), this.client.proposal.getAll().forEach((s4) => {
            Ft(s4.expiryTimestamp) && t3.push(s4.id);
          }), await Promise.all([...e3.map((s4) => this.deleteSession({ topic: s4 })), ...t3.map((s4) => this.deleteProposal(s4))]);
        }, this.onRelayEventRequest = async (e3) => {
          this.requestQueue.queue.push(e3), await this.processRequestsQueue();
        }, this.processRequestsQueue = async () => {
          if (this.requestQueue.state === x5.active) {
            this.client.logger.info("Request queue already active, skipping...");
            return;
          }
          for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
            this.requestQueue.state = x5.active;
            const e3 = this.requestQueue.queue.shift();
            if (e3) try {
              await this.processRequest(e3);
            } catch (t3) {
              this.client.logger.warn(t3);
            }
          }
          this.requestQueue.state = x5.idle;
        }, this.processRequest = async (e3) => {
          const { topic: t3, payload: s4, attestation: i5, transportType: r6, encryptedId: n7 } = e3, a6 = s4.method;
          if (!this.shouldIgnorePairingRequest({ topic: t3, requestMethod: a6 })) switch (a6) {
            case "wc_sessionPropose":
              return await this.onSessionProposeRequest({ topic: t3, payload: s4, attestation: i5, encryptedId: n7 });
            case "wc_sessionSettle":
              return await this.onSessionSettleRequest(t3, s4);
            case "wc_sessionUpdate":
              return await this.onSessionUpdateRequest(t3, s4);
            case "wc_sessionExtend":
              return await this.onSessionExtendRequest(t3, s4);
            case "wc_sessionPing":
              return await this.onSessionPingRequest(t3, s4);
            case "wc_sessionDelete":
              return await this.onSessionDeleteRequest(t3, s4);
            case "wc_sessionRequest":
              return await this.onSessionRequest({ topic: t3, payload: s4, attestation: i5, encryptedId: n7, transportType: r6 });
            case "wc_sessionEvent":
              return await this.onSessionEventRequest(t3, s4);
            case "wc_sessionAuthenticate":
              return await this.onSessionAuthenticateRequest({ topic: t3, payload: s4, attestation: i5, encryptedId: n7, transportType: r6 });
            default:
              return this.client.logger.info(`Unsupported request method ${a6}`);
          }
        }, this.onRelayEventResponse = async (e3) => {
          const { topic: t3, payload: s4, transportType: i5 } = e3, r6 = (await this.client.core.history.get(t3, s4.id)).request.method;
          switch (r6) {
            case "wc_sessionPropose":
              return this.onSessionProposeResponse(t3, s4, i5);
            case "wc_sessionSettle":
              return this.onSessionSettleResponse(t3, s4);
            case "wc_sessionUpdate":
              return this.onSessionUpdateResponse(t3, s4);
            case "wc_sessionExtend":
              return this.onSessionExtendResponse(t3, s4);
            case "wc_sessionPing":
              return this.onSessionPingResponse(t3, s4);
            case "wc_sessionRequest":
              return this.onSessionRequestResponse(t3, s4);
            case "wc_sessionAuthenticate":
              return this.onSessionAuthenticateResponse(t3, s4);
            default:
              return this.client.logger.info(`Unsupported response method ${r6}`);
          }
        }, this.onRelayEventUnknownPayload = (e3) => {
          const { topic: t3 } = e3, { message: s4 } = S3("MISSING_OR_INVALID", `Decoded payload on topic ${t3} is not identifiable as a JSON-RPC request or a response.`);
          throw new Error(s4);
        }, this.shouldIgnorePairingRequest = (e3) => {
          const { topic: t3, requestMethod: s4 } = e3, i5 = this.expectedPairingMethodMap.get(t3);
          return !i5 || i5.includes(s4) ? false : !!(i5.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
        }, this.onSessionProposeRequest = async (e3) => {
          const { topic: t3, payload: s4, attestation: i5, encryptedId: r6 } = e3, { params: n7, id: a6 } = s4;
          try {
            const c5 = this.client.core.eventClient.getEvent({ topic: t3 });
            this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), c5 == null ? void 0 : c5.setError($2.proposal_listener_not_found)), this.isValidConnect(I3({}, s4.params));
            const h6 = n7.expiryTimestamp || Lt(v6.wc_sessionPropose.req.ttl), p5 = I3({ id: a6, pairingTopic: t3, expiryTimestamp: h6 }, n7);
            await this.setProposal(a6, p5);
            const d4 = await this.getVerifyContext({ attestationId: i5, hash: br(JSON.stringify(s4)), encryptedId: r6, metadata: p5.proposer.metadata });
            c5 == null ? void 0 : c5.addTrace(z4.emit_session_proposal), this.client.events.emit("session_proposal", { id: a6, params: p5, verifyContext: d4 });
          } catch (c5) {
            await this.sendError({ id: a6, topic: t3, error: c5, rpcOpts: v6.wc_sessionPropose.autoReject }), this.client.logger.error(c5);
          }
        }, this.onSessionProposeResponse = async (e3, t3, s4) => {
          const { id: i5 } = t3;
          if (isJsonRpcResult(t3)) {
            const { result: r6 } = t3;
            this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r6 });
            const n7 = this.client.proposal.get(i5);
            this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n7 });
            const a6 = n7.proposer.publicKey;
            this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a6 });
            const c5 = r6.responderPublicKey;
            this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: c5 });
            const h6 = await this.client.core.crypto.generateSharedKey(a6, c5);
            this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", sessionTopic: h6 });
            const p5 = await this.client.core.relayer.subscribe(h6, { transportType: s4 });
            this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: p5 }), await this.client.core.pairing.activate({ topic: e3 });
          } else if (isJsonRpcError(t3)) {
            await this.client.proposal.delete(i5, _3("USER_DISCONNECTED"));
            const r6 = qt("session_connect");
            if (this.events.listenerCount(r6) === 0) throw new Error(`emitting ${r6} without any listeners, 954`);
            this.events.emit(qt("session_connect"), { error: t3.error });
          }
        }, this.onSessionSettleRequest = async (e3, t3) => {
          const { id: s4, params: i5 } = t3;
          try {
            this.isValidSessionSettleRequest(i5);
            const { relay: r6, controller: n7, expiry: a6, namespaces: c5, sessionProperties: h6, sessionConfig: p5 } = t3.params, d4 = D3(I3(I3({ topic: e3, relay: r6, expiry: a6, namespaces: c5, acknowledged: true, pairingTopic: "", requiredNamespaces: {}, optionalNamespaces: {}, controller: n7.publicKey, self: { publicKey: "", metadata: this.client.metadata }, peer: { publicKey: n7.publicKey, metadata: n7.metadata } }, h6 && { sessionProperties: h6 }), p5 && { sessionConfig: p5 }), { transportType: M3.relay }), l6 = qt("session_connect");
            if (this.events.listenerCount(l6) === 0) throw new Error(`emitting ${l6} without any listeners 997`);
            this.events.emit(qt("session_connect"), { session: d4 }), await this.sendResult({ id: t3.id, topic: e3, result: true, throwOnFailedPublish: true });
          } catch (r6) {
            await this.sendError({ id: s4, topic: e3, error: r6 }), this.client.logger.error(r6);
          }
        }, this.onSessionSettleResponse = async (e3, t3) => {
          const { id: s4 } = t3;
          isJsonRpcResult(t3) ? (await this.client.session.update(e3, { acknowledged: true }), this.events.emit(qt("session_approve", s4), {})) : isJsonRpcError(t3) && (await this.client.session.delete(e3, _3("USER_DISCONNECTED")), this.events.emit(qt("session_approve", s4), { error: t3.error }));
        }, this.onSessionUpdateRequest = async (e3, t3) => {
          const { params: s4, id: i5 } = t3;
          try {
            const r6 = `${e3}_session_update`, n7 = bo.get(r6);
            if (n7 && this.isRequestOutOfSync(n7, i5)) {
              this.client.logger.warn(`Discarding out of sync request - ${i5}`), this.sendError({ id: i5, topic: e3, error: _3("INVALID_UPDATE_REQUEST") });
              return;
            }
            this.isValidUpdate(I3({ topic: e3 }, s4));
            try {
              bo.set(r6, i5), await this.client.session.update(e3, { namespaces: s4.namespaces }), await this.sendResult({ id: i5, topic: e3, result: true, throwOnFailedPublish: true });
            } catch (a6) {
              throw bo.delete(r6), a6;
            }
            this.client.events.emit("session_update", { id: i5, topic: e3, params: s4 });
          } catch (r6) {
            await this.sendError({ id: i5, topic: e3, error: r6 }), this.client.logger.error(r6);
          }
        }, this.isRequestOutOfSync = (e3, t3) => t3.toString().slice(0, -3) < e3.toString().slice(0, -3), this.onSessionUpdateResponse = (e3, t3) => {
          const { id: s4 } = t3, i5 = qt("session_update", s4);
          if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners`);
          isJsonRpcResult(t3) ? this.events.emit(qt("session_update", s4), {}) : isJsonRpcError(t3) && this.events.emit(qt("session_update", s4), { error: t3.error });
        }, this.onSessionExtendRequest = async (e3, t3) => {
          const { id: s4 } = t3;
          try {
            this.isValidExtend({ topic: e3 }), await this.setExpiry(e3, Lt(H2)), await this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s4, topic: e3 });
          } catch (i5) {
            await this.sendError({ id: s4, topic: e3, error: i5 }), this.client.logger.error(i5);
          }
        }, this.onSessionExtendResponse = (e3, t3) => {
          const { id: s4 } = t3, i5 = qt("session_extend", s4);
          if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners`);
          isJsonRpcResult(t3) ? this.events.emit(qt("session_extend", s4), {}) : isJsonRpcError(t3) && this.events.emit(qt("session_extend", s4), { error: t3.error });
        }, this.onSessionPingRequest = async (e3, t3) => {
          const { id: s4 } = t3;
          try {
            this.isValidPing({ topic: e3 }), await this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s4, topic: e3 });
          } catch (i5) {
            await this.sendError({ id: s4, topic: e3, error: i5 }), this.client.logger.error(i5);
          }
        }, this.onSessionPingResponse = (e3, t3) => {
          const { id: s4 } = t3, i5 = qt("session_ping", s4);
          if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners`);
          setTimeout(() => {
            isJsonRpcResult(t3) ? this.events.emit(qt("session_ping", s4), {}) : isJsonRpcError(t3) && this.events.emit(qt("session_ping", s4), { error: t3.error });
          }, 500);
        }, this.onSessionDeleteRequest = async (e3, t3) => {
          const { id: s4 } = t3;
          try {
            this.isValidDisconnect({ topic: e3, reason: t3.params }), Promise.all([new Promise((i5) => {
              this.client.core.relayer.once(v5.publish, async () => {
                i5(await this.deleteSession({ topic: e3, id: s4 }));
              });
            }), this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e3, error: _3("USER_DISCONNECTED") })]).catch((i5) => this.client.logger.error(i5));
          } catch (i5) {
            this.client.logger.error(i5);
          }
        }, this.onSessionRequest = async (e3) => {
          var t3, s4, i5;
          const { topic: r6, payload: n7, attestation: a6, encryptedId: c5, transportType: h6 } = e3, { id: p5, params: d4 } = n7;
          try {
            await this.isValidRequest(I3({ topic: r6 }, d4));
            const l6 = this.client.session.get(r6), w4 = await this.getVerifyContext({ attestationId: a6, hash: br(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", d4, p5))), encryptedId: c5, metadata: l6.peer.metadata, transportType: h6 }), m5 = { id: p5, topic: r6, params: d4, verifyContext: w4 };
            await this.setPendingSessionRequest(m5), h6 === M3.link_mode && (t3 = l6.peer.metadata.redirect) != null && t3.universal && this.client.core.addLinkModeSupportedApp((s4 = l6.peer.metadata.redirect) == null ? void 0 : s4.universal), (i5 = this.client.signConfig) != null && i5.disableRequestQueue ? this.emitSessionRequest(m5) : (this.addSessionRequestToSessionRequestQueue(m5), this.processSessionRequestQueue());
          } catch (l6) {
            await this.sendError({ id: p5, topic: r6, error: l6 }), this.client.logger.error(l6);
          }
        }, this.onSessionRequestResponse = (e3, t3) => {
          const { id: s4 } = t3, i5 = qt("session_request", s4);
          if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners`);
          isJsonRpcResult(t3) ? this.events.emit(qt("session_request", s4), { result: t3.result }) : isJsonRpcError(t3) && this.events.emit(qt("session_request", s4), { error: t3.error });
        }, this.onSessionEventRequest = async (e3, t3) => {
          const { id: s4, params: i5 } = t3;
          try {
            const r6 = `${e3}_session_event_${i5.event.name}`, n7 = bo.get(r6);
            if (n7 && this.isRequestOutOfSync(n7, s4)) {
              this.client.logger.info(`Discarding out of sync request - ${s4}`);
              return;
            }
            this.isValidEmit(I3({ topic: e3 }, i5)), this.client.events.emit("session_event", { id: s4, topic: e3, params: i5 }), bo.set(r6, s4);
          } catch (r6) {
            await this.sendError({ id: s4, topic: e3, error: r6 }), this.client.logger.error(r6);
          }
        }, this.onSessionAuthenticateResponse = (e3, t3) => {
          const { id: s4 } = t3;
          this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e3, payload: t3 }), isJsonRpcResult(t3) ? this.events.emit(qt("session_request", s4), { result: t3.result }) : isJsonRpcError(t3) && this.events.emit(qt("session_request", s4), { error: t3.error });
        }, this.onSessionAuthenticateRequest = async (e3) => {
          var t3;
          const { topic: s4, payload: i5, attestation: r6, encryptedId: n7, transportType: a6 } = e3;
          try {
            const { requester: c5, authPayload: h6, expiryTimestamp: p5 } = i5.params, d4 = await this.getVerifyContext({ attestationId: r6, hash: br(JSON.stringify(i5)), encryptedId: n7, metadata: c5.metadata, transportType: a6 }), l6 = { requester: c5, pairingTopic: s4, id: i5.id, authPayload: h6, verifyContext: d4, expiryTimestamp: p5 };
            await this.setAuthRequest(i5.id, { request: l6, pairingTopic: s4, transportType: a6 }), a6 === M3.link_mode && (t3 = c5.metadata.redirect) != null && t3.universal && this.client.core.addLinkModeSupportedApp(c5.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s4, params: i5.params, id: i5.id, verifyContext: d4 });
          } catch (c5) {
            this.client.logger.error(c5);
            const h6 = i5.params.requester.publicKey, p5 = await this.client.core.crypto.generateKeyPair(), d4 = this.getAppLinkIfEnabled(i5.params.requester.metadata, a6), l6 = { type: D2, receiverPublicKey: h6, senderPublicKey: p5 };
            await this.sendError({ id: i5.id, topic: s4, error: c5, encodeOpts: l6, rpcOpts: v6.wc_sessionAuthenticate.autoReject, appLink: d4 });
          }
        }, this.addSessionRequestToSessionRequestQueue = (e3) => {
          this.sessionRequestQueue.queue.push(e3);
        }, this.cleanupAfterResponse = (e3) => {
          this.deletePendingSessionRequest(e3.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
            this.sessionRequestQueue.state = x5.idle, this.processSessionRequestQueue();
          }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
        }, this.cleanupPendingSentRequestsForTopic = ({ topic: e3, error: t3 }) => {
          const s4 = this.client.core.history.pending;
          s4.length > 0 && s4.filter((i5) => i5.topic === e3 && i5.request.method === "wc_sessionRequest").forEach((i5) => {
            const r6 = i5.request.id, n7 = qt("session_request", r6);
            if (this.events.listenerCount(n7) === 0) throw new Error(`emitting ${n7} without any listeners`);
            this.events.emit(qt("session_request", i5.request.id), { error: t3 });
          });
        }, this.processSessionRequestQueue = () => {
          if (this.sessionRequestQueue.state === x5.active) {
            this.client.logger.info("session request queue is already active.");
            return;
          }
          const e3 = this.sessionRequestQueue.queue[0];
          if (!e3) {
            this.client.logger.info("session request queue is empty.");
            return;
          }
          try {
            this.sessionRequestQueue.state = x5.active, this.emitSessionRequest(e3);
          } catch (t3) {
            this.client.logger.error(t3);
          }
        }, this.emitSessionRequest = (e3) => {
          this.client.events.emit("session_request", e3);
        }, this.onPairingCreated = (e3) => {
          if (e3.methods && this.expectedPairingMethodMap.set(e3.topic, e3.methods), e3.active) return;
          const t3 = this.client.proposal.getAll().find((s4) => s4.pairingTopic === e3.topic);
          t3 && this.onSessionProposeRequest({ topic: e3.topic, payload: formatJsonRpcRequest("wc_sessionPropose", { requiredNamespaces: t3.requiredNamespaces, optionalNamespaces: t3.optionalNamespaces, relays: t3.relays, proposer: t3.proposer, sessionProperties: t3.sessionProperties }, t3.id) });
        }, this.isValidConnect = async (e3) => {
          if (!so(e3)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e3)}`);
            throw new Error(a6);
          }
          const { pairingTopic: t3, requiredNamespaces: s4, optionalNamespaces: i5, sessionProperties: r6, relays: n7 } = e3;
          if (P2(t3) || await this.isValidPairingTopic(t3), !ro(n7, true)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `connect() relays: ${n7}`);
            throw new Error(a6);
          }
          !P2(s4) && Z(s4) !== 0 && this.validateNamespaces(s4, "requiredNamespaces"), !P2(i5) && Z(i5) !== 0 && this.validateNamespaces(i5, "optionalNamespaces"), P2(r6) || this.validateSessionProps(r6, "sessionProperties");
        }, this.validateNamespaces = (e3, t3) => {
          const s4 = to(e3, "connect()", t3);
          if (s4) throw new Error(s4.message);
        }, this.isValidApprove = async (e3) => {
          if (!so(e3)) throw new Error(S3("MISSING_OR_INVALID", `approve() params: ${e3}`).message);
          const { id: t3, namespaces: s4, relayProtocol: i5, sessionProperties: r6 } = e3;
          this.checkRecentlyDeleted(t3), await this.isValidProposalId(t3);
          const n7 = this.client.proposal.get(t3), a6 = Wn(s4, "approve()");
          if (a6) throw new Error(a6.message);
          const c5 = zn(n7.requiredNamespaces, s4, "approve()");
          if (c5) throw new Error(c5.message);
          if (!b2(i5, true)) {
            const { message: h6 } = S3("MISSING_OR_INVALID", `approve() relayProtocol: ${i5}`);
            throw new Error(h6);
          }
          P2(r6) || this.validateSessionProps(r6, "sessionProperties");
        }, this.isValidReject = async (e3) => {
          if (!so(e3)) {
            const { message: i5 } = S3("MISSING_OR_INVALID", `reject() params: ${e3}`);
            throw new Error(i5);
          }
          const { id: t3, reason: s4 } = e3;
          if (this.checkRecentlyDeleted(t3), await this.isValidProposalId(t3), !io(s4)) {
            const { message: i5 } = S3("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s4)}`);
            throw new Error(i5);
          }
        }, this.isValidSessionSettleRequest = (e3) => {
          if (!so(e3)) {
            const { message: c5 } = S3("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e3}`);
            throw new Error(c5);
          }
          const { relay: t3, controller: s4, namespaces: i5, expiry: r6 } = e3;
          if (!Jn(t3)) {
            const { message: c5 } = S3("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
            throw new Error(c5);
          }
          const n7 = no(s4, "onSessionSettleRequest()");
          if (n7) throw new Error(n7.message);
          const a6 = Wn(i5, "onSessionSettleRequest()");
          if (a6) throw new Error(a6.message);
          if (Ft(r6)) {
            const { message: c5 } = S3("EXPIRED", "onSessionSettleRequest()");
            throw new Error(c5);
          }
        }, this.isValidUpdate = async (e3) => {
          if (!so(e3)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `update() params: ${e3}`);
            throw new Error(a6);
          }
          const { topic: t3, namespaces: s4 } = e3;
          this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
          const i5 = this.client.session.get(t3), r6 = Wn(s4, "update()");
          if (r6) throw new Error(r6.message);
          const n7 = zn(i5.requiredNamespaces, s4, "update()");
          if (n7) throw new Error(n7.message);
        }, this.isValidExtend = async (e3) => {
          if (!so(e3)) {
            const { message: s4 } = S3("MISSING_OR_INVALID", `extend() params: ${e3}`);
            throw new Error(s4);
          }
          const { topic: t3 } = e3;
          this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
        }, this.isValidRequest = async (e3) => {
          if (!so(e3)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `request() params: ${e3}`);
            throw new Error(a6);
          }
          const { topic: t3, request: s4, chainId: i5, expiry: r6 } = e3;
          this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
          const { namespaces: n7 } = this.client.session.get(t3);
          if (!lo(n7, i5)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `request() chainId: ${i5}`);
            throw new Error(a6);
          }
          if (!co(s4)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `request() ${JSON.stringify(s4)}`);
            throw new Error(a6);
          }
          if (!fo(n7, i5, s4.method)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `request() method: ${s4.method}`);
            throw new Error(a6);
          }
          if (r6 && !yo(r6, me3)) {
            const { message: a6 } = S3("MISSING_OR_INVALID", `request() expiry: ${r6}. Expiry must be a number (in seconds) between ${me3.min} and ${me3.max}`);
            throw new Error(a6);
          }
        }, this.isValidRespond = async (e3) => {
          var t3;
          if (!so(e3)) {
            const { message: r6 } = S3("MISSING_OR_INVALID", `respond() params: ${e3}`);
            throw new Error(r6);
          }
          const { topic: s4, response: i5 } = e3;
          try {
            await this.isValidSessionTopic(s4);
          } catch (r6) {
            throw (t3 = e3 == null ? void 0 : e3.response) != null && t3.id && this.cleanupAfterResponse(e3), r6;
          }
          if (!ao(i5)) {
            const { message: r6 } = S3("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i5)}`);
            throw new Error(r6);
          }
        }, this.isValidPing = async (e3) => {
          if (!so(e3)) {
            const { message: s4 } = S3("MISSING_OR_INVALID", `ping() params: ${e3}`);
            throw new Error(s4);
          }
          const { topic: t3 } = e3;
          await this.isValidSessionOrPairingTopic(t3);
        }, this.isValidEmit = async (e3) => {
          if (!so(e3)) {
            const { message: n7 } = S3("MISSING_OR_INVALID", `emit() params: ${e3}`);
            throw new Error(n7);
          }
          const { topic: t3, event: s4, chainId: i5 } = e3;
          await this.isValidSessionTopic(t3);
          const { namespaces: r6 } = this.client.session.get(t3);
          if (!lo(r6, i5)) {
            const { message: n7 } = S3("MISSING_OR_INVALID", `emit() chainId: ${i5}`);
            throw new Error(n7);
          }
          if (!uo(s4)) {
            const { message: n7 } = S3("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
            throw new Error(n7);
          }
          if (!po(r6, i5, s4.name)) {
            const { message: n7 } = S3("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
            throw new Error(n7);
          }
        }, this.isValidDisconnect = async (e3) => {
          if (!so(e3)) {
            const { message: s4 } = S3("MISSING_OR_INVALID", `disconnect() params: ${e3}`);
            throw new Error(s4);
          }
          const { topic: t3 } = e3;
          await this.isValidSessionOrPairingTopic(t3);
        }, this.isValidAuthenticate = (e3) => {
          const { chains: t3, uri: s4, domain: i5, nonce: r6 } = e3;
          if (!Array.isArray(t3) || t3.length === 0) throw new Error("chains is required and must be a non-empty array");
          if (!b2(s4, false)) throw new Error("uri is required parameter");
          if (!b2(i5, false)) throw new Error("domain is required parameter");
          if (!b2(r6, false)) throw new Error("nonce is required parameter");
          if ([...new Set(t3.map((a6) => re(a6).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
          const { namespace: n7 } = re(t3[0]);
          if (n7 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
        }, this.getVerifyContext = async (e3) => {
          const { attestationId: t3, hash: s4, encryptedId: i5, metadata: r6, transportType: n7 } = e3, a6 = { verified: { verifyUrl: r6.verifyUrl || X2, validation: "UNKNOWN", origin: r6.url || "" } };
          try {
            if (n7 === M3.link_mode) {
              const h6 = this.getAppLinkIfEnabled(r6, n7);
              return a6.verified.validation = h6 && new URL(h6).origin === new URL(r6.url).origin ? "VALID" : "INVALID", a6;
            }
            const c5 = await this.client.core.verify.resolve({ attestationId: t3, hash: s4, encryptedId: i5, verifyUrl: r6.verifyUrl });
            c5 && (a6.verified.origin = c5.origin, a6.verified.isScam = c5.isScam, a6.verified.validation = c5.origin === new URL(r6.url).origin ? "VALID" : "INVALID");
          } catch (c5) {
            this.client.logger.warn(c5);
          }
          return this.client.logger.debug(`Verify context: ${JSON.stringify(a6)}`), a6;
        }, this.validateSessionProps = (e3, t3) => {
          Object.values(e3).forEach((s4) => {
            if (!b2(s4, false)) {
              const { message: i5 } = S3("MISSING_OR_INVALID", `${t3} must be in Record<string, string> format. Received: ${JSON.stringify(s4)}`);
              throw new Error(i5);
            }
          });
        }, this.getPendingAuthRequest = (e3) => {
          const t3 = this.client.auth.requests.get(e3);
          return typeof t3 == "object" ? t3 : void 0;
        }, this.addToRecentlyDeleted = (e3, t3) => {
          if (this.recentlyDeletedMap.set(e3, t3), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
            let s4 = 0;
            const i5 = this.recentlyDeletedLimit / 2;
            for (const r6 of this.recentlyDeletedMap.keys()) {
              if (s4++ >= i5) break;
              this.recentlyDeletedMap.delete(r6);
            }
          }
        }, this.checkRecentlyDeleted = (e3) => {
          const t3 = this.recentlyDeletedMap.get(e3);
          if (t3) {
            const { message: s4 } = S3("MISSING_OR_INVALID", `Record was recently deleted - ${t3}: ${e3}`);
            throw new Error(s4);
          }
        }, this.isLinkModeEnabled = (e3, t3) => {
          var s4, i5, r6, n7, a6, c5, h6, p5, d4;
          return !e3 || t3 !== M3.link_mode ? false : ((i5 = (s4 = this.client.metadata) == null ? void 0 : s4.redirect) == null ? void 0 : i5.linkMode) === true && ((n7 = (r6 = this.client.metadata) == null ? void 0 : r6.redirect) == null ? void 0 : n7.universal) !== void 0 && ((c5 = (a6 = this.client.metadata) == null ? void 0 : a6.redirect) == null ? void 0 : c5.universal) !== "" && ((h6 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : h6.universal) !== void 0 && ((p5 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : p5.universal) !== "" && ((d4 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : d4.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e3.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
        }, this.getAppLinkIfEnabled = (e3, t3) => {
          var s4;
          return this.isLinkModeEnabled(e3, t3) ? (s4 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : s4.universal : void 0;
        }, this.handleLinkModeMessage = ({ url: e3 }) => {
          if (!e3 || !e3.includes("wc_ev") || !e3.includes("topic")) return;
          const t3 = Wt(e3, "topic") || "", s4 = decodeURIComponent(Wt(e3, "wc_ev") || ""), i5 = this.client.session.keys.includes(t3);
          i5 && this.client.session.update(t3, { transportType: M3.link_mode }), this.client.core.dispatchEnvelope({ topic: t3, message: s4, sessionExists: i5 });
        }, this.registerLinkModeListeners = async () => {
          var e3;
          if (zt() || $() && (e3 = this.client.metadata.redirect) != null && e3.linkMode) {
            const t3 = global == null ? void 0 : global.Linking;
            if (typeof t3 < "u") {
              t3.addEventListener("url", this.handleLinkModeMessage, this.client.name);
              const s4 = await t3.getInitialURL();
              s4 && setTimeout(() => {
                this.handleLinkModeMessage({ url: s4 });
              }, 50);
            }
          }
        };
      }
      isInitialized() {
        if (!this.initialized) {
          const { message: o4 } = S3("NOT_INITIALIZED", this.name);
          throw new Error(o4);
        }
      }
      async confirmOnlineStateOrThrow() {
        await this.client.core.relayer.confirmOnlineStateOrThrow();
      }
      registerRelayerEvents() {
        this.client.core.relayer.on(v5.message, (o4) => {
          !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(o4) : this.onRelayMessage(o4);
        });
      }
      async onRelayMessage(o4) {
        const { topic: e3, message: t3, attestation: s4, transportType: i5 } = o4, { publicKey: r6 } = this.client.auth.authKeys.keys.includes(ae3) ? this.client.auth.authKeys.get(ae3) : { responseTopic: void 0, publicKey: void 0 }, n7 = await this.client.core.crypto.decode(e3, t3, { receiverPublicKey: r6, encoding: i5 === M3.link_mode ? pr : ge });
        try {
          isJsonRpcRequest(n7) ? (this.client.core.history.set(e3, n7), this.onRelayEventRequest({ topic: e3, payload: n7, attestation: s4, transportType: i5, encryptedId: br(t3) })) : isJsonRpcResponse(n7) ? (await this.client.core.history.resolve(n7), await this.onRelayEventResponse({ topic: e3, payload: n7, transportType: i5 }), this.client.core.history.delete(e3, n7.id)) : this.onRelayEventUnknownPayload({ topic: e3, payload: n7, transportType: i5 });
        } catch (a6) {
          this.client.logger.error(a6);
        }
      }
      registerExpirerEvents() {
        this.client.core.expirer.on(x4.expired, async (o4) => {
          const { topic: e3, id: t3 } = Kt(o4.target);
          if (t3 && this.client.pendingRequest.keys.includes(t3)) return await this.deletePendingSessionRequest(t3, S3("EXPIRED"), true);
          if (t3 && this.client.auth.requests.keys.includes(t3)) return await this.deletePendingAuthRequest(t3, S3("EXPIRED"), true);
          e3 ? this.client.session.keys.includes(e3) && (await this.deleteSession({ topic: e3, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e3 })) : t3 && (await this.deleteProposal(t3, true), this.client.events.emit("proposal_expire", { id: t3 }));
        });
      }
      registerPairingEvents() {
        this.client.core.pairing.events.on(j2.create, (o4) => this.onPairingCreated(o4)), this.client.core.pairing.events.on(j2.delete, (o4) => {
          this.addToRecentlyDeleted(o4.topic, "pairing");
        });
      }
      isValidPairingTopic(o4) {
        if (!b2(o4, false)) {
          const { message: e3 } = S3("MISSING_OR_INVALID", `pairing topic should be a string: ${o4}`);
          throw new Error(e3);
        }
        if (!this.client.core.pairing.pairings.keys.includes(o4)) {
          const { message: e3 } = S3("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o4}`);
          throw new Error(e3);
        }
        if (Ft(this.client.core.pairing.pairings.get(o4).expiry)) {
          const { message: e3 } = S3("EXPIRED", `pairing topic: ${o4}`);
          throw new Error(e3);
        }
      }
      async isValidSessionTopic(o4) {
        if (!b2(o4, false)) {
          const { message: e3 } = S3("MISSING_OR_INVALID", `session topic should be a string: ${o4}`);
          throw new Error(e3);
        }
        if (this.checkRecentlyDeleted(o4), !this.client.session.keys.includes(o4)) {
          const { message: e3 } = S3("NO_MATCHING_KEY", `session topic doesn't exist: ${o4}`);
          throw new Error(e3);
        }
        if (Ft(this.client.session.get(o4).expiry)) {
          await this.deleteSession({ topic: o4 });
          const { message: e3 } = S3("EXPIRED", `session topic: ${o4}`);
          throw new Error(e3);
        }
        if (!this.client.core.crypto.keychain.has(o4)) {
          const { message: e3 } = S3("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o4}`);
          throw await this.deleteSession({ topic: o4 }), new Error(e3);
        }
      }
      async isValidSessionOrPairingTopic(o4) {
        if (this.checkRecentlyDeleted(o4), this.client.session.keys.includes(o4)) await this.isValidSessionTopic(o4);
        else if (this.client.core.pairing.pairings.keys.includes(o4)) this.isValidPairingTopic(o4);
        else if (b2(o4, false)) {
          const { message: e3 } = S3("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o4}`);
          throw new Error(e3);
        } else {
          const { message: e3 } = S3("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o4}`);
          throw new Error(e3);
        }
      }
      async isValidProposalId(o4) {
        if (!oo(o4)) {
          const { message: e3 } = S3("MISSING_OR_INVALID", `proposal id should be a number: ${o4}`);
          throw new Error(e3);
        }
        if (!this.client.proposal.keys.includes(o4)) {
          const { message: e3 } = S3("NO_MATCHING_KEY", `proposal id doesn't exist: ${o4}`);
          throw new Error(e3);
        }
        if (Ft(this.client.proposal.get(o4).expiryTimestamp)) {
          await this.deleteProposal(o4);
          const { message: e3 } = S3("EXPIRED", `proposal id: ${o4}`);
          throw new Error(e3);
        }
      }
    };
    Ss2 = class extends li {
      constructor(o4, e3) {
        super(o4, e3, it3, ye3), this.core = o4, this.logger = e3;
      }
    };
    wt3 = class extends li {
      constructor(o4, e3) {
        super(o4, e3, nt2, ye3), this.core = o4, this.logger = e3;
      }
    };
    Is = class extends li {
      constructor(o4, e3) {
        super(o4, e3, at3, ye3, (t3) => t3.id), this.core = o4, this.logger = e3;
      }
    };
    fs = class extends li {
      constructor(o4, e3) {
        super(o4, e3, ht3, oe3, () => ae3), this.core = o4, this.logger = e3;
      }
    };
    vs = class extends li {
      constructor(o4, e3) {
        super(o4, e3, dt2, oe3), this.core = o4, this.logger = e3;
      }
    };
    qs2 = class extends li {
      constructor(o4, e3) {
        super(o4, e3, ut3, oe3, (t3) => t3.id), this.core = o4, this.logger = e3;
      }
    };
    Ts = class {
      constructor(o4, e3) {
        this.core = o4, this.logger = e3, this.authKeys = new fs(this.core, this.logger), this.pairingTopics = new vs(this.core, this.logger), this.requests = new qs2(this.core, this.logger);
      }
      async init() {
        await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
      }
    };
    _e3 = class __e extends S2 {
      constructor(o4) {
        super(o4), this.protocol = Ce3, this.version = Le2, this.name = we3.name, this.events = new import_events8.EventEmitter(), this.on = (t3, s4) => this.events.on(t3, s4), this.once = (t3, s4) => this.events.once(t3, s4), this.off = (t3, s4) => this.events.off(t3, s4), this.removeListener = (t3, s4) => this.events.removeListener(t3, s4), this.removeAllListeners = (t3) => this.events.removeAllListeners(t3), this.connect = async (t3) => {
          try {
            return await this.engine.connect(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.pair = async (t3) => {
          try {
            return await this.engine.pair(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.approve = async (t3) => {
          try {
            return await this.engine.approve(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.reject = async (t3) => {
          try {
            return await this.engine.reject(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.update = async (t3) => {
          try {
            return await this.engine.update(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.extend = async (t3) => {
          try {
            return await this.engine.extend(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.request = async (t3) => {
          try {
            return await this.engine.request(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.respond = async (t3) => {
          try {
            return await this.engine.respond(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.ping = async (t3) => {
          try {
            return await this.engine.ping(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.emit = async (t3) => {
          try {
            return await this.engine.emit(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.disconnect = async (t3) => {
          try {
            return await this.engine.disconnect(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.find = (t3) => {
          try {
            return this.engine.find(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.getPendingSessionRequests = () => {
          try {
            return this.engine.getPendingSessionRequests();
          } catch (t3) {
            throw this.logger.error(t3.message), t3;
          }
        }, this.authenticate = async (t3, s4) => {
          try {
            return await this.engine.authenticate(t3, s4);
          } catch (i5) {
            throw this.logger.error(i5.message), i5;
          }
        }, this.formatAuthMessage = (t3) => {
          try {
            return this.engine.formatAuthMessage(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.approveSessionAuthenticate = async (t3) => {
          try {
            return await this.engine.approveSessionAuthenticate(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.rejectSessionAuthenticate = async (t3) => {
          try {
            return await this.engine.rejectSessionAuthenticate(t3);
          } catch (s4) {
            throw this.logger.error(s4.message), s4;
          }
        }, this.name = (o4 == null ? void 0 : o4.name) || we3.name, this.metadata = (o4 == null ? void 0 : o4.metadata) || $t(), this.signConfig = o4 == null ? void 0 : o4.signConfig;
        const e3 = typeof (o4 == null ? void 0 : o4.logger) < "u" && typeof (o4 == null ? void 0 : o4.logger) != "string" ? o4.logger : (0, import_pino2.default)(k2({ level: (o4 == null ? void 0 : o4.logger) || we3.logger }));
        this.core = (o4 == null ? void 0 : o4.core) || new Rn2(o4), this.logger = E2(e3, this.name), this.session = new wt3(this.core, this.logger), this.proposal = new Ss2(this.core, this.logger), this.pendingRequest = new Is(this.core, this.logger), this.engine = new Rs(this), this.auth = new Ts(this.core, this.logger);
      }
      static async init(o4) {
        const e3 = new __e(o4);
        return await e3.initialize(), e3;
      }
      get context() {
        return y2(this.logger);
      }
      get pairing() {
        return this.core.pairing.pairings;
      }
      async initialize() {
        this.logger.trace("Initialized");
        try {
          await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
            this.engine.processRelayMessageCache();
          }, (0, import_time5.toMiliseconds)(import_time5.ONE_SECOND));
        } catch (o4) {
          throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o4.message), o4;
        }
      }
    };
    Ns2 = wt3;
    Ps = _e3;
  }
});

// node_modules/@multiversx/sdk-wallet-connect-provider/out/operation.js
var require_operation = __commonJS({
  "node_modules/@multiversx/sdk-wallet-connect-provider/out/operation.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionalOperation = exports.Operation = void 0;
    var Operation;
    (function(Operation2) {
      Operation2["SIGN_TRANSACTION"] = "mvx_signTransaction";
      Operation2["SIGN_TRANSACTIONS"] = "mvx_signTransactions";
      Operation2["SIGN_MESSAGE"] = "mvx_signMessage";
    })(Operation || (exports.Operation = Operation = {}));
    var OptionalOperation;
    (function(OptionalOperation2) {
      OptionalOperation2["SIGN_LOGIN_TOKEN"] = "mvx_signLoginToken";
      OptionalOperation2["SIGN_NATIVE_AUTH_TOKEN"] = "mvx_signNativeAuthToken";
      OptionalOperation2["CANCEL_ACTION"] = "mvx_cancelAction";
    })(OptionalOperation || (exports.OptionalOperation = OptionalOperation = {}));
  }
});

// node_modules/@multiversx/sdk-wallet-connect-provider/out/constants.js
var require_constants3 = __commonJS({
  "node_modules/@multiversx/sdk-wallet-connect-provider/out/constants.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WALLETCONNECT_SIGN_LOGIN_DELAY = exports.WALLETCONNECT_MULTIVERSX_OPTIONAL_METHODS = exports.WALLETCONNECT_MULTIVERSX_METHODS = exports.WALLETCONNECT_MULTIVERSX_NAMESPACE = void 0;
    var operation_1 = require_operation();
    exports.WALLETCONNECT_MULTIVERSX_NAMESPACE = "mvx";
    exports.WALLETCONNECT_MULTIVERSX_METHODS = Object.values(operation_1.Operation);
    exports.WALLETCONNECT_MULTIVERSX_OPTIONAL_METHODS = Object.values(operation_1.OptionalOperation);
    exports.WALLETCONNECT_SIGN_LOGIN_DELAY = 500;
  }
});

// node_modules/@multiversx/sdk-wallet-connect-provider/out/errors.js
var require_errors2 = __commonJS({
  "node_modules/@multiversx/sdk-wallet-connect-provider/out/errors.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WalletConnectV2ProviderErrorMessagesEnum = exports.ErrBadAddress = exports.ErrNotImplemented = exports.Err = void 0;
    var Err2 = class extends Error {
      constructor(message, inner) {
        super(message);
        this.inner = void 0;
        this.inner = inner;
      }
    };
    exports.Err = Err2;
    var ErrNotImplemented = class extends Err2 {
      constructor() {
        super("Method not yet implemented");
      }
    };
    exports.ErrNotImplemented = ErrNotImplemented;
    var ErrBadAddress = class extends Err2 {
      constructor(value, inner) {
        super(`Bad address: ${value}`, inner);
      }
    };
    exports.ErrBadAddress = ErrBadAddress;
    var WalletConnectV2ProviderErrorMessagesEnum;
    (function(WalletConnectV2ProviderErrorMessagesEnum2) {
      WalletConnectV2ProviderErrorMessagesEnum2["unableToInit"] = "WalletConnect is unable to init";
      WalletConnectV2ProviderErrorMessagesEnum2["notInitialized"] = "WalletConnect is not initialized";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToConnect"] = "WalletConnect is unable to connect";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToConnectExisting"] = "WalletConnect is unable to connect to existing pairing";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToSignLoginToken"] = "WalletConnect could not sign login token";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToSign"] = "WalletConnect could not sign the message";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToLogin"] = "WalletConnect is unable to login";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToHandleTopic"] = "WalletConnect: Unable to handle topic update";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToHandleEvent"] = "WalletConnect: Unable to handle events";
      WalletConnectV2ProviderErrorMessagesEnum2["unableToHandleCleanup"] = "WalletConnect: Unable to handle cleanup";
      WalletConnectV2ProviderErrorMessagesEnum2["sessionNotConnected"] = "WalletConnect Session is not connected";
      WalletConnectV2ProviderErrorMessagesEnum2["sessionDeleted"] = "WalletConnect Session Deleted";
      WalletConnectV2ProviderErrorMessagesEnum2["sessionExpired"] = "WalletConnect Session Expired";
      WalletConnectV2ProviderErrorMessagesEnum2["alreadyLoggedOut"] = "WalletConnect: Already logged out";
      WalletConnectV2ProviderErrorMessagesEnum2["pingFailed"] = "WalletConnect Ping Failed";
      WalletConnectV2ProviderErrorMessagesEnum2["invalidAddress"] = "WalletConnect: Invalid address";
      WalletConnectV2ProviderErrorMessagesEnum2["requestDifferentChain"] = "WalletConnect: Request Chain Id different than Connection Chain Id";
      WalletConnectV2ProviderErrorMessagesEnum2["invalidMessageResponse"] = "WalletConnect could not sign the message";
      WalletConnectV2ProviderErrorMessagesEnum2["invalidMessageSignature"] = "WalletConnect: Invalid message signature";
      WalletConnectV2ProviderErrorMessagesEnum2["invalidTransactionResponse"] = "WalletConnect could not sign the transactions. Invalid signatures";
      WalletConnectV2ProviderErrorMessagesEnum2["invalidCustomRequestResponse"] = "WalletConnect could not send the custom request";
      WalletConnectV2ProviderErrorMessagesEnum2["transactionError"] = "Transaction canceled";
      WalletConnectV2ProviderErrorMessagesEnum2["connectionError"] = "WalletConnect could not establish a connection";
      WalletConnectV2ProviderErrorMessagesEnum2["invalidGuardian"] = "WalletConnect: Invalid Guardian";
    })(WalletConnectV2ProviderErrorMessagesEnum || (exports.WalletConnectV2ProviderErrorMessagesEnum = WalletConnectV2ProviderErrorMessagesEnum = {}));
  }
});

// node_modules/@multiversx/sdk-wallet-connect-provider/out/logger.js
var require_logger = __commonJS({
  "node_modules/@multiversx/sdk-wallet-connect-provider/out/logger.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = void 0;
    var Logger2 = class {
      static error(message) {
        console.error(message);
      }
      static trace(message) {
        console.trace(message);
      }
    };
    exports.Logger = Logger2;
  }
});

// node_modules/@multiversx/sdk-wallet-connect-provider/out/utils.js
var require_utils2 = __commonJS({
  "node_modules/@multiversx/sdk-wallet-connect-provider/out/utils.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCurrentSession = getCurrentSession;
    exports.getCurrentTopic = getCurrentTopic;
    exports.getConnectionParams = getConnectionParams;
    exports.addressIsValid = addressIsValid;
    exports.getAddressFromSession = getAddressFromSession;
    exports.applyTransactionSignature = applyTransactionSignature;
    exports.getMetadata = getMetadata;
    exports.sleep = sleep;
    var sdk_core_1 = require_out();
    var signature_1 = require_signature();
    var utils_12 = (init_index_es6(), __toCommonJS(index_es_exports));
    var constants_1 = require_constants3();
    var errors_1 = require_errors2();
    var logger_1 = require_logger();
    var operation_1 = require_operation();
    function getCurrentSession(chainId, client) {
      if (!client) {
        throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
      }
      const acknowledgedSessions = client.find(getConnectionParams(chainId)).filter((s4) => s4.acknowledged);
      if (acknowledgedSessions.length > 0) {
        const lastKeyIndex = acknowledgedSessions.length - 1;
        const session = acknowledgedSessions[lastKeyIndex];
        return session;
      }
      if (client.session.length > 0) {
        const lastKeyIndex = client.session.keys.length - 1;
        const session = client.session.get(client.session.keys[lastKeyIndex]);
        return session;
      }
      logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
      throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
    }
    function getCurrentTopic(chainId, client) {
      if (!client) {
        throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
      }
      const session = getCurrentSession(chainId, client);
      if (!(session === null || session === void 0 ? void 0 : session.topic)) {
        throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
      }
      return session.topic;
    }
    function getConnectionParams(chainId, options) {
      var _a2, _b, _c;
      const methods = [
        ...constants_1.WALLETCONNECT_MULTIVERSX_METHODS,
        ...(_a2 = options === null || options === void 0 ? void 0 : options.methods) !== null && _a2 !== void 0 ? _a2 : []
      ];
      if (!((_b = options === null || options === void 0 ? void 0 : options.methods) === null || _b === void 0 ? void 0 : _b.includes(operation_1.OptionalOperation.SIGN_LOGIN_TOKEN))) {
        methods.push(operation_1.OptionalOperation.SIGN_LOGIN_TOKEN);
      }
      const chains = [`${constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE}:${chainId}`];
      const events = (_c = options === null || options === void 0 ? void 0 : options.events) !== null && _c !== void 0 ? _c : [];
      return {
        requiredNamespaces: {
          [constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE]: {
            methods,
            chains,
            events
          }
        }
      };
    }
    function addressIsValid(destinationAddress) {
      try {
        const address = sdk_core_1.Address.fromBech32(destinationAddress);
        return !address.isEmpty();
      } catch (_a2) {
        return false;
      }
    }
    function getAddressFromSession(session) {
      const selectedNamespace = session.namespaces[constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE];
      if (selectedNamespace && selectedNamespace.accounts) {
        const currentSession = selectedNamespace.accounts[0];
        const [namespace, reference, address] = currentSession.split(":");
        return address;
      }
      return "";
    }
    function applyTransactionSignature({ transaction, response }) {
      if (!response) {
        logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidTransactionResponse);
        throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidTransactionResponse);
      }
      const { signature: signature2, guardianSignature, version: version12, options, guardian } = response;
      const transactionGuardian = transaction.getGuardian().bech32();
      if (transactionGuardian && transactionGuardian !== guardian) {
        logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidGuardian);
        throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidGuardian);
      }
      if (guardian) {
        transaction.setGuardian(sdk_core_1.Address.fromBech32(guardian));
      }
      if (version12) {
        transaction.setVersion(version12);
      }
      if (options != null) {
        transaction.setOptions(options);
      }
      transaction.applySignature(new signature_1.Signature(signature2));
      if (guardianSignature) {
        transaction.applyGuardianSignature(new signature_1.Signature(guardianSignature));
      }
      return transaction;
    }
    function getMetadata(metadata) {
      if (metadata) {
        return Object.assign(Object.assign({}, metadata), { url: (0, utils_12.getAppMetadata)().url });
      }
      return;
    }
    function sleep(timeout2) {
      return __awaiter11(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => setTimeout(() => {
          resolve();
        }, timeout2));
      });
    }
  }
});

// node_modules/@multiversx/sdk-wallet-connect-provider/out/walletConnectV2Provider.js
var require_walletConnectV2Provider = __commonJS({
  "node_modules/@multiversx/sdk-wallet-connect-provider/out/walletConnectV2Provider.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WalletConnectV2Provider = exports.OptionalOperation = exports.Operation = exports.WalletConnectV2ProviderErrorMessagesEnum = void 0;
    var sdk_core_1 = require_out();
    var sign_client_1 = __importDefault2((init_index_es11(), __toCommonJS(index_es_exports2)));
    var utils_12 = (init_index_es6(), __toCommonJS(index_es_exports));
    var constants_1 = require_constants3();
    var errors_1 = require_errors2();
    Object.defineProperty(exports, "WalletConnectV2ProviderErrorMessagesEnum", { enumerable: true, get: function() {
      return errors_1.WalletConnectV2ProviderErrorMessagesEnum;
    } });
    var logger_1 = require_logger();
    var operation_1 = require_operation();
    Object.defineProperty(exports, "Operation", { enumerable: true, get: function() {
      return operation_1.Operation;
    } });
    Object.defineProperty(exports, "OptionalOperation", { enumerable: true, get: function() {
      return operation_1.OptionalOperation;
    } });
    var utils_2 = require_utils2();
    var WalletConnectV2Provider = class {
      constructor(onClientConnect, chainId, walletConnectV2Relay, walletConnectV2ProjectId, options) {
        this.chainId = "";
        this.isInitializing = false;
        this.processingTopic = "";
        this.options = {};
        this.account = { address: "" };
        this.onClientConnect = onClientConnect;
        this.chainId = chainId;
        this.walletConnectV2Relay = walletConnectV2Relay;
        this.walletConnectV2ProjectId = walletConnectV2ProjectId;
        this.options = options;
      }
      disconnect() {
        this.account = { address: "", signature: "" };
        this.walletConnector = void 0;
        this.session = void 0;
        this.pairings = void 0;
      }
      /**
       * Initiates WalletConnect client.
       */
      init() {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2, _b;
          if (this.isInitialized()) {
            return this.isInitialized();
          } else {
            try {
              if (!this.isInitializing) {
                this.isInitializing = true;
                this.disconnect();
                const metadata = ((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.metadata) ? {
                  metadata: (0, utils_2.getMetadata)((_b = this.options) === null || _b === void 0 ? void 0 : _b.metadata)
                } : {};
                const client = yield sign_client_1.default.init(Object.assign(Object.assign(Object.assign({}, this.options), { relayUrl: this.walletConnectV2Relay, projectId: this.walletConnectV2ProjectId }), metadata));
                this.walletConnector = client;
                this.isInitializing = false;
                yield this.subscribeToEvents(client);
                yield this.checkPersistedState(client);
              }
            } catch (error) {
              throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToInit);
            } finally {
              this.isInitializing = false;
              return this.isInitialized();
            }
          }
        });
      }
      /**
       * Returns true if init() was previously called successfully
       */
      isInitialized() {
        return !!this.walletConnector && !this.isInitializing;
      }
      /**
       * Returns true if provider is initialized and a valid session is set
       */
      isConnected() {
        return Boolean(this.isInitialized() && typeof this.session !== "undefined");
      }
      /**
       * Returns the current account
       */
      getAccount() {
        return this.account;
      }
      /**
       * Sets the current account
       * @param account
       */
      setAccount(account) {
        this.account = account;
      }
      connect(options) {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2, _b;
          if (typeof this.walletConnector === "undefined") {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          const connectParams = (0, utils_2.getConnectionParams)(this.chainId, options);
          try {
            const response = yield this.walletConnector.connect(Object.assign({ pairingTopic: options === null || options === void 0 ? void 0 : options.topic }, connectParams));
            return response;
          } catch (error) {
            if (options === null || options === void 0 ? void 0 : options.topic) {
              try {
                (_b = (_a2 = this.walletConnector.core) === null || _a2 === void 0 ? void 0 : _a2.expirer) === null || _b === void 0 ? void 0 : _b.set(options.topic, 0);
              } catch (error2) {
                logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToHandleCleanup);
              }
            }
            this.disconnect();
            logger_1.Logger.error((options === null || options === void 0 ? void 0 : options.topic) ? errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToConnectExisting : errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToConnect);
            throw new Error((options === null || options === void 0 ? void 0 : options.topic) ? errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToConnectExisting : errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToConnect);
          }
        });
      }
      login(options) {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2;
          this.isInitializing = true;
          if (typeof this.walletConnector === "undefined") {
            yield this.connect();
          }
          if (typeof this.walletConnector === "undefined") {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          if (typeof this.session !== "undefined") {
            yield this.logout({ topic: (_a2 = this.session) === null || _a2 === void 0 ? void 0 : _a2.topic });
          }
          try {
            if (options && options.approval) {
              const session = yield options.approval();
              if (options.token) {
                yield (0, utils_2.sleep)(constants_1.WALLETCONNECT_SIGN_LOGIN_DELAY);
                const address = (0, utils_2.getAddressFromSession)(session);
                const selectedNamespace = session.namespaces[constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE];
                const method = selectedNamespace.methods.includes(operation_1.OptionalOperation.SIGN_NATIVE_AUTH_TOKEN) ? operation_1.OptionalOperation.SIGN_NATIVE_AUTH_TOKEN : operation_1.OptionalOperation.SIGN_LOGIN_TOKEN;
                const { signature: signature2 } = yield this.walletConnector.request({
                  chainId: `${constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE}:${this.chainId}`,
                  topic: session.topic,
                  request: {
                    method,
                    params: {
                      token: options.token,
                      address
                    }
                  }
                });
                if (!signature2) {
                  logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToSignLoginToken);
                  throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToSignLoginToken);
                }
                return yield this.onSessionConnected({
                  session,
                  signature: signature2
                });
              }
              return yield this.onSessionConnected({
                session,
                signature: ""
              });
            }
          } catch (error) {
            this.disconnect();
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToLogin);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToLogin);
          } finally {
            this.isInitializing = false;
          }
          return null;
        });
      }
      /**
       * Mocks a logout request by returning true
       */
      logout(options) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          try {
            if (this.processingTopic === ((options === null || options === void 0 ? void 0 : options.topic) || (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector))) {
              return true;
            }
            if (options === null || options === void 0 ? void 0 : options.topic) {
              this.processingTopic = options.topic;
              yield this.walletConnector.disconnect({
                topic: options.topic,
                reason: (0, utils_12.getSdkError)("USER_DISCONNECTED")
              });
            } else {
              const currentSessionTopic = (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector);
              this.processingTopic = currentSessionTopic;
              yield this.walletConnector.disconnect({
                topic: currentSessionTopic,
                reason: (0, utils_12.getSdkError)("USER_DISCONNECTED")
              });
              this.disconnect();
              yield this.cleanupPendingPairings({ deletePairings: true });
            }
          } catch (_a2) {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.alreadyLoggedOut);
          } finally {
            this.processingTopic = "";
          }
          return true;
        });
      }
      /**
       * Fetches the WalletConnect address
       */
      getAddress() {
        if (typeof this.walletConnector === "undefined") {
          logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
        }
        return this.account.address;
      }
      /**
       * Fetches the WalletConnect signature
       */
      getSignature() {
        if (typeof this.walletConnector === "undefined") {
          logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
        }
        return this.account.signature;
      }
      /**
       * Fetches the WalletConnect pairings
       */
      getPairings() {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2, _b, _c, _d, _e4;
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          return (_e4 = (_d = (_c = (_b = (_a2 = this.walletConnector) === null || _a2 === void 0 ? void 0 : _a2.core) === null || _b === void 0 ? void 0 : _b.pairing) === null || _c === void 0 ? void 0 : _c.pairings) === null || _d === void 0 ? void 0 : _d.getAll({ active: true })) !== null && _e4 !== void 0 ? _e4 : [];
        });
      }
      /**
       * Signs a message and returns it signed
       * @param message
       */
      signMessage(messageToSign) {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2;
          const message = new sdk_core_1.Message({
            data: Buffer.from(messageToSign.data),
            address: (_a2 = messageToSign.address) !== null && _a2 !== void 0 ? _a2 : sdk_core_1.Address.fromBech32(this.account.address),
            signer: "wallet-connect-v2",
            version: messageToSign.version
          });
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          if (typeof this.session === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
            this.onClientConnect.onClientLogout();
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
          }
          try {
            const address = this.getAddress();
            const { signature: signature2 } = yield this.walletConnector.request({
              chainId: `${constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE}:${this.chainId}`,
              topic: (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector),
              request: {
                method: operation_1.Operation.SIGN_MESSAGE,
                params: {
                  address,
                  message: message.data.toString()
                }
              }
            });
            if (!signature2) {
              logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidMessageResponse);
              throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidMessageResponse);
            }
            try {
              message.signature = Buffer.from(signature2, "hex");
            } catch (error) {
              logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidMessageSignature);
              throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidMessageSignature);
            }
          } catch (error) {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToSign);
          }
          return message;
        });
      }
      /**
       * Signs a transaction and returns it signed
       * @param transaction
       */
      signTransaction(transaction) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          if (typeof this.session === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
            this.onClientConnect.onClientLogout();
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
          }
          const plainTransaction = transaction.toPlainObject();
          if (this.chainId !== transaction.getChainID().valueOf()) {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.requestDifferentChain);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.requestDifferentChain);
          }
          try {
            const response = yield this.walletConnector.request({
              chainId: `${constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE}:${this.chainId}`,
              topic: (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector),
              request: {
                method: operation_1.Operation.SIGN_TRANSACTION,
                params: {
                  transaction: plainTransaction
                }
              }
            });
            return (0, utils_2.applyTransactionSignature)({ transaction, response });
          } catch (error) {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.transactionError);
          }
        });
      }
      /**
       * Signs an array of transactions and returns it signed
       * @param transactions
       */
      signTransactions(transactions) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          if (typeof this.session === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
            this.onClientConnect.onClientLogout();
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
          }
          const plainTransactions = transactions.map((transaction) => {
            if (this.chainId !== transaction.getChainID().valueOf()) {
              logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.requestDifferentChain);
              throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.requestDifferentChain);
            }
            return transaction.toPlainObject();
          });
          try {
            const { signatures } = yield this.walletConnector.request({
              chainId: `${constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE}:${this.chainId}`,
              topic: (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector),
              request: {
                method: operation_1.Operation.SIGN_TRANSACTIONS,
                params: {
                  transactions: plainTransactions
                }
              }
            });
            if (!signatures) {
              logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidTransactionResponse);
              throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidTransactionResponse);
            }
            if (!Array.isArray(signatures) || transactions.length !== signatures.length) {
              throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidTransactionResponse);
            }
            for (const [index, transaction] of transactions.entries()) {
              const response = signatures[index];
              (0, utils_2.applyTransactionSignature)({ transaction, response });
            }
            return transactions;
          } catch (error) {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.transactionError);
          }
        });
      }
      /**
       * Sends a custom request
       * @param request
       */
      sendCustomRequest(options) {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2;
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          if (typeof this.session === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
            this.onClientConnect.onClientLogout();
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
          }
          if ((_a2 = options === null || options === void 0 ? void 0 : options.request) === null || _a2 === void 0 ? void 0 : _a2.method) {
            try {
              const request = Object.assign({}, options.request);
              let { method } = request;
              const { response } = yield this.walletConnector.request({
                chainId: `${constants_1.WALLETCONNECT_MULTIVERSX_NAMESPACE}:${this.chainId}`,
                topic: (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector),
                request: Object.assign(Object.assign({}, request), { method })
              });
              if (!response) {
                logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidCustomRequestResponse);
              }
            } catch (error) {
              logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidCustomRequestResponse);
            }
            return;
          }
        });
      }
      /**
       * Ping helper
       */
      ping() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          if (typeof this.session === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionNotConnected);
          }
          try {
            const topic = (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector);
            yield this.walletConnector.ping({
              topic
            });
            return true;
          } catch (error) {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.pingFailed);
            return false;
          }
        });
      }
      loginAccount(options) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!options) {
            return "";
          }
          if ((0, utils_2.addressIsValid)(options.address)) {
            this.account.address = options.address;
            if (options.signature) {
              this.account.signature = options.signature;
            }
            this.onClientConnect.onClientLogin();
            return this.account.address;
          }
          logger_1.Logger.error(`${errors_1.WalletConnectV2ProviderErrorMessagesEnum.invalidAddress} ${options.address}`);
          if (this.walletConnector) {
            yield this.logout();
          }
          return "";
        });
      }
      onSessionConnected(options) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!options) {
            return null;
          }
          this.session = options.session;
          this.account.signature = options.signature || "";
          const address = (0, utils_2.getAddressFromSession)(options.session);
          if (address) {
            yield this.loginAccount({ address, signature: options.signature });
            this.account.address = address;
            return this.account;
          }
          return null;
        });
      }
      handleTopicUpdateEvent(_a2) {
        return __awaiter11(this, arguments, void 0, function* ({ topic }) {
          if (typeof this.walletConnector === "undefined") {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
            return;
          }
          try {
            const existingPairings = yield this.getPairings();
            if (this.account.address && !this.isInitializing && existingPairings) {
              if ((existingPairings === null || existingPairings === void 0 ? void 0 : existingPairings.length) === 0) {
                this.onClientConnect.onClientLogout();
              } else {
                const lastActivePairing = existingPairings[existingPairings.length - 1];
                if ((lastActivePairing === null || lastActivePairing === void 0 ? void 0 : lastActivePairing.topic) === topic) {
                  this.onClientConnect.onClientLogout();
                }
              }
            }
          } catch (error) {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToHandleTopic);
          } finally {
            this.pairings = yield this.getPairings();
          }
        });
      }
      handleSessionEvents(_a2) {
        return __awaiter11(this, arguments, void 0, function* ({ topic, params }) {
          var _b;
          if (typeof this.walletConnector === "undefined") {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          if (this.session && ((_b = this.session) === null || _b === void 0 ? void 0 : _b.topic) !== topic) {
            return;
          }
          const { event } = params;
          if ((event === null || event === void 0 ? void 0 : event.name) && (0, utils_2.getCurrentTopic)(this.chainId, this.walletConnector) === topic) {
            const eventData = event.data;
            this.onClientConnect.onClientEvent(eventData);
          }
        });
      }
      subscribeToEvents(client) {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2, _b, _c, _d;
          if (typeof client === "undefined") {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          try {
            client.on("session_update", ({ topic, params }) => {
              var _a3;
              if (!this.session || ((_a3 = this.session) === null || _a3 === void 0 ? void 0 : _a3.topic) !== topic) {
                return;
              }
              const { namespaces } = params;
              const _session = client.session.get(topic);
              const updatedSession = Object.assign(Object.assign({}, _session), { namespaces });
              this.onSessionConnected({ session: updatedSession });
            });
            client.on("session_event", this.handleSessionEvents.bind(this));
            client.on("session_delete", (_a3) => __awaiter11(this, [_a3], void 0, function* ({ topic }) {
              var _b2;
              if (this.isInitializing) {
                this.onClientConnect.onClientLogout();
                this.disconnect();
              }
              if (!this.session || ((_b2 = this.session) === null || _b2 === void 0 ? void 0 : _b2.topic) !== topic) {
                return;
              }
              logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionDeleted);
              this.onClientConnect.onClientLogout();
              this.disconnect();
              yield this.cleanupPendingPairings({ deletePairings: true });
            }));
            client.on("session_expire", (_a3) => __awaiter11(this, [_a3], void 0, function* ({ topic }) {
              var _b2;
              if (!this.session || ((_b2 = this.session) === null || _b2 === void 0 ? void 0 : _b2.topic) !== topic) {
                return;
              }
              logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.sessionExpired);
              this.onClientConnect.onClientLogout();
              this.disconnect();
              yield this.cleanupPendingPairings({ deletePairings: true });
            }));
            (_b = (_a2 = client.core) === null || _a2 === void 0 ? void 0 : _a2.pairing) === null || _b === void 0 ? void 0 : _b.events.on("pairing_delete", this.handleTopicUpdateEvent.bind(this));
            (_d = (_c = client.core) === null || _c === void 0 ? void 0 : _c.pairing) === null || _d === void 0 ? void 0 : _d.events.on("pairing_expire", this.handleTopicUpdateEvent.bind(this));
          } catch (error) {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToHandleEvent);
          }
        });
      }
      checkPersistedState(client) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (typeof client === "undefined") {
            throw new Error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.notInitialized);
          }
          this.pairings = yield this.getPairings();
          if (typeof this.session !== "undefined") {
            return;
          }
          if (client.session.length && !this.account.address && !this.isInitializing) {
            const session = (0, utils_2.getCurrentSession)(this.chainId, client);
            if (session) {
              yield this.onSessionConnected({ session });
              return session;
            }
          }
          return;
        });
      }
      cleanupPendingPairings() {
        return __awaiter11(this, arguments, void 0, function* (options = {}) {
          var _a2, _b, _c, _d, _e4, _f, _g, _h;
          if (typeof this.walletConnector === "undefined") {
            return;
          }
          try {
            const inactivePairings = (_c = (_b = (_a2 = this.walletConnector.core) === null || _a2 === void 0 ? void 0 : _a2.pairing) === null || _b === void 0 ? void 0 : _b.pairings) === null || _c === void 0 ? void 0 : _c.getAll({ active: false });
            if (!(0, utils_12.isValidArray)(inactivePairings)) {
              return;
            }
            for (const pairing of inactivePairings) {
              if (options.deletePairings) {
                (_e4 = (_d = this.walletConnector.core) === null || _d === void 0 ? void 0 : _d.expirer) === null || _e4 === void 0 ? void 0 : _e4.set(pairing.topic, 0);
              } else {
                try {
                  yield (_h = (_g = (_f = this.walletConnector.core) === null || _f === void 0 ? void 0 : _f.relayer) === null || _g === void 0 ? void 0 : _g.subscriber) === null || _h === void 0 ? void 0 : _h.unsubscribe(pairing.topic);
                } catch (error) {
                  logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToHandleCleanup);
                }
              }
            }
          } catch (error) {
            logger_1.Logger.error(errors_1.WalletConnectV2ProviderErrorMessagesEnum.unableToHandleCleanup);
          }
        });
      }
    };
    exports.WalletConnectV2Provider = WalletConnectV2Provider;
  }
});

// node_modules/@multiversx/sdk-wallet-connect-provider/out/index.js
var require_out3 = __commonJS({
  "node_modules/@multiversx/sdk-wallet-connect-provider/out/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m5, exports2) {
      for (var p5 in m5) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding2(exports2, m5, p5);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_walletConnectV2Provider(), exports);
  }
});

// node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeManager/IframeManager.styles.js
var require_IframeManager_styles = __commonJS({
  "node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeManager/IframeManager.styles.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toggleIconElementStyle = exports.titleElementStyle = exports.headingElementStyle = exports.iframeStyle = exports.bodyStyle = exports.headerStyle = exports.containerStyle = void 0;
    exports.containerStyle = `
    z-index: 9999;
    position: fixed;
    visibility: hidden;
    right: 0;
    left: auto;
    border: none;
    border-radius: 12px;
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
    height: calc(100vh - 8px - 64px);
    transition: all 400ms ease;
    width: 420px;
    max-width: calc(100vw - 8px);
    background: black;
    overflow: hidden;
    top: 64px;
  `;
    exports.headerStyle = `
    color: #fff;
    cursor: pointer;
    height: 80px;
    border-radius: 12px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  `;
    exports.bodyStyle = `
    height: calc(100vh - 80px - 64px - 8px);
    width: 420px;
    max-width: calc(100vw - 8px);
    overflow: hidden;
  `;
    exports.iframeStyle = `
    width: 100%;
    height: 100%;
    border: none;
  `;
    exports.headingElementStyle = `
  display: flex;
  align-items: center;
  cursor: pointer;
  gap: 12px;
  width: 100%;
  position: relative;
  padding: 0 24px;
  height: 80px;
`;
    exports.titleElementStyle = `
  font-size: 20px;
  font-family: 'Roobert Medium', sans-serif;
  color: #E5E5E5;
  transition: all 400ms ease;
  line-height: 1;
  user-select: none;
`;
    exports.toggleIconElementStyle = `
  margin-left: auto;
  transition: all 400ms ease;
`;
  }
});

// node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeManager/IframeProviderContentWindow.js
var require_IframeProviderContentWindow = __commonJS({
  "node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeManager/IframeProviderContentWindow.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IframeProviderContentWindow = void 0;
    var constants_1 = require_constants();
    var IframeManager_styles_1 = require_IframeManager_styles();
    var LoginBranding = {
      [constants_1.IframeLoginTypes.metamask]: {
        icon: '<svg width="32" height="27" viewBox="0 0 30 27" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_3350_30150)"><path d="M27.5788 0.0566406L16.291 8.44025L18.3784 3.49404L27.5788 0.0566406Z" fill="#E2761B" stroke="#E2761B" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1.52125 0.0566406L12.7183 8.51967L10.733 3.49404L1.52125 0.0566406ZM23.5183 19.4898L20.512 24.0957L26.9444 25.8655L28.7935 19.5919L23.5183 19.4898ZM0.330078 19.5919L2.16789 25.8655L8.60025 24.0957L5.59394 19.4898L0.330078 19.5919Z" fill="#E4761B" stroke="#E4761B" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M8.23677 11.7077L6.44434 14.419L12.8313 14.7026L12.6044 7.83918L8.23677 11.7077ZM20.8632 11.7077L16.4389 7.75977L16.2914 14.7026L22.667 14.419L20.8632 11.7077ZM8.5998 24.0959L12.4343 22.224L9.12165 19.6375L8.5998 24.0959ZM16.6658 22.224L20.5116 24.0959L19.9784 19.6375L16.6658 22.224Z" fill="#E4761B" stroke="#E4761B" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M20.5114 24.0965L16.6656 22.2246L16.9719 24.7318L16.9378 25.7868L20.5114 24.0965ZM8.59961 24.0965L12.1731 25.7868L12.1505 24.7318L12.4341 22.2246L8.59961 24.0965Z" fill="#D7C1B3" stroke="#D7C1B3" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12.2304 17.9818L9.03125 17.0402L11.2888 16.0078L12.2304 17.9818ZM16.8703 17.9818L17.8119 16.0078L20.0808 17.0402L16.8703 17.9818Z" fill="#233447" stroke="#233447" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M8.60005 24.0958L9.14459 19.49L5.59375 19.5921L8.60005 24.0958ZM19.9673 19.49L20.5118 24.0958L23.5181 19.5921L19.9673 19.49ZM22.6673 14.4189L16.2916 14.7026L16.8816 17.9811L17.8232 16.0072L20.0921 17.0395L22.6673 14.4189ZM9.03114 17.0395L11.3001 16.0072L12.2303 17.9811L12.8316 14.7026L6.44459 14.4189L9.03114 17.0395Z" fill="#CD6116" stroke="#CD6116" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M6.44434 14.4189L9.12165 19.6374L9.03089 17.0395L6.44434 14.4189ZM20.0918 17.0395L19.9784 19.6374L22.667 14.4189L20.0918 17.0395ZM12.8313 14.7026L12.2301 17.9811L12.9788 21.8496L13.149 16.7559L12.8313 14.7026ZM16.2914 14.7026L15.9851 16.7446L16.1212 21.8496L16.8813 17.9811L16.2914 14.7026Z" fill="#E4751F" stroke="#E4751F" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M16.8817 17.9807L16.1216 21.8491L16.6661 22.2235L19.9787 19.637L20.0922 17.0391L16.8817 17.9807ZM9.03125 17.0391L9.12201 19.637L12.4346 22.2235L12.9791 21.8491L12.2304 17.9807L9.03125 17.0391Z" fill="#F6851B" stroke="#F6851B" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M16.9378 25.786L16.9719 24.731L16.6883 24.4814H12.4114L12.1505 24.731L12.1731 25.786L8.59961 24.0957L9.84751 25.1167L12.3773 26.8751H16.7223L19.2635 25.1167L20.5114 24.0957L16.9378 25.786Z" fill="#C0AD9E" stroke="#C0AD9E" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M16.6655 22.224L16.121 21.8496H12.9785L12.434 22.224L12.1504 24.7311L12.4113 24.4815H16.6882L16.9718 24.7311L16.6655 22.224Z" fill="#161616" stroke="#161616" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M28.0551 8.98479L29.0194 4.35622L27.5786 0.0566406L16.6652 8.15664L20.8627 11.7075L26.7959 13.4432L28.1118 11.9117L27.5446 11.5033L28.4522 10.6751L27.7488 10.1306L28.6564 9.43857L28.0551 8.98479ZM0.0908203 4.35622L1.05511 8.98479L0.442501 9.43857L1.35006 10.1306L0.658047 10.6751L1.56561 11.5033L0.998383 11.9117L2.30301 13.4432L8.2362 11.7075L12.4337 8.15664L1.52023 0.0566406L0.0908203 4.35622Z" fill="#763D16" stroke="#763D16" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path><path d="M26.7969 13.4433L20.8637 11.7076L22.6675 14.4189L19.9788 19.6374L23.5183 19.592H28.7935L26.7969 13.4433ZM8.23722 11.7076L2.30403 13.4433L0.330078 19.592H5.59394L9.12209 19.6374L6.44478 14.4189L8.23722 11.7076ZM16.2918 14.7025L16.6662 8.15675L18.3906 3.49414H10.733L12.4347 8.15675L12.8318 14.7025L12.9679 16.7672L12.9792 21.8496H16.1217L16.1444 16.7672L16.2918 14.7025Z" fill="#F6851B" stroke="#F6851B" stroke-width="0.113445" stroke-linecap="round" stroke-linejoin="round"></path></g><defs><clipPath id="clip0_3350_30150"><rect width="29.1555" height="27" fill="white"></rect></clipPath></defs></svg>',
        title: "Metamask Login"
      },
      [constants_1.IframeLoginTypes.passkey]: {
        icon: '<img src="https://developer.apple.com/assets/elements/icons/passkeys/passkeys-96x96_2x.png" class="icon-passkeys center" width="50" alt="" data-hires-status="pending">',
        title: "Passkey Login"
      }
    };
    var IframeProviderContentWindow = class {
      constructor(props) {
        var _a2, _b, _c, _d, _e4, _f, _g;
        this.walletAddress = "";
        this.loginType = constants_1.IframeLoginTypes.metamask;
        const { id: id3, url, anchor, loginType } = props;
        this.loginType = loginType;
        this.container = (_a2 = constants_1.safeDocument.createElement) === null || _a2 === void 0 ? void 0 : _a2.call(constants_1.safeDocument, "div");
        this.header = (_b = constants_1.safeDocument.createElement) === null || _b === void 0 ? void 0 : _b.call(constants_1.safeDocument, "div");
        this.title = (_c = constants_1.safeDocument.createElement) === null || _c === void 0 ? void 0 : _c.call(constants_1.safeDocument, "div");
        this.body = (_d = constants_1.safeDocument.createElement) === null || _d === void 0 ? void 0 : _d.call(constants_1.safeDocument, "div");
        this.iframe = (_e4 = constants_1.safeDocument.createElement) === null || _e4 === void 0 ? void 0 : _e4.call(constants_1.safeDocument, "iframe");
        if (loginType === constants_1.IframeLoginTypes.passkey) {
          this.iframe.allow = "publickey-credentials-get *; publickey-credentials-create *;";
        }
        this.buildWindow(id3, url);
        this.contentWindow = this.iframe.contentWindow;
        this.setupWindow();
        if (anchor) {
          anchor.appendChild(this.container);
        } else {
          (_g = (_f = constants_1.safeDocument.body) === null || _f === void 0 ? void 0 : _f.appendChild) === null || _g === void 0 ? void 0 : _g.call(_f, this.container);
        }
      }
      buildWindow(id3, url) {
        this.container.id = `window-container-${id3}`;
        this.iframe.id = id3;
        this.iframe.src = url;
        this.container.style.cssText = IframeManager_styles_1.containerStyle;
        this.header.style.cssText = IframeManager_styles_1.headerStyle;
        this.body.style.cssText = IframeManager_styles_1.bodyStyle;
        this.iframe.style.cssText = IframeManager_styles_1.iframeStyle;
        this.buildContainer();
      }
      buildHeader() {
        var _a2, _b, _c;
        const iframeIcon = LoginBranding[this.loginType].icon;
        const toggleIcon = '<svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="arrow-right-to-line" class="svg-inline--fa fa-arrow-right-to-line " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" style="width: 20px;color: #737373;"><path fill="currentColor" d="M448 88c0-13.3-10.7-24-24-24s-24 10.7-24 24l0 336c0 13.3 10.7 24 24 24s24-10.7 24-24l0-336zM312.4 273.5c4.8-4.5 7.6-10.9 7.6-17.5s-2.7-12.9-7.6-17.5l-136-128c-9.7-9.1-24.8-8.6-33.9 1s-8.6 24.8 1 33.9L235.5 232 152 232 24 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l128 0 83.5 0-91.9 86.5c-9.7 9.1-10.1 24.3-1 33.9s24.3 10.1 33.9 1l136-128z"></path></svg>';
        const headingElement = (_a2 = constants_1.safeDocument.createElement) === null || _a2 === void 0 ? void 0 : _a2.call(constants_1.safeDocument, "div");
        const iframeIconElement = (_b = constants_1.safeDocument.createElement) === null || _b === void 0 ? void 0 : _b.call(constants_1.safeDocument, "div");
        const toggleIconElement = (_c = constants_1.safeDocument.createElement) === null || _c === void 0 ? void 0 : _c.call(constants_1.safeDocument, "div");
        iframeIconElement.innerHTML = iframeIcon;
        toggleIconElement.innerHTML = toggleIcon;
        toggleIconElement.style.cssText = IframeManager_styles_1.toggleIconElementStyle;
        this.title.innerText = LoginBranding[this.loginType].title;
        this.title.style.cssText = IframeManager_styles_1.titleElementStyle;
        headingElement.id = "mx-wallet-iframe-window-toggle-button";
        headingElement.style.cssText = IframeManager_styles_1.headingElementStyle;
        headingElement.appendChild(iframeIconElement);
        headingElement.appendChild(this.title);
        headingElement.appendChild(toggleIconElement);
        headingElement.onclick = () => {
          if (this.body.style.visibility === "visible") {
            this.forceHidden();
            return;
          }
          this.forceVisible();
        };
        this.header.appendChild(headingElement);
      }
      buildContainer() {
        this.container.appendChild(this.header);
        this.container.appendChild(this.body);
        this.body.appendChild(this.iframe);
        this.buildHeader();
      }
      setupWindow() {
        this.iframe.onload = () => {
          this.contentWindow = this.iframe.contentWindow;
          const event = new CustomEvent(constants_1.iframeWindowReadyEvent, {
            detail: this.iframe
          });
          this.iframe.dispatchEvent(event);
        };
      }
      forceVisible() {
        this.body.style.visibility = "visible";
        this.container.style.visibility = "visible";
        this.container.style.height = "calc(100vh - 64px - 8px)";
        this.container.style.transform = "translateX(0)";
        this.title.style.opacity = "1";
      }
      forceHidden() {
        this.body.style.visibility = "hidden";
        this.container.style.height = "80px";
        this.container.style.transform = "translateX(calc(min(420px, 100vw - 8px) - 80px)";
        this.title.style.opacity = "0";
      }
      getContainer() {
        return this.container;
      }
      getIframe() {
        return this.iframe;
      }
      getContentWindow() {
        return this.contentWindow;
      }
      setUrl(url) {
        this.iframe.setAttribute("src", url);
      }
      remove() {
        this.container.remove();
      }
      setWalletVisible(visible) {
        if (visible) {
          this.forceVisible();
          return;
        }
        this.forceHidden();
      }
      addEventListener(type, listener) {
        this.iframe.addEventListener(type, listener);
      }
    };
    exports.IframeProviderContentWindow = IframeProviderContentWindow;
  }
});

// node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeManager/IframeManager.js
var require_IframeManager = __commonJS({
  "node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeManager/IframeManager.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o4, v8) {
      Object.defineProperty(o4, "default", { enumerable: true, value: v8 });
    } : function(o4, v8) {
      o4["default"] = v8;
    });
    var __importStar2 = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k5 in mod2) if (k5 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k5)) __createBinding2(result, mod2, k5);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IframeManager = void 0;
    var windowProviderConstants_1 = require_windowProviderConstants();
    var enums_1 = require_enums();
    var WindowManager_1 = require_WindowManager();
    var constants_1 = require_constants();
    var IframeManager = class extends WindowManager_1.WindowManager {
      constructor(props) {
        super();
        this.iframeWalletComponent = null;
        this.iframeId = "mx-iframe-wallet";
        this.loginType = constants_1.IframeLoginTypes.metamask;
        this.registerToChildResponse = (props2) => {
          var _a2;
          (_a2 = constants_1.safeWindow.addEventListener) === null || _a2 === void 0 ? void 0 : _a2.call(constants_1.safeWindow, "message", (event) => __awaiter11(this, void 0, void 0, function* () {
            var _b;
            const { data } = event;
            const type = data.type;
            if (event.origin !== this.walletUrl) {
              return;
            }
            if (type === enums_1.WindowProviderResponseEnums.disconnectResponse) {
              yield (_b = props2 === null || props2 === void 0 ? void 0 : props2.onDisconnect) === null || _b === void 0 ? void 0 : _b.call(props2);
              sessionStorage.clear();
              localStorage.clear();
              window.location.reload();
              return;
            }
          }));
        };
        this.registerToChildResponse({
          onDisconnect: props === null || props === void 0 ? void 0 : props.onDisconnect
        });
        this.hasHandshake = false;
      }
      get iframeWallet() {
        return this.iframeWalletComponent;
      }
      postMessage({ type, payload }) {
        var _a2;
        return __awaiter11(this, void 0, void 0, function* () {
          this.hasHandshake = yield this.handshake(type);
          if (!this.hasHandshake) {
            throw new Error("Cannot establish handshake");
          }
          (_a2 = this.walletWindow) === null || _a2 === void 0 ? void 0 : _a2.postMessage({
            type,
            payload
          }, this.walletUrl);
          return yield this.listenOnce(windowProviderConstants_1.responseTypeMap[type]);
        });
      }
      closeConnection() {
        const _super = Object.create(null, {
          closeConnection: { get: () => super.closeConnection }
        });
        var _a2;
        return __awaiter11(this, void 0, void 0, function* () {
          const result = yield _super.closeConnection.call(this);
          (_a2 = this.iframeWalletComponent) === null || _a2 === void 0 ? void 0 : _a2.remove();
          this.walletWindow = null;
          return result;
        });
      }
      setLoginType(loginType) {
        return __awaiter11(this, void 0, void 0, function* () {
          this.loginType = loginType;
        });
      }
      isWalletOpened() {
        return Boolean(this.walletWindow) && this.hasHandshake;
      }
      closeWalletWindow() {
        var _a2;
        if (!this.walletWindow) {
          return;
        }
        (_a2 = this.iframeWallet) === null || _a2 === void 0 ? void 0 : _a2.setWalletVisible(false);
      }
      setWalletWindow() {
        var _a2, _b;
        return __awaiter11(this, void 0, void 0, function* () {
          if (this.walletWindow) {
            (_a2 = this.iframeWallet) === null || _a2 === void 0 ? void 0 : _a2.setWalletVisible(true);
            return;
          }
          const anchor = (_b = constants_1.safeDocument.getElementById) === null || _b === void 0 ? void 0 : _b.call(constants_1.safeDocument, "root");
          const module2 = yield Promise.resolve().then(() => __importStar2(require_IframeProviderContentWindow()));
          const IframeProviderContentWindow = module2.IframeProviderContentWindow;
          this.iframeWalletComponent = new IframeProviderContentWindow({
            id: this.iframeId,
            anchor,
            url: this.walletUrl,
            loginType: this.loginType
          });
          this.iframeWalletComponent.walletAddress = this.walletUrl;
          const iframe = yield new Promise((resolve) => {
            var _a3;
            (_a3 = this.iframeWalletComponent) === null || _a3 === void 0 ? void 0 : _a3.addEventListener(constants_1.iframeWindowReadyEvent, (event) => {
              resolve(event.detail);
            });
          });
          if (!iframe) {
            throw new Error("Cannot initialize iframe window");
          }
          this.walletWindow = iframe.contentWindow;
          this.setWalletVisible(true);
        });
      }
      setWalletVisible(visible) {
        var _a2;
        (_a2 = this.iframeWalletComponent) === null || _a2 === void 0 ? void 0 : _a2.setWalletVisible(visible);
      }
    };
    exports.IframeManager = IframeManager;
  }
});

// node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeProvider/IframeProvider.js
var require_IframeProvider = __commonJS({
  "node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeProvider/IframeProvider.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IframeProvider = void 0;
    var transaction_1 = require_transaction();
    var CrossWindowProvider_1 = require_CrossWindowProvider();
    var enums_1 = require_enums();
    var errors_1 = require_errors();
    var constants_1 = require_constants();
    var IframeManager_1 = require_IframeManager();
    var IframeProvider = class _IframeProvider extends CrossWindowProvider_1.CrossWindowProvider {
      constructor() {
        super();
        this.loginType = constants_1.IframeLoginTypes.metamask;
        this.windowManager = new IframeManager_1.IframeManager({
          onDisconnect: this.logout.bind(this)
        });
      }
      static getInstance() {
        if (!_IframeProvider._instance) {
          _IframeProvider._instance = new _IframeProvider();
          return _IframeProvider._instance;
        }
        return _IframeProvider._instance;
      }
      init() {
        const _super = Object.create(null, {
          init: { get: () => super.init }
        });
        return __awaiter11(this, void 0, void 0, function* () {
          const initialized = yield _super.init.call(this);
          return initialized;
        });
      }
      setLoginType(loginType) {
        this.loginType = loginType;
        this.windowManager.setLoginType(loginType);
      }
      setWalletUrl(url) {
        const newUrl = `${url}/?iframeProviderLoginType=${this.loginType}`;
        return super.setWalletUrl(newUrl);
      }
      login(options = {}) {
        const _super = Object.create(null, {
          login: { get: () => super.login }
        });
        var _a2;
        return __awaiter11(this, void 0, void 0, function* () {
          yield this.windowManager.setWalletWindow();
          const account = yield _super.login.call(this, options);
          if (!account.address) {
            (_a2 = this.windowManager.iframeWallet) === null || _a2 === void 0 ? void 0 : _a2.remove();
            this.windowManager.walletWindow = null;
            throw new errors_1.ErrCouldNotLogin();
          }
          this.windowManager.closeWalletWindow();
          return account;
        });
      }
      dispose() {
        const _super = Object.create(null, {
          dispose: { get: () => super.dispose }
        });
        return __awaiter11(this, void 0, void 0, function* () {
          return _super.dispose.call(this);
        });
      }
      logout() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.initialized) {
            throw new errors_1.ErrProviderNotInitialized();
          }
          try {
            this.ensureConnected();
            yield this.windowManager.closeConnection();
          } catch (e3) {
            console.error(e3);
          }
          this.initialized = false;
          this.disconnect();
          return true;
        });
      }
      signTransaction(transaction) {
        const _super = Object.create(null, {
          signTransaction: { get: () => super.signTransaction }
        });
        return __awaiter11(this, void 0, void 0, function* () {
          yield this.windowManager.setWalletWindow();
          const data = yield _super.signTransaction.call(this, transaction);
          this.windowManager.closeWalletWindow();
          return data;
        });
      }
      signTransactions(transactions) {
        return __awaiter11(this, void 0, void 0, function* () {
          yield this.windowManager.setWalletWindow();
          this.ensureConnected();
          const { type, payload: { data: signedPlainTransactions, error } } = yield this.windowManager.postMessage({
            type: enums_1.WindowProviderRequestEnums.signTransactionsRequest,
            payload: transactions.map((tx) => tx.toPlainObject())
          });
          if (error || !signedPlainTransactions) {
            this.windowManager.closeWalletWindow();
            throw new errors_1.ErrCouldNotSignTransactions();
          }
          if (type === enums_1.WindowProviderResponseEnums.cancelResponse) {
            this.windowManager.closeWalletWindow();
            throw new errors_1.ErrTransactionCancelled();
          }
          const hasTransactions = (signedPlainTransactions === null || signedPlainTransactions === void 0 ? void 0 : signedPlainTransactions.length) > 0;
          if (!hasTransactions) {
            throw new errors_1.ErrCouldNotSignTransactions();
          }
          const data = signedPlainTransactions.map((tx) => transaction_1.Transaction.fromPlainObject(tx));
          this.windowManager.closeWalletWindow();
          return data;
        });
      }
      guardTransactions(transactions) {
        const _super = Object.create(null, {
          guardTransactions: { get: () => super.guardTransactions }
        });
        return __awaiter11(this, void 0, void 0, function* () {
          yield this.windowManager.setWalletWindow();
          const data = yield _super.guardTransactions.call(this, transactions);
          this.windowManager.closeWalletWindow();
          return data;
        });
      }
      signMessage(messageToSign) {
        const _super = Object.create(null, {
          signMessage: { get: () => super.signMessage }
        });
        return __awaiter11(this, void 0, void 0, function* () {
          yield this.windowManager.setWalletWindow();
          messageToSign.signer = this.loginType;
          const data = yield _super.signMessage.call(this, messageToSign);
          this.windowManager.closeWalletWindow();
          return data;
        });
      }
      openPopupConsent() {
        return __awaiter11(this, void 0, void 0, function* () {
          return true;
        });
      }
    };
    IframeProvider._instance = null;
    exports.IframeProvider = IframeProvider;
  }
});

// node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeProvider/index.js
var require_IframeProvider2 = __commonJS({
  "node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/IframeProvider/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m5, exports2) {
      for (var p5 in m5) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding2(exports2, m5, p5);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_IframeProvider(), exports);
  }
});

// node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/index.js
var require_out4 = __commonJS({
  "node_modules/@multiversx/sdk-web-wallet-iframe-provider/out/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m5, exports2) {
      for (var p5 in m5) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding2(exports2, m5, p5);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_IframeProvider2(), exports);
  }
});

// node_modules/@multiversx/sdk-extension-provider/out/errors.js
var require_errors3 = __commonJS({
  "node_modules/@multiversx/sdk-extension-provider/out/errors.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrAccountNotConnected = exports.ErrCannotSignSingleTransaction = exports.Err = void 0;
    var Err2 = class extends Error {
      constructor(message, inner) {
        super(message);
        this.inner = void 0;
        this.inner = inner;
      }
    };
    exports.Err = Err2;
    var ErrCannotSignSingleTransaction2 = class extends Err2 {
      constructor() {
        super("Cannot sign single transaction.");
      }
    };
    exports.ErrCannotSignSingleTransaction = ErrCannotSignSingleTransaction2;
    var ErrAccountNotConnected2 = class extends Err2 {
      constructor() {
        super("Account is not connected.");
      }
    };
    exports.ErrAccountNotConnected = ErrAccountNotConnected2;
  }
});

// node_modules/@multiversx/sdk-extension-provider/out/operation.js
var require_operation2 = __commonJS({
  "node_modules/@multiversx/sdk-extension-provider/out/operation.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Operation = void 0;
    var Operation;
    (function(Operation2) {
      Operation2["Connect"] = "connect";
      Operation2["Logout"] = "logout";
      Operation2["SignTransactions"] = "signTransactions";
      Operation2["SignMessage"] = "signMessage";
      Operation2["CancelAction"] = "cancelAction";
    })(Operation || (exports.Operation = Operation = {}));
  }
});

// node_modules/@multiversx/sdk-extension-provider/out/extensionProvider.js
var require_extensionProvider = __commonJS({
  "node_modules/@multiversx/sdk-extension-provider/out/extensionProvider.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExtensionProvider = void 0;
    var sdk_core_1 = require_out();
    var transaction_1 = require_transaction();
    var errors_1 = require_errors3();
    var operation_1 = require_operation2();
    var ExtensionProvider = class _ExtensionProvider {
      constructor() {
        this.account = { address: "" };
        this.initialized = false;
        if (_ExtensionProvider._instance) {
          throw new Error("Error: Instantiation failed: Use ExtensionProvider.getInstance() instead of new.");
        }
        _ExtensionProvider._instance = this;
      }
      static getInstance() {
        return _ExtensionProvider._instance;
      }
      setAddress(address) {
        this.account.address = address;
        return _ExtensionProvider._instance;
      }
      init() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (window && window.elrondWallet) {
            this.initialized = true;
          }
          return this.initialized;
        });
      }
      login() {
        return __awaiter11(this, arguments, void 0, function* (options = {}) {
          if (!this.initialized) {
            throw new Error("Extension provider is not initialised, call init() first");
          }
          const { token } = options;
          const data = token ? token : "";
          yield this.startBgrMsgChannel(operation_1.Operation.Connect, data);
          return this.account;
        });
      }
      logout() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.initialized) {
            throw new Error("Extension provider is not initialised, call init() first");
          }
          try {
            yield this.startBgrMsgChannel(operation_1.Operation.Logout, this.account.address);
            this.disconnect();
          } catch (error) {
            console.warn("Extension origin url is already cleared!", error);
          }
          return true;
        });
      }
      disconnect() {
        this.account = { address: "" };
      }
      getAddress() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.initialized) {
            throw new Error("Extension provider is not initialised, call init() first");
          }
          return this.account ? this.account.address : "";
        });
      }
      isInitialized() {
        return this.initialized;
      }
      isConnected() {
        return Boolean(this.account.address);
      }
      getAccount() {
        return this.account;
      }
      setAccount(account) {
        this.account = account;
      }
      signTransaction(transaction) {
        return __awaiter11(this, void 0, void 0, function* () {
          this.ensureConnected();
          const signedTransactions = yield this.signTransactions([transaction]);
          if (signedTransactions.length != 1) {
            throw new errors_1.ErrCannotSignSingleTransaction();
          }
          return signedTransactions[0];
        });
      }
      ensureConnected() {
        if (!this.account.address) {
          throw new errors_1.ErrAccountNotConnected();
        }
      }
      signTransactions(transactions) {
        return __awaiter11(this, void 0, void 0, function* () {
          this.ensureConnected();
          const extensionResponse = yield this.startBgrMsgChannel(operation_1.Operation.SignTransactions, {
            from: this.account.address,
            transactions: transactions.map((transaction) => transaction.toPlainObject())
          });
          try {
            const transactionsResponse = extensionResponse.map((transaction) => transaction_1.Transaction.fromPlainObject(transaction));
            return transactionsResponse;
          } catch (error) {
            throw new Error(`Transaction canceled: ${error.message}.`);
          }
        });
      }
      signMessage(messageToSign) {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2;
          this.ensureConnected();
          const data = {
            account: this.account.address,
            message: Buffer.from(messageToSign.data).toString()
          };
          const extensionResponse = yield this.startBgrMsgChannel(operation_1.Operation.SignMessage, data);
          const signatureHex = extensionResponse.signature;
          const signature2 = Buffer.from(signatureHex, "hex");
          return new sdk_core_1.Message({
            data: Buffer.from(messageToSign.data),
            address: (_a2 = messageToSign.address) !== null && _a2 !== void 0 ? _a2 : sdk_core_1.Address.fromBech32(this.account.address),
            signer: "extension",
            version: messageToSign.version,
            signature: signature2
          });
        });
      }
      cancelAction() {
        return this.startBgrMsgChannel(operation_1.Operation.CancelAction, {});
      }
      startBgrMsgChannel(operation, connectData) {
        return new Promise((resolve) => {
          window.postMessage({
            target: "erdw-inpage",
            type: operation,
            data: connectData
          }, window.origin);
          const eventHandler = (event) => {
            if (event.isTrusted && event.data.target === "erdw-contentScript") {
              if (event.data.type === "connectResponse") {
                if (event.data.data && Boolean(event.data.data.address)) {
                  this.account = event.data.data;
                }
                window.removeEventListener("message", eventHandler);
                resolve(event.data.data);
              } else {
                window.removeEventListener("message", eventHandler);
                resolve(event.data.data);
              }
            }
          };
          window.addEventListener("message", eventHandler, false);
        });
      }
    };
    exports.ExtensionProvider = ExtensionProvider;
    ExtensionProvider._instance = new ExtensionProvider();
  }
});

// node_modules/@multiversx/sdk-extension-provider/out/index.js
var require_out5 = __commonJS({
  "node_modules/@multiversx/sdk-extension-provider/out/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m5, exports2) {
      for (var p5 in m5) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding2(exports2, m5, p5);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_extensionProvider(), exports);
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/globals.js
var require_globals = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/globals.js"() {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    if (!global.Buffer) {
      global.Buffer = require_buffer_polyfill().Buffer;
    }
  }
});

// node_modules/@ledgerhq/errors/lib-es/helpers.js
function isObject(value) {
  return typeof value === "object";
}
var import_dist117, errorClasses, deserializers, addCustomErrorDeserializer, createCustomErrorClass;
var init_helpers = __esm({
  "node_modules/@ledgerhq/errors/lib-es/helpers.js"() {
    import_dist117 = __toESM(require_dist());
    errorClasses = {};
    deserializers = {};
    addCustomErrorDeserializer = (name2, deserializer) => {
      deserializers[name2] = deserializer;
    };
    createCustomErrorClass = (name2) => {
      class CustomErrorClass extends Error {
        constructor(message, fields, options) {
          super(message || name2, options);
          Object.setPrototypeOf(this, CustomErrorClass.prototype);
          this.name = name2;
          if (fields) {
            for (const k5 in fields) {
              this[k5] = fields[k5];
            }
          }
          if (options && isObject(options) && "cause" in options && !("cause" in this)) {
            const cause = options.cause;
            this.cause = cause;
            if ("stack" in cause) {
              this.stack = this.stack + "\nCAUSE: " + cause.stack;
            }
          }
        }
      }
      errorClasses[name2] = CustomErrorClass;
      return CustomErrorClass;
    };
  }
});

// node_modules/@ledgerhq/errors/lib-es/index.js
function getAltStatusMessage(code2) {
  switch (code2) {
    // improve text of most common errors
    case 26368:
      return "Incorrect length";
    case 26624:
      return "Missing critical parameter";
    case 27010:
      return "Security not satisfied (dongle locked or have invalid access rights)";
    case 27013:
      return "Condition of use not satisfied (denied by the user?)";
    case 27264:
      return "Invalid data received";
    case 27392:
      return "Invalid parameter received";
    case 21781:
      return "Locked device";
  }
  if (28416 <= code2 && code2 <= 28671) {
    return "Internal error, please report";
  }
}
var import_dist118, AccountNameRequiredError, AccountNotSupported, AccountAwaitingSendPendingOperations, AmountRequired, BluetoothRequired, BtcUnmatchedApp, CantOpenDevice, CashAddrNotSupported, ClaimRewardsFeesWarning, CurrencyNotSupported, DeviceAppVerifyNotSupported, DeviceGenuineSocketEarlyClose, DeviceNotGenuineError, DeviceOnDashboardExpected, DeviceOnDashboardUnexpected, DeviceInOSUExpected, DeviceHalted, DeviceNameInvalid, DeviceSocketFail, DeviceSocketNoBulkStatus, DeviceNeedsRestart, UnresponsiveDeviceError, DisconnectedDevice, DisconnectedDeviceDuringOperation, DeviceExtractOnboardingStateError, DeviceOnboardingStatePollingError, EnpointConfigError, EthAppPleaseEnableContractData, FeeEstimationFailed, FirmwareNotRecognized, HardResetFail, InvalidXRPTag, InvalidAddress, InvalidNonce, InvalidAddressBecauseDestinationIsAlsoSource, LatestMCUInstalledError, UnknownMCU, LedgerAPIError, LedgerAPIErrorWithMessage, LedgerAPINotAvailable, ManagerAppAlreadyInstalledError, ManagerAppRelyOnBTCError, ManagerAppDepInstallRequired, ManagerAppDepUninstallRequired, ManagerDeviceLockedError, ManagerFirmwareNotEnoughSpaceError, ManagerNotEnoughSpaceError, ManagerUninstallBTCDep, NetworkDown, NetworkError, NoAddressesFound, NotEnoughBalance, NotEnoughBalanceSwap, NotEnoughBalanceToDelegate, NotEnoughBalanceInParentAccount, NotEnoughSpendableBalance, NotEnoughBalanceBecauseDestinationNotCreated, NoAccessToCamera, NotEnoughGas, NotEnoughGasSwap, TronEmptyAccount, MaybeKeepTronAccountAlive, NotSupportedLegacyAddress, GasLessThanEstimate, PriorityFeeTooLow, PriorityFeeTooHigh, PriorityFeeHigherThanMaxFee, MaxFeeTooLow, PasswordsDontMatchError, PasswordIncorrectError, RecommendSubAccountsToEmpty, RecommendUndelegation, TimeoutTagged, UnexpectedBootloader, MCUNotGenuineToDashboard, RecipientRequired, UnavailableTezosOriginatedAccountReceive, UnavailableTezosOriginatedAccountSend, UpdateFetchFileFail, UpdateIncorrectHash, UpdateIncorrectSig, UpdateYourApp, UserRefusedDeviceNameChange, UserRefusedAddress, UserRefusedFirmwareUpdate, UserRefusedAllowManager, UserRefusedOnDevice, PinNotSet, ExpertModeRequired, TransportOpenUserCancelled, TransportInterfaceNotAvailable, TransportRaceCondition, TransportWebUSBGestureRequired, TransactionHasBeenValidatedError, TransportExchangeTimeoutError, DeviceShouldStayInApp, WebsocketConnectionError, WebsocketConnectionFailed, WrongDeviceForAccount, WrongDeviceForAccountPayout, WrongDeviceForAccountRefund, WrongAppForCurrency, ETHAddressNonEIP, CantScanQRCode, FeeNotLoaded, FeeNotLoadedSwap, FeeRequired, FeeTooHigh, PendingOperation, SyncError, PairingFailed, PeerRemovedPairing, GenuineCheckFailed, LedgerAPI4xx, LedgerAPI5xx, FirmwareOrAppUpdateRequired, ReplacementTransactionUnderpriced, OpReturnDataSizeLimit, DustLimit, LanguageNotFound, NoDBPathGiven, DBWrongPassword, DBNotReset, SequenceNumberError, DisabledTransactionBroadcastError, HwTransportErrorType, TransportError, StatusCodes, TransportStatusError, LockedDeviceError;
var init_lib_es = __esm({
  "node_modules/@ledgerhq/errors/lib-es/index.js"() {
    import_dist118 = __toESM(require_dist());
    init_helpers();
    AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");
    AccountNotSupported = createCustomErrorClass("AccountNotSupported");
    AccountAwaitingSendPendingOperations = createCustomErrorClass("AccountAwaitingSendPendingOperations");
    AmountRequired = createCustomErrorClass("AmountRequired");
    BluetoothRequired = createCustomErrorClass("BluetoothRequired");
    BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");
    CantOpenDevice = createCustomErrorClass("CantOpenDevice");
    CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");
    ClaimRewardsFeesWarning = createCustomErrorClass("ClaimRewardsFeesWarning");
    CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");
    DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");
    DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");
    DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");
    DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");
    DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");
    DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");
    DeviceHalted = createCustomErrorClass("DeviceHalted");
    DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");
    DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");
    DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");
    DeviceNeedsRestart = createCustomErrorClass("DeviceSocketNoBulkStatus");
    UnresponsiveDeviceError = createCustomErrorClass("UnresponsiveDeviceError");
    DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");
    DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");
    DeviceExtractOnboardingStateError = createCustomErrorClass("DeviceExtractOnboardingStateError");
    DeviceOnboardingStatePollingError = createCustomErrorClass("DeviceOnboardingStatePollingError");
    EnpointConfigError = createCustomErrorClass("EnpointConfig");
    EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");
    FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");
    FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");
    HardResetFail = createCustomErrorClass("HardResetFail");
    InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");
    InvalidAddress = createCustomErrorClass("InvalidAddress");
    InvalidNonce = createCustomErrorClass("InvalidNonce");
    InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");
    LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");
    UnknownMCU = createCustomErrorClass("UnknownMCU");
    LedgerAPIError = createCustomErrorClass("LedgerAPIError");
    LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");
    LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");
    ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");
    ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");
    ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");
    ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");
    ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");
    ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");
    ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");
    ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");
    NetworkDown = createCustomErrorClass("NetworkDown");
    NetworkError = createCustomErrorClass("NetworkError");
    NoAddressesFound = createCustomErrorClass("NoAddressesFound");
    NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");
    NotEnoughBalanceSwap = createCustomErrorClass("NotEnoughBalanceSwap");
    NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");
    NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");
    NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");
    NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");
    NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");
    NotEnoughGas = createCustomErrorClass("NotEnoughGas");
    NotEnoughGasSwap = createCustomErrorClass("NotEnoughGasSwap");
    TronEmptyAccount = createCustomErrorClass("TronEmptyAccount");
    MaybeKeepTronAccountAlive = createCustomErrorClass("MaybeKeepTronAccountAlive");
    NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");
    GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");
    PriorityFeeTooLow = createCustomErrorClass("PriorityFeeTooLow");
    PriorityFeeTooHigh = createCustomErrorClass("PriorityFeeTooHigh");
    PriorityFeeHigherThanMaxFee = createCustomErrorClass("PriorityFeeHigherThanMaxFee");
    MaxFeeTooLow = createCustomErrorClass("MaxFeeTooLow");
    PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");
    PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");
    RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");
    RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");
    TimeoutTagged = createCustomErrorClass("TimeoutTagged");
    UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");
    MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");
    RecipientRequired = createCustomErrorClass("RecipientRequired");
    UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");
    UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");
    UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");
    UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");
    UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");
    UpdateYourApp = createCustomErrorClass("UpdateYourApp");
    UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");
    UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");
    UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");
    UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");
    UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice");
    PinNotSet = createCustomErrorClass("PinNotSet");
    ExpertModeRequired = createCustomErrorClass("ExpertModeRequired");
    TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");
    TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");
    TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");
    TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");
    TransactionHasBeenValidatedError = createCustomErrorClass("TransactionHasBeenValidatedError");
    TransportExchangeTimeoutError = createCustomErrorClass("TransportExchangeTimeoutError");
    DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");
    WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");
    WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");
    WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");
    WrongDeviceForAccountPayout = createCustomErrorClass("WrongDeviceForAccountPayout");
    WrongDeviceForAccountRefund = createCustomErrorClass("WrongDeviceForAccountRefund");
    WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");
    ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");
    CantScanQRCode = createCustomErrorClass("CantScanQRCode");
    FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");
    FeeNotLoadedSwap = createCustomErrorClass("FeeNotLoadedSwap");
    FeeRequired = createCustomErrorClass("FeeRequired");
    FeeTooHigh = createCustomErrorClass("FeeTooHigh");
    PendingOperation = createCustomErrorClass("PendingOperation");
    SyncError = createCustomErrorClass("SyncError");
    PairingFailed = createCustomErrorClass("PairingFailed");
    PeerRemovedPairing = createCustomErrorClass("PeerRemovedPairing");
    GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");
    LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");
    LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");
    FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");
    ReplacementTransactionUnderpriced = createCustomErrorClass("ReplacementTransactionUnderpriced");
    OpReturnDataSizeLimit = createCustomErrorClass("OpReturnSizeLimit");
    DustLimit = createCustomErrorClass("DustLimit");
    LanguageNotFound = createCustomErrorClass("LanguageNotFound");
    NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");
    DBWrongPassword = createCustomErrorClass("DBWrongPassword");
    DBNotReset = createCustomErrorClass("DBNotReset");
    SequenceNumberError = createCustomErrorClass("SequenceNumberError");
    DisabledTransactionBroadcastError = createCustomErrorClass("DisabledTransactionBroadcastError");
    (function(HwTransportErrorType2) {
      HwTransportErrorType2["Unknown"] = "Unknown";
      HwTransportErrorType2["LocationServicesDisabled"] = "LocationServicesDisabled";
      HwTransportErrorType2["LocationServicesUnauthorized"] = "LocationServicesUnauthorized";
      HwTransportErrorType2["BluetoothScanStartFailed"] = "BluetoothScanStartFailed";
    })(HwTransportErrorType || (HwTransportErrorType = {}));
    TransportError = class extends Error {
      constructor(message, id3) {
        const name2 = "TransportError";
        super(message || name2);
        this.name = name2;
        this.message = message;
        this.stack = new Error(message).stack;
        this.id = id3;
      }
    };
    addCustomErrorDeserializer("TransportError", (e3) => new TransportError(e3.message, e3.id));
    StatusCodes = {
      ACCESS_CONDITION_NOT_FULFILLED: 38916,
      ALGORITHM_NOT_SUPPORTED: 38020,
      CLA_NOT_SUPPORTED: 28160,
      CODE_BLOCKED: 38976,
      CODE_NOT_INITIALIZED: 38914,
      COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 27009,
      CONDITIONS_OF_USE_NOT_SATISFIED: 27013,
      CONTRADICTION_INVALIDATION: 38928,
      CONTRADICTION_SECRET_CODE_STATUS: 38920,
      DEVICE_IN_RECOVERY_MODE: 26159,
      CUSTOM_IMAGE_EMPTY: 26158,
      FILE_ALREADY_EXISTS: 27273,
      FILE_NOT_FOUND: 37892,
      GP_AUTH_FAILED: 25344,
      HALTED: 28586,
      INCONSISTENT_FILE: 37896,
      INCORRECT_DATA: 27264,
      INCORRECT_LENGTH: 26368,
      INCORRECT_P1_P2: 27392,
      INS_NOT_SUPPORTED: 27904,
      DEVICE_NOT_ONBOARDED: 27911,
      DEVICE_NOT_ONBOARDED_2: 26129,
      INVALID_KCV: 38021,
      INVALID_OFFSET: 37890,
      LICENSING: 28482,
      LOCKED_DEVICE: 21781,
      MAX_VALUE_REACHED: 38992,
      MEMORY_PROBLEM: 37440,
      MISSING_CRITICAL_PARAMETER: 26624,
      NO_EF_SELECTED: 37888,
      NOT_ENOUGH_MEMORY_SPACE: 27268,
      OK: 36864,
      PIN_REMAINING_ATTEMPTS: 25536,
      REFERENCED_DATA_NOT_FOUND: 27272,
      SECURITY_STATUS_NOT_SATISFIED: 27010,
      TECHNICAL_PROBLEM: 28416,
      UNKNOWN_APDU: 27906,
      USER_REFUSED_ON_DEVICE: 21761,
      NOT_ENOUGH_SPACE: 20738,
      APP_NOT_FOUND_OR_INVALID_CONTEXT: 20771,
      INVALID_APP_NAME_LENGTH: 26378,
      GEN_AES_KEY_FAILED: 21529,
      INTERNAL_CRYPTO_OPERATION_FAILED: 21530,
      INTERNAL_COMPUTE_AES_CMAC_FAILED: 21531,
      ENCRYPT_APP_STORAGE_FAILED: 21532,
      INVALID_BACKUP_STATE: 26178,
      PIN_NOT_SET: 21762,
      INVALID_BACKUP_LENGTH: 26419,
      INVALID_RESTORE_STATE: 26179,
      INVALID_CHUNK_LENGTH: 26420,
      INVALID_BACKUP_HEADER: 26698,
      // Not documented:
      TRUSTCHAIN_WRONG_SEED: 45063
    };
    TransportStatusError = class _TransportStatusError extends Error {
      /**
       * @param statusCode The error status code coming from a Transport implementation
       * @param options containing:
       *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it
       *  . Ex: LockedDeviceError. Default to true.
       */
      constructor(statusCode, { canBeMappedToChildError = true } = {}) {
        const statusText = Object.keys(StatusCodes).find((k5) => StatusCodes[k5] === statusCode) || "UNKNOWN_ERROR";
        const smsg = getAltStatusMessage(statusCode) || statusText;
        const statusCodeStr = statusCode.toString(16);
        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;
        super(message);
        this.name = "TransportStatusError";
        this.statusCode = statusCode;
        this.statusText = statusText;
        Object.setPrototypeOf(this, _TransportStatusError.prototype);
        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {
          return new LockedDeviceError(message);
        }
      }
    };
    LockedDeviceError = class _LockedDeviceError extends TransportStatusError {
      constructor(message) {
        super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });
        if (message) {
          this.message = message;
        }
        this.name = "LockedDeviceError";
        Object.setPrototypeOf(this, _LockedDeviceError.prototype);
      }
    };
    addCustomErrorDeserializer("TransportStatusError", (e3) => new TransportStatusError(e3.statusCode));
  }
});

// node_modules/@ledgerhq/logs/lib-es/index.js
function dispatch(log2) {
  for (let i5 = 0; i5 < subscribers.length; i5++) {
    try {
      subscribers[i5](log2);
    } catch (e3) {
      console.error(e3);
    }
  }
}
var import_dist119, id2, subscribers, log, trace, LocalTracer, listen;
var init_lib_es2 = __esm({
  "node_modules/@ledgerhq/logs/lib-es/index.js"() {
    import_dist119 = __toESM(require_dist());
    id2 = 0;
    subscribers = [];
    log = (type, message, data) => {
      const obj = {
        type,
        id: String(++id2),
        date: /* @__PURE__ */ new Date()
      };
      if (message)
        obj.message = message;
      if (data)
        obj.data = data;
      dispatch(obj);
    };
    trace = ({ type, message, data, context: context2 }) => {
      const obj = {
        type,
        id: String(++id2),
        date: /* @__PURE__ */ new Date()
      };
      if (message)
        obj.message = message;
      if (data)
        obj.data = data;
      if (context2)
        obj.context = context2;
      dispatch(obj);
    };
    LocalTracer = class _LocalTracer {
      constructor(type, context2) {
        this.type = type;
        this.context = context2;
      }
      trace(message, data) {
        trace({
          type: this.type,
          message,
          data,
          context: this.context
        });
      }
      getContext() {
        return this.context;
      }
      setContext(context2) {
        this.context = context2;
      }
      updateContext(contextToAdd) {
        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);
      }
      getType() {
        return this.type;
      }
      setType(type) {
        this.type = type;
      }
      /**
       * Create a new instance of the LocalTracer with an updated `type`
       *
       * It does not mutate the calling instance, but returns a new LocalTracer,
       * following a simple builder pattern.
       */
      withType(type) {
        return new _LocalTracer(type, this.context);
      }
      /**
       * Create a new instance of the LocalTracer with a new `context`
       *
       * It does not mutate the calling instance, but returns a new LocalTracer,
       * following a simple builder pattern.
       *
       * @param context A TraceContext, that can undefined to reset the context
       */
      withContext(context2) {
        return new _LocalTracer(this.type, context2);
      }
      /**
       * Create a new instance of the LocalTracer with an updated `context`,
       * on which an additional context is merged with the existing one.
       *
       * It does not mutate the calling instance, but returns a new LocalTracer,
       * following a simple builder pattern.
       */
      withUpdatedContext(contextToAdd) {
        return new _LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));
      }
    };
    listen = (cb) => {
      subscribers.push(cb);
      return () => {
        const i5 = subscribers.indexOf(cb);
        if (i5 !== -1) {
          subscribers[i5] = subscribers[subscribers.length - 1];
          subscribers.pop();
        }
      };
    };
    if (typeof window !== "undefined") {
      window.__ledgerLogsListen = listen;
    }
  }
});

// node_modules/@ledgerhq/hw-transport/lib-es/Transport.js
var import_dist120, import_events9, __awaiter2, DEFAULT_LOG_TYPE, Transport, Transport_default;
var init_Transport = __esm({
  "node_modules/@ledgerhq/hw-transport/lib-es/Transport.js"() {
    import_dist120 = __toESM(require_dist());
    import_events9 = __toESM(require_events());
    init_lib_es();
    init_lib_es2();
    __awaiter2 = function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    DEFAULT_LOG_TYPE = "transport";
    Transport = class {
      constructor({ context: context2, logType } = {}) {
        this.exchangeTimeout = 3e4;
        this.unresponsiveTimeout = 15e3;
        this.deviceModel = null;
        this._events = new import_events9.default();
        this.send = (cla_1, ins_1, p1_1, p2_1, ...args_1) => __awaiter2(this, [cla_1, ins_1, p1_1, p2_1, ...args_1], void 0, function* (cla, ins, p1, p22, data = Buffer.alloc(0), statusList = [StatusCodes.OK], { abortTimeoutMs } = {}) {
          const tracer = this.tracer.withUpdatedContext({ function: "send" });
          if (data.length >= 256) {
            tracer.trace("data.length exceeded 256 bytes limit", { dataLength: data.length });
            throw new TransportError("data.length exceed 256 bytes limit. Got: " + data.length, "DataLengthTooBig");
          }
          tracer.trace("Starting an exchange", { abortTimeoutMs });
          const response = yield this.exchange(
            // The size of the data is added in 1 byte just before `data`
            Buffer.concat([Buffer.from([cla, ins, p1, p22]), Buffer.from([data.length]), data]),
            { abortTimeoutMs }
          );
          tracer.trace("Received response from exchange");
          const sw = response.readUInt16BE(response.length - 2);
          if (!statusList.some((s4) => s4 === sw)) {
            throw new TransportStatusError(sw);
          }
          return response;
        });
        this._appAPIlock = null;
        this.tracer = new LocalTracer(logType !== null && logType !== void 0 ? logType : DEFAULT_LOG_TYPE, context2);
      }
      /**
       * Send data to the device using a low level API.
       * It's recommended to use the "send" method for a higher level API.
       * @param {Buffer} apdu - The data to send.
       * @param {Object} options - Contains optional options for the exchange function
       *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists
       *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.
       * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.
       */
      exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {
        throw new Error("exchange not implemented");
      }
      /**
       * Send apdus in batch to the device using a low level API.
       * The default implementation is to call exchange for each apdu.
       * @param {Array<Buffer>} apdus - array of apdus to send.
       * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.
       * @returns {Subscription} A Subscription object on which you can call ".unsubscribe()" to stop sending apdus.
       */
      exchangeBulk(apdus, observer) {
        let unsubscribed = false;
        const unsubscribe = () => {
          unsubscribed = true;
        };
        const main = () => __awaiter2(this, void 0, void 0, function* () {
          if (unsubscribed)
            return;
          for (const apdu of apdus) {
            const r6 = yield this.exchange(apdu);
            if (unsubscribed)
              return;
            const status = r6.readUInt16BE(r6.length - 2);
            if (status !== StatusCodes.OK) {
              throw new TransportStatusError(status);
            }
            observer.next(r6);
          }
        });
        main().then(() => !unsubscribed && observer.complete(), (e3) => !unsubscribed && observer.error(e3));
        return { unsubscribe };
      }
      /**
       * Set the "scramble key" for the next data exchanges with the device.
       * Each app can have a different scramble key and it is set internally during instantiation.
       * @param {string} key - The scramble key to set.
       * deprecated This method is no longer needed for modern transports and should be migrated away from.
       * no @ before deprecated as it breaks documentationjs on version 14.0.2
       * https://github.com/documentationjs/documentation/issues/1596
       */
      setScrambleKey(_key) {
      }
      /**
       * Close the connection with the device.
       *
       * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,
       * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.
       * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.
       *
       * @returns {Promise<void>} A promise that resolves when the transport is closed.
       */
      close() {
        return Promise.resolve();
      }
      /**
       * Listen for an event on the transport instance.
       * Transport implementations may have specific events. Common events include:
       * "disconnect" : triggered when the transport is disconnected.
       * @param {string} eventName - The name of the event to listen for.
       * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.
       */
      on(eventName, cb) {
        this._events.on(eventName, cb);
      }
      /**
       * Stop listening to an event on an instance of transport.
       */
      off(eventName, cb) {
        this._events.removeListener(eventName, cb);
      }
      emit(event, ...args) {
        this._events.emit(event, ...args);
      }
      /**
       * Enable or not logs of the binary exchange
       */
      setDebugMode() {
        console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.");
      }
      /**
       * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)
       */
      setExchangeTimeout(exchangeTimeout) {
        this.exchangeTimeout = exchangeTimeout;
      }
      /**
       * Define the delay before emitting "unresponsive" on an exchange that does not respond
       */
      setExchangeUnresponsiveTimeout(unresponsiveTimeout) {
        this.unresponsiveTimeout = unresponsiveTimeout;
      }
      /**
       * create() allows to open the first descriptor available or
       * throw if there is none or if timeout is reached.
       * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)
       * @example
      TransportFoo.create().then(transport => ...)
       */
      static create(openTimeout = 3e3, listenTimeout) {
        return new Promise((resolve, reject) => {
          let found = false;
          const sub = this.listen({
            next: (e3) => {
              found = true;
              if (sub)
                sub.unsubscribe();
              if (listenTimeoutId)
                clearTimeout(listenTimeoutId);
              this.open(e3.descriptor, openTimeout).then(resolve, reject);
            },
            error: (e3) => {
              if (listenTimeoutId)
                clearTimeout(listenTimeoutId);
              reject(e3);
            },
            complete: () => {
              if (listenTimeoutId)
                clearTimeout(listenTimeoutId);
              if (!found) {
                reject(new TransportError(this.ErrorMessage_NoDeviceFound, "NoDeviceFound"));
              }
            }
          });
          const listenTimeoutId = listenTimeout ? setTimeout(() => {
            sub.unsubscribe();
            reject(new TransportError(this.ErrorMessage_ListenTimeout, "ListenTimeout"));
          }, listenTimeout) : null;
        });
      }
      /**
       * Wrapper to make an exchange "atomic" (blocking any other exchange)
       *
       * It also handles "unresponsiveness" by emitting "unresponsive" and "responsive" events.
       *
       * @param f The exchange job, using the transport to run
       * @returns a Promise resolving with the output of the given job
       */
      exchangeAtomicImpl(f3) {
        return __awaiter2(this, void 0, void 0, function* () {
          const tracer = this.tracer.withUpdatedContext({
            function: "exchangeAtomicImpl",
            unresponsiveTimeout: this.unresponsiveTimeout
          });
          if (this.exchangeBusyPromise) {
            tracer.trace("Atomic exchange is already busy");
            throw new TransportRaceCondition("An action was already pending on the Ledger device. Please deny or reconnect.");
          }
          let resolveBusy;
          const busyPromise = new Promise((r6) => {
            resolveBusy = r6;
          });
          this.exchangeBusyPromise = busyPromise;
          let unresponsiveReached = false;
          const timeout2 = setTimeout(() => {
            tracer.trace(`Timeout reached, emitting Transport event "unresponsive"`, {
              unresponsiveTimeout: this.unresponsiveTimeout
            });
            unresponsiveReached = true;
            this.emit("unresponsive");
          }, this.unresponsiveTimeout);
          try {
            const res = yield f3();
            if (unresponsiveReached) {
              tracer.trace("Device was unresponsive, emitting responsive");
              this.emit("responsive");
            }
            return res;
          } finally {
            tracer.trace("Finalize, clearing busy guard");
            clearTimeout(timeout2);
            if (resolveBusy)
              resolveBusy();
            this.exchangeBusyPromise = null;
          }
        });
      }
      decorateAppAPIMethods(self2, methods, scrambleKey) {
        for (const methodName of methods) {
          self2[methodName] = this.decorateAppAPIMethod(methodName, self2[methodName], self2, scrambleKey);
        }
      }
      decorateAppAPIMethod(methodName, f3, ctx, scrambleKey) {
        return (...args) => __awaiter2(this, void 0, void 0, function* () {
          const { _appAPIlock } = this;
          if (_appAPIlock) {
            return Promise.reject(new TransportError("Ledger Device is busy (lock " + _appAPIlock + ")", "TransportLocked"));
          }
          try {
            this._appAPIlock = methodName;
            this.setScrambleKey(scrambleKey);
            return yield f3.apply(ctx, args);
          } finally {
            this._appAPIlock = null;
          }
        });
      }
      /**
       * Sets the context used by the logging/tracing mechanism
       *
       * Useful when re-using (cached) the same Transport instance,
       * but with a new tracing context.
       *
       * @param context A TraceContext, that can undefined to reset the context
       */
      setTraceContext(context2) {
        this.tracer = this.tracer.withContext(context2);
      }
      /**
       * Updates the context used by the logging/tracing mechanism
       *
       * The update only overrides the key-value that are already defined in the current context.
       *
       * @param contextToAdd A TraceContext that will be added to the current context
       */
      updateTraceContext(contextToAdd) {
        this.tracer.updateContext(contextToAdd);
      }
      /**
       * Gets the tracing context of the transport instance
       */
      getTraceContext() {
        return this.tracer.getContext();
      }
    };
    Transport.ErrorMessage_ListenTimeout = "No Ledger device found (timeout)";
    Transport.ErrorMessage_NoDeviceFound = "No Ledger device found";
    Transport_default = Transport;
  }
});

// node_modules/semver/internal/constants.js
var require_constants4 = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER2 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER: MAX_SAFE_INTEGER2,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants4();
    var debug = require_debug();
    exports = module.exports = {};
    var re3 = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src2 = exports.src = [];
    var t3 = exports.t = {};
    var R3 = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max2] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max2}}`).split(`${token}+`).join(`${token}{1,${max2}}`);
      }
      return value;
    };
    var createToken = (name2, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R3++;
      debug(name2, index, value);
      t3[name2] = index;
      src2[index] = value;
      re3[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src2[t3.NUMERICIDENTIFIER]})\\.(${src2[t3.NUMERICIDENTIFIER]})\\.(${src2[t3.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src2[t3.NUMERICIDENTIFIERLOOSE]})\\.(${src2[t3.NUMERICIDENTIFIERLOOSE]})\\.(${src2[t3.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src2[t3.NUMERICIDENTIFIER]}|${src2[t3.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src2[t3.NUMERICIDENTIFIERLOOSE]}|${src2[t3.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src2[t3.PRERELEASEIDENTIFIER]}(?:\\.${src2[t3.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src2[t3.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src2[t3.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src2[t3.BUILDIDENTIFIER]}(?:\\.${src2[t3.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src2[t3.MAINVERSION]}${src2[t3.PRERELEASE]}?${src2[t3.BUILD]}?`);
    createToken("FULL", `^${src2[t3.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src2[t3.MAINVERSIONLOOSE]}${src2[t3.PRERELEASELOOSE]}?${src2[t3.BUILD]}?`);
    createToken("LOOSE", `^${src2[t3.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src2[t3.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src2[t3.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src2[t3.XRANGEIDENTIFIER]})(?:\\.(${src2[t3.XRANGEIDENTIFIER]})(?:\\.(${src2[t3.XRANGEIDENTIFIER]})(?:${src2[t3.PRERELEASE]})?${src2[t3.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src2[t3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src2[t3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src2[t3.XRANGEIDENTIFIERLOOSE]})(?:${src2[t3.PRERELEASELOOSE]})?${src2[t3.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src2[t3.GTLT]}\\s*${src2[t3.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src2[t3.GTLT]}\\s*${src2[t3.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src2[t3.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src2[t3.COERCEPLAIN] + `(?:${src2[t3.PRERELEASE]})?(?:${src2[t3.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src2[t3.COERCE], true);
    createToken("COERCERTLFULL", src2[t3.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src2[t3.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src2[t3.LONETILDE]}${src2[t3.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src2[t3.LONETILDE]}${src2[t3.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src2[t3.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src2[t3.LONECARET]}${src2[t3.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src2[t3.LONECARET]}${src2[t3.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src2[t3.GTLT]}\\s*(${src2[t3.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src2[t3.GTLT]}\\s*(${src2[t3.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src2[t3.GTLT]}\\s*(${src2[t3.LOOSEPLAIN]}|${src2[t3.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src2[t3.XRANGEPLAIN]})\\s+-\\s+(${src2[t3.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src2[t3.XRANGEPLAINLOOSE]})\\s+-\\s+(${src2[t3.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a6, b4) => {
      const anum = numeric.test(a6);
      const bnum = numeric.test(b4);
      if (anum && bnum) {
        a6 = +a6;
        b4 = +b4;
      }
      return a6 === b4 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a6 < b4 ? -1 : 1;
    };
    var rcompareIdentifiers = (a6, b4) => compareIdentifiers(b4, a6);
    module.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER2 } = require_constants4();
    var { safeRe: re3, t: t3 } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version12, options) {
        options = parseOptions(options);
        if (version12 instanceof _SemVer) {
          if (version12.loose === !!options.loose && version12.includePrerelease === !!options.includePrerelease) {
            return version12;
          } else {
            version12 = version12.version;
          }
        } else if (typeof version12 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version12}".`);
        }
        if (version12.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version12, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m5 = version12.trim().match(options.loose ? re3[t3.LOOSE] : re3[t3.FULL]);
        if (!m5) {
          throw new TypeError(`Invalid Version: ${version12}`);
        }
        this.raw = version12;
        this.major = +m5[1];
        this.minor = +m5[2];
        this.patch = +m5[3];
        if (this.major > MAX_SAFE_INTEGER2 || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER2 || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER2 || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m5[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m5[4].split(".").map((id3) => {
            if (/^[0-9]+$/.test(id3)) {
              const num = +id3;
              if (num >= 0 && num < MAX_SAFE_INTEGER2) {
                return num;
              }
            }
            return id3;
          });
        }
        this.build = m5[5] ? m5[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i5 = 0;
        do {
          const a6 = this.prerelease[i5];
          const b4 = other.prerelease[i5];
          debug("prerelease compare", i5, a6, b4);
          if (a6 === void 0 && b4 === void 0) {
            return 0;
          } else if (b4 === void 0) {
            return 1;
          } else if (a6 === void 0) {
            return -1;
          } else if (a6 === b4) {
            continue;
          } else {
            return compareIdentifiers(a6, b4);
          }
        } while (++i5);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i5 = 0;
        do {
          const a6 = this.build[i5];
          const b4 = other.build[i5];
          debug("build compare", i5, a6, b4);
          if (a6 === void 0 && b4 === void 0) {
            return 0;
          } else if (b4 === void 0) {
            return 1;
          } else if (a6 === void 0) {
            return -1;
          } else if (a6 === b4) {
            continue;
          } else {
            return compareIdentifiers(a6, b4);
          }
        } while (++i5);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case "pre": {
            const base4 = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base4];
            } else {
              let i5 = this.prerelease.length;
              while (--i5 >= 0) {
                if (typeof this.prerelease[i5] === "number") {
                  this.prerelease[i5]++;
                  i5 = -2;
                }
              }
              if (i5 === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base4);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base4];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var parse2 = (version12, options, throwErrors = false) => {
      if (version12 instanceof SemVer) {
        return version12;
      }
      try {
        return new SemVer(version12, options);
      } catch (er3) {
        if (!throwErrors) {
          return null;
        }
        throw er3;
      }
    };
    module.exports = parse2;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var parse2 = require_parse();
    var valid = (version12, options) => {
      const v8 = parse2(version12, options);
      return v8 ? v8.version : null;
    };
    module.exports = valid;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var parse2 = require_parse();
    var clean = (version12, options) => {
      const s4 = parse2(version12.trim().replace(/^[=v]+/, ""), options);
      return s4 ? s4.version : null;
    };
    module.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var inc = (version12, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version12 instanceof SemVer ? version12.version : version12,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er3) {
        return null;
      }
    };
    module.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var parse2 = require_parse();
    var diff = (version1, version22) => {
      const v1 = parse2(version1, null, true);
      const v22 = parse2(version22, null, true);
      const comparison = v1.compare(v22);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v22;
      const lowVersion = v1Higher ? v22 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v22.major) {
        return prefix + "major";
      }
      if (v1.minor !== v22.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v22.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var major = (a6, loose) => new SemVer(a6, loose).major;
    module.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var minor = (a6, loose) => new SemVer(a6, loose).minor;
    module.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var patch = (a6, loose) => new SemVer(a6, loose).patch;
    module.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var parse2 = require_parse();
    var prerelease = (version12, options) => {
      const parsed = parse2(version12, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module.exports = prerelease;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var compare2 = (a6, b4, loose) => new SemVer(a6, loose).compare(new SemVer(b4, loose));
    module.exports = compare2;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var rcompare = (a6, b4, loose) => compare2(b4, a6, loose);
    module.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var compareLoose = (a6, b4) => compare2(a6, b4, true);
    module.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var compareBuild = (a6, b4, loose) => {
      const versionA = new SemVer(a6, loose);
      const versionB = new SemVer(b4, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a6, b4) => compareBuild(a6, b4, loose));
    module.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a6, b4) => compareBuild(b4, a6, loose));
    module.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var gt4 = (a6, b4, loose) => compare2(a6, b4, loose) > 0;
    module.exports = gt4;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var lt3 = (a6, b4, loose) => compare2(a6, b4, loose) < 0;
    module.exports = lt3;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var eq4 = (a6, b4, loose) => compare2(a6, b4, loose) === 0;
    module.exports = eq4;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var neq = (a6, b4, loose) => compare2(a6, b4, loose) !== 0;
    module.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var gte = (a6, b4, loose) => compare2(a6, b4, loose) >= 0;
    module.exports = gte;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var compare2 = require_compare();
    var lte = (a6, b4, loose) => compare2(a6, b4, loose) <= 0;
    module.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var eq4 = require_eq();
    var neq = require_neq();
    var gt4 = require_gt();
    var gte = require_gte();
    var lt3 = require_lt();
    var lte = require_lte();
    var cmp = (a6, op, b4, loose) => {
      switch (op) {
        case "===":
          if (typeof a6 === "object") {
            a6 = a6.version;
          }
          if (typeof b4 === "object") {
            b4 = b4.version;
          }
          return a6 === b4;
        case "!==":
          if (typeof a6 === "object") {
            a6 = a6.version;
          }
          if (typeof b4 === "object") {
            b4 = b4.version;
          }
          return a6 !== b4;
        case "":
        case "=":
        case "==":
          return eq4(a6, b4, loose);
        case "!=":
          return neq(a6, b4, loose);
        case ">":
          return gt4(a6, b4, loose);
        case ">=":
          return gte(a6, b4, loose);
        case "<":
          return lt3(a6, b4, loose);
        case "<=":
          return lte(a6, b4, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var parse2 = require_parse();
    var { safeRe: re3, t: t3 } = require_re();
    var coerce2 = (version12, options) => {
      if (version12 instanceof SemVer) {
        return version12;
      }
      if (typeof version12 === "number") {
        version12 = String(version12);
      }
      if (typeof version12 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version12.match(options.includePrerelease ? re3[t3.COERCEFULL] : re3[t3.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re3[t3.COERCERTLFULL] : re3[t3.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version12)) && (!match || match.index + match[0].length !== version12.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse2(`${major}.${minor}.${patch}${prerelease}${build}`, options);
    };
    module.exports = coerce2;
  }
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/semver/internal/lrucache.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key2) {
        const value = this.map.get(key2);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key2);
          this.map.set(key2, value);
          return value;
        }
      }
      delete(key2) {
        return this.map.delete(key2);
      }
      set(key2, value) {
        const deleted = this.delete(key2);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key2, value);
        }
        return this;
      }
    };
    module.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SPACE_CHARACTERS = /\s+/g;
    var Range = class _Range {
      constructor(range2, options) {
        options = parseOptions(options);
        if (range2 instanceof _Range) {
          if (range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease) {
            return range2;
          } else {
            return new _Range(range2.raw, options);
          }
        }
        if (range2 instanceof Comparator) {
          this.raw = range2.value;
          this.set = [[range2]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range2.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r6) => this.parseRange(r6.trim())).filter((c5) => c5.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first2 = this.set[0];
          this.set = this.set.filter((c5) => !isNullSet(c5[0]));
          if (this.set.length === 0) {
            this.set = [first2];
          } else if (this.set.length > 1) {
            for (const c5 of this.set) {
              if (c5.length === 1 && isAny(c5[0])) {
                this.set = [c5];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i5 = 0; i5 < this.set.length; i5++) {
            if (i5 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i5];
            for (let k5 = 0; k5 < comps.length; k5++) {
              if (k5 > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k5].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range2) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range2;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr3 = loose ? re3[t3.HYPHENRANGELOOSE] : re3[t3.HYPHENRANGE];
        range2 = range2.replace(hr3, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range2);
        range2 = range2.replace(re3[t3.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range2);
        range2 = range2.replace(re3[t3.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range2);
        range2 = range2.replace(re3[t3.CARETTRIM], caretTrimReplace);
        debug("caret trim", range2);
        let rangeList = range2.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re3[t3.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range2, options) {
        if (!(range2 instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version12) {
        if (!version12) {
          return false;
        }
        if (typeof version12 === "string") {
          try {
            version12 = new SemVer(version12, this.options);
          } catch (er3) {
            return false;
          }
        }
        for (let i5 = 0; i5 < this.set.length; i5++) {
          if (testSet(this.set[i5], version12, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module.exports = Range;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re3,
      t: t3,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants4();
    var isNullSet = (c5) => c5.value === "<0.0.0-0";
    var isAny = (c5) => c5.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id3) => !id3 || id3.toLowerCase() === "x" || id3 === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c5) => replaceTilde(c5, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r6 = options.loose ? re3[t3.TILDELOOSE] : re3[t3.TILDE];
      return comp.replace(r6, (_5, M4, m5, p5, pr3) => {
        debug("tilde", comp, _5, M4, m5, p5, pr3);
        let ret;
        if (isX(M4)) {
          ret = "";
        } else if (isX(m5)) {
          ret = `>=${M4}.0.0 <${+M4 + 1}.0.0-0`;
        } else if (isX(p5)) {
          ret = `>=${M4}.${m5}.0 <${M4}.${+m5 + 1}.0-0`;
        } else if (pr3) {
          debug("replaceTilde pr", pr3);
          ret = `>=${M4}.${m5}.${p5}-${pr3} <${M4}.${+m5 + 1}.0-0`;
        } else {
          ret = `>=${M4}.${m5}.${p5} <${M4}.${+m5 + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c5) => replaceCaret(c5, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r6 = options.loose ? re3[t3.CARETLOOSE] : re3[t3.CARET];
      const z6 = options.includePrerelease ? "-0" : "";
      return comp.replace(r6, (_5, M4, m5, p5, pr3) => {
        debug("caret", comp, _5, M4, m5, p5, pr3);
        let ret;
        if (isX(M4)) {
          ret = "";
        } else if (isX(m5)) {
          ret = `>=${M4}.0.0${z6} <${+M4 + 1}.0.0-0`;
        } else if (isX(p5)) {
          if (M4 === "0") {
            ret = `>=${M4}.${m5}.0${z6} <${M4}.${+m5 + 1}.0-0`;
          } else {
            ret = `>=${M4}.${m5}.0${z6} <${+M4 + 1}.0.0-0`;
          }
        } else if (pr3) {
          debug("replaceCaret pr", pr3);
          if (M4 === "0") {
            if (m5 === "0") {
              ret = `>=${M4}.${m5}.${p5}-${pr3} <${M4}.${m5}.${+p5 + 1}-0`;
            } else {
              ret = `>=${M4}.${m5}.${p5}-${pr3} <${M4}.${+m5 + 1}.0-0`;
            }
          } else {
            ret = `>=${M4}.${m5}.${p5}-${pr3} <${+M4 + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M4 === "0") {
            if (m5 === "0") {
              ret = `>=${M4}.${m5}.${p5}${z6} <${M4}.${m5}.${+p5 + 1}-0`;
            } else {
              ret = `>=${M4}.${m5}.${p5}${z6} <${M4}.${+m5 + 1}.0-0`;
            }
          } else {
            ret = `>=${M4}.${m5}.${p5} <${+M4 + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c5) => replaceXRange(c5, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r6 = options.loose ? re3[t3.XRANGELOOSE] : re3[t3.XRANGE];
      return comp.replace(r6, (ret, gtlt, M4, m5, p5, pr3) => {
        debug("xRange", comp, ret, gtlt, M4, m5, p5, pr3);
        const xM = isX(M4);
        const xm = xM || isX(m5);
        const xp = xm || isX(p5);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr3 = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m5 = 0;
          }
          p5 = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M4 = +M4 + 1;
              m5 = 0;
              p5 = 0;
            } else {
              m5 = +m5 + 1;
              p5 = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M4 = +M4 + 1;
            } else {
              m5 = +m5 + 1;
            }
          }
          if (gtlt === "<") {
            pr3 = "-0";
          }
          ret = `${gtlt + M4}.${m5}.${p5}${pr3}`;
        } else if (xm) {
          ret = `>=${M4}.0.0${pr3} <${+M4 + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M4}.${m5}.0${pr3} <${M4}.${+m5 + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re3[t3.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re3[options.includePrerelease ? t3.GTE0PRE : t3.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from4, fM, fm, fp, fpr, fb, to2, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from4 = "";
      } else if (isX(fm)) {
        from4 = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from4 = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from4 = `>=${from4}`;
      } else {
        from4 = `>=${from4}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to2 = "";
      } else if (isX(tm)) {
        to2 = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to2 = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to2 = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to2 = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to2 = `<=${to2}`;
      }
      return `${from4} ${to2}`.trim();
    };
    var testSet = (set2, version12, options) => {
      for (let i5 = 0; i5 < set2.length; i5++) {
        if (!set2[i5].test(version12)) {
          return false;
        }
      }
      if (version12.prerelease.length && !options.includePrerelease) {
        for (let i5 = 0; i5 < set2.length; i5++) {
          debug(set2[i5].semver);
          if (set2[i5].semver === Comparator.ANY) {
            continue;
          }
          if (set2[i5].semver.prerelease.length > 0) {
            const allowed = set2[i5].semver;
            if (allowed.major === version12.major && allowed.minor === version12.minor && allowed.patch === version12.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r6 = this.options.loose ? re3[t3.COMPARATORLOOSE] : re3[t3.COMPARATOR];
        const m5 = comp.match(r6);
        if (!m5) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m5[1] !== void 0 ? m5[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m5[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m5[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version12) {
        debug("Comparator.test", version12, this.options.loose);
        if (this.semver === ANY || version12 === ANY) {
          return true;
        }
        if (typeof version12 === "string") {
          try {
            version12 = new SemVer(version12, this.options);
          } catch (er3) {
            return false;
          }
        }
        return cmp(version12, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re3, t: t3 } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var Range = require_range();
    var satisfies = (version12, range2, options) => {
      try {
        range2 = new Range(range2, options);
      } catch (er3) {
        return false;
      }
      return range2.test(version12);
    };
    module.exports = satisfies;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var Range = require_range();
    var toComparators = (range2, options) => new Range(range2, options).set.map((comp) => comp.map((c5) => c5.value).join(" ").trim().split(" "));
    module.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range2, options) => {
      let max2 = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range2, options);
      } catch (er3) {
        return null;
      }
      versions.forEach((v8) => {
        if (rangeObj.test(v8)) {
          if (!max2 || maxSV.compare(v8) === -1) {
            max2 = v8;
            maxSV = new SemVer(max2, options);
          }
        }
      });
      return max2;
    };
    module.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range2, options) => {
      let min2 = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range2, options);
      } catch (er3) {
        return null;
      }
      versions.forEach((v8) => {
        if (rangeObj.test(v8)) {
          if (!min2 || minSV.compare(v8) === 1) {
            min2 = v8;
            minSV = new SemVer(min2, options);
          }
        }
      });
      return min2;
    };
    module.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var Range = require_range();
    var gt4 = require_gt();
    var minVersion = (range2, loose) => {
      range2 = new Range(range2, loose);
      let minver = new SemVer("0.0.0");
      if (range2.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range2.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i5 = 0; i5 < range2.set.length; ++i5) {
        const comparators = range2.set[i5];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            /* fallthrough */
            case "":
            case ">=":
              if (!setMin || gt4(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt4(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range2.test(minver)) {
        return minver;
      }
      return null;
    };
    module.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var Range = require_range();
    var validRange = (range2, options) => {
      try {
        return new Range(range2, options).range || "*";
      } catch (er3) {
        return null;
      }
    };
    module.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt4 = require_gt();
    var lt3 = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version12, range2, hilo, options) => {
      version12 = new SemVer(version12, options);
      range2 = new Range(range2, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt4;
          ltefn = lte;
          ltfn = lt3;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt3;
          ltefn = gte;
          ltfn = gt4;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version12, range2, options)) {
        return false;
      }
      for (let i5 = 0; i5 < range2.set.length; ++i5) {
        const comparators = range2.set[i5];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version12, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version12, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var outside = require_outside();
    var gtr = (version12, range2, options) => outside(version12, range2, ">", options);
    module.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var outside = require_outside();
    var ltr = (version12, range2, options) => outside(version12, range2, "<", options);
    module.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var Range = require_range();
    var intersects = (r1, r22, options) => {
      r1 = new Range(r1, options);
      r22 = new Range(r22, options);
      return r1.intersects(r22, options);
    };
    module.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var satisfies = require_satisfies();
    var compare2 = require_compare();
    module.exports = (versions, range2, options) => {
      const set2 = [];
      let first2 = null;
      let prev = null;
      const v8 = versions.sort((a6, b4) => compare2(a6, b4, options));
      for (const version12 of v8) {
        const included = satisfies(version12, range2, options);
        if (included) {
          prev = version12;
          if (!first2) {
            first2 = version12;
          }
        } else {
          if (prev) {
            set2.push([first2, prev]);
          }
          prev = null;
          first2 = null;
        }
      }
      if (first2) {
        set2.push([first2, null]);
      }
      const ranges = [];
      for (const [min2, max2] of set2) {
        if (min2 === max2) {
          ranges.push(min2);
        } else if (!max2 && min2 === v8[0]) {
          ranges.push("*");
        } else if (!max2) {
          ranges.push(`>=${min2}`);
        } else if (min2 === v8[0]) {
          ranges.push(`<=${max2}`);
        } else {
          ranges.push(`${min2} - ${max2}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range2.raw === "string" ? range2.raw : String(range2);
      return simplified.length < original.length ? simplified : range2;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare2 = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt4, lt3;
      for (const c5 of sub) {
        if (c5.operator === ">" || c5.operator === ">=") {
          gt4 = higherGT(gt4, c5, options);
        } else if (c5.operator === "<" || c5.operator === "<=") {
          lt3 = lowerLT(lt3, c5, options);
        } else {
          eqSet.add(c5.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt4 && lt3) {
        gtltComp = compare2(gt4.semver, lt3.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt4.operator !== ">=" || lt3.operator !== "<=")) {
          return null;
        }
      }
      for (const eq4 of eqSet) {
        if (gt4 && !satisfies(eq4, String(gt4), options)) {
          return null;
        }
        if (lt3 && !satisfies(eq4, String(lt3), options)) {
          return null;
        }
        for (const c5 of dom) {
          if (!satisfies(eq4, String(c5), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt3 && !options.includePrerelease && lt3.semver.prerelease.length ? lt3.semver : false;
      let needDomGTPre = gt4 && !options.includePrerelease && gt4.semver.prerelease.length ? gt4.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt3.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c5 of dom) {
        hasDomGT = hasDomGT || c5.operator === ">" || c5.operator === ">=";
        hasDomLT = hasDomLT || c5.operator === "<" || c5.operator === "<=";
        if (gt4) {
          if (needDomGTPre) {
            if (c5.semver.prerelease && c5.semver.prerelease.length && c5.semver.major === needDomGTPre.major && c5.semver.minor === needDomGTPre.minor && c5.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c5.operator === ">" || c5.operator === ">=") {
            higher = higherGT(gt4, c5, options);
            if (higher === c5 && higher !== gt4) {
              return false;
            }
          } else if (gt4.operator === ">=" && !satisfies(gt4.semver, String(c5), options)) {
            return false;
          }
        }
        if (lt3) {
          if (needDomLTPre) {
            if (c5.semver.prerelease && c5.semver.prerelease.length && c5.semver.major === needDomLTPre.major && c5.semver.minor === needDomLTPre.minor && c5.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c5.operator === "<" || c5.operator === "<=") {
            lower = lowerLT(lt3, c5, options);
            if (lower === c5 && lower !== lt3) {
              return false;
            }
          } else if (lt3.operator === "<=" && !satisfies(lt3.semver, String(c5), options)) {
            return false;
          }
        }
        if (!c5.operator && (lt3 || gt4) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt4 && hasDomLT && !lt3 && gtltComp !== 0) {
        return false;
      }
      if (lt3 && hasDomGT && !gt4 && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a6, b4, options) => {
      if (!a6) {
        return b4;
      }
      const comp = compare2(a6.semver, b4.semver, options);
      return comp > 0 ? a6 : comp < 0 ? b4 : b4.operator === ">" && a6.operator === ">=" ? b4 : a6;
    };
    var lowerLT = (a6, b4, options) => {
      if (!a6) {
        return b4;
      }
      const comp = compare2(a6.semver, b4.semver, options);
      return comp < 0 ? a6 : comp > 0 ? b4 : b4.operator === "<" && a6.operator === "<=" ? b4 : a6;
    };
    module.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports, module) {
    var import_dist366 = __toESM(require_dist());
    var internalRe = require_re();
    var constants = require_constants4();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse2 = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare2 = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt4 = require_gt();
    var lt3 = require_lt();
    var eq4 = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce2 = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module.exports = {
      parse: parse2,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare: compare2,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt: gt4,
      lt: lt3,
      eq: eq4,
      neq,
      gte,
      lte,
      cmp,
      coerce: coerce2,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/@ledgerhq/devices/lib-es/index.js
var import_dist121, import_semver, DeviceModelId, devices, productMap, devicesList, ledgerUSBVendorId, identifyUSBProductId, bluetoothServices, serviceUuidToInfos, getBluetoothServiceUuids, getInfosForServiceUuid;
var init_lib_es3 = __esm({
  "node_modules/@ledgerhq/devices/lib-es/index.js"() {
    import_dist121 = __toESM(require_dist());
    import_semver = __toESM(require_semver2());
    (function(DeviceModelId2) {
      DeviceModelId2["blue"] = "blue";
      DeviceModelId2["nanoS"] = "nanoS";
      DeviceModelId2["nanoSP"] = "nanoSP";
      DeviceModelId2["nanoX"] = "nanoX";
      DeviceModelId2["stax"] = "stax";
      DeviceModelId2["europa"] = "europa";
    })(DeviceModelId || (DeviceModelId = {}));
    devices = {
      [DeviceModelId.blue]: {
        id: DeviceModelId.blue,
        productName: "Ledger Blue",
        productIdMM: 0,
        legacyUsbProductId: 0,
        usbOnly: true,
        memorySize: 480 * 1024,
        masks: [822083584, 822149120],
        getBlockSize: (_firwareVersion) => 4 * 1024
      },
      [DeviceModelId.nanoS]: {
        id: DeviceModelId.nanoS,
        productName: "Ledger Nano S",
        productIdMM: 16,
        legacyUsbProductId: 1,
        usbOnly: true,
        memorySize: 320 * 1024,
        masks: [823132160],
        getBlockSize: (firmwareVersion) => {
          var _a2;
          return import_semver.default.lt((_a2 = import_semver.default.coerce(firmwareVersion)) !== null && _a2 !== void 0 ? _a2 : "", "2.0.0") ? 4 * 1024 : 2 * 1024;
        }
      },
      [DeviceModelId.nanoX]: {
        id: DeviceModelId.nanoX,
        productName: "Ledger Nano X",
        productIdMM: 64,
        legacyUsbProductId: 4,
        usbOnly: false,
        memorySize: 2 * 1024 * 1024,
        masks: [855638016],
        getBlockSize: (_firwareVersion) => 4 * 1024,
        bluetoothSpec: [
          {
            serviceUuid: "13d63400-2c97-0004-0000-4c6564676572",
            notifyUuid: "13d63400-2c97-0004-0001-4c6564676572",
            writeUuid: "13d63400-2c97-0004-0002-4c6564676572",
            writeCmdUuid: "13d63400-2c97-0004-0003-4c6564676572"
          }
        ]
      },
      [DeviceModelId.nanoSP]: {
        id: DeviceModelId.nanoSP,
        productName: "Ledger Nano S Plus",
        productIdMM: 80,
        legacyUsbProductId: 5,
        usbOnly: true,
        memorySize: 1533 * 1024,
        masks: [856686592],
        getBlockSize: (_firmwareVersion) => 32
      },
      [DeviceModelId.stax]: {
        id: DeviceModelId.stax,
        productName: "Ledger Stax",
        productIdMM: 96,
        legacyUsbProductId: 6,
        usbOnly: false,
        memorySize: 1533 * 1024,
        masks: [857735168],
        getBlockSize: (_firmwareVersion) => 32,
        bluetoothSpec: [
          {
            serviceUuid: "13d63400-2c97-6004-0000-4c6564676572",
            notifyUuid: "13d63400-2c97-6004-0001-4c6564676572",
            writeUuid: "13d63400-2c97-6004-0002-4c6564676572",
            writeCmdUuid: "13d63400-2c97-6004-0003-4c6564676572"
          }
        ]
      },
      [DeviceModelId.europa]: {
        id: DeviceModelId.europa,
        productName: "Ledger Flex",
        productIdMM: 112,
        legacyUsbProductId: 7,
        usbOnly: false,
        memorySize: 1533 * 1024,
        masks: [858783744],
        getBlockSize: (_firmwareVersion) => 32,
        bluetoothSpec: [
          {
            serviceUuid: "13d63400-2c97-3004-0000-4c6564676572",
            notifyUuid: "13d63400-2c97-3004-0001-4c6564676572",
            writeUuid: "13d63400-2c97-3004-0002-4c6564676572",
            writeCmdUuid: "13d63400-2c97-3004-0003-4c6564676572"
          }
        ]
      }
    };
    productMap = {
      Blue: DeviceModelId.blue,
      "Nano S": DeviceModelId.nanoS,
      "Nano S Plus": DeviceModelId.nanoSP,
      "Nano X": DeviceModelId.nanoX,
      Stax: DeviceModelId.stax,
      Europa: DeviceModelId.europa
    };
    devicesList = Object.values(devices);
    ledgerUSBVendorId = 11415;
    identifyUSBProductId = (usbProductId) => {
      const legacy = devicesList.find((d4) => d4.legacyUsbProductId === usbProductId);
      if (legacy)
        return legacy;
      const mm = usbProductId >> 8;
      const deviceModel = devicesList.find((d4) => d4.productIdMM === mm);
      return deviceModel;
    };
    bluetoothServices = [];
    serviceUuidToInfos = {};
    for (const id3 in devices) {
      const deviceModel = devices[id3];
      const { bluetoothSpec } = deviceModel;
      if (bluetoothSpec) {
        for (let i5 = 0; i5 < bluetoothSpec.length; i5++) {
          const spec = bluetoothSpec[i5];
          bluetoothServices.push(spec.serviceUuid);
          serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, "")] = Object.assign({ deviceModel }, spec);
        }
      }
    }
    getBluetoothServiceUuids = () => bluetoothServices;
    getInfosForServiceUuid = (uuid) => serviceUuidToInfos[uuid.toLowerCase()];
  }
});

// node_modules/rxjs/node_modules/tslib/tslib.es6.mjs
function __extends2(d4, b4) {
  if (typeof b4 !== "function" && b4 !== null)
    throw new TypeError("Class extends value " + String(b4) + " is not a constructor or null");
  extendStatics2(d4, b4);
  function __() {
    this.constructor = d4;
  }
  d4.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
}
function __awaiter3(thisArg, _arguments, P5, generator) {
  function adopt(value) {
    return value instanceof P5 ? value : new P5(function(resolve) {
      resolve(value);
    });
  }
  return new (P5 || (P5 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _5 = { label: 0, sent: function() {
    if (t3[0] & 1) throw t3[1];
    return t3[1];
  }, trys: [], ops: [] }, f3, y5, t3, g5 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g5.next = verb(0), g5["throw"] = verb(1), g5["return"] = verb(2), typeof Symbol === "function" && (g5[Symbol.iterator] = function() {
    return this;
  }), g5;
  function verb(n7) {
    return function(v8) {
      return step([n7, v8]);
    };
  }
  function step(op) {
    if (f3) throw new TypeError("Generator is already executing.");
    while (g5 && (g5 = 0, op[0] && (_5 = 0)), _5) try {
      if (f3 = 1, y5 && (t3 = op[0] & 2 ? y5["return"] : op[0] ? y5["throw"] || ((t3 = y5["return"]) && t3.call(y5), 0) : y5.next) && !(t3 = t3.call(y5, op[1])).done) return t3;
      if (y5 = 0, t3) op = [op[0] & 2, t3.value];
      switch (op[0]) {
        case 0:
        case 1:
          t3 = op;
          break;
        case 4:
          _5.label++;
          return { value: op[1], done: false };
        case 5:
          _5.label++;
          y5 = op[1];
          op = [0];
          continue;
        case 7:
          op = _5.ops.pop();
          _5.trys.pop();
          continue;
        default:
          if (!(t3 = _5.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _5 = 0;
            continue;
          }
          if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
            _5.label = op[1];
            break;
          }
          if (op[0] === 6 && _5.label < t3[1]) {
            _5.label = t3[1];
            t3 = op;
            break;
          }
          if (t3 && _5.label < t3[2]) {
            _5.label = t3[2];
            _5.ops.push(op);
            break;
          }
          if (t3[2]) _5.ops.pop();
          _5.trys.pop();
          continue;
      }
      op = body.call(thisArg, _5);
    } catch (e3) {
      op = [6, e3];
      y5 = 0;
    } finally {
      f3 = t3 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values2(o4) {
  var s4 = typeof Symbol === "function" && Symbol.iterator, m5 = s4 && o4[s4], i5 = 0;
  if (m5) return m5.call(o4);
  if (o4 && typeof o4.length === "number") return {
    next: function() {
      if (o4 && i5 >= o4.length) o4 = void 0;
      return { value: o4 && o4[i5++], done: !o4 };
    }
  };
  throw new TypeError(s4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read2(o4, n7) {
  var m5 = typeof Symbol === "function" && o4[Symbol.iterator];
  if (!m5) return o4;
  var i5 = m5.call(o4), r6, ar3 = [], e3;
  try {
    while ((n7 === void 0 || n7-- > 0) && !(r6 = i5.next()).done) ar3.push(r6.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r6 && !r6.done && (m5 = i5["return"])) m5.call(i5);
    } finally {
      if (e3) throw e3.error;
    }
  }
  return ar3;
}
function __spreadArray2(to2, from4, pack) {
  if (pack || arguments.length === 2) for (var i5 = 0, l6 = from4.length, ar3; i5 < l6; i5++) {
    if (ar3 || !(i5 in from4)) {
      if (!ar3) ar3 = Array.prototype.slice.call(from4, 0, i5);
      ar3[i5] = from4[i5];
    }
  }
  return to2.concat(ar3 || Array.prototype.slice.call(from4));
}
function __await2(v8) {
  return this instanceof __await2 ? (this.v = v8, this) : new __await2(v8);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g5 = generator.apply(thisArg, _arguments || []), i5, q2 = [];
  return i5 = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5;
  function awaitReturn(f3) {
    return function(v8) {
      return Promise.resolve(v8).then(f3, reject);
    };
  }
  function verb(n7, f3) {
    if (g5[n7]) {
      i5[n7] = function(v8) {
        return new Promise(function(a6, b4) {
          q2.push([n7, v8, a6, b4]) > 1 || resume(n7, v8);
        });
      };
      if (f3) i5[n7] = f3(i5[n7]);
    }
  }
  function resume(n7, v8) {
    try {
      step(g5[n7](v8));
    } catch (e3) {
      settle(q2[0][3], e3);
    }
  }
  function step(r6) {
    r6.value instanceof __await2 ? Promise.resolve(r6.value.v).then(fulfill, reject) : settle(q2[0][2], r6);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f3, v8) {
    if (f3(v8), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
}
function __asyncValues2(o4) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m5 = o4[Symbol.asyncIterator], i5;
  return m5 ? m5.call(o4) : (o4 = typeof __values2 === "function" ? __values2(o4) : o4[Symbol.iterator](), i5 = {}, verb("next"), verb("throw"), verb("return"), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5);
  function verb(n7) {
    i5[n7] = o4[n7] && function(v8) {
      return new Promise(function(resolve, reject) {
        v8 = o4[n7](v8), settle(resolve, reject, v8.done, v8.value);
      });
    };
  }
  function settle(resolve, reject, d4, v8) {
    Promise.resolve(v8).then(function(v9) {
      resolve({ value: v9, done: d4 });
    }, reject);
  }
}
var import_dist122, extendStatics2;
var init_tslib_es62 = __esm({
  "node_modules/rxjs/node_modules/tslib/tslib.es6.mjs"() {
    import_dist122 = __toESM(require_dist(), 1);
    extendStatics2 = function(d4, b4) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d5, b5) {
        d5.__proto__ = b5;
      } || function(d5, b5) {
        for (var p5 in b5) if (Object.prototype.hasOwnProperty.call(b5, p5)) d5[p5] = b5[p5];
      };
      return extendStatics2(d4, b4);
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}
var import_dist123;
var init_isFunction = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isFunction.js"() {
    import_dist123 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}
var import_dist124;
var init_createErrorClass = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js"() {
    import_dist124 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var import_dist125, UnsubscriptionError;
var init_UnsubscriptionError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js"() {
    import_dist125 = __toESM(require_dist());
    init_createErrorClass();
    UnsubscriptionError = createErrorClass(function(_super) {
      return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err2, i5) {
          return i5 + 1 + ") " + err2.toString();
        }).join("\n  ") : "";
        this.name = "UnsubscriptionError";
        this.errors = errors;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}
var import_dist126;
var init_arrRemove = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/arrRemove.js"() {
    import_dist126 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/Subscription.js
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}
var import_dist127, Subscription, EMPTY_SUBSCRIPTION;
var init_Subscription = __esm({
  "node_modules/rxjs/dist/esm5/internal/Subscription.js"() {
    import_dist127 = __toESM(require_dist());
    init_tslib_es62();
    init_isFunction();
    init_UnsubscriptionError();
    init_arrRemove();
    Subscription = function() {
      function Subscription2(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
      }
      Subscription2.prototype.unsubscribe = function() {
        var e_1, _a2, e_2, _b;
        var errors;
        if (!this.closed) {
          this.closed = true;
          var _parentage = this._parentage;
          if (_parentage) {
            this._parentage = null;
            if (Array.isArray(_parentage)) {
              try {
                for (var _parentage_1 = __values2(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                  var parent_1 = _parentage_1_1.value;
                  parent_1.remove(this);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return)) _a2.call(_parentage_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
            } else {
              _parentage.remove(this);
            }
          }
          var initialFinalizer = this.initialTeardown;
          if (isFunction(initialFinalizer)) {
            try {
              initialFinalizer();
            } catch (e3) {
              errors = e3 instanceof UnsubscriptionError ? e3.errors : [e3];
            }
          }
          var _finalizers = this._finalizers;
          if (_finalizers) {
            this._finalizers = null;
            try {
              for (var _finalizers_1 = __values2(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                var finalizer = _finalizers_1_1.value;
                try {
                  execFinalizer(finalizer);
                } catch (err2) {
                  errors = errors !== null && errors !== void 0 ? errors : [];
                  if (err2 instanceof UnsubscriptionError) {
                    errors = __spreadArray2(__spreadArray2([], __read2(errors)), __read2(err2.errors));
                  } else {
                    errors.push(err2);
                  }
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          }
          if (errors) {
            throw new UnsubscriptionError(errors);
          }
        }
      };
      Subscription2.prototype.add = function(teardown) {
        var _a2;
        if (teardown && teardown !== this) {
          if (this.closed) {
            execFinalizer(teardown);
          } else {
            if (teardown instanceof Subscription2) {
              if (teardown.closed || teardown._hasParent(this)) {
                return;
              }
              teardown._addParent(this);
            }
            (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
          }
        }
      };
      Subscription2.prototype._hasParent = function(parent) {
        var _parentage = this._parentage;
        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
      };
      Subscription2.prototype._addParent = function(parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      };
      Subscription2.prototype._removeParent = function(parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
          this._parentage = null;
        } else if (Array.isArray(_parentage)) {
          arrRemove(_parentage, parent);
        }
      };
      Subscription2.prototype.remove = function(teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription2) {
          teardown._removeParent(this);
        }
      };
      Subscription2.EMPTY = function() {
        var empty3 = new Subscription2();
        empty3.closed = true;
        return empty3;
      }();
      return Subscription2;
    }();
    EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  }
});

// node_modules/rxjs/dist/esm5/internal/config.js
var import_dist128, config;
var init_config = __esm({
  "node_modules/rxjs/dist/esm5/internal/config.js"() {
    import_dist128 = __toESM(require_dist());
    config = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: void 0,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var import_dist129, timeoutProvider;
var init_timeoutProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js"() {
    import_dist129 = __toESM(require_dist());
    init_tslib_es62();
    timeoutProvider = {
      setTimeout: function(handler, timeout2) {
        var args = [];
        for (var _i2 = 2; _i2 < arguments.length; _i2++) {
          args[_i2 - 2] = arguments[_i2];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
          return delegate.setTimeout.apply(delegate, __spreadArray2([handler, timeout2], __read2(args)));
        }
        return setTimeout.apply(void 0, __spreadArray2([handler, timeout2], __read2(args)));
      },
      clearTimeout: function(handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err2) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err2);
    } else {
      throw err2;
    }
  });
}
var import_dist130;
var init_reportUnhandledError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js"() {
    import_dist130 = __toESM(require_dist());
    init_config();
    init_timeoutProvider();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() {
}
var import_dist131;
var init_noop = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/noop.js"() {
    import_dist131 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}
var import_dist132, COMPLETE_NOTIFICATION;
var init_NotificationFactories = __esm({
  "node_modules/rxjs/dist/esm5/internal/NotificationFactories.js"() {
    import_dist132 = __toESM(require_dist());
    COMPLETE_NOTIFICATION = function() {
      return createNotification("C", void 0, void 0);
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a2 = context, errorThrown = _a2.errorThrown, error = _a2.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err2) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err2;
  }
}
var import_dist133, context;
var init_errorContext = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/errorContext.js"() {
    import_dist133 = __toESM(require_dist());
    init_config();
    context = null;
  }
});

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
function bind(fn3, thisArg) {
  return _bind.call(fn3, thisArg);
}
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err2) {
  throw err2;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var import_dist134, Subscriber, _bind, ConsumerObserver, SafeSubscriber, EMPTY_OBSERVER;
var init_Subscriber = __esm({
  "node_modules/rxjs/dist/esm5/internal/Subscriber.js"() {
    import_dist134 = __toESM(require_dist());
    init_tslib_es62();
    init_isFunction();
    init_Subscription();
    init_config();
    init_reportUnhandledError();
    init_noop();
    init_NotificationFactories();
    init_timeoutProvider();
    init_errorContext();
    Subscriber = function(_super) {
      __extends2(Subscriber2, _super);
      function Subscriber2(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
          _this.destination = destination;
          if (isSubscription(destination)) {
            destination.add(_this);
          }
        } else {
          _this.destination = EMPTY_OBSERVER;
        }
        return _this;
      }
      Subscriber2.create = function(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
      };
      Subscriber2.prototype.next = function(value) {
        if (this.isStopped) {
          handleStoppedNotification(nextNotification(value), this);
        } else {
          this._next(value);
        }
      };
      Subscriber2.prototype.error = function(err2) {
        if (this.isStopped) {
          handleStoppedNotification(errorNotification(err2), this);
        } else {
          this.isStopped = true;
          this._error(err2);
        }
      };
      Subscriber2.prototype.complete = function() {
        if (this.isStopped) {
          handleStoppedNotification(COMPLETE_NOTIFICATION, this);
        } else {
          this.isStopped = true;
          this._complete();
        }
      };
      Subscriber2.prototype.unsubscribe = function() {
        if (!this.closed) {
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
          this.destination = null;
        }
      };
      Subscriber2.prototype._next = function(value) {
        this.destination.next(value);
      };
      Subscriber2.prototype._error = function(err2) {
        try {
          this.destination.error(err2);
        } finally {
          this.unsubscribe();
        }
      };
      Subscriber2.prototype._complete = function() {
        try {
          this.destination.complete();
        } finally {
          this.unsubscribe();
        }
      };
      return Subscriber2;
    }(Subscription);
    _bind = Function.prototype.bind;
    ConsumerObserver = function() {
      function ConsumerObserver2(partialObserver) {
        this.partialObserver = partialObserver;
      }
      ConsumerObserver2.prototype.next = function(value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
          try {
            partialObserver.next(value);
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      ConsumerObserver2.prototype.error = function(err2) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
          try {
            partialObserver.error(err2);
          } catch (error) {
            handleUnhandledError(error);
          }
        } else {
          handleUnhandledError(err2);
        }
      };
      ConsumerObserver2.prototype.complete = function() {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
          try {
            partialObserver.complete();
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      return ConsumerObserver2;
    }();
    SafeSubscriber = function(_super) {
      __extends2(SafeSubscriber2, _super);
      function SafeSubscriber2(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction(observerOrNext) || !observerOrNext) {
          partialObserver = {
            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
            error: error !== null && error !== void 0 ? error : void 0,
            complete: complete !== null && complete !== void 0 ? complete : void 0
          };
        } else {
          var context_1;
          if (_this && config.useDeprecatedNextContext) {
            context_1 = Object.create(observerOrNext);
            context_1.unsubscribe = function() {
              return _this.unsubscribe();
            };
            partialObserver = {
              next: observerOrNext.next && bind(observerOrNext.next, context_1),
              error: observerOrNext.error && bind(observerOrNext.error, context_1),
              complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
            };
          } else {
            partialObserver = observerOrNext;
          }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
      }
      return SafeSubscriber2;
    }(Subscriber);
    EMPTY_OBSERVER = {
      closed: true,
      next: noop,
      error: defaultErrorHandler,
      complete: noop
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var import_dist135, observable;
var init_observable = __esm({
  "node_modules/rxjs/dist/esm5/internal/symbol/observable.js"() {
    import_dist135 = __toESM(require_dist());
    observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity3(x6) {
  return x6;
}
var import_dist136;
var init_identity3 = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/identity.js"() {
    import_dist136 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity3;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn3) {
      return fn3(prev);
    }, input);
  };
}
var import_dist137;
var init_pipe = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/pipe.js"() {
    import_dist137 = __toESM(require_dist());
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/Observable.js
function getPromiseCtor(promiseCtor) {
  var _a2;
  return (_a2 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
var import_dist138, Observable;
var init_Observable = __esm({
  "node_modules/rxjs/dist/esm5/internal/Observable.js"() {
    import_dist138 = __toESM(require_dist());
    init_Subscriber();
    init_Subscription();
    init_observable();
    init_pipe();
    init_config();
    init_isFunction();
    init_errorContext();
    Observable = function() {
      function Observable2(subscribe) {
        if (subscribe) {
          this._subscribe = subscribe;
        }
      }
      Observable2.prototype.lift = function(operator) {
        var observable2 = new Observable2();
        observable2.source = this;
        observable2.operator = operator;
        return observable2;
      };
      Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(function() {
          var _a2 = _this, operator = _a2.operator, source = _a2.source;
          subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
        });
        return subscriber;
      };
      Observable2.prototype._trySubscribe = function(sink) {
        try {
          return this._subscribe(sink);
        } catch (err2) {
          sink.error(err2);
        }
      };
      Observable2.prototype.forEach = function(next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var subscriber = new SafeSubscriber({
            next: function(value) {
              try {
                next(value);
              } catch (err2) {
                reject(err2);
                subscriber.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
          _this.subscribe(subscriber);
        });
      };
      Observable2.prototype._subscribe = function(subscriber) {
        var _a2;
        return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
      };
      Observable2.prototype[observable] = function() {
        return this;
      };
      Observable2.prototype.pipe = function() {
        var operations = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          operations[_i2] = arguments[_i2];
        }
        return pipeFromArray(operations)(this);
      };
      Observable2.prototype.toPromise = function(promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var value;
          _this.subscribe(function(x6) {
            return value = x6;
          }, function(err2) {
            return reject(err2);
          }, function() {
            return resolve(value);
          });
        });
      };
      Observable2.create = function(subscribe) {
        return new Observable2(subscribe);
      };
      return Observable2;
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init2) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init2(liftedSource, this);
        } catch (err2) {
          this.error(err2);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}
var import_dist139;
var init_lift = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/lift.js"() {
    import_dist139 = __toESM(require_dist());
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var import_dist140, OperatorSubscriber;
var init_OperatorSubscriber = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"() {
    import_dist140 = __toESM(require_dist());
    init_tslib_es62();
    init_Subscriber();
    OperatorSubscriber = function(_super) {
      __extends2(OperatorSubscriber2, _super);
      function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext ? function(value) {
          try {
            onNext(value);
          } catch (err2) {
            destination.error(err2);
          }
        } : _super.prototype._next;
        _this._error = onError ? function(err2) {
          try {
            onError(err2);
          } catch (err3) {
            destination.error(err3);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._error;
        _this._complete = onComplete ? function() {
          try {
            onComplete();
          } catch (err2) {
            destination.error(err2);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._complete;
        return _this;
      }
      OperatorSubscriber2.prototype.unsubscribe = function() {
        var _a2;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
          var closed_1 = this.closed;
          _super.prototype.unsubscribe.call(this);
          !closed_1 && ((_a2 = this.onFinalize) === null || _a2 === void 0 ? void 0 : _a2.call(this));
        }
      };
      return OperatorSubscriber2;
    }(Subscriber);
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}
var import_dist141;
var init_refCount = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/refCount.js"() {
    import_dist141 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var import_dist142, ConnectableObservable;
var init_ConnectableObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js"() {
    import_dist142 = __toESM(require_dist());
    init_tslib_es62();
    init_Observable();
    init_Subscription();
    init_refCount();
    init_OperatorSubscriber();
    init_lift();
    ConnectableObservable = function(_super) {
      __extends2(ConnectableObservable2, _super);
      function ConnectableObservable2(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if (hasLift(source)) {
          _this.lift = source.lift;
        }
        return _this;
      }
      ConnectableObservable2.prototype._subscribe = function(subscriber) {
        return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable2.prototype.getSubject = function() {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
          this._subject = this.subjectFactory();
        }
        return this._subject;
      };
      ConnectableObservable2.prototype._teardown = function() {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
      };
      ConnectableObservable2.prototype.connect = function() {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
          connection = this._connection = new Subscription();
          var subject_1 = this.getSubject();
          connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
            _this._teardown();
            subject_1.complete();
          }, function(err2) {
            _this._teardown();
            subject_1.error(err2);
          }, function() {
            return _this._teardown();
          })));
          if (connection.closed) {
            this._connection = null;
            connection = Subscription.EMPTY;
          }
        }
        return connection;
      };
      ConnectableObservable2.prototype.refCount = function() {
        return refCount()(this);
      };
      return ConnectableObservable2;
    }(Observable);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
var import_dist143, performanceTimestampProvider;
var init_performanceTimestampProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js"() {
    import_dist143 = __toESM(require_dist());
    performanceTimestampProvider = {
      now: function() {
        return (performanceTimestampProvider.delegate || performance).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
var import_dist144, animationFrameProvider;
var init_animationFrameProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js"() {
    import_dist144 = __toESM(require_dist());
    init_tslib_es62();
    init_Subscription();
    animationFrameProvider = {
      schedule: function(callback) {
        var request = requestAnimationFrame;
        var cancel = cancelAnimationFrame;
        var delegate = animationFrameProvider.delegate;
        if (delegate) {
          request = delegate.requestAnimationFrame;
          cancel = delegate.cancelAnimationFrame;
        }
        var handle = request(function(timestamp2) {
          cancel = void 0;
          callback(timestamp2);
        });
        return new Subscription(function() {
          return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
        });
      },
      requestAnimationFrame: function() {
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        var delegate = animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray2([], __read2(args)));
      },
      cancelAnimationFrame: function() {
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        var delegate = animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray2([], __read2(args)));
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  return new Observable(function(subscriber) {
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var id3 = 0;
    var run = function() {
      if (!subscriber.closed) {
        id3 = animationFrameProvider.requestAnimationFrame(function(timestamp2) {
          id3 = 0;
          var now = provider.now();
          subscriber.next({
            timestamp: timestampProvider ? now : timestamp2,
            elapsed: now - start
          });
          run();
        });
      }
    };
    run();
    return function() {
      if (id3) {
        animationFrameProvider.cancelAnimationFrame(id3);
      }
    };
  });
}
var import_dist145, DEFAULT_ANIMATION_FRAMES;
var init_animationFrames = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js"() {
    import_dist145 = __toESM(require_dist());
    init_Observable();
    init_performanceTimestampProvider();
    init_animationFrameProvider();
    DEFAULT_ANIMATION_FRAMES = animationFramesFactory();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
var import_dist146, ObjectUnsubscribedError;
var init_ObjectUnsubscribedError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js"() {
    import_dist146 = __toESM(require_dist());
    init_createErrorClass();
    ObjectUnsubscribedError = createErrorClass(function(_super) {
      return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = "ObjectUnsubscribedError";
        this.message = "object unsubscribed";
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/Subject.js
var import_dist147, Subject, AnonymousSubject;
var init_Subject = __esm({
  "node_modules/rxjs/dist/esm5/internal/Subject.js"() {
    import_dist147 = __toESM(require_dist());
    init_tslib_es62();
    init_Observable();
    init_Subscription();
    init_ObjectUnsubscribedError();
    init_arrRemove();
    init_errorContext();
    Subject = function(_super) {
      __extends2(Subject2, _super);
      function Subject2() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
      }
      Subject2.prototype.lift = function(operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
      };
      Subject2.prototype._throwIfClosed = function() {
        if (this.closed) {
          throw new ObjectUnsubscribedError();
        }
      };
      Subject2.prototype.next = function(value) {
        var _this = this;
        errorContext(function() {
          var e_1, _a2;
          _this._throwIfClosed();
          if (!_this.isStopped) {
            if (!_this.currentObservers) {
              _this.currentObservers = Array.from(_this.observers);
            }
            try {
              for (var _b = __values2(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var observer = _c.value;
                observer.next(value);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          }
        });
      };
      Subject2.prototype.error = function(err2) {
        var _this = this;
        errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.hasError = _this.isStopped = true;
            _this.thrownError = err2;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().error(err2);
            }
          }
        });
      };
      Subject2.prototype.complete = function() {
        var _this = this;
        errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.isStopped = true;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().complete();
            }
          }
        });
      };
      Subject2.prototype.unsubscribe = function() {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
      };
      Object.defineProperty(Subject2.prototype, "observed", {
        get: function() {
          var _a2;
          return ((_a2 = this.observers) === null || _a2 === void 0 ? void 0 : _a2.length) > 0;
        },
        enumerable: false,
        configurable: true
      });
      Subject2.prototype._trySubscribe = function(subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
      };
      Subject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
      };
      Subject2.prototype._innerSubscribe = function(subscriber) {
        var _this = this;
        var _a2 = this, hasError = _a2.hasError, isStopped = _a2.isStopped, observers = _a2.observers;
        if (hasError || isStopped) {
          return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(function() {
          _this.currentObservers = null;
          arrRemove(observers, subscriber);
        });
      };
      Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, isStopped = _a2.isStopped;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped) {
          subscriber.complete();
        }
      };
      Subject2.prototype.asObservable = function() {
        var observable2 = new Observable();
        observable2.source = this;
        return observable2;
      };
      Subject2.create = function(destination, source) {
        return new AnonymousSubject(destination, source);
      };
      return Subject2;
    }(Observable);
    AnonymousSubject = function(_super) {
      __extends2(AnonymousSubject2, _super);
      function AnonymousSubject2(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
      }
      AnonymousSubject2.prototype.next = function(value) {
        var _a2, _b;
        (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.next) === null || _b === void 0 ? void 0 : _b.call(_a2, value);
      };
      AnonymousSubject2.prototype.error = function(err2) {
        var _a2, _b;
        (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b === void 0 ? void 0 : _b.call(_a2, err2);
      };
      AnonymousSubject2.prototype.complete = function() {
        var _a2, _b;
        (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.complete) === null || _b === void 0 ? void 0 : _b.call(_a2);
      };
      AnonymousSubject2.prototype._subscribe = function(subscriber) {
        var _a2, _b;
        return (_b = (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
      };
      return AnonymousSubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
var import_dist148, BehaviorSubject;
var init_BehaviorSubject = __esm({
  "node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"() {
    import_dist148 = __toESM(require_dist());
    init_tslib_es62();
    init_Subject();
    BehaviorSubject = function(_super) {
      __extends2(BehaviorSubject2, _super);
      function BehaviorSubject2(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
      }
      Object.defineProperty(BehaviorSubject2.prototype, "value", {
        get: function() {
          return this.getValue();
        },
        enumerable: false,
        configurable: true
      });
      BehaviorSubject2.prototype._subscribe = function(subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
      };
      BehaviorSubject2.prototype.getValue = function() {
        var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, _value = _a2._value;
        if (hasError) {
          throw thrownError;
        }
        this._throwIfClosed();
        return _value;
      };
      BehaviorSubject2.prototype.next = function(value) {
        _super.prototype.next.call(this, this._value = value);
      };
      return BehaviorSubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var import_dist149, dateTimestampProvider;
var init_dateTimestampProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js"() {
    import_dist149 = __toESM(require_dist());
    dateTimestampProvider = {
      now: function() {
        return (dateTimestampProvider.delegate || Date).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var import_dist150, ReplaySubject;
var init_ReplaySubject = __esm({
  "node_modules/rxjs/dist/esm5/internal/ReplaySubject.js"() {
    import_dist150 = __toESM(require_dist());
    init_tslib_es62();
    init_Subject();
    init_dateTimestampProvider();
    ReplaySubject = function(_super) {
      __extends2(ReplaySubject2, _super);
      function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) {
          _bufferSize = Infinity;
        }
        if (_windowTime === void 0) {
          _windowTime = Infinity;
        }
        if (_timestampProvider === void 0) {
          _timestampProvider = dateTimestampProvider;
        }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
      }
      ReplaySubject2.prototype.next = function(value) {
        var _a2 = this, isStopped = _a2.isStopped, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow, _timestampProvider = _a2._timestampProvider, _windowTime = _a2._windowTime;
        if (!isStopped) {
          _buffer.push(value);
          !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
      };
      ReplaySubject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a2 = this, _infiniteTimeWindow = _a2._infiniteTimeWindow, _buffer = _a2._buffer;
        var copy = _buffer.slice();
        for (var i5 = 0; i5 < copy.length && !subscriber.closed; i5 += _infiniteTimeWindow ? 1 : 2) {
          subscriber.next(copy[i5]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
      };
      ReplaySubject2.prototype._trimBuffer = function() {
        var _a2 = this, _bufferSize = _a2._bufferSize, _timestampProvider = _a2._timestampProvider, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
          var now = _timestampProvider.now();
          var last3 = 0;
          for (var i5 = 1; i5 < _buffer.length && _buffer[i5] <= now; i5 += 2) {
            last3 = i5;
          }
          last3 && _buffer.splice(0, last3 + 1);
        }
      };
      return ReplaySubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
var import_dist151, AsyncSubject;
var init_AsyncSubject = __esm({
  "node_modules/rxjs/dist/esm5/internal/AsyncSubject.js"() {
    import_dist151 = __toESM(require_dist());
    init_tslib_es62();
    init_Subject();
    AsyncSubject = function(_super) {
      __extends2(AsyncSubject2, _super);
      function AsyncSubject2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._value = null;
        _this._hasValue = false;
        _this._isComplete = false;
        return _this;
      }
      AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a2 = this, hasError = _a2.hasError, _hasValue = _a2._hasValue, _value = _a2._value, thrownError = _a2.thrownError, isStopped = _a2.isStopped, _isComplete = _a2._isComplete;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped || _isComplete) {
          _hasValue && subscriber.next(_value);
          subscriber.complete();
        }
      };
      AsyncSubject2.prototype.next = function(value) {
        if (!this.isStopped) {
          this._value = value;
          this._hasValue = true;
        }
      };
      AsyncSubject2.prototype.complete = function() {
        var _a2 = this, _hasValue = _a2._hasValue, _value = _a2._value, _isComplete = _a2._isComplete;
        if (!_isComplete) {
          this._isComplete = true;
          _hasValue && _super.prototype.next.call(this, _value);
          _super.prototype.complete.call(this);
        }
      };
      return AsyncSubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
var import_dist152, Action;
var init_Action = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/Action.js"() {
    import_dist152 = __toESM(require_dist());
    init_tslib_es62();
    init_Subscription();
    Action = function(_super) {
      __extends2(Action2, _super);
      function Action2(scheduler, work) {
        return _super.call(this) || this;
      }
      Action2.prototype.schedule = function(state, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return this;
      };
      return Action2;
    }(Subscription);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
var import_dist153, intervalProvider;
var init_intervalProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js"() {
    import_dist153 = __toESM(require_dist());
    init_tslib_es62();
    intervalProvider = {
      setInterval: function(handler, timeout2) {
        var args = [];
        for (var _i2 = 2; _i2 < arguments.length; _i2++) {
          args[_i2 - 2] = arguments[_i2];
        }
        var delegate = intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
          return delegate.setInterval.apply(delegate, __spreadArray2([handler, timeout2], __read2(args)));
        }
        return setInterval.apply(void 0, __spreadArray2([handler, timeout2], __read2(args)));
      },
      clearInterval: function(handle) {
        var delegate = intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var import_dist154, AsyncAction;
var init_AsyncAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js"() {
    import_dist154 = __toESM(require_dist());
    init_tslib_es62();
    init_Action();
    init_intervalProvider();
    init_arrRemove();
    AsyncAction = function(_super) {
      __extends2(AsyncAction2, _super);
      function AsyncAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
      }
      AsyncAction2.prototype.schedule = function(state, delay2) {
        var _a2;
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (this.closed) {
          return this;
        }
        this.state = state;
        var id3 = this.id;
        var scheduler = this.scheduler;
        if (id3 != null) {
          this.id = this.recycleAsyncId(scheduler, id3, delay2);
        }
        this.pending = true;
        this.delay = delay2;
        this.id = (_a2 = this.id) !== null && _a2 !== void 0 ? _a2 : this.requestAsyncId(scheduler, this.id, delay2);
        return this;
      };
      AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
      };
      AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id3, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null && this.delay === delay2 && this.pending === false) {
          return id3;
        }
        if (id3 != null) {
          intervalProvider.clearInterval(id3);
        }
        return void 0;
      };
      AsyncAction2.prototype.execute = function(state, delay2) {
        if (this.closed) {
          return new Error("executing a cancelled action");
        }
        this.pending = false;
        var error = this._execute(state, delay2);
        if (error) {
          return error;
        } else if (this.pending === false && this.id != null) {
          this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
      };
      AsyncAction2.prototype._execute = function(state, _delay) {
        var errored = false;
        var errorValue;
        try {
          this.work(state);
        } catch (e3) {
          errored = true;
          errorValue = e3 ? e3 : new Error("Scheduled action threw falsy error");
        }
        if (errored) {
          this.unsubscribe();
          return errorValue;
        }
      };
      AsyncAction2.prototype.unsubscribe = function() {
        if (!this.closed) {
          var _a2 = this, id3 = _a2.id, scheduler = _a2.scheduler;
          var actions = scheduler.actions;
          this.work = this.state = this.scheduler = null;
          this.pending = false;
          arrRemove(actions, this);
          if (id3 != null) {
            this.id = this.recycleAsyncId(scheduler, id3, null);
          }
          this.delay = null;
          _super.prototype.unsubscribe.call(this);
        }
      };
      return AsyncAction2;
    }(Action);
  }
});

// node_modules/rxjs/dist/esm5/internal/util/Immediate.js
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var import_dist155, nextHandle, resolved, activeHandles, Immediate;
var init_Immediate = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/Immediate.js"() {
    import_dist155 = __toESM(require_dist());
    nextHandle = 1;
    activeHandles = {};
    Immediate = {
      setImmediate: function(cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
          resolved = Promise.resolve();
        }
        resolved.then(function() {
          return findAndClearHandle(handle) && cb();
        });
        return handle;
      },
      clearImmediate: function(handle) {
        findAndClearHandle(handle);
      }
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var import_dist156, setImmediate, clearImmediate, immediateProvider;
var init_immediateProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js"() {
    import_dist156 = __toESM(require_dist());
    init_tslib_es62();
    init_Immediate();
    setImmediate = Immediate.setImmediate;
    clearImmediate = Immediate.clearImmediate;
    immediateProvider = {
      setImmediate: function() {
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray2([], __read2(args)));
      },
      clearImmediate: function(handle) {
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var import_dist157, AsapAction;
var init_AsapAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js"() {
    import_dist157 = __toESM(require_dist());
    init_tslib_es62();
    init_AsyncAction();
    init_immediateProvider();
    AsapAction = function(_super) {
      __extends2(AsapAction2, _super);
      function AsapAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AsapAction2.prototype.requestAsyncId = function(scheduler, id3, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 !== null && delay2 > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id3, delay2);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
      };
      AsapAction2.prototype.recycleAsyncId = function(scheduler, id3, delay2) {
        var _a2;
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null ? delay2 > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id3, delay2);
        }
        var actions = scheduler.actions;
        if (id3 != null && ((_a2 = actions[actions.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id) !== id3) {
          immediateProvider.clearImmediate(id3);
          if (scheduler._scheduled === id3) {
            scheduler._scheduled = void 0;
          }
        }
        return void 0;
      };
      return AsapAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/Scheduler.js
var import_dist158, Scheduler;
var init_Scheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/Scheduler.js"() {
    import_dist158 = __toESM(require_dist());
    init_dateTimestampProvider();
    Scheduler = function() {
      function Scheduler2(schedulerActionCtor, now) {
        if (now === void 0) {
          now = Scheduler2.now;
        }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
      }
      Scheduler2.prototype.schedule = function(work, delay2, state) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return new this.schedulerActionCtor(this, work).schedule(state, delay2);
      };
      Scheduler2.now = dateTimestampProvider.now;
      return Scheduler2;
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var import_dist159, AsyncScheduler;
var init_AsyncScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js"() {
    import_dist159 = __toESM(require_dist());
    init_tslib_es62();
    init_Scheduler();
    AsyncScheduler = function(_super) {
      __extends2(AsyncScheduler2, _super);
      function AsyncScheduler2(SchedulerAction, now) {
        if (now === void 0) {
          now = Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
      }
      AsyncScheduler2.prototype.flush = function(action) {
        var actions = this.actions;
        if (this._active) {
          actions.push(action);
          return;
        }
        var error;
        this._active = true;
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while (action = actions.shift());
        this._active = false;
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsyncScheduler2;
    }(Scheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var import_dist160, AsapScheduler;
var init_AsapScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js"() {
    import_dist160 = __toESM(require_dist());
    init_tslib_es62();
    init_AsyncScheduler();
    AsapScheduler = function(_super) {
      __extends2(AsapScheduler2, _super);
      function AsapScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = void 0;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsapScheduler2;
    }(AsyncScheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var import_dist161, asapScheduler;
var init_asap = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/asap.js"() {
    import_dist161 = __toESM(require_dist());
    init_AsapAction();
    init_AsapScheduler();
    asapScheduler = new AsapScheduler(AsapAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/async.js
var import_dist162, asyncScheduler;
var init_async = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/async.js"() {
    import_dist162 = __toESM(require_dist());
    init_AsyncAction();
    init_AsyncScheduler();
    asyncScheduler = new AsyncScheduler(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
var import_dist163, QueueAction;
var init_QueueAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js"() {
    import_dist163 = __toESM(require_dist());
    init_tslib_es62();
    init_AsyncAction();
    QueueAction = function(_super) {
      __extends2(QueueAction2, _super);
      function QueueAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      QueueAction2.prototype.schedule = function(state, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 > 0) {
          return _super.prototype.schedule.call(this, state, delay2);
        }
        this.delay = delay2;
        this.state = state;
        this.scheduler.flush(this);
        return this;
      };
      QueueAction2.prototype.execute = function(state, delay2) {
        return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
      };
      QueueAction2.prototype.requestAsyncId = function(scheduler, id3, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id3, delay2);
        }
        scheduler.flush(this);
        return 0;
      };
      return QueueAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
var import_dist164, QueueScheduler;
var init_QueueScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js"() {
    import_dist164 = __toESM(require_dist());
    init_tslib_es62();
    init_AsyncScheduler();
    QueueScheduler = function(_super) {
      __extends2(QueueScheduler2, _super);
      function QueueScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler2;
    }(AsyncScheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var import_dist165, queueScheduler;
var init_queue = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/queue.js"() {
    import_dist165 = __toESM(require_dist());
    init_QueueAction();
    init_QueueScheduler();
    queueScheduler = new QueueScheduler(QueueAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
var import_dist166, AnimationFrameAction;
var init_AnimationFrameAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js"() {
    import_dist166 = __toESM(require_dist());
    init_tslib_es62();
    init_AsyncAction();
    init_animationFrameProvider();
    AnimationFrameAction = function(_super) {
      __extends2(AnimationFrameAction2, _super);
      function AnimationFrameAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id3, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 !== null && delay2 > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id3, delay2);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
          return scheduler.flush(void 0);
        }));
      };
      AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id3, delay2) {
        var _a2;
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null ? delay2 > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id3, delay2);
        }
        var actions = scheduler.actions;
        if (id3 != null && ((_a2 = actions[actions.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id) !== id3) {
          animationFrameProvider.cancelAnimationFrame(id3);
          scheduler._scheduled = void 0;
        }
        return void 0;
      };
      return AnimationFrameAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
var import_dist167, AnimationFrameScheduler;
var init_AnimationFrameScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js"() {
    import_dist167 = __toESM(require_dist());
    init_tslib_es62();
    init_AsyncScheduler();
    AnimationFrameScheduler = function(_super) {
      __extends2(AnimationFrameScheduler2, _super);
      function AnimationFrameScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AnimationFrameScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = void 0;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AnimationFrameScheduler2;
    }(AsyncScheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var import_dist168, animationFrameScheduler;
var init_animationFrame = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js"() {
    import_dist168 = __toESM(require_dist());
    init_AnimationFrameAction();
    init_AnimationFrameScheduler();
    animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
var import_dist169, VirtualTimeScheduler, VirtualAction;
var init_VirtualTimeScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js"() {
    import_dist169 = __toESM(require_dist());
    init_tslib_es62();
    init_AsyncAction();
    init_Subscription();
    init_AsyncScheduler();
    VirtualTimeScheduler = function(_super) {
      __extends2(VirtualTimeScheduler2, _super);
      function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
        if (schedulerActionCtor === void 0) {
          schedulerActionCtor = VirtualAction;
        }
        if (maxFrames === void 0) {
          maxFrames = Infinity;
        }
        var _this = _super.call(this, schedulerActionCtor, function() {
          return _this.frame;
        }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
      }
      VirtualTimeScheduler2.prototype.flush = function() {
        var _a2 = this, actions = _a2.actions, maxFrames = _a2.maxFrames;
        var error;
        var action;
        while ((action = actions[0]) && action.delay <= maxFrames) {
          actions.shift();
          this.frame = action.delay;
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        }
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      VirtualTimeScheduler2.frameTimeFactor = 10;
      return VirtualTimeScheduler2;
    }(AsyncScheduler);
    VirtualAction = function(_super) {
      __extends2(VirtualAction2, _super);
      function VirtualAction2(scheduler, work, index) {
        if (index === void 0) {
          index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
      }
      VirtualAction2.prototype.schedule = function(state, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (Number.isFinite(delay2)) {
          if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay2);
          }
          this.active = false;
          var action = new VirtualAction2(this.scheduler, this.work);
          this.add(action);
          return action.schedule(state, delay2);
        } else {
          return Subscription.EMPTY;
        }
      };
      VirtualAction2.prototype.requestAsyncId = function(scheduler, id3, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        this.delay = scheduler.frame + delay2;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction2.sortActions);
        return 1;
      };
      VirtualAction2.prototype.recycleAsyncId = function(scheduler, id3, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return void 0;
      };
      VirtualAction2.prototype._execute = function(state, delay2) {
        if (this.active === true) {
          return _super.prototype._execute.call(this, state, delay2);
        }
      };
      VirtualAction2.sortActions = function(a6, b4) {
        if (a6.delay === b4.delay) {
          if (a6.index === b4.index) {
            return 0;
          } else if (a6.index > b4.index) {
            return 1;
          } else {
            return -1;
          }
        } else if (a6.delay > b4.delay) {
          return 1;
        } else {
          return -1;
        }
      };
      return VirtualAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/empty.js
var import_dist170, EMPTY;
var init_empty = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/empty.js"() {
    import_dist170 = __toESM(require_dist());
    init_Observable();
    EMPTY = new Observable(function(subscriber) {
      return subscriber.complete();
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction(value.schedule);
}
var import_dist171;
var init_isScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isScheduler.js"() {
    import_dist171 = __toESM(require_dist());
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}
function popNumber(args, defaultValue) {
  return typeof last(args) === "number" ? args.pop() : defaultValue;
}
var import_dist172;
var init_args = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/args.js"() {
    import_dist172 = __toESM(require_dist());
    init_isFunction();
    init_isScheduler();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var import_dist173, isArrayLike;
var init_isArrayLike = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js"() {
    import_dist173 = __toESM(require_dist());
    isArrayLike = function(x6) {
      return x6 && typeof x6.length === "number" && typeof x6 !== "function";
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isPromise.js
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}
var import_dist174;
var init_isPromise = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isPromise.js"() {
    import_dist174 = __toESM(require_dist());
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
function isInteropObservable(input) {
  return isFunction(input[observable]);
}
var import_dist175;
var init_isInteropObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js"() {
    import_dist175 = __toESM(require_dist());
    init_observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
var import_dist176;
var init_isAsyncIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js"() {
    import_dist176 = __toESM(require_dist());
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
var import_dist177;
var init_throwUnobservableError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js"() {
    import_dist177 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var import_dist178, iterator;
var init_iterator = __esm({
  "node_modules/rxjs/dist/esm5/internal/symbol/iterator.js"() {
    import_dist178 = __toESM(require_dist());
    iterator = getSymbolIterator();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}
var import_dist179;
var init_isIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isIterable.js"() {
    import_dist179 = __toESM(require_dist());
    init_iterator();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator2(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a2, value, done;
    return __generator2(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false) return [3, 8];
          return [4, __await2(reader.read())];
        case 3:
          _a2 = _b.sent(), value = _a2.value, done = _a2.done;
          if (!done) return [3, 5];
          return [4, __await2(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await2(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
var import_dist180;
var init_isReadableStreamLike = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js"() {
    import_dist180 = __toESM(require_dist());
    init_tslib_es62();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i5 = 0; i5 < array.length && !subscriber.closed; i5++) {
      subscriber.next(array[i5]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err2) {
      return subscriber.error(err2);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a2;
    try {
      for (var iterable_1 = __values2(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a2 = iterable_1.return)) _a2.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process2(asyncIterable, subscriber).catch(function(err2) {
      return subscriber.error(err2);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process2(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a2;
  return __awaiter3(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator2(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues2(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a2 = asyncIterable_1.return))) return [3, 8];
          return [4, _a2.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2) throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}
var import_dist181;
var init_innerFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"() {
    import_dist181 = __toESM(require_dist());
    init_tslib_es62();
    init_isArrayLike();
    init_isPromise();
    init_Observable();
    init_isInteropObservable();
    init_isAsyncIterable();
    init_throwUnobservableError();
    init_isIterable();
    init_isReadableStreamLike();
    init_isFunction();
    init_reportUnhandledError();
    init_observable();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}
var import_dist182;
var init_executeSchedule = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js"() {
    import_dist182 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err2) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err2);
      }, delay2);
    }));
  });
}
var import_dist183;
var init_observeOn = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/observeOn.js"() {
    import_dist183 = __toESM(require_dist());
    init_executeSchedule();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}
var import_dist184;
var init_subscribeOn = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js"() {
    import_dist184 = __toESM(require_dist());
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
var import_dist185;
var init_scheduleObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js"() {
    import_dist185 = __toESM(require_dist());
    init_innerFrom();
    init_observeOn();
    init_subscribeOn();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
var import_dist186;
var init_schedulePromise = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js"() {
    import_dist186 = __toESM(require_dist());
    init_innerFrom();
    init_observeOn();
    init_subscribeOn();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i5 = 0;
    return scheduler.schedule(function() {
      if (i5 === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i5++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}
var import_dist187;
var init_scheduleArray = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js"() {
    import_dist187 = __toESM(require_dist());
    init_Observable();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a2;
        var value;
        var done;
        try {
          _a2 = iterator2.next(), value = _a2.value, done = _a2.done;
        } catch (err2) {
          subscriber.error(err2);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}
var import_dist188;
var init_scheduleIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js"() {
    import_dist188 = __toESM(require_dist());
    init_Observable();
    init_iterator();
    init_isFunction();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}
var import_dist189;
var init_scheduleAsyncIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js"() {
    import_dist189 = __toESM(require_dist());
    init_Observable();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}
var import_dist190;
var init_scheduleReadableStreamLike = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js"() {
    import_dist190 = __toESM(require_dist());
    init_scheduleAsyncIterable();
    init_isReadableStreamLike();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}
var import_dist191;
var init_scheduled = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js"() {
    import_dist191 = __toESM(require_dist());
    init_scheduleObservable();
    init_schedulePromise();
    init_scheduleArray();
    init_scheduleIterable();
    init_scheduleAsyncIterable();
    init_isInteropObservable();
    init_isPromise();
    init_isArrayLike();
    init_isIterable();
    init_isAsyncIterable();
    init_throwUnobservableError();
    init_isReadableStreamLike();
    init_scheduleReadableStreamLike();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/from.js
function from3(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}
var import_dist192;
var init_from = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/from.js"() {
    import_dist192 = __toESM(require_dist());
    init_scheduled();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    args[_i2] = arguments[_i2];
  }
  var scheduler = popScheduler(args);
  return from3(args, scheduler);
}
var import_dist193;
var init_of = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/of.js"() {
    import_dist193 = __toESM(require_dist());
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init2 = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init2, 0, subscriber);
  } : init2);
}
var import_dist194;
var init_throwError = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/throwError.js"() {
    import_dist194 = __toESM(require_dist());
    init_Observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/Notification.js
function observeNotification(notification, observer) {
  var _a2, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a2 = observer.next) === null || _a2 === void 0 ? void 0 : _a2.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}
var import_dist195, NotificationKind, Notification;
var init_Notification = __esm({
  "node_modules/rxjs/dist/esm5/internal/Notification.js"() {
    import_dist195 = __toESM(require_dist());
    init_empty();
    init_of();
    init_throwError();
    init_isFunction();
    (function(NotificationKind2) {
      NotificationKind2["NEXT"] = "N";
      NotificationKind2["ERROR"] = "E";
      NotificationKind2["COMPLETE"] = "C";
    })(NotificationKind || (NotificationKind = {}));
    Notification = function() {
      function Notification2(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === "N";
      }
      Notification2.prototype.observe = function(observer) {
        return observeNotification(this, observer);
      };
      Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
        var _a2 = this, kind = _a2.kind, value = _a2.value, error = _a2.error;
        return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
      };
      Notification2.prototype.accept = function(nextOrObserver, error, complete) {
        var _a2;
        return isFunction((_a2 = nextOrObserver) === null || _a2 === void 0 ? void 0 : _a2.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
      };
      Notification2.prototype.toObservable = function() {
        var _a2 = this, kind = _a2.kind, value = _a2.value, error = _a2.error;
        var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
          return error;
        }) : kind === "C" ? EMPTY : 0;
        if (!result) {
          throw new TypeError("Unexpected notification kind " + kind);
        }
        return result;
      };
      Notification2.createNext = function(value) {
        return new Notification2("N", value);
      };
      Notification2.createError = function(err2) {
        return new Notification2("E", void 0, err2);
      };
      Notification2.createComplete = function() {
        return Notification2.completeNotification;
      };
      Notification2.completeNotification = new Notification2("C");
      return Notification2;
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isObservable.js
var import_dist196;
var init_isObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isObservable.js"() {
    import_dist196 = __toESM(require_dist());
    init_Observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var import_dist197, EmptyError;
var init_EmptyError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/EmptyError.js"() {
    import_dist197 = __toESM(require_dist());
    init_createErrorClass();
    EmptyError = createErrorClass(function(_super) {
      return function EmptyErrorImpl() {
        _super(this);
        this.name = "EmptyError";
        this.message = "no elements in sequence";
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
var import_dist198;
var init_lastValueFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/lastValueFrom.js"() {
    import_dist198 = __toESM(require_dist());
    init_EmptyError();
  }
});

// node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
function firstValueFrom(source, config2) {
  var hasConfig = typeof config2 === "object";
  return new Promise(function(resolve, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve(config2.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}
var import_dist199;
var init_firstValueFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/firstValueFrom.js"() {
    import_dist199 = __toESM(require_dist());
    init_EmptyError();
    init_Subscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
var import_dist200, ArgumentOutOfRangeError;
var init_ArgumentOutOfRangeError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js"() {
    import_dist200 = __toESM(require_dist());
    init_createErrorClass();
    ArgumentOutOfRangeError = createErrorClass(function(_super) {
      return function ArgumentOutOfRangeErrorImpl() {
        _super(this);
        this.name = "ArgumentOutOfRangeError";
        this.message = "argument out of range";
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
var import_dist201, NotFoundError;
var init_NotFoundError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js"() {
    import_dist201 = __toESM(require_dist());
    init_createErrorClass();
    NotFoundError = createErrorClass(function(_super) {
      return function NotFoundErrorImpl(message) {
        _super(this);
        this.name = "NotFoundError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
var import_dist202, SequenceError;
var init_SequenceError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/SequenceError.js"() {
    import_dist202 = __toESM(require_dist());
    init_createErrorClass();
    SequenceError = createErrorClass(function(_super) {
      return function SequenceErrorImpl(message) {
        _super(this);
        this.name = "SequenceError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isDate.js
var import_dist203;
var init_isDate = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isDate.js"() {
    import_dist203 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var import_dist204, TimeoutError;
var init_timeout = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timeout.js"() {
    import_dist204 = __toESM(require_dist());
    init_async();
    init_isDate();
    init_lift();
    init_innerFrom();
    init_createErrorClass();
    init_OperatorSubscriber();
    init_executeSchedule();
    TimeoutError = createErrorClass(function(_super) {
      return function TimeoutErrorImpl(info) {
        if (info === void 0) {
          info = null;
        }
        _super(this);
        this.message = "Timeout has occurred";
        this.name = "TimeoutError";
        this.info = info;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/map.js
function map(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}
var import_dist205;
var init_map = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/map.js"() {
    import_dist205 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var import_dist206, isArray;
var init_mapOneOrManyArgs = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"() {
    import_dist206 = __toESM(require_dist());
    init_tslib_es62();
    init_map();
    isArray = Array.isArray;
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js
var import_dist207;
var init_bindCallbackInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js"() {
    import_dist207 = __toESM(require_dist());
    init_tslib_es62();
    init_isScheduler();
    init_Observable();
    init_subscribeOn();
    init_mapOneOrManyArgs();
    init_observeOn();
    init_AsyncSubject();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js
var import_dist208;
var init_bindCallback = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js"() {
    import_dist208 = __toESM(require_dist());
    init_bindCallbackInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js
var import_dist209;
var init_bindNodeCallback = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js"() {
    import_dist209 = __toESM(require_dist());
    init_bindCallbackInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var import_dist210, isArray2, objectProto;
var init_argsArgArrayOrObject = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js"() {
    import_dist210 = __toESM(require_dist());
    isArray2 = Array.isArray;
    objectProto = Object.prototype;
  }
});

// node_modules/rxjs/dist/esm5/internal/util/createObject.js
var import_dist211;
var init_createObject = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/createObject.js"() {
    import_dist211 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
var import_dist212;
var init_combineLatest = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"() {
    import_dist212 = __toESM(require_dist());
    init_Observable();
    init_argsArgArrayOrObject();
    init_from();
    init_identity3();
    init_mapOneOrManyArgs();
    init_args();
    init_createObject();
    init_OperatorSubscriber();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand2, innerSubScheduler, additionalFinalizer) {
  var buffer2 = [];
  var active = 0;
  var index = 0;
  var isComplete = false;
  var checkComplete = function() {
    if (isComplete && !buffer2.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function(value) {
    return active < concurrent ? doInnerSub(value) : buffer2.push(value);
  };
  var doInnerSub = function(value) {
    expand2 && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand2) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function() {
      innerComplete = true;
    }, void 0, function() {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function() {
            var bufferedValue = buffer2.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function() {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer2.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err2) {
          subscriber.error(err2);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
    isComplete = true;
    checkComplete();
  }));
  return function() {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}
var import_dist213;
var init_mergeInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js"() {
    import_dist213 = __toESM(require_dist());
    init_innerFrom();
    init_executeSchedule();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction(resultSelector)) {
    return mergeMap(function(a6, i5) {
      return map(function(b4, ii2) {
        return resultSelector(a6, b4, i5, ii2);
      })(innerFrom(project(a6, i5)));
    }, concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate(function(source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}
var import_dist214;
var init_mergeMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"() {
    import_dist214 = __toESM(require_dist());
    init_map();
    init_innerFrom();
    init_lift();
    init_mergeInternals();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity3, concurrent);
}
var import_dist215;
var init_mergeAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js"() {
    import_dist215 = __toESM(require_dist());
    init_mergeMap();
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
var import_dist216;
var init_concatAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatAll.js"() {
    import_dist216 = __toESM(require_dist());
    init_mergeAll();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/concat.js
var import_dist217;
var init_concat3 = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/concat.js"() {
    import_dist217 = __toESM(require_dist());
    init_concatAll();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/defer.js
function defer(observableFactory) {
  return new Observable(function(subscriber) {
    innerFrom(observableFactory()).subscribe(subscriber);
  });
}
var import_dist218;
var init_defer = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/defer.js"() {
    import_dist218 = __toESM(require_dist());
    init_Observable();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/connectable.js
var import_dist219;
var init_connectable = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/connectable.js"() {
    import_dist219 = __toESM(require_dist());
    init_Subject();
    init_Observable();
    init_defer();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js
var import_dist220;
var init_forkJoin = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js"() {
    import_dist220 = __toESM(require_dist());
    init_Observable();
    init_argsArgArrayOrObject();
    init_innerFrom();
    init_args();
    init_OperatorSubscriber();
    init_mapOneOrManyArgs();
    init_createObject();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
var import_dist221;
var init_fromEvent = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js"() {
    import_dist221 = __toESM(require_dist());
    init_tslib_es62();
    init_innerFrom();
    init_Observable();
    init_mergeMap();
    init_isArrayLike();
    init_isFunction();
    init_mapOneOrManyArgs();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js
var import_dist222;
var init_fromEventPattern = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js"() {
    import_dist222 = __toESM(require_dist());
    init_Observable();
    init_isFunction();
    init_mapOneOrManyArgs();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/generate.js
var import_dist223;
var init_generate = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/generate.js"() {
    import_dist223 = __toESM(require_dist());
    init_tslib_es62();
    init_identity3();
    init_isScheduler();
    init_defer();
    init_scheduleIterable();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/iif.js
var import_dist224;
var init_iif = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/iif.js"() {
    import_dist224 = __toESM(require_dist());
    init_defer();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/timer.js
var import_dist225;
var init_timer = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/timer.js"() {
    import_dist225 = __toESM(require_dist());
    init_Observable();
    init_async();
    init_isScheduler();
    init_isDate();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/interval.js
var import_dist226;
var init_interval = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/interval.js"() {
    import_dist226 = __toESM(require_dist());
    init_async();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/merge.js
function merge() {
  var args = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    args[_i2] = arguments[_i2];
  }
  var scheduler = popScheduler(args);
  var concurrent = popNumber(args, Infinity);
  var sources = args;
  return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(from3(sources, scheduler));
}
var import_dist227;
var init_merge = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/merge.js"() {
    import_dist227 = __toESM(require_dist());
    init_mergeAll();
    init_innerFrom();
    init_empty();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/never.js
var import_dist228, NEVER;
var init_never = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/never.js"() {
    import_dist228 = __toESM(require_dist());
    init_Observable();
    init_noop();
    NEVER = new Observable(noop);
  }
});

// node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var import_dist229, isArray3;
var init_argsOrArgArray = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js"() {
    import_dist229 = __toESM(require_dist());
    isArray3 = Array.isArray;
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js
var import_dist230;
var init_onErrorResumeNext = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js"() {
    import_dist230 = __toESM(require_dist());
    init_Observable();
    init_argsOrArgArray();
    init_OperatorSubscriber();
    init_noop();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/pairs.js
var import_dist231;
var init_pairs = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/pairs.js"() {
    import_dist231 = __toESM(require_dist());
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/not.js
var import_dist232;
var init_not = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/not.js"() {
    import_dist232 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}
var import_dist233;
var init_filter = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/filter.js"() {
    import_dist233 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/partition.js
var import_dist234;
var init_partition = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/partition.js"() {
    import_dist234 = __toESM(require_dist());
    init_not();
    init_filter();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/race.js
var import_dist235;
var init_race = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/race.js"() {
    import_dist235 = __toESM(require_dist());
    init_Observable();
    init_innerFrom();
    init_argsOrArgArray();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/range.js
var import_dist236;
var init_range = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/range.js"() {
    import_dist236 = __toESM(require_dist());
    init_Observable();
    init_empty();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/using.js
var import_dist237;
var init_using = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/using.js"() {
    import_dist237 = __toESM(require_dist());
    init_Observable();
    init_innerFrom();
    init_empty();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/zip.js
var import_dist238;
var init_zip = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/zip.js"() {
    import_dist238 = __toESM(require_dist());
    init_tslib_es62();
    init_Observable();
    init_innerFrom();
    init_argsOrArgArray();
    init_empty();
    init_OperatorSubscriber();
    init_args();
  }
});

// node_modules/rxjs/dist/esm5/internal/types.js
var import_dist239;
var init_types3 = __esm({
  "node_modules/rxjs/dist/esm5/internal/types.js"() {
    import_dist239 = __toESM(require_dist());
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/audit.js
var import_dist240;
var init_audit = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/audit.js"() {
    import_dist240 = __toESM(require_dist());
    init_lift();
    init_innerFrom();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/auditTime.js
var import_dist241;
var init_auditTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/auditTime.js"() {
    import_dist241 = __toESM(require_dist());
    init_async();
    init_audit();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/buffer.js
var import_dist242;
var init_buffer = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/buffer.js"() {
    import_dist242 = __toESM(require_dist());
    init_lift();
    init_noop();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js
var import_dist243;
var init_bufferCount = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js"() {
    import_dist243 = __toESM(require_dist());
    init_tslib_es62();
    init_lift();
    init_OperatorSubscriber();
    init_arrRemove();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js
var import_dist244;
var init_bufferTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js"() {
    import_dist244 = __toESM(require_dist());
    init_tslib_es62();
    init_Subscription();
    init_lift();
    init_OperatorSubscriber();
    init_arrRemove();
    init_async();
    init_args();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js
var import_dist245;
var init_bufferToggle = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js"() {
    import_dist245 = __toESM(require_dist());
    init_tslib_es62();
    init_Subscription();
    init_lift();
    init_innerFrom();
    init_OperatorSubscriber();
    init_noop();
    init_arrRemove();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js
var import_dist246;
var init_bufferWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js"() {
    import_dist246 = __toESM(require_dist());
    init_lift();
    init_noop();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/catchError.js
var import_dist247;
var init_catchError = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/catchError.js"() {
    import_dist247 = __toESM(require_dist());
    init_innerFrom();
    init_OperatorSubscriber();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
var import_dist248;
var init_scanInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js"() {
    import_dist248 = __toESM(require_dist());
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/reduce.js
var import_dist249;
var init_reduce = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/reduce.js"() {
    import_dist249 = __toESM(require_dist());
    init_scanInternals();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/toArray.js
var import_dist250;
var init_toArray = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/toArray.js"() {
    import_dist250 = __toESM(require_dist());
    init_reduce();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js
var import_dist251;
var init_joinAllInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js"() {
    import_dist251 = __toESM(require_dist());
    init_identity3();
    init_mapOneOrManyArgs();
    init_pipe();
    init_mergeMap();
    init_toArray();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js
var import_dist252;
var init_combineLatestAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js"() {
    import_dist252 = __toESM(require_dist());
    init_combineLatest();
    init_joinAllInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineAll.js
var import_dist253;
var init_combineAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineAll.js"() {
    import_dist253 = __toESM(require_dist());
    init_combineLatestAll();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js
var import_dist254;
var init_combineLatest2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js"() {
    import_dist254 = __toESM(require_dist());
    init_tslib_es62();
    init_combineLatest();
    init_lift();
    init_argsOrArgArray();
    init_mapOneOrManyArgs();
    init_pipe();
    init_args();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js
var import_dist255;
var init_combineLatestWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js"() {
    import_dist255 = __toESM(require_dist());
    init_tslib_es62();
    init_combineLatest2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
var import_dist256;
var init_concatMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatMap.js"() {
    import_dist256 = __toESM(require_dist());
    init_mergeMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js
var import_dist257;
var init_concatMapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js"() {
    import_dist257 = __toESM(require_dist());
    init_concatMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concat.js
var import_dist258;
var init_concat4 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concat.js"() {
    import_dist258 = __toESM(require_dist());
    init_tslib_es62();
    init_lift();
    init_concatAll();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatWith.js
var import_dist259;
var init_concatWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatWith.js"() {
    import_dist259 = __toESM(require_dist());
    init_tslib_es62();
    init_concat4();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
var import_dist260;
var init_fromSubscribable = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js"() {
    import_dist260 = __toESM(require_dist());
    init_Observable();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/connect.js
var import_dist261;
var init_connect = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/connect.js"() {
    import_dist261 = __toESM(require_dist());
    init_Subject();
    init_innerFrom();
    init_lift();
    init_fromSubscribable();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/count.js
var import_dist262;
var init_count = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/count.js"() {
    import_dist262 = __toESM(require_dist());
    init_reduce();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/debounce.js
var import_dist263;
var init_debounce = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/debounce.js"() {
    import_dist263 = __toESM(require_dist());
    init_lift();
    init_noop();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js
var import_dist264;
var init_debounceTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js"() {
    import_dist264 = __toESM(require_dist());
    init_async();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}
var import_dist265;
var init_defaultIfEmpty = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js"() {
    import_dist265 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/take.js
function take(count2) {
  return count2 <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count2) {
        subscriber.next(value);
        if (count2 <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}
var import_dist266;
var init_take = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/take.js"() {
    import_dist266 = __toESM(require_dist());
    init_empty();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js
function ignoreElements() {
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, noop));
  });
}
var import_dist267;
var init_ignoreElements = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js"() {
    import_dist267 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
    init_noop();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
var import_dist268;
var init_mapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mapTo.js"() {
    import_dist268 = __toESM(require_dist());
    init_map();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js
var import_dist269;
var init_delayWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js"() {
    import_dist269 = __toESM(require_dist());
    init_concat3();
    init_take();
    init_ignoreElements();
    init_mapTo();
    init_mergeMap();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/delay.js
var import_dist270;
var init_delay = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/delay.js"() {
    import_dist270 = __toESM(require_dist());
    init_async();
    init_delayWhen();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js
var import_dist271;
var init_dematerialize = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js"() {
    import_dist271 = __toESM(require_dist());
    init_Notification();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/distinct.js
var import_dist272;
var init_distinct = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/distinct.js"() {
    import_dist272 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
    init_noop();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
var import_dist273;
var init_distinctUntilChanged = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js"() {
    import_dist273 = __toESM(require_dist());
    init_identity3();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js
var import_dist274;
var init_distinctUntilKeyChanged = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js"() {
    import_dist274 = __toESM(require_dist());
    init_distinctUntilChanged();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
    }));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}
var import_dist275;
var init_throwIfEmpty = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js"() {
    import_dist275 = __toESM(require_dist());
    init_EmptyError();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/elementAt.js
var import_dist276;
var init_elementAt = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/elementAt.js"() {
    import_dist276 = __toESM(require_dist());
    init_ArgumentOutOfRangeError();
    init_filter();
    init_throwIfEmpty();
    init_defaultIfEmpty();
    init_take();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/endWith.js
var import_dist277;
var init_endWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/endWith.js"() {
    import_dist277 = __toESM(require_dist());
    init_tslib_es62();
    init_concat3();
    init_of();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/every.js
var import_dist278;
var init_every = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/every.js"() {
    import_dist278 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js
var import_dist279;
var init_exhaustMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js"() {
    import_dist279 = __toESM(require_dist());
    init_map();
    init_innerFrom();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js
var import_dist280;
var init_exhaustAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js"() {
    import_dist280 = __toESM(require_dist());
    init_exhaustMap();
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/exhaust.js
var import_dist281;
var init_exhaust = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/exhaust.js"() {
    import_dist281 = __toESM(require_dist());
    init_exhaustAll();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/expand.js
var import_dist282;
var init_expand = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/expand.js"() {
    import_dist282 = __toESM(require_dist());
    init_lift();
    init_mergeInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/finalize.js
var import_dist283;
var init_finalize = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/finalize.js"() {
    import_dist283 = __toESM(require_dist());
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/find.js
var import_dist284;
var init_find = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/find.js"() {
    import_dist284 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/findIndex.js
var import_dist285;
var init_findIndex = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/findIndex.js"() {
    import_dist285 = __toESM(require_dist());
    init_lift();
    init_find();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/first.js
function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function(source) {
    return source.pipe(predicate ? filter(function(v8, i5) {
      return predicate(v8, i5, source);
    }) : identity3, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}
var import_dist286;
var init_first = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/first.js"() {
    import_dist286 = __toESM(require_dist());
    init_EmptyError();
    init_filter();
    init_take();
    init_defaultIfEmpty();
    init_throwIfEmpty();
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/groupBy.js
var import_dist287;
var init_groupBy = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/groupBy.js"() {
    import_dist287 = __toESM(require_dist());
    init_Observable();
    init_innerFrom();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js
var import_dist288;
var init_isEmpty = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js"() {
    import_dist288 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
var import_dist289;
var init_takeLast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/takeLast.js"() {
    import_dist289 = __toESM(require_dist());
    init_tslib_es62();
    init_empty();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/last.js
var import_dist290;
var init_last = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/last.js"() {
    import_dist290 = __toESM(require_dist());
    init_EmptyError();
    init_filter();
    init_takeLast();
    init_throwIfEmpty();
    init_defaultIfEmpty();
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/materialize.js
var import_dist291;
var init_materialize = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/materialize.js"() {
    import_dist291 = __toESM(require_dist());
    init_Notification();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/max.js
var import_dist292;
var init_max = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/max.js"() {
    import_dist292 = __toESM(require_dist());
    init_reduce();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/flatMap.js
var import_dist293;
var init_flatMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/flatMap.js"() {
    import_dist293 = __toESM(require_dist());
    init_mergeMap();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js
var import_dist294;
var init_mergeMapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js"() {
    import_dist294 = __toESM(require_dist());
    init_mergeMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js
var import_dist295;
var init_mergeScan = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js"() {
    import_dist295 = __toESM(require_dist());
    init_lift();
    init_mergeInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/merge.js
var import_dist296;
var init_merge2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/merge.js"() {
    import_dist296 = __toESM(require_dist());
    init_tslib_es62();
    init_lift();
    init_argsOrArgArray();
    init_mergeAll();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js
var import_dist297;
var init_mergeWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js"() {
    import_dist297 = __toESM(require_dist());
    init_tslib_es62();
    init_merge2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/min.js
var import_dist298;
var init_min = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/min.js"() {
    import_dist298 = __toESM(require_dist());
    init_reduce();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/multicast.js
var import_dist299;
var init_multicast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/multicast.js"() {
    import_dist299 = __toESM(require_dist());
    init_ConnectableObservable();
    init_isFunction();
    init_connect();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNextWith.js
var import_dist300;
var init_onErrorResumeNextWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNextWith.js"() {
    import_dist300 = __toESM(require_dist());
    init_tslib_es62();
    init_argsOrArgArray();
    init_onErrorResumeNext();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/pairwise.js
var import_dist301;
var init_pairwise = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/pairwise.js"() {
    import_dist301 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/pluck.js
var import_dist302;
var init_pluck = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/pluck.js"() {
    import_dist302 = __toESM(require_dist());
    init_map();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publish.js
var import_dist303;
var init_publish = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publish.js"() {
    import_dist303 = __toESM(require_dist());
    init_Subject();
    init_multicast();
    init_connect();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js
var import_dist304;
var init_publishBehavior = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js"() {
    import_dist304 = __toESM(require_dist());
    init_BehaviorSubject();
    init_ConnectableObservable();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publishLast.js
var import_dist305;
var init_publishLast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publishLast.js"() {
    import_dist305 = __toESM(require_dist());
    init_AsyncSubject();
    init_ConnectableObservable();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
var import_dist306;
var init_publishReplay = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js"() {
    import_dist306 = __toESM(require_dist());
    init_ReplaySubject();
    init_multicast();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/raceWith.js
var import_dist307;
var init_raceWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/raceWith.js"() {
    import_dist307 = __toESM(require_dist());
    init_tslib_es62();
    init_race();
    init_lift();
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/repeat.js
var import_dist308;
var init_repeat = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/repeat.js"() {
    import_dist308 = __toESM(require_dist());
    init_empty();
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js
var import_dist309;
var init_repeatWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js"() {
    import_dist309 = __toESM(require_dist());
    init_innerFrom();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/retry.js
var import_dist310;
var init_retry = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/retry.js"() {
    import_dist310 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
    init_identity3();
    init_timer();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js
var import_dist311;
var init_retryWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js"() {
    import_dist311 = __toESM(require_dist());
    init_innerFrom();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/sample.js
var import_dist312;
var init_sample = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/sample.js"() {
    import_dist312 = __toESM(require_dist());
    init_innerFrom();
    init_lift();
    init_noop();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js
var import_dist313;
var init_sampleTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js"() {
    import_dist313 = __toESM(require_dist());
    init_async();
    init_sample();
    init_interval();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/scan.js
var import_dist314;
var init_scan = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/scan.js"() {
    import_dist314 = __toESM(require_dist());
    init_lift();
    init_scanInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js
var import_dist315;
var init_sequenceEqual = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js"() {
    import_dist315 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/share.js
function share(options) {
  if (options === void 0) {
    options = {};
  }
  var _a2 = options.connector, connector = _a2 === void 0 ? function() {
    return new Subject();
  } : _a2, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
  return function(wrapperSource) {
    var connection;
    var resetConnection;
    var subject;
    var refCount2 = 0;
    var hasCompleted = false;
    var hasErrored = false;
    var cancelReset = function() {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = void 0;
    };
    var reset = function() {
      cancelReset();
      connection = subject = void 0;
      hasCompleted = hasErrored = false;
    };
    var resetAndUnsubscribe = function() {
      var conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };
    return operate(function(source, subscriber) {
      refCount2++;
      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }
      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(function() {
        refCount2--;
        if (refCount2 === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);
      if (!connection && refCount2 > 0) {
        connection = new SafeSubscriber({
          next: function(value) {
            return dest.next(value);
          },
          error: function(err2) {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err2);
            dest.error(err2);
          },
          complete: function() {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        innerFrom(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}
function handleReset(reset, on3) {
  var args = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    args[_i2 - 2] = arguments[_i2];
  }
  if (on3 === true) {
    reset();
    return;
  }
  if (on3 === false) {
    return;
  }
  var onSubscriber = new SafeSubscriber({
    next: function() {
      onSubscriber.unsubscribe();
      reset();
    }
  });
  return innerFrom(on3.apply(void 0, __spreadArray2([], __read2(args)))).subscribe(onSubscriber);
}
var import_dist316;
var init_share = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/share.js"() {
    import_dist316 = __toESM(require_dist());
    init_tslib_es62();
    init_innerFrom();
    init_Subject();
    init_Subscriber();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
var import_dist317;
var init_shareReplay = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js"() {
    import_dist317 = __toESM(require_dist());
    init_ReplaySubject();
    init_share();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/single.js
var import_dist318;
var init_single = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/single.js"() {
    import_dist318 = __toESM(require_dist());
    init_EmptyError();
    init_SequenceError();
    init_NotFoundError();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skip.js
var import_dist319;
var init_skip = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skip.js"() {
    import_dist319 = __toESM(require_dist());
    init_filter();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skipLast.js
var import_dist320;
var init_skipLast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skipLast.js"() {
    import_dist320 = __toESM(require_dist());
    init_identity3();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js
var import_dist321;
var init_skipUntil = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js"() {
    import_dist321 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_noop();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js
var import_dist322;
var init_skipWhile = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js"() {
    import_dist322 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/startWith.js
var import_dist323;
var init_startWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/startWith.js"() {
    import_dist323 = __toESM(require_dist());
    init_concat3();
    init_args();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
var import_dist324;
var init_switchMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"() {
    import_dist324 = __toESM(require_dist());
    init_innerFrom();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchAll.js
var import_dist325;
var init_switchAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchAll.js"() {
    import_dist325 = __toESM(require_dist());
    init_switchMap();
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js
var import_dist326;
var init_switchMapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js"() {
    import_dist326 = __toESM(require_dist());
    init_switchMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchScan.js
var import_dist327;
var init_switchScan = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchScan.js"() {
    import_dist327 = __toESM(require_dist());
    init_switchMap();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
function takeUntil(notifier) {
  return operate(function(source, subscriber) {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function() {
      return subscriber.complete();
    }, noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}
var import_dist328;
var init_takeUntil = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"() {
    import_dist328 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_noop();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
var import_dist329;
var init_takeWhile = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js"() {
    import_dist329 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  var tapObserver = isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
  return tapObserver ? operate(function(source, subscriber) {
    var _a2;
    (_a2 = tapObserver.subscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
    var isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var _a3;
      (_a3 = tapObserver.next) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, value);
      subscriber.next(value);
    }, function() {
      var _a3;
      isUnsub = false;
      (_a3 = tapObserver.complete) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
      subscriber.complete();
    }, function(err2) {
      var _a3;
      isUnsub = false;
      (_a3 = tapObserver.error) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, err2);
      subscriber.error(err2);
    }, function() {
      var _a3, _b;
      if (isUnsub) {
        (_a3 = tapObserver.unsubscribe) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity3;
}
var import_dist330;
var init_tap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/tap.js"() {
    import_dist330 = __toESM(require_dist());
    init_isFunction();
    init_lift();
    init_OperatorSubscriber();
    init_identity3();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/throttle.js
var import_dist331;
var init_throttle = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/throttle.js"() {
    import_dist331 = __toESM(require_dist());
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
var import_dist332;
var init_throttleTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js"() {
    import_dist332 = __toESM(require_dist());
    init_async();
    init_throttle();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
var import_dist333;
var init_timeInterval = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js"() {
    import_dist333 = __toESM(require_dist());
    init_async();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js
var import_dist334;
var init_timeoutWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js"() {
    import_dist334 = __toESM(require_dist());
    init_async();
    init_isDate();
    init_timeout();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timestamp.js
var import_dist335;
var init_timestamp = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timestamp.js"() {
    import_dist335 = __toESM(require_dist());
    init_dateTimestampProvider();
    init_map();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/window.js
var import_dist336;
var init_window = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/window.js"() {
    import_dist336 = __toESM(require_dist());
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
    init_noop();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowCount.js
var import_dist337;
var init_windowCount = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowCount.js"() {
    import_dist337 = __toESM(require_dist());
    init_tslib_es62();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowTime.js
var import_dist338;
var init_windowTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowTime.js"() {
    import_dist338 = __toESM(require_dist());
    init_Subject();
    init_async();
    init_Subscription();
    init_lift();
    init_OperatorSubscriber();
    init_arrRemove();
    init_args();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js
var import_dist339;
var init_windowToggle = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js"() {
    import_dist339 = __toESM(require_dist());
    init_tslib_es62();
    init_Subject();
    init_Subscription();
    init_lift();
    init_innerFrom();
    init_OperatorSubscriber();
    init_noop();
    init_arrRemove();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js
var import_dist340;
var init_windowWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js"() {
    import_dist340 = __toESM(require_dist());
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js
var import_dist341;
var init_withLatestFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js"() {
    import_dist341 = __toESM(require_dist());
    init_tslib_es62();
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_identity3();
    init_noop();
    init_args();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/zipAll.js
var import_dist342;
var init_zipAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/zipAll.js"() {
    import_dist342 = __toESM(require_dist());
    init_zip();
    init_joinAllInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/zip.js
var import_dist343;
var init_zip2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/zip.js"() {
    import_dist343 = __toESM(require_dist());
    init_tslib_es62();
    init_zip();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/zipWith.js
var import_dist344;
var init_zipWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/zipWith.js"() {
    import_dist344 = __toESM(require_dist());
    init_tslib_es62();
    init_zip2();
  }
});

// node_modules/rxjs/dist/esm5/index.js
var import_dist345;
var init_esm5 = __esm({
  "node_modules/rxjs/dist/esm5/index.js"() {
    import_dist345 = __toESM(require_dist());
    init_Observable();
    init_ConnectableObservable();
    init_observable();
    init_animationFrames();
    init_Subject();
    init_BehaviorSubject();
    init_ReplaySubject();
    init_AsyncSubject();
    init_asap();
    init_async();
    init_queue();
    init_animationFrame();
    init_VirtualTimeScheduler();
    init_Scheduler();
    init_Subscription();
    init_Subscriber();
    init_Notification();
    init_pipe();
    init_noop();
    init_identity3();
    init_isObservable();
    init_lastValueFrom();
    init_firstValueFrom();
    init_ArgumentOutOfRangeError();
    init_EmptyError();
    init_NotFoundError();
    init_ObjectUnsubscribedError();
    init_SequenceError();
    init_timeout();
    init_UnsubscriptionError();
    init_bindCallback();
    init_bindNodeCallback();
    init_combineLatest();
    init_concat3();
    init_connectable();
    init_defer();
    init_empty();
    init_forkJoin();
    init_from();
    init_fromEvent();
    init_fromEventPattern();
    init_generate();
    init_iif();
    init_interval();
    init_merge();
    init_never();
    init_of();
    init_onErrorResumeNext();
    init_pairs();
    init_partition();
    init_race();
    init_range();
    init_throwError();
    init_timer();
    init_using();
    init_zip();
    init_scheduled();
    init_empty();
    init_never();
    init_types3();
    init_config();
    init_audit();
    init_auditTime();
    init_buffer();
    init_bufferCount();
    init_bufferTime();
    init_bufferToggle();
    init_bufferWhen();
    init_catchError();
    init_combineAll();
    init_combineLatestAll();
    init_combineLatestWith();
    init_concatAll();
    init_concatMap();
    init_concatMapTo();
    init_concatWith();
    init_connect();
    init_count();
    init_debounce();
    init_debounceTime();
    init_defaultIfEmpty();
    init_delay();
    init_delayWhen();
    init_dematerialize();
    init_distinct();
    init_distinctUntilChanged();
    init_distinctUntilKeyChanged();
    init_elementAt();
    init_endWith();
    init_every();
    init_exhaust();
    init_exhaustAll();
    init_exhaustMap();
    init_expand();
    init_filter();
    init_finalize();
    init_find();
    init_findIndex();
    init_first();
    init_groupBy();
    init_ignoreElements();
    init_isEmpty();
    init_last();
    init_map();
    init_mapTo();
    init_materialize();
    init_max();
    init_mergeAll();
    init_flatMap();
    init_mergeMap();
    init_mergeMapTo();
    init_mergeScan();
    init_mergeWith();
    init_min();
    init_multicast();
    init_observeOn();
    init_onErrorResumeNextWith();
    init_pairwise();
    init_pluck();
    init_publish();
    init_publishBehavior();
    init_publishLast();
    init_publishReplay();
    init_raceWith();
    init_reduce();
    init_repeat();
    init_repeatWhen();
    init_retry();
    init_retryWhen();
    init_refCount();
    init_sample();
    init_sampleTime();
    init_scan();
    init_sequenceEqual();
    init_share();
    init_shareReplay();
    init_single();
    init_skip();
    init_skipLast();
    init_skipUntil();
    init_skipWhile();
    init_startWith();
    init_subscribeOn();
    init_switchAll();
    init_switchMap();
    init_switchMapTo();
    init_switchScan();
    init_take();
    init_takeLast();
    init_takeUntil();
    init_takeWhile();
    init_tap();
    init_throttle();
    init_throttleTime();
    init_throwIfEmpty();
    init_timeInterval();
    init_timeout();
    init_timeoutWith();
    init_timestamp();
    init_toArray();
    init_window();
    init_windowCount();
    init_windowTime();
    init_windowToggle();
    init_windowWhen();
    init_withLatestFrom();
    init_zipAll();
    init_zipWith();
  }
});

// node_modules/@ledgerhq/devices/lib-es/ble/sendAPDU.js
function createChunkedBuffers(buffer2, sizeForIndex) {
  const chunks = [];
  for (let i5 = 0, size = sizeForIndex(0); i5 < buffer2.length; i5 += size, size = sizeForIndex(i5)) {
    chunks.push(buffer2.slice(i5, i5 + size));
  }
  return chunks;
}
var import_dist346, __awaiter4, TagId, sendAPDU;
var init_sendAPDU = __esm({
  "node_modules/@ledgerhq/devices/lib-es/ble/sendAPDU.js"() {
    import_dist346 = __toESM(require_dist());
    init_esm5();
    init_lib_es2();
    __awaiter4 = function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    TagId = 5;
    sendAPDU = (write, apdu, mtuSize, { context: context2 } = {}) => {
      const chunks = createChunkedBuffers(apdu, (i5) => mtuSize - (i5 === 0 ? 5 : 3)).map((buffer2, i5) => {
        const head = Buffer.alloc(i5 === 0 ? 5 : 3);
        head.writeUInt8(TagId, 0);
        head.writeUInt16BE(i5, 1);
        if (i5 === 0) {
          head.writeUInt16BE(apdu.length, 3);
        }
        return Buffer.concat([head, buffer2]);
      });
      return new Observable((o4) => {
        let terminated = false;
        function main() {
          return __awaiter4(this, void 0, void 0, function* () {
            for (const chunk of chunks) {
              if (terminated)
                return;
              yield write(chunk);
            }
          });
        }
        main().then(() => {
          terminated = true;
          o4.complete();
        }, (error) => {
          terminated = true;
          trace({
            type: "ble-error",
            message: `sendAPDU failure: ${error}`,
            data: { error },
            context: context2
          });
          o4.error(error);
        });
        const unsubscribe = () => {
          if (!terminated) {
            trace({
              type: "ble-error",
              message: "sendAPDU interruption",
              context: context2
            });
            terminated = true;
          }
        };
        return unsubscribe;
      });
    };
  }
});

// node_modules/@ledgerhq/devices/lib-es/ble/receiveAPDU.js
var import_dist347, TagId2, receiveAPDU;
var init_receiveAPDU = __esm({
  "node_modules/@ledgerhq/devices/lib-es/ble/receiveAPDU.js"() {
    import_dist347 = __toESM(require_dist());
    init_lib_es();
    init_esm5();
    init_lib_es2();
    TagId2 = 5;
    receiveAPDU = (rawStream, { context: context2 } = {}) => new Observable((o4) => {
      let notifiedIndex = 0;
      let notifiedDataLength = 0;
      let notifiedData = Buffer.alloc(0);
      const subscriptionCleaner = new ReplaySubject();
      rawStream.pipe(takeUntil(subscriptionCleaner)).subscribe({
        complete: () => {
          o4.error(new DisconnectedDevice());
        },
        error: (error) => {
          trace({
            type: "ble-error",
            message: `Error in receiveAPDU: ${error}`,
            data: { error },
            context: context2
          });
          o4.error(error);
        },
        next: (value) => {
          if (value instanceof Error) {
            trace({
              type: "ble-error",
              message: `Error emitted to receiveAPDU next: ${value}`,
              data: { error: value },
              context: context2
            });
            return;
          }
          const tag = value.readUInt8(0);
          const chunkIndex = value.readUInt16BE(1);
          let chunkData = value.slice(3);
          if (tag !== TagId2) {
            o4.error(new TransportError("Invalid tag " + tag.toString(16), "InvalidTag"));
            return;
          }
          if (notifiedIndex !== chunkIndex) {
            o4.error(new TransportError(`BLE: Invalid sequence number. discontinued chunk. Received ${chunkIndex} but expected ${notifiedIndex}`, "InvalidSequence"));
            return;
          }
          if (chunkIndex === 0) {
            notifiedDataLength = chunkData.readUInt16BE(0);
            chunkData = chunkData.slice(2);
          }
          notifiedIndex++;
          notifiedData = Buffer.concat([notifiedData, chunkData]);
          if (notifiedData.length > notifiedDataLength) {
            o4.error(new TransportError(`BLE: received too much data. discontinued chunk. Received ${notifiedData.length} but expected ${notifiedDataLength}`, "BLETooMuchData"));
            return;
          }
          if (notifiedData.length === notifiedDataLength) {
            o4.next(notifiedData);
            o4.complete();
            subscriptionCleaner.next();
          }
        }
      });
      return () => {
        subscriptionCleaner.next();
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/partition.js
var import_dist348;
var init_partition2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/partition.js"() {
    import_dist348 = __toESM(require_dist());
    init_not();
    init_filter();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/race.js
var import_dist349;
var init_race2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/race.js"() {
    import_dist349 = __toESM(require_dist());
    init_tslib_es62();
    init_argsOrArgArray();
    init_raceWith();
  }
});

// node_modules/rxjs/dist/esm5/operators/index.js
var import_dist350;
var init_operators = __esm({
  "node_modules/rxjs/dist/esm5/operators/index.js"() {
    import_dist350 = __toESM(require_dist());
    init_audit();
    init_auditTime();
    init_buffer();
    init_bufferCount();
    init_bufferTime();
    init_bufferToggle();
    init_bufferWhen();
    init_catchError();
    init_combineAll();
    init_combineLatestAll();
    init_combineLatest2();
    init_combineLatestWith();
    init_concat4();
    init_concatAll();
    init_concatMap();
    init_concatMapTo();
    init_concatWith();
    init_connect();
    init_count();
    init_debounce();
    init_debounceTime();
    init_defaultIfEmpty();
    init_delay();
    init_delayWhen();
    init_dematerialize();
    init_distinct();
    init_distinctUntilChanged();
    init_distinctUntilKeyChanged();
    init_elementAt();
    init_endWith();
    init_every();
    init_exhaust();
    init_exhaustAll();
    init_exhaustMap();
    init_expand();
    init_filter();
    init_finalize();
    init_find();
    init_findIndex();
    init_first();
    init_groupBy();
    init_ignoreElements();
    init_isEmpty();
    init_last();
    init_map();
    init_mapTo();
    init_materialize();
    init_max();
    init_merge2();
    init_mergeAll();
    init_flatMap();
    init_mergeMap();
    init_mergeMapTo();
    init_mergeScan();
    init_mergeWith();
    init_min();
    init_multicast();
    init_observeOn();
    init_onErrorResumeNextWith();
    init_pairwise();
    init_partition2();
    init_pluck();
    init_publish();
    init_publishBehavior();
    init_publishLast();
    init_publishReplay();
    init_race2();
    init_raceWith();
    init_reduce();
    init_repeat();
    init_repeatWhen();
    init_retry();
    init_retryWhen();
    init_refCount();
    init_sample();
    init_sampleTime();
    init_scan();
    init_sequenceEqual();
    init_share();
    init_shareReplay();
    init_single();
    init_skip();
    init_skipLast();
    init_skipUntil();
    init_skipWhile();
    init_startWith();
    init_subscribeOn();
    init_switchAll();
    init_switchMap();
    init_switchMapTo();
    init_switchScan();
    init_take();
    init_takeLast();
    init_takeUntil();
    init_takeWhile();
    init_tap();
    init_throttle();
    init_throttleTime();
    init_throwIfEmpty();
    init_timeInterval();
    init_timeout();
    init_timeoutWith();
    init_timestamp();
    init_toArray();
    init_window();
    init_windowCount();
    init_windowTime();
    init_windowToggle();
    init_windowWhen();
    init_withLatestFrom();
    init_zip2();
    init_zipAll();
    init_zipWith();
  }
});

// node_modules/@ledgerhq/hw-transport-web-ble/lib-es/monitorCharacteristic.js
var import_dist351, monitorCharacteristic;
var init_monitorCharacteristic = __esm({
  "node_modules/@ledgerhq/hw-transport-web-ble/lib-es/monitorCharacteristic.js"() {
    import_dist351 = __toESM(require_dist());
    init_esm5();
    init_lib_es2();
    monitorCharacteristic = (characteristic) => Observable.create((o4) => {
      log("ble-verbose", "start monitor " + characteristic.uuid);
      function onCharacteristicValueChanged(event) {
        const characteristic2 = event.target;
        if (characteristic2.value) {
          o4.next(Buffer.from(characteristic2.value.buffer));
        }
      }
      characteristic.startNotifications().then(() => {
        characteristic.addEventListener("characteristicvaluechanged", onCharacteristicValueChanged);
      });
      return () => {
        log("ble-verbose", "end monitor " + characteristic.uuid);
        characteristic.stopNotifications();
      };
    });
  }
});

// node_modules/@ledgerhq/hw-transport-web-ble/lib-es/TransportWebBLE.js
var TransportWebBLE_exports = {};
__export(TransportWebBLE_exports, {
  default: () => TransportWebBLE_default
});
function open(deviceOrId, needsReconnect) {
  return __awaiter5(this, void 0, void 0, function* () {
    let device;
    if (typeof deviceOrId === "string") {
      if (transportsCache[deviceOrId]) {
        log("ble-verbose", "Transport in cache, using that.");
        return transportsCache[deviceOrId];
      }
      const bluetooth = requiresBluetooth();
      device = yield bluetooth.requestDevice(requestDeviceParam());
    } else {
      device = deviceOrId;
    }
    if (!device.gatt.connected) {
      log("ble-verbose", "not connected. connecting...");
      yield device.gatt.connect();
    }
    const [service, infos] = yield retrieveService(device);
    const { deviceModel, writeUuid, notifyUuid } = infos;
    const [writeC, notifyC] = yield Promise.all([
      service.getCharacteristic(writeUuid),
      service.getCharacteristic(notifyUuid)
    ]);
    const notifyObservable = monitorCharacteristic(notifyC).pipe(tap((value) => {
      log("ble-frame", "<= " + value.toString("hex"));
    }), share());
    const notif = notifyObservable.subscribe();
    const transport = new BluetoothTransport(device, writeC, notifyObservable, deviceModel);
    if (!device.gatt.connected) {
      throw new DisconnectedDevice();
    }
    transportsCache[transport.id] = transport;
    const onDisconnect = (e3) => {
      console.log("onDisconnect!", e3);
      delete transportsCache[transport.id];
      transport.notYetDisconnected = false;
      notif.unsubscribe();
      device.removeEventListener("gattserverdisconnected", onDisconnect);
      log("ble-verbose", `BleTransport(${transport.id}) disconnected`);
      transport.emit("disconnect", e3);
    };
    device.addEventListener("gattserverdisconnected", onDisconnect);
    const beforeMTUTime = Date.now();
    try {
      yield transport.inferMTU();
    } finally {
      const afterMTUTime = Date.now();
      if (afterMTUTime - beforeMTUTime < 1e3) {
        needsReconnect = false;
      }
      if (needsReconnect) {
        yield device.gatt.disconnect();
        yield new Promise((s4) => setTimeout(s4, 4e3));
      }
    }
    if (needsReconnect) {
      return open(device, false);
    }
    return transport;
  });
}
var import_dist352, __awaiter5, _a, requiresBluetooth, availability, transportsCache, requestDeviceParam, retrieveService, BluetoothTransport, TransportWebBLE_default;
var init_TransportWebBLE = __esm({
  "node_modules/@ledgerhq/hw-transport-web-ble/lib-es/TransportWebBLE.js"() {
    import_dist352 = __toESM(require_dist());
    init_Transport();
    init_lib_es();
    init_lib_es3();
    init_sendAPDU();
    init_receiveAPDU();
    init_lib_es2();
    init_esm5();
    init_operators();
    init_monitorCharacteristic();
    __awaiter5 = function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    requiresBluetooth = () => {
      const { bluetooth } = navigator;
      if (typeof bluetooth === "undefined") {
        throw new Error("web bluetooth not supported");
      }
      return bluetooth;
    };
    availability = () => Observable.create((observer) => {
      const bluetooth = requiresBluetooth();
      const onAvailabilityChanged = (e3) => {
        observer.next(e3.value);
      };
      bluetooth.addEventListener("availabilitychanged", onAvailabilityChanged);
      let unsubscribed = false;
      bluetooth.getAvailability().then((available) => {
        if (!unsubscribed) {
          observer.next(available);
        }
      });
      return () => {
        unsubscribed = true;
        bluetooth.removeEventListener("availabilitychanged", onAvailabilityChanged);
      };
    });
    transportsCache = {};
    requestDeviceParam = () => ({
      filters: getBluetoothServiceUuids().map((uuid) => ({
        services: [uuid]
      }))
    });
    retrieveService = (device) => __awaiter5(void 0, void 0, void 0, function* () {
      if (!device.gatt)
        throw new Error("bluetooth gatt not found");
      const [service] = yield device.gatt.getPrimaryServices();
      if (!service)
        throw new Error("bluetooth service not found");
      const infos = getInfosForServiceUuid(service.uuid);
      if (!infos)
        throw new Error("bluetooth service infos not found");
      return [service, infos];
    });
    BluetoothTransport = class extends Transport_default {
      /**
       * Scan for Ledger Bluetooth devices.
       * On this web implementation, it only emits ONE device, the one that was selected in the UI (if any).
       */
      static listen(observer) {
        log("ble-verbose", "listen...");
        let unsubscribed;
        const bluetooth = requiresBluetooth();
        bluetooth.requestDevice(requestDeviceParam()).then((device) => {
          if (!unsubscribed) {
            observer.next({
              type: "add",
              descriptor: device
            });
            observer.complete();
          }
        }, (error) => {
          observer.error(new TransportOpenUserCancelled(error.message));
        });
        function unsubscribe() {
          unsubscribed = true;
        }
        return {
          unsubscribe
        };
      }
      /**
       * open a bluetooth device.
       */
      static open(deviceOrId) {
        return __awaiter5(this, void 0, void 0, function* () {
          return open(deviceOrId, true);
        });
      }
      constructor(device, writeCharacteristic, notifyObservable, deviceModel) {
        super();
        this.mtuSize = 20;
        this.notYetDisconnected = true;
        this.write = (buffer2) => __awaiter5(this, void 0, void 0, function* () {
          log("ble-frame", "=> " + buffer2.toString("hex"));
          yield this.writeCharacteristic.writeValue(buffer2);
        });
        this.id = device.id;
        this.device = device;
        this.writeCharacteristic = writeCharacteristic;
        this.notifyObservable = notifyObservable;
        this.deviceModel = deviceModel;
        log("ble-verbose", `BleTransport(${String(this.id)}) new instance`);
      }
      inferMTU() {
        return __awaiter5(this, void 0, void 0, function* () {
          let mtu = 23;
          yield this.exchangeAtomicImpl(() => __awaiter5(this, void 0, void 0, function* () {
            try {
              mtu = (yield firstValueFrom(merge(this.notifyObservable.pipe(first((buffer2) => buffer2.readUInt8(0) === 8), map((buffer2) => buffer2.readUInt8(5))), defer(() => from3(this.write(Buffer.from([8, 0, 0, 0, 0])))).pipe(ignoreElements())))) + 3;
            } catch (e3) {
              log("ble-error", "inferMTU got " + String(e3));
              this.device.gatt.disconnect();
              throw e3;
            }
          }));
          if (mtu > 23) {
            const mtuSize = mtu - 3;
            log("ble-verbose", `BleTransport(${String(this.id)}) mtu set to ${String(mtuSize)}`);
            this.mtuSize = mtuSize;
          }
          return this.mtuSize;
        });
      }
      /**
       * Exchange with the device using APDU protocol.
       * @param apdu
       * @returns a promise of apdu response
       */
      exchange(apdu) {
        return __awaiter5(this, void 0, void 0, function* () {
          const b4 = yield this.exchangeAtomicImpl(() => __awaiter5(this, void 0, void 0, function* () {
            try {
              const msgIn = apdu.toString("hex");
              log("apdu", `=> ${msgIn}`);
              const data = yield firstValueFrom(merge(this.notifyObservable.pipe(receiveAPDU), sendAPDU(this.write, apdu, this.mtuSize)));
              const msgOut = data.toString("hex");
              log("apdu", `<= ${msgOut}`);
              return data;
            } catch (e3) {
              log("ble-error", "exchange got " + String(e3));
              if (this.notYetDisconnected) {
                this.device.gatt.disconnect();
              }
              throw e3;
            }
          }));
          return b4;
        });
      }
      setScrambleKey() {
      }
      close() {
        return __awaiter5(this, void 0, void 0, function* () {
          if (this.exchangeBusyPromise) {
            yield this.exchangeBusyPromise;
          }
        });
      }
    };
    _a = BluetoothTransport;
    BluetoothTransport.isSupported = () => Promise.resolve().then(requiresBluetooth).then(() => true, () => false);
    BluetoothTransport.observeAvailability = (observer) => availability().subscribe(observer);
    BluetoothTransport.list = () => Promise.resolve([]);
    BluetoothTransport.disconnect = (id3) => __awaiter5(void 0, void 0, void 0, function* () {
      log("ble-verbose", `user disconnect(${id3})`);
      const transport = transportsCache[id3];
      if (transport) {
        transport.device.gatt.disconnect();
      }
    });
    TransportWebBLE_default = BluetoothTransport;
  }
});

// node_modules/@ledgerhq/devices/lib-es/hid-framing.js
function asUInt16BE(value) {
  const b4 = Buffer.alloc(2);
  b4.writeUInt16BE(value, 0);
  return b4;
}
var import_dist353, Tag, initialAcc, createHIDframing, hid_framing_default;
var init_hid_framing = __esm({
  "node_modules/@ledgerhq/devices/lib-es/hid-framing.js"() {
    import_dist353 = __toESM(require_dist());
    init_lib_es();
    Tag = 5;
    initialAcc = {
      data: Buffer.alloc(0),
      dataLength: 0,
      sequence: 0
    };
    createHIDframing = (channel, packetSize) => {
      return {
        /**
         * Frames/encodes an APDU message into HID USB packets/frames
         *
         * @param apdu The APDU message to send, in a Buffer containing [cla, ins, p1, p2, data length, data(if not empty)]
         * @returns an array of HID USB frames ready to be sent
         */
        makeBlocks(apdu) {
          let data = Buffer.concat([asUInt16BE(apdu.length), apdu]);
          const blockSize = packetSize - 5;
          const nbBlocks = Math.ceil(data.length / blockSize);
          data = Buffer.concat([data, Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)]);
          const blocks = [];
          for (let i5 = 0; i5 < nbBlocks; i5++) {
            const head = Buffer.alloc(5);
            head.writeUInt16BE(channel, 0);
            head.writeUInt8(Tag, 2);
            head.writeUInt16BE(i5, 3);
            const chunk = data.slice(i5 * blockSize, (i5 + 1) * blockSize);
            blocks.push(Buffer.concat([head, chunk]));
          }
          return blocks;
        },
        /**
         * Reduces HID USB packets/frames to one response.
         *
         * @param acc The value resulting from (accumulating) the previous call of reduceResponse.
         *   On first call initialized to `initialAcc`. The accumulator enables handling multi-frames messages.
         * @param chunk Current chunk to reduce into accumulator
         * @returns An accumulator value updated with the current chunk
         */
        reduceResponse(acc, chunk) {
          let { data, dataLength, sequence } = acc || initialAcc;
          if (chunk.readUInt16BE(0) !== channel) {
            throw new TransportError("Invalid channel", "InvalidChannel");
          }
          if (chunk.readUInt8(2) !== Tag) {
            throw new TransportError("Invalid tag", "InvalidTag");
          }
          if (chunk.readUInt16BE(3) !== sequence) {
            throw new TransportError("Invalid sequence", "InvalidSequence");
          }
          if (!acc) {
            dataLength = chunk.readUInt16BE(5);
          }
          sequence++;
          const chunkData = chunk.slice(acc ? 5 : 7);
          data = Buffer.concat([data, chunkData]);
          if (data.length > dataLength) {
            data = data.slice(0, dataLength);
          }
          return {
            data,
            dataLength,
            sequence
          };
        },
        /**
         * Returns the response message that has been reduced from the HID USB frames
         *
         * @param acc The accumulator
         * @returns A Buffer containing the cleaned response message, or null if no response message, or undefined if the
         *   accumulator is incorrect (message length is not valid)
         */
        getReducedResult(acc) {
          if (acc && acc.dataLength === acc.data.length) {
            return acc.data;
          }
        }
      };
    };
    hid_framing_default = createHIDframing;
  }
});

// node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js
var TransportWebHID_exports = {};
__export(TransportWebHID_exports, {
  default: () => TransportWebHID_default
});
function requestLedgerDevices() {
  return __awaiter6(this, void 0, void 0, function* () {
    const device = yield getHID().requestDevice({
      filters: ledgerDevices
    });
    if (Array.isArray(device))
      return device;
    return [device];
  });
}
function getLedgerDevices() {
  return __awaiter6(this, void 0, void 0, function* () {
    const devices2 = yield getHID().getDevices();
    return devices2.filter((d4) => d4.vendorId === ledgerUSBVendorId);
  });
}
function getFirstLedgerDevice() {
  return __awaiter6(this, void 0, void 0, function* () {
    const existingDevices = yield getLedgerDevices();
    if (existingDevices.length > 0)
      return existingDevices[0];
    const devices2 = yield requestLedgerDevices();
    return devices2[0];
  });
}
var import_dist354, __awaiter6, ledgerDevices, isSupported, getHID, TransportWebHID, TransportWebHID_default;
var init_TransportWebHID = __esm({
  "node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js"() {
    import_dist354 = __toESM(require_dist());
    init_Transport();
    init_hid_framing();
    init_lib_es3();
    init_lib_es2();
    init_lib_es();
    __awaiter6 = function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    ledgerDevices = [
      {
        vendorId: ledgerUSBVendorId
      }
    ];
    isSupported = () => Promise.resolve(!!(window.navigator && window.navigator.hid));
    getHID = () => {
      const { hid } = navigator;
      if (!hid)
        throw new TransportError("navigator.hid is not supported", "HIDNotSupported");
      return hid;
    };
    TransportWebHID = class _TransportWebHID extends Transport_default {
      constructor(device) {
        super();
        this.channel = Math.floor(Math.random() * 65535);
        this.packetSize = 64;
        this.inputs = [];
        this.read = () => {
          if (this.inputs.length) {
            return Promise.resolve(this.inputs.shift());
          }
          return new Promise((success) => {
            this.inputCallback = success;
          });
        };
        this.onInputReport = (e3) => {
          const buffer2 = Buffer.from(e3.data.buffer);
          if (this.inputCallback) {
            this.inputCallback(buffer2);
            this.inputCallback = null;
          } else {
            this.inputs.push(buffer2);
          }
        };
        this._disconnectEmitted = false;
        this._emitDisconnect = (e3) => {
          if (this._disconnectEmitted)
            return;
          this._disconnectEmitted = true;
          this.emit("disconnect", e3);
        };
        this.exchange = (apdu) => __awaiter6(this, void 0, void 0, function* () {
          const b4 = yield this.exchangeAtomicImpl(() => __awaiter6(this, void 0, void 0, function* () {
            const { channel, packetSize } = this;
            log("apdu", "=> " + apdu.toString("hex"));
            const framing = hid_framing_default(channel, packetSize);
            const blocks = framing.makeBlocks(apdu);
            for (let i5 = 0; i5 < blocks.length; i5++) {
              yield this.device.sendReport(0, blocks[i5]);
            }
            let result;
            let acc;
            while (!(result = framing.getReducedResult(acc))) {
              const buffer2 = yield this.read();
              acc = framing.reduceResponse(acc, buffer2);
            }
            log("apdu", "<= " + result.toString("hex"));
            return result;
          })).catch((e3) => {
            if (e3 && e3.message && e3.message.includes("write")) {
              this._emitDisconnect(e3);
              throw new DisconnectedDeviceDuringOperation(e3.message);
            }
            throw e3;
          });
          return b4;
        });
        this.device = device;
        this.deviceModel = typeof device.productId === "number" ? identifyUSBProductId(device.productId) : void 0;
        device.addEventListener("inputreport", this.onInputReport);
      }
      /**
       * Similar to create() except it will always display the device permission (even if some devices are already accepted).
       */
      static request() {
        return __awaiter6(this, void 0, void 0, function* () {
          const [device] = yield requestLedgerDevices();
          return _TransportWebHID.open(device);
        });
      }
      /**
       * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
       */
      static openConnected() {
        return __awaiter6(this, void 0, void 0, function* () {
          const devices2 = yield getLedgerDevices();
          if (devices2.length === 0)
            return null;
          return _TransportWebHID.open(devices2[0]);
        });
      }
      /**
       * Create a Ledger transport with a HIDDevice
       */
      static open(device) {
        return __awaiter6(this, void 0, void 0, function* () {
          yield device.open();
          const transport = new _TransportWebHID(device);
          const onDisconnect = (e3) => {
            if (device === e3.device) {
              getHID().removeEventListener("disconnect", onDisconnect);
              transport._emitDisconnect(new DisconnectedDevice());
            }
          };
          getHID().addEventListener("disconnect", onDisconnect);
          return transport;
        });
      }
      /**
       * Release the transport device
       */
      close() {
        return __awaiter6(this, void 0, void 0, function* () {
          yield this.exchangeBusyPromise;
          this.device.removeEventListener("inputreport", this.onInputReport);
          yield this.device.close();
        });
      }
      setScrambleKey() {
      }
    };
    TransportWebHID.isSupported = isSupported;
    TransportWebHID.list = getLedgerDevices;
    TransportWebHID.listen = (observer) => {
      let unsubscribed = false;
      getFirstLedgerDevice().then((device) => {
        if (!device) {
          observer.error(new TransportOpenUserCancelled("Access denied to use Ledger device"));
        } else if (!unsubscribed) {
          const deviceModel = typeof device.productId === "number" ? identifyUSBProductId(device.productId) : void 0;
          observer.next({
            type: "add",
            descriptor: device,
            deviceModel
          });
          observer.complete();
        }
      }, (error) => {
        observer.error(new TransportOpenUserCancelled(error.message));
      });
      function unsubscribe() {
        unsubscribed = true;
      }
      return {
        unsubscribe
      };
    };
    TransportWebHID_default = TransportWebHID;
  }
});

// node_modules/@ledgerhq/hw-transport-webusb/lib-es/webusb.js
function requestLedgerDevice() {
  return __awaiter7(this, void 0, void 0, function* () {
    const device = yield navigator.usb.requestDevice({
      filters: ledgerDevices2
    });
    return device;
  });
}
function getLedgerDevices2() {
  return __awaiter7(this, void 0, void 0, function* () {
    const devices2 = yield navigator.usb.getDevices();
    return devices2.filter((d4) => d4.vendorId === ledgerUSBVendorId);
  });
}
function getFirstLedgerDevice2() {
  return __awaiter7(this, void 0, void 0, function* () {
    const existingDevices = yield getLedgerDevices2();
    if (existingDevices.length > 0)
      return existingDevices[0];
    return requestLedgerDevice();
  });
}
var import_dist355, __awaiter7, ledgerDevices2, isSupported2;
var init_webusb = __esm({
  "node_modules/@ledgerhq/hw-transport-webusb/lib-es/webusb.js"() {
    import_dist355 = __toESM(require_dist());
    init_lib_es3();
    __awaiter7 = function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    ledgerDevices2 = [
      {
        vendorId: ledgerUSBVendorId
      }
    ];
    isSupported2 = () => Promise.resolve(!!navigator && !!navigator.usb && typeof navigator.usb.getDevices === "function");
  }
});

// node_modules/@ledgerhq/hw-transport-webusb/lib-es/TransportWebUSB.js
var TransportWebUSB_exports = {};
__export(TransportWebUSB_exports, {
  default: () => TransportWebUSB_default
});
function gracefullyResetDevice(device) {
  return __awaiter8(this, void 0, void 0, function* () {
    try {
      yield device.reset();
    } catch (err2) {
      console.warn(err2);
    }
  });
}
var import_dist356, __awaiter8, configurationValue, endpointNumber, TransportWebUSB, TransportWebUSB_default;
var init_TransportWebUSB = __esm({
  "node_modules/@ledgerhq/hw-transport-webusb/lib-es/TransportWebUSB.js"() {
    import_dist356 = __toESM(require_dist());
    init_Transport();
    init_hid_framing();
    init_lib_es3();
    init_lib_es2();
    init_lib_es();
    init_webusb();
    __awaiter8 = function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    configurationValue = 1;
    endpointNumber = 3;
    TransportWebUSB = class _TransportWebUSB extends Transport_default {
      constructor(device, interfaceNumber) {
        super();
        this.channel = Math.floor(Math.random() * 65535);
        this.packetSize = 64;
        this._disconnectEmitted = false;
        this._emitDisconnect = (e3) => {
          if (this._disconnectEmitted)
            return;
          this._disconnectEmitted = true;
          this.emit("disconnect", e3);
        };
        this.device = device;
        this.interfaceNumber = interfaceNumber;
        this.deviceModel = identifyUSBProductId(device.productId);
      }
      /**
       * Similar to create() except it will always display the device permission (even if some devices are already accepted).
       */
      static request() {
        return __awaiter8(this, void 0, void 0, function* () {
          const device = yield requestLedgerDevice();
          return _TransportWebUSB.open(device);
        });
      }
      /**
       * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
       */
      static openConnected() {
        return __awaiter8(this, void 0, void 0, function* () {
          const devices2 = yield getLedgerDevices2();
          if (devices2.length === 0)
            return null;
          return _TransportWebUSB.open(devices2[0]);
        });
      }
      /**
       * Create a Ledger transport with a USBDevice
       */
      static open(device) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield device.open();
          if (device.configuration === null) {
            yield device.selectConfiguration(configurationValue);
          }
          yield gracefullyResetDevice(device);
          const iface = device.configurations[0].interfaces.find(({ alternates }) => alternates.some((a6) => a6.interfaceClass === 255));
          if (!iface) {
            throw new TransportInterfaceNotAvailable("No WebUSB interface found for your Ledger device. Please upgrade firmware or contact techsupport.");
          }
          const interfaceNumber = iface.interfaceNumber;
          try {
            yield device.claimInterface(interfaceNumber);
          } catch (e3) {
            yield device.close();
            throw new TransportInterfaceNotAvailable(e3.message);
          }
          const transport = new _TransportWebUSB(device, interfaceNumber);
          const onDisconnect = (e3) => {
            if (device === e3.device) {
              navigator.usb.removeEventListener("disconnect", onDisconnect);
              transport._emitDisconnect(new DisconnectedDevice());
            }
          };
          navigator.usb.addEventListener("disconnect", onDisconnect);
          return transport;
        });
      }
      /**
       * Release the transport device
       */
      close() {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.exchangeBusyPromise;
          yield this.device.releaseInterface(this.interfaceNumber);
          yield gracefullyResetDevice(this.device);
          yield this.device.close();
        });
      }
      /**
       * Exchange with the device using APDU protocol.
       * @param apdu
       * @returns a promise of apdu response
       */
      exchange(apdu) {
        return __awaiter8(this, void 0, void 0, function* () {
          const b4 = yield this.exchangeAtomicImpl(() => __awaiter8(this, void 0, void 0, function* () {
            const { channel, packetSize } = this;
            log("apdu", "=> " + apdu.toString("hex"));
            const framing = hid_framing_default(channel, packetSize);
            const blocks = framing.makeBlocks(apdu);
            for (let i5 = 0; i5 < blocks.length; i5++) {
              yield this.device.transferOut(endpointNumber, blocks[i5]);
            }
            let result;
            let acc;
            while (!(result = framing.getReducedResult(acc))) {
              const r6 = yield this.device.transferIn(endpointNumber, packetSize);
              const buffer2 = Buffer.from(r6.data.buffer);
              acc = framing.reduceResponse(acc, buffer2);
            }
            log("apdu", "<= " + result.toString("hex"));
            return result;
          })).catch((e3) => {
            if (e3 && e3.message && e3.message.includes("disconnected")) {
              this._emitDisconnect(e3);
              throw new DisconnectedDeviceDuringOperation(e3.message);
            }
            throw e3;
          });
          return b4;
        });
      }
      setScrambleKey() {
      }
    };
    TransportWebUSB.isSupported = isSupported2;
    TransportWebUSB.list = getLedgerDevices2;
    TransportWebUSB.listen = (observer) => {
      let unsubscribed = false;
      getFirstLedgerDevice2().then((device) => {
        if (!unsubscribed) {
          const deviceModel = identifyUSBProductId(device.productId);
          observer.next({
            type: "add",
            descriptor: device,
            deviceModel
          });
          observer.complete();
        }
      }, (error) => {
        if (window.DOMException && error instanceof window.DOMException && error.code === 18) {
          observer.error(new TransportWebUSBGestureRequired(error.message));
        } else {
          observer.error(new TransportOpenUserCancelled(error.message));
        }
      });
      function unsubscribe() {
        unsubscribed = true;
      }
      return {
        unsubscribe
      };
    };
    TransportWebUSB_default = TransportWebUSB;
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/constants.js
var require_constants5 = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/constants.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SIGNER = exports.TRANSACTION_OPTIONS_TX_GUARDED = exports.TRANSACTION_OPTIONS_TX_HASH_SIGN = exports.TRANSACTION_VERSION_WITH_OPTIONS = exports.LEDGER_TX_GUARDIAN_MIN_VERSION = exports.LEDGER_TX_HASH_SIGN_MIN_VERSION = void 0;
    exports.LEDGER_TX_HASH_SIGN_MIN_VERSION = "1.0.11";
    exports.LEDGER_TX_GUARDIAN_MIN_VERSION = "1.0.22";
    exports.TRANSACTION_VERSION_WITH_OPTIONS = 2;
    exports.TRANSACTION_OPTIONS_TX_HASH_SIGN = 1;
    exports.TRANSACTION_OPTIONS_TX_GUARDED = 2;
    exports.SIGNER = "ledger";
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/errors.js
var require_errors4 = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/errors.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrNotInitialized = void 0;
    var ErrNotInitialized = class extends Error {
      constructor() {
        super("HWApp not initialised, call init() first");
      }
    };
    exports.ErrNotInitialized = ErrNotInitialized;
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/ledgerApp.js
var require_ledgerApp = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/ledgerApp.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CLA = 237;
    var SIGN_RAW_TX_INS = 4;
    var SIGN_HASH_TX_INS = 7;
    var SIGN_MESSAGE_INS = 6;
    var PROVIDE_ESDT_INFO_INS = 8;
    var GET_ADDRESS_AUTH_TOKEN_INS = 9;
    var ACTIVE_SIGNERS = [
      SIGN_RAW_TX_INS,
      SIGN_HASH_TX_INS,
      SIGN_MESSAGE_INS,
      GET_ADDRESS_AUTH_TOKEN_INS
    ];
    var LedgerApp = class {
      constructor(transport, scrambleKey = "eGLD") {
        this.transport = transport;
        transport.decorateAppAPIMethods(this, [
          "getAddress",
          "setAddress",
          "signTransaction",
          "signMessage",
          "getAppConfiguration",
          "getAddressAndSignAuthToken",
          "provideESDTInfo"
        ], scrambleKey);
      }
      getAddress(account, index, display) {
        return __awaiter11(this, void 0, void 0, function* () {
          const ins = 3;
          const p1 = display ? 1 : 0;
          const p22 = 0;
          const data = Buffer.alloc(8);
          data.writeInt32BE(account, 0);
          data.writeUInt32BE(index, 4);
          const response = yield this.transport.send(CLA, ins, p1, p22, data);
          const addressLength = response[0];
          const address = Buffer.from(response.subarray(1, 1 + addressLength)).toString("ascii");
          return { address };
        });
      }
      setAddress(account, index, display) {
        return __awaiter11(this, void 0, void 0, function* () {
          const ins = 5;
          const p1 = display ? 1 : 0;
          const p22 = 0;
          const data = Buffer.alloc(8);
          data.writeInt32BE(account, 0);
          data.writeUInt32BE(index, 4);
          return yield this.transport.send(CLA, ins, p1, p22, data);
        });
      }
      signTransaction(rawTx, usingHash) {
        return __awaiter11(this, void 0, void 0, function* () {
          return usingHash ? this.sign(rawTx, SIGN_HASH_TX_INS) : this.sign(rawTx, SIGN_RAW_TX_INS);
        });
      }
      signMessage(message) {
        return __awaiter11(this, void 0, void 0, function* () {
          return this.sign(message, SIGN_MESSAGE_INS);
        });
      }
      getAddressAndSignAuthToken(account, index, token) {
        return __awaiter11(this, void 0, void 0, function* () {
          const data = Buffer.alloc(12);
          data.writeInt32BE(account, 0);
          data.writeUInt32BE(index, 4);
          data.writeUInt32BE(token.length, 8);
          let buffersArray = [data, token];
          let result = yield this.sign(Buffer.concat(buffersArray), GET_ADDRESS_AUTH_TOKEN_INS);
          let splitRes = result.split("|");
          return {
            address: splitRes[0],
            signature: splitRes[1]
          };
        });
      }
      getAppConfiguration() {
        return __awaiter11(this, void 0, void 0, function* () {
          const response = yield this.transport.send(237, 2, 0, 0);
          let accountIndex = 0;
          let addressIndex = 0;
          if (response.length === 14) {
            accountIndex = this.getIntValueFromBytes(response.slice(6, 10));
            addressIndex = this.getIntValueFromBytes(response.slice(10, 14));
          }
          return {
            contractData: response[0],
            accountIndex,
            addressIndex,
            version: `${response[3]}.${response[4]}.${response[5]}`
          };
        });
      }
      getIntValueFromBytes(buffer2) {
        return buffer2[buffer2.length - 1] | buffer2[buffer2.length - 2] << 8 | buffer2[buffer2.length - 3] << 16 | buffer2[buffer2.length - 4] << 24;
      }
      sign(message, type) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!ACTIVE_SIGNERS.includes(type)) {
            throw new Error(`invalid sign instruction called: ${type}`);
          }
          const apdus = [];
          let offset = 0;
          while (offset !== message.length) {
            const isFirst = offset === 0;
            const maxChunkSize = 150;
            const hasMore = offset + maxChunkSize < message.length;
            const chunkSize = hasMore ? maxChunkSize : message.length - offset;
            const apdu = {
              cla: CLA,
              ins: type,
              p1: isFirst ? 0 : 128,
              p2: 0,
              data: Buffer.alloc(chunkSize)
            };
            message.copy(apdu.data, 0, offset, offset + chunkSize);
            apdus.push(apdu);
            offset += chunkSize;
          }
          let response = Buffer.alloc(0);
          for (let apdu of apdus) {
            response = yield this.transport.send(apdu.cla, apdu.ins, apdu.p1, apdu.p2, apdu.data);
          }
          if (GET_ADDRESS_AUTH_TOKEN_INS === type) {
            return this.handleAuthTokenResponse(response);
          }
          if (response.length !== 67 || response[0] !== 64) {
            throw new Error("invalid signature received from ledger device");
          }
          return response.slice(1, response.length - 2).toString("hex");
        });
      }
      handleAuthTokenResponse(response) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (response.length !== 129 && response[0] !== 126) {
            throw new Error("invalid address and token signature received from ledger device");
          }
          const address = response.slice(1, 63).toString("ascii");
          const signature2 = response.slice(63, response.length - 2).toString("hex");
          return address + "|" + signature2;
        });
      }
      serializeESDTInfo(ticker, id3, decimals, chainId, signature2) {
        const tickerLengthBuffer = Buffer.from([ticker.length]);
        const tickerBuffer = Buffer.from(ticker);
        const idLengthBuffer = Buffer.from([id3.length]);
        const idBuffer = Buffer.from(id3);
        const decimalsBuffer = Buffer.from([decimals]);
        const chainIdLengthBuffer = Buffer.from([chainId.length]);
        const chainIdBuffer = Buffer.from(chainId);
        const signatureBuffer = Buffer.from(signature2, "hex");
        let infoBuffer = [
          tickerLengthBuffer,
          tickerBuffer,
          idLengthBuffer,
          idBuffer,
          decimalsBuffer,
          chainIdLengthBuffer,
          chainIdBuffer,
          signatureBuffer
        ];
        return Buffer.concat(infoBuffer);
      }
      provideESDTInfo(ticker, id3, decimals, chainId, signature2) {
        return __awaiter11(this, void 0, void 0, function* () {
          const data = this.serializeESDTInfo(ticker, id3, decimals, chainId, signature2);
          return yield this.transport.send(CLA, PROVIDE_ESDT_INFO_INS, 0, 0, data);
        });
      }
    };
    exports.default = LedgerApp;
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/transport-type.enum.js
var require_transport_type_enum = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/transport-type.enum.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransportType = void 0;
    var TransportType;
    (function(TransportType2) {
      TransportType2["USB"] = "USB";
      TransportType2["BLE"] = "BLE";
      TransportType2["HID"] = "HID";
    })(TransportType || (exports.TransportType = TransportType = {}));
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/versioning.js
var require_versioning = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/versioning.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compareVersions = compareVersions;
    function compareVersions(versionA, versionB) {
      let i5, diff;
      const regExStrip0 = /(\.0+)+$/;
      const segmentsA = versionA.replace(regExStrip0, "").split(".");
      const segmentsB = versionB.replace(regExStrip0, "").split(".");
      const minVersionLength = Math.min(segmentsA.length, segmentsB.length);
      for (i5 = 0; i5 < minVersionLength; i5++) {
        diff = parseInt(segmentsA[i5], 10) - parseInt(segmentsB[i5], 10);
        if (diff == 0) {
          continue;
        }
        if (diff < 0) {
          return -1;
        }
        return 1;
      }
      return segmentsA.length - segmentsB.length;
    }
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/hwProvider.js
var require_hwProvider = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/hwProvider.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HWProvider = void 0;
    var hw_transport_web_ble_1 = __importDefault2((init_TransportWebBLE(), __toCommonJS(TransportWebBLE_exports)));
    var hw_transport_webhid_1 = __importDefault2((init_TransportWebHID(), __toCommonJS(TransportWebHID_exports)));
    var hw_transport_webusb_1 = __importDefault2((init_TransportWebUSB(), __toCommonJS(TransportWebUSB_exports)));
    var sdk_core_1 = require_out();
    var constants_1 = require_constants5();
    var errors_1 = require_errors4();
    var ledgerApp_1 = __importDefault2(require_ledgerApp());
    var transport_type_enum_1 = require_transport_type_enum();
    var versioning_1 = require_versioning();
    var HWProvider = class {
      constructor(_hwApp) {
        this._hwApp = _hwApp;
        this._addressIndex = 0;
        this._account = { address: "" };
      }
      get addressIndex() {
        return this._addressIndex;
      }
      get hwApp() {
        return this._hwApp;
      }
      get transportType() {
        return this._transportType;
      }
      /**
       * Creates transport and initialises ledger app.
       */
      init(type) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (this.isInitialized()) {
            return true;
          }
          try {
            const { transport, transportType } = yield this.getTransport(type);
            this._transportType = transportType;
            this._transport = transport;
            this._hwApp = new ledgerApp_1.default(this._transport);
            return this.isInitialized();
          } catch (error) {
            console.error("Provider initialization error", error);
            return false;
          }
        });
      }
      getTransport(transportType) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (this._transport && this._transportType) {
            return {
              transport: this._transport,
              transportType: this._transportType
            };
          }
          const isLedgerSupported = yield this.isLedgerTransportSupported();
          if (!isLedgerSupported) {
            throw new Error("Ledger is not supported");
          }
          if (transportType) {
            const transport2 = yield this.getTransportByType(transportType);
            if (!transport2) {
              throw new Error(`Failed to initialize provider type ${transportType}`);
            }
            return {
              transport: transport2,
              transportType
            };
          }
          let transport = yield this.getUSBTransport();
          if (transport) {
            return {
              transport,
              transportType: transport_type_enum_1.TransportType.USB
            };
          }
          transport = yield this.getBLETransport();
          if (transport) {
            return {
              transport,
              transportType: transport_type_enum_1.TransportType.BLE
            };
          }
          transport = yield this.getHIDTransport();
          if (transport) {
            return {
              transport,
              transportType: transport_type_enum_1.TransportType.HID
            };
          }
          throw new Error("Failed to initialize provider");
        });
      }
      getTransportByType(type) {
        return __awaiter11(this, void 0, void 0, function* () {
          switch (type) {
            case transport_type_enum_1.TransportType.USB:
              return this.getUSBTransport();
            case transport_type_enum_1.TransportType.BLE:
              return this.getBLETransport();
            case transport_type_enum_1.TransportType.HID:
              return this.getHIDTransport();
            default:
              throw new Error("Transport type not supported");
          }
        });
      }
      getUSBTransport() {
        return __awaiter11(this, void 0, void 0, function* () {
          try {
            const webUSBSupported = yield this.isWebUSBSupported();
            if (webUSBSupported) {
              console.log("Web USB Transport selected");
              return yield hw_transport_webusb_1.default.create();
            }
          } catch (error) {
            console.error("Failed to create USB transport:", error);
          }
          return null;
        });
      }
      getBLETransport() {
        return __awaiter11(this, void 0, void 0, function* () {
          try {
            const webBLESupported = yield this.isBLESupported();
            if (webBLESupported) {
              console.log("Web BLE Transport selected");
              return yield hw_transport_web_ble_1.default.create();
            }
          } catch (error) {
            console.error("Failed to create BLE transport:", error);
          }
          return null;
        });
      }
      getHIDTransport() {
        return __awaiter11(this, void 0, void 0, function* () {
          try {
            const webHIDSupported = yield this.isWebHIDSupported();
            if (webHIDSupported) {
              console.log("Web HID Transport selected");
              return yield hw_transport_webhid_1.default.create();
            }
          } catch (error) {
            console.error("Failed to create HID transport:", error);
          }
          return null;
        });
      }
      isLedgerTransportSupported() {
        return __awaiter11(this, void 0, void 0, function* () {
          return (yield this.isBLESupported()) || (yield this.isWebUSBSupported()) || (yield this.isWebHIDSupported());
        });
      }
      isBLESupported() {
        return __awaiter11(this, void 0, void 0, function* () {
          return yield hw_transport_web_ble_1.default.isSupported();
        });
      }
      isWebUSBSupported() {
        return __awaiter11(this, void 0, void 0, function* () {
          return yield hw_transport_webusb_1.default.isSupported();
        });
      }
      isWebHIDSupported() {
        return __awaiter11(this, void 0, void 0, function* () {
          return yield hw_transport_webhid_1.default.isSupported();
        });
      }
      /**
       * Returns true if init() was previously called successfully
       */
      isInitialized() {
        return Boolean(this.hwApp && this._transport && this._transportType);
      }
      /**
       * Mocked function, returns isInitialized as an async function
       */
      isConnected() {
        if (!this.isInitialized()) {
          return false;
        }
        if (this._transportType === transport_type_enum_1.TransportType.USB) {
          return this._transport.device.opened;
        }
        if (this._transportType === transport_type_enum_1.TransportType.BLE) {
          return this._transport.device.gatt.connected;
        }
        return true;
      }
      /**
       * Returns the current account if it exists
       */
      getAccount() {
        return this._account;
      }
      /**
       * Sets the current account
       * @param account
       * @returns void
       */
      setAccount(account) {
        this._account = account;
      }
      /**
       * Performs a login request by setting the selected index in Ledger and returning that address
       */
      login() {
        return __awaiter11(this, arguments, void 0, function* (options = { addressIndex: 0 }) {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          yield this.setAddressIndex(options.addressIndex);
          const { address } = yield this.hwApp.getAddress(0, options.addressIndex, true);
          this._account = {
            address
          };
          return this._account;
        });
      }
      setAddressIndex(addressIndex) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          this._addressIndex = addressIndex;
          yield this.hwApp.setAddress(0, addressIndex);
        });
      }
      getAccounts() {
        return __awaiter11(this, arguments, void 0, function* (page = 0, pageSize = 10) {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          const addresses = [];
          const startIndex = page * pageSize;
          for (let index = startIndex; index < startIndex + pageSize; index++) {
            const { address } = yield this.hwApp.getAddress(0, index);
            addresses.push(address);
          }
          return addresses;
        });
      }
      /**
       * Mocks a logout request by returning true
       */
      logout() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          return true;
        });
      }
      /**
       * Fetches current selected ledger address
       */
      getAddress() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          const { address } = yield this.hwApp.getAddress(0, this._addressIndex);
          return address;
        });
      }
      signTransaction(transaction) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          transaction = this.cloneTransaction(transaction);
          const appFeatures = yield this.getAppFeatures();
          const appVersion = appFeatures.appVersion;
          const mustUseVersionWithOptions = appFeatures.mustUseVersionWithOptions;
          const mustUsingHash = appFeatures.mustSignUsingHash;
          const canUseGuardian = appFeatures.canUseGuardian;
          const inputOptions = transaction.getOptions().valueOf();
          const hasGuardianOption = inputOptions & constants_1.TRANSACTION_OPTIONS_TX_GUARDED;
          if (hasGuardianOption && !canUseGuardian) {
            throw new Error(`MultiversX App v${appVersion} does not support guarded transactions.`);
          }
          if (mustUseVersionWithOptions) {
            transaction.setVersion(constants_1.TRANSACTION_VERSION_WITH_OPTIONS);
            console.info("Transaction version: ", transaction.getVersion().valueOf());
          }
          if (mustUsingHash) {
            transaction.setOptions(inputOptions | constants_1.TRANSACTION_OPTIONS_TX_HASH_SIGN);
            console.info("Transaction options: ", transaction.getOptions().valueOf());
          }
          const serializedTransaction = transaction.serializeForSigning();
          const serializedTransactionBuffer = Buffer.from(serializedTransaction);
          const signature2 = yield this.hwApp.signTransaction(serializedTransactionBuffer, mustUsingHash);
          transaction.applySignature(Buffer.from(signature2, "hex"));
          return transaction;
        });
      }
      cloneTransaction(transaction) {
        return sdk_core_1.Transaction.fromPlainObject(transaction.toPlainObject());
      }
      signTransactions(transactions) {
        return __awaiter11(this, void 0, void 0, function* () {
          const signedTransactions = [];
          for (const transaction of transactions) {
            const signedTransaction = yield this.signTransaction(transaction);
            signedTransactions.push(signedTransaction);
          }
          return signedTransactions;
        });
      }
      signMessage(messageToSign) {
        return __awaiter11(this, void 0, void 0, function* () {
          var _a2;
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          const message = new sdk_core_1.Message({
            data: Buffer.from(messageToSign.data),
            address: (_a2 = messageToSign.address) !== null && _a2 !== void 0 ? _a2 : sdk_core_1.Address.fromBech32(this._account.address),
            signer: constants_1.SIGNER,
            version: messageToSign.version
          });
          const messageSize = this.getMessageSize(messageToSign);
          const serializedMessageBuffer = Buffer.concat([
            messageSize,
            Buffer.from(messageToSign.data)
          ]);
          const signature2 = yield this.hwApp.signMessage(serializedMessageBuffer);
          message.signature = Buffer.from(signature2, "hex");
          return message;
        });
      }
      getMessageSize(message) {
        const messageSize = Buffer.alloc(4);
        messageSize.writeUInt32BE(message.data.length, 0);
        return messageSize;
      }
      tokenLogin(options) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          let addressIndex = options.addressIndex || 0;
          yield this.setAddressIndex(addressIndex);
          const { signature: signature2, address } = yield this.hwApp.getAddressAndSignAuthToken(0, addressIndex, options.token);
          return {
            signature: Buffer.from(signature2, "hex"),
            address
          };
        });
      }
      getAppFeatures() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.hwApp) {
            throw new errors_1.ErrNotInitialized();
          }
          const config2 = yield this.hwApp.getAppConfiguration();
          const appVersion = config2.version;
          const mustSignUsingHash = (0, versioning_1.compareVersions)(appVersion, constants_1.LEDGER_TX_HASH_SIGN_MIN_VERSION) >= 0;
          const canUseGuardian = (0, versioning_1.compareVersions)(appVersion, constants_1.LEDGER_TX_GUARDIAN_MIN_VERSION) >= 0;
          return {
            appVersion,
            mustUseVersionWithOptions: mustSignUsingHash,
            mustSignUsingHash,
            canUseGuardian
          };
        });
      }
    };
    exports.HWProvider = HWProvider;
  }
});

// node_modules/@multiversx/sdk-hw-provider/out/index.js
var require_out6 = __commonJS({
  "node_modules/@multiversx/sdk-hw-provider/out/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m5, exports2) {
      for (var p5 in m5) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding2(exports2, m5, p5);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    require_globals();
    __exportStar2(require_hwProvider(), exports);
  }
});

// node_modules/@multiversx/sdk-opera-provider/out/errors.js
var require_errors5 = __commonJS({
  "node_modules/@multiversx/sdk-opera-provider/out/errors.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrAccountNotConnected = exports.ErrCannotSignSingleTransaction = exports.Err = void 0;
    var Err2 = class extends Error {
      constructor(message, inner) {
        super(message);
        this.inner = void 0;
        this.inner = inner;
      }
    };
    exports.Err = Err2;
    var ErrCannotSignSingleTransaction2 = class extends Err2 {
      constructor() {
        super("Cannot sign single transaction.");
      }
    };
    exports.ErrCannotSignSingleTransaction = ErrCannotSignSingleTransaction2;
    var ErrAccountNotConnected2 = class extends Err2 {
      constructor() {
        super("Account is not connected.");
      }
    };
    exports.ErrAccountNotConnected = ErrAccountNotConnected2;
  }
});

// node_modules/@multiversx/sdk-opera-provider/out/operaProvider.js
var require_operaProvider = __commonJS({
  "node_modules/@multiversx/sdk-opera-provider/out/operaProvider.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __awaiter11 = exports && exports.__awaiter || function(thisArg, _arguments, P5, generator) {
      function adopt(value) {
        return value instanceof P5 ? value : new P5(function(resolve) {
          resolve(value);
        });
      }
      return new (P5 || (P5 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperaProvider = void 0;
    var errors_1 = require_errors5();
    var OperaProvider = class _OperaProvider {
      constructor() {
        this.account = { address: "" };
        this.initialized = false;
        if (_OperaProvider._instance) {
          throw new Error("Error: Instantiation failed: Use OperaProvider.getInstance() instead of new.");
        }
        _OperaProvider._instance = this;
      }
      static getInstance() {
        return _OperaProvider._instance;
      }
      setAddress(address) {
        this.account.address = address;
        return _OperaProvider._instance;
      }
      init() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (window && window.elrond && window.isOpera && !this.initialized) {
            try {
              this.initialized = yield window.elrond.init();
            } catch (error) {
              this.initialized = false;
            }
          }
          return this.initialized;
        });
      }
      login({ token } = {}) {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.initialized) {
            throw new Error("Opera provider is not initialised, call init() first");
          }
          try {
            this.account.address = yield window.elrond.login(token);
          } catch (error) {
            throw error;
          }
          return this.account.address;
        });
      }
      logout() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.initialized) {
            throw new Error("Opera provider is not initialised, call init() first");
          }
          try {
            yield window.elrond.logout();
            this.disconnect();
          } catch (error) {
            console.warn("Opera logout operation failed!", error);
          }
          return true;
        });
      }
      disconnect() {
        this.account = { address: "" };
      }
      getAddress() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (!this.initialized) {
            throw new Error("Opera provider is not initialised, call init() first");
          }
          return this.account ? this.account.address : "";
        });
      }
      isInitialized() {
        return this.initialized;
      }
      isConnected() {
        return Boolean(this.account.address);
      }
      signTransaction(transaction) {
        return __awaiter11(this, void 0, void 0, function* () {
          const signedTransactions = yield this.signTransactions([transaction]);
          if (signedTransactions.length != 1) {
            throw new errors_1.ErrCannotSignSingleTransaction();
          }
          return signedTransactions[0];
        });
      }
      signTransactions(transactions) {
        return __awaiter11(this, void 0, void 0, function* () {
          try {
            this.ensureConnected();
            return yield window.elrond.signTransactions(transactions);
          } catch (error) {
            throw error;
          }
        });
      }
      signMessage(message) {
        return __awaiter11(this, void 0, void 0, function* () {
          try {
            this.ensureConnected();
            return yield window.elrond.signMessage(message);
          } catch (error) {
            throw error;
          }
        });
      }
      cancelAction() {
        return false;
      }
      ensureConnected() {
        if (!this.account.address) {
          throw new errors_1.ErrAccountNotConnected();
        }
      }
    };
    exports.OperaProvider = OperaProvider;
    OperaProvider._instance = new OperaProvider();
  }
});

// node_modules/@multiversx/sdk-opera-provider/out/index.js
var require_out7 = __commonJS({
  "node_modules/@multiversx/sdk-opera-provider/out/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      Object.defineProperty(o4, k22, { enumerable: true, get: function() {
        return m5[k5];
      } });
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m5, exports2) {
      for (var p5 in m5) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding2(exports2, m5, p5);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_operaProvider(), exports);
  }
});

// node_modules/@multiversx/sdk-passkey-provider/node_modules/@noble/ed25519/index.js
var ed25519_exports = {};
__export(ed25519_exports, {
  CURVE: () => CURVE,
  ExtendedPoint: () => Point2,
  etc: () => etc,
  getPublicKey: () => getPublicKey,
  getPublicKeyAsync: () => getPublicKeyAsync,
  sign: () => sign4,
  signAsync: () => signAsync,
  utils: () => utils,
  verify: () => verify4,
  verifyAsync: () => verifyAsync
});
function hashFinish(asynchronous, res) {
  if (asynchronous)
    return sha512a(res.hashable).then(res.finish);
  return res.finish(sha512s(res.hashable));
}
var import_dist362, P3, N11, Gx, Gy, CURVE, err, str, isu8, au8, u8n, toU8, mod, isPoint, Point2, G2, I4, padh, b2h, h2b, n2b_32LE, b2n_LE, concatB, invert, pow2, pow_2_252_3, RM1, uvRatio, modL_LE, _shaS, sha512a, sha512s, hash2extK, getExtendedPublicKeyAsync, getExtendedPublicKey, getPublicKeyAsync, getPublicKey, _sign, signAsync, sign4, dvo, _verify, verifyAsync, verify4, cr3, etc, utils, W3, precompute2, Gpows, wNAF;
var init_ed25519 = __esm({
  "node_modules/@multiversx/sdk-passkey-provider/node_modules/@noble/ed25519/index.js"() {
    import_dist362 = __toESM(require_dist());
    P3 = 2n ** 255n - 19n;
    N11 = 2n ** 252n + 27742317777372353535851937790883648493n;
    Gx = 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an;
    Gy = 0x6666666666666666666666666666666666666666666666666666666666666658n;
    CURVE = {
      a: -1n,
      // where a=-1, d = -(121665/121666) == -(121665 * inv(121666)) mod P
      d: 37095705934669439343138083508754565189542113879843219016388785533085940283555n,
      p: P3,
      n: N11,
      h: 8,
      Gx,
      Gy
      // field prime, curve (group) order, cofactor
    };
    err = (m5 = "") => {
      throw new Error(m5);
    };
    str = (s4) => typeof s4 === "string";
    isu8 = (a6) => a6 instanceof Uint8Array || a6 != null && typeof a6 === "object" && a6.constructor.name === "Uint8Array";
    au8 = (a6, l6) => (
      // is Uint8Array (of specific length)
      !isu8(a6) || typeof l6 === "number" && l6 > 0 && a6.length !== l6 ? err("Uint8Array of valid length expected") : a6
    );
    u8n = (data) => new Uint8Array(data);
    toU8 = (a6, len) => au8(str(a6) ? h2b(a6) : u8n(au8(a6)), len);
    mod = (a6, b4 = P3) => {
      let r6 = a6 % b4;
      return r6 >= 0n ? r6 : b4 + r6;
    };
    isPoint = (p5) => p5 instanceof Point2 ? p5 : err("Point expected");
    Point2 = class _Point {
      constructor(ex, ey, ez, et3) {
        this.ex = ex;
        this.ey = ey;
        this.ez = ez;
        this.et = et3;
      }
      static fromAffine(p5) {
        return new _Point(p5.x, p5.y, 1n, mod(p5.x * p5.y));
      }
      static fromHex(hex, zip215 = false) {
        const { d: d4 } = CURVE;
        hex = toU8(hex, 32);
        const normed = hex.slice();
        const lastByte = hex[31];
        normed[31] = lastByte & ~128;
        const y5 = b2n_LE(normed);
        if (zip215 && !(0n <= y5 && y5 < 2n ** 256n))
          err("bad y coord 1");
        if (!zip215 && !(0n <= y5 && y5 < P3))
          err("bad y coord 2");
        const y22 = mod(y5 * y5);
        const u2 = mod(y22 - 1n);
        const v8 = mod(d4 * y22 + 1n);
        let { isValid, value: x6 } = uvRatio(u2, v8);
        if (!isValid)
          err("bad y coordinate 3");
        const isXOdd = (x6 & 1n) === 1n;
        const isLastByteOdd = (lastByte & 128) !== 0;
        if (!zip215 && x6 === 0n && isLastByteOdd)
          err("bad y coord 3");
        if (isLastByteOdd !== isXOdd)
          x6 = mod(-x6);
        return new _Point(x6, y5, 1n, mod(x6 * y5));
      }
      get x() {
        return this.toAffine().x;
      }
      // .x, .y will call expensive toAffine.
      get y() {
        return this.toAffine().y;
      }
      // Should be used with care.
      equals(other) {
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const { ex: X22, ey: Y2, ez: Z22 } = isPoint(other);
        const X1Z2 = mod(X1 * Z22), X2Z1 = mod(X22 * Z1);
        const Y1Z2 = mod(Y1 * Z22), Y2Z1 = mod(Y2 * Z1);
        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
      }
      is0() {
        return this.equals(I4);
      }
      negate() {
        return new _Point(mod(-this.ex), this.ey, this.ez, mod(-this.et));
      }
      double() {
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const { a: a6 } = CURVE;
        const A5 = mod(X1 * X1);
        const B4 = mod(Y1 * Y1);
        const C6 = mod(2n * mod(Z1 * Z1));
        const D4 = mod(a6 * A5);
        const x1y1 = X1 + Y1;
        const E5 = mod(mod(x1y1 * x1y1) - A5 - B4);
        const G3 = D4 + B4;
        const F3 = G3 - C6;
        const H4 = D4 - B4;
        const X3 = mod(E5 * F3);
        const Y3 = mod(G3 * H4);
        const T32 = mod(E5 * H4);
        const Z3 = mod(F3 * G3);
        return new _Point(X3, Y3, Z3, T32);
      }
      add(other) {
        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
        const { ex: X22, ey: Y2, ez: Z22, et: T22 } = isPoint(other);
        const { a: a6, d: d4 } = CURVE;
        const A5 = mod(X1 * X22);
        const B4 = mod(Y1 * Y2);
        const C6 = mod(T1 * d4 * T22);
        const D4 = mod(Z1 * Z22);
        const E5 = mod((X1 + Y1) * (X22 + Y2) - A5 - B4);
        const F3 = mod(D4 - C6);
        const G3 = mod(D4 + C6);
        const H4 = mod(B4 - a6 * A5);
        const X3 = mod(E5 * F3);
        const Y3 = mod(G3 * H4);
        const T32 = mod(E5 * H4);
        const Z3 = mod(F3 * G3);
        return new _Point(X3, Y3, Z3, T32);
      }
      mul(n7, safe = true) {
        if (n7 === 0n)
          return safe === true ? err("cannot multiply by 0") : I4;
        if (!(typeof n7 === "bigint" && 0n < n7 && n7 < N11))
          err("invalid scalar, must be < L");
        if (!safe && this.is0() || n7 === 1n)
          return this;
        if (this.equals(G2))
          return wNAF(n7).p;
        let p5 = I4, f3 = G2;
        for (let d4 = this; n7 > 0n; d4 = d4.double(), n7 >>= 1n) {
          if (n7 & 1n)
            p5 = p5.add(d4);
          else if (safe)
            f3 = f3.add(d4);
        }
        return p5;
      }
      multiply(scalar) {
        return this.mul(scalar);
      }
      // Aliases for compatibilty
      clearCofactor() {
        return this.mul(BigInt(CURVE.h), false);
      }
      // multiply by cofactor
      isSmallOrder() {
        return this.clearCofactor().is0();
      }
      // check if P is small order
      isTorsionFree() {
        let p5 = this.mul(N11 / 2n, false).double();
        if (N11 % 2n)
          p5 = p5.add(this);
        return p5.is0();
      }
      toAffine() {
        const { ex: x6, ey: y5, ez: z6 } = this;
        if (this.equals(I4))
          return { x: 0n, y: 1n };
        const iz = invert(z6);
        if (mod(z6 * iz) !== 1n)
          err("invalid inverse");
        return { x: mod(x6 * iz), y: mod(y5 * iz) };
      }
      toRawBytes() {
        const { x: x6, y: y5 } = this.toAffine();
        const b4 = n2b_32LE(y5);
        b4[31] |= x6 & 1n ? 128 : 0;
        return b4;
      }
      toHex() {
        return b2h(this.toRawBytes());
      }
      // encode to hex string
    };
    Point2.BASE = new Point2(Gx, Gy, 1n, mod(Gx * Gy));
    Point2.ZERO = new Point2(0n, 1n, 1n, 0n);
    ({ BASE: G2, ZERO: I4 } = Point2);
    padh = (num, pad) => num.toString(16).padStart(pad, "0");
    b2h = (b4) => Array.from(b4).map((e3) => padh(e3, 2)).join("");
    h2b = (hex) => {
      const l6 = hex.length;
      if (!str(hex) || l6 % 2)
        err("hex invalid 1");
      const arr = u8n(l6 / 2);
      for (let i5 = 0; i5 < arr.length; i5++) {
        const j3 = i5 * 2;
        const h6 = hex.slice(j3, j3 + 2);
        const b4 = Number.parseInt(h6, 16);
        if (Number.isNaN(b4) || b4 < 0)
          err("hex invalid 2");
        arr[i5] = b4;
      }
      return arr;
    };
    n2b_32LE = (num) => h2b(padh(num, 32 * 2)).reverse();
    b2n_LE = (b4) => BigInt("0x" + b2h(u8n(au8(b4)).reverse()));
    concatB = (...arrs) => {
      const r6 = u8n(arrs.reduce((sum, a6) => sum + au8(a6).length, 0));
      let pad = 0;
      arrs.forEach((a6) => {
        r6.set(a6, pad);
        pad += a6.length;
      });
      return r6;
    };
    invert = (num, md = P3) => {
      if (num === 0n || md <= 0n)
        err("no inverse n=" + num + " mod=" + md);
      let a6 = mod(num, md), b4 = md, x6 = 0n, y5 = 1n, u2 = 1n, v8 = 0n;
      while (a6 !== 0n) {
        const q2 = b4 / a6, r6 = b4 % a6;
        const m5 = x6 - u2 * q2, n7 = y5 - v8 * q2;
        b4 = a6, a6 = r6, x6 = u2, y5 = v8, u2 = m5, v8 = n7;
      }
      return b4 === 1n ? mod(x6, md) : err("no inverse");
    };
    pow2 = (x6, power) => {
      let r6 = x6;
      while (power-- > 0n) {
        r6 *= r6;
        r6 %= P3;
      }
      return r6;
    };
    pow_2_252_3 = (x6) => {
      const x22 = x6 * x6 % P3;
      const b22 = x22 * x6 % P3;
      const b4 = pow2(b22, 2n) * b22 % P3;
      const b5 = pow2(b4, 1n) * x6 % P3;
      const b10 = pow2(b5, 5n) * b5 % P3;
      const b20 = pow2(b10, 10n) * b10 % P3;
      const b40 = pow2(b20, 20n) * b20 % P3;
      const b80 = pow2(b40, 40n) * b40 % P3;
      const b160 = pow2(b80, 80n) * b80 % P3;
      const b240 = pow2(b160, 80n) * b80 % P3;
      const b250 = pow2(b240, 10n) * b10 % P3;
      const pow_p_5_8 = pow2(b250, 2n) * x6 % P3;
      return { pow_p_5_8, b2: b22 };
    };
    RM1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n;
    uvRatio = (u2, v8) => {
      const v32 = mod(v8 * v8 * v8);
      const v72 = mod(v32 * v32 * v8);
      const pow = pow_2_252_3(u2 * v72).pow_p_5_8;
      let x6 = mod(u2 * v32 * pow);
      const vx2 = mod(v8 * x6 * x6);
      const root1 = x6;
      const root2 = mod(x6 * RM1);
      const useRoot1 = vx2 === u2;
      const useRoot2 = vx2 === mod(-u2);
      const noRoot = vx2 === mod(-u2 * RM1);
      if (useRoot1)
        x6 = root1;
      if (useRoot2 || noRoot)
        x6 = root2;
      if ((mod(x6) & 1n) === 1n)
        x6 = mod(-x6);
      return { isValid: useRoot1 || useRoot2, value: x6 };
    };
    modL_LE = (hash2) => mod(b2n_LE(hash2), N11);
    sha512a = (...m5) => etc.sha512Async(...m5);
    sha512s = (...m5) => (
      // Sync SHA512, not set by default
      typeof _shaS === "function" ? _shaS(...m5) : err("etc.sha512Sync not set")
    );
    hash2extK = (hashed) => {
      const head = hashed.slice(0, 32);
      head[0] &= 248;
      head[31] &= 127;
      head[31] |= 64;
      const prefix = hashed.slice(32, 64);
      const scalar = modL_LE(head);
      const point3 = G2.mul(scalar);
      const pointBytes = point3.toRawBytes();
      return { head, prefix, scalar, point: point3, pointBytes };
    };
    getExtendedPublicKeyAsync = (priv) => sha512a(toU8(priv, 32)).then(hash2extK);
    getExtendedPublicKey = (priv) => hash2extK(sha512s(toU8(priv, 32)));
    getPublicKeyAsync = (priv) => getExtendedPublicKeyAsync(priv).then((p5) => p5.pointBytes);
    getPublicKey = (priv) => getExtendedPublicKey(priv).pointBytes;
    _sign = (e3, rBytes, msg) => {
      const { pointBytes: P5, scalar: s4 } = e3;
      const r6 = modL_LE(rBytes);
      const R3 = G2.mul(r6).toRawBytes();
      const hashable = concatB(R3, P5, msg);
      const finish = (hashed) => {
        const S4 = mod(r6 + modL_LE(hashed) * s4, N11);
        return au8(concatB(R3, n2b_32LE(S4)), 64);
      };
      return { hashable, finish };
    };
    signAsync = async (msg, privKey) => {
      const m5 = toU8(msg);
      const e3 = await getExtendedPublicKeyAsync(privKey);
      const rBytes = await sha512a(e3.prefix, m5);
      return hashFinish(true, _sign(e3, rBytes, m5));
    };
    sign4 = (msg, privKey) => {
      const m5 = toU8(msg);
      const e3 = getExtendedPublicKey(privKey);
      const rBytes = sha512s(e3.prefix, m5);
      return hashFinish(false, _sign(e3, rBytes, m5));
    };
    dvo = { zip215: true };
    _verify = (sig, msg, pub, opts = dvo) => {
      msg = toU8(msg);
      sig = toU8(sig, 64);
      const { zip215 } = opts;
      let A5, R3, s4, SB, hashable = new Uint8Array();
      try {
        A5 = Point2.fromHex(pub, zip215);
        R3 = Point2.fromHex(sig.slice(0, 32), zip215);
        s4 = b2n_LE(sig.slice(32, 64));
        SB = G2.mul(s4, false);
        hashable = concatB(R3.toRawBytes(), A5.toRawBytes(), msg);
      } catch (error) {
      }
      const finish = (hashed) => {
        if (SB == null)
          return false;
        if (!zip215 && A5.isSmallOrder())
          return false;
        const k5 = modL_LE(hashed);
        const RkA = R3.add(A5.mul(k5, false));
        return RkA.add(SB.negate()).clearCofactor().is0();
      };
      return { hashable, finish };
    };
    verifyAsync = async (s4, m5, p5, opts = dvo) => hashFinish(true, _verify(s4, m5, p5, opts));
    verify4 = (s4, m5, p5, opts = dvo) => hashFinish(false, _verify(s4, m5, p5, opts));
    cr3 = () => (
      // We support: 1) browsers 2) node.js 19+
      typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0
    );
    etc = {
      bytesToHex: b2h,
      hexToBytes: h2b,
      concatBytes: concatB,
      mod,
      invert,
      randomBytes: (len = 32) => {
        const crypto2 = cr3();
        if (!crypto2 || !crypto2.getRandomValues)
          err("crypto.getRandomValues must be defined");
        return crypto2.getRandomValues(u8n(len));
      },
      sha512Async: async (...messages) => {
        const crypto2 = cr3();
        if (!crypto2 || !crypto2.subtle)
          err("crypto.subtle or etc.sha512Async must be defined");
        const m5 = concatB(...messages);
        return u8n(await crypto2.subtle.digest("SHA-512", m5.buffer));
      },
      sha512Sync: void 0
      // Actual logic below
    };
    Object.defineProperties(etc, { sha512Sync: {
      configurable: false,
      get() {
        return _shaS;
      },
      set(f3) {
        if (!_shaS)
          _shaS = f3;
      }
    } });
    utils = {
      getExtendedPublicKeyAsync,
      getExtendedPublicKey,
      randomPrivateKey: () => etc.randomBytes(32),
      precompute(w4 = 8, p5 = G2) {
        p5.multiply(3n);
        w4;
        return p5;
      }
      // no-op
    };
    W3 = 8;
    precompute2 = () => {
      const points = [];
      const windows = 256 / W3 + 1;
      let p5 = G2, b4 = p5;
      for (let w4 = 0; w4 < windows; w4++) {
        b4 = p5;
        points.push(b4);
        for (let i5 = 1; i5 < 2 ** (W3 - 1); i5++) {
          b4 = b4.add(p5);
          points.push(b4);
        }
        p5 = b4.double();
      }
      return points;
    };
    Gpows = void 0;
    wNAF = (n7) => {
      const comp = Gpows || (Gpows = precompute2());
      const neg3 = (cnd, p6) => {
        let n8 = p6.negate();
        return cnd ? n8 : p6;
      };
      let p5 = I4, f3 = G2;
      const windows = 1 + 256 / W3;
      const wsize = 2 ** (W3 - 1);
      const mask = BigInt(2 ** W3 - 1);
      const maxNum = 2 ** W3;
      const shiftBy = BigInt(W3);
      for (let w4 = 0; w4 < windows; w4++) {
        const off = w4 * wsize;
        let wbits = Number(n7 & mask);
        n7 >>= shiftBy;
        if (wbits > wsize) {
          wbits -= maxNum;
          n7 += 1n;
        }
        const off1 = off, off2 = off + Math.abs(wbits) - 1;
        const cnd1 = w4 % 2 !== 0, cnd2 = wbits < 0;
        if (wbits === 0) {
          f3 = f3.add(neg3(cnd1, comp[off1]));
        } else {
          p5 = p5.add(neg3(cnd2, comp[off2]));
        }
      }
      return { p: p5, f: f3 };
    };
  }
});

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
  "node_modules/@noble/hashes/_assert.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = exports.isBytes = void 0;
    function number(n7) {
      if (!Number.isSafeInteger(n7) || n7 < 0)
        throw new Error(`positive integer expected, not ${n7}`);
    }
    exports.number = number;
    function bool(b4) {
      if (typeof b4 !== "boolean")
        throw new Error(`boolean expected, not ${b4}`);
    }
    exports.bool = bool;
    function isBytes2(a6) {
      return a6 instanceof Uint8Array || a6 != null && typeof a6 === "object" && a6.constructor.name === "Uint8Array";
    }
    exports.isBytes = isBytes2;
    function bytes(b4, ...lengths) {
      if (!isBytes2(b4))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b4.length))
        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b4.length}`);
    }
    exports.bytes = bytes;
    function hash2(h6) {
      if (typeof h6 !== "function" || typeof h6.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(h6.outputLen);
      number(h6.blockLen);
    }
    exports.hash = hash2;
    function exists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports.exists = exists;
    function output(out, instance) {
      bytes(out);
      const min2 = instance.outputLen;
      if (out.length < min2) {
        throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
      }
    }
    exports.output = output;
    var assert2 = { number, bool, bytes, hash: hash2, exists, output };
    exports.default = assert2;
  }
});

// node_modules/@noble/hashes/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils3 = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;
    var crypto_1 = require_crypto2();
    var _assert_js_1 = require_assert();
    function isBytes2(a6) {
      return a6 instanceof Uint8Array || a6 != null && typeof a6 === "object" && a6.constructor.name === "Uint8Array";
    }
    exports.isBytes = isBytes2;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u8;
    var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u32;
    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView;
    var rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr;
    var rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
    exports.rotl = rotl;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    exports.byteSwap = byteSwap;
    exports.byteSwapIfBE = exports.isLE ? (n7) => n7 : (n7) => (0, exports.byteSwap)(n7);
    function byteSwap32(arr) {
      for (let i5 = 0; i5 < arr.length; i5++) {
        arr[i5] = (0, exports.byteSwap)(arr[i5]);
      }
    }
    exports.byteSwap32 = byteSwap32;
    var hexes = Array.from({ length: 256 }, (_5, i5) => i5.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      (0, _assert_js_1.bytes)(bytes);
      let hex = "";
      for (let i5 = 0; i5 < bytes.length; i5++) {
        hex += hexes[bytes[i5]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex;
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai2 = 0, hi2 = 0; ai2 < al; ai2++, hi2 += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi2));
        const n22 = asciiToBase16(hex.charCodeAt(hi2 + 1));
        if (n1 === void 0 || n22 === void 0) {
          const char = hex[hi2] + hex[hi2 + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi2);
        }
        array[ai2] = n1 * 16 + n22;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes;
    var nextTick = async () => {
    };
    exports.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i5 = 0; i5 < iters; i5++) {
        cb(i5);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    exports.asyncLoop = asyncLoop;
    function utf8ToBytes(str2) {
      if (typeof str2 !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
      return new Uint8Array(new TextEncoder().encode(str2));
    }
    exports.utf8ToBytes = utf8ToBytes;
    function toBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      (0, _assert_js_1.bytes)(data);
      return data;
    }
    exports.toBytes = toBytes;
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i5 = 0; i5 < arrays.length; i5++) {
        const a6 = arrays[i5];
        (0, _assert_js_1.bytes)(a6);
        sum += a6.length;
      }
      const res = new Uint8Array(sum);
      for (let i5 = 0, pad = 0; i5 < arrays.length; i5++) {
        const a6 = arrays[i5];
        res.set(a6, pad);
        pad += a6.length;
      }
      return res;
    }
    exports.concatBytes = concatBytes;
    var Hash = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports.Hash = Hash;
    var toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes2;
  }
});

// node_modules/@noble/hashes/_md.js
var require_md = __commonJS({
  "node_modules/@noble/hashes/_md.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashMD = exports.Maj = exports.Chi = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils3();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h6 = isLE ? 4 : 0;
      const l6 = isLE ? 0 : 4;
      view.setUint32(byteOffset + h6, wh, isLE);
      view.setUint32(byteOffset + l6, wl, isLE);
    }
    var Chi = (a6, b4, c5) => a6 & b4 ^ ~a6 & c5;
    exports.Chi = Chi;
    var Maj = (a6, b4, c5) => a6 & b4 ^ a6 & c5 ^ b4 & c5;
    exports.Maj = Maj;
    var HashMD = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer: buffer2, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take2 = Math.min(blockLen - this.pos, len - pos);
          if (take2 === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer2.set(data.subarray(pos, pos + take2), this.pos);
          this.pos += take2;
          pos += take2;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer: buffer2, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer2[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i5 = pos; i5 < blockLen; i5++)
          buffer2[i5] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i5 = 0; i5 < outLen; i5++)
          oview.setUint32(4 * i5, state[i5], isLE);
      }
      digest() {
        const { buffer: buffer2, outputLen } = this;
        this.digestInto(buffer2);
        const res = buffer2.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to2) {
        to2 || (to2 = new this.constructor());
        to2.set(...this.get());
        const { blockLen, buffer: buffer2, length: length2, finished, destroyed, pos } = this;
        to2.length = length2;
        to2.pos = pos;
        to2.finished = finished;
        to2.destroyed = destroyed;
        if (length2 % blockLen)
          to2.buffer.set(buffer2);
        return to2;
      }
    };
    exports.HashMD = HashMD;
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
    var U32_MASK64 = BigInt(2 ** 32 - 1);
    var _32n = BigInt(32);
    function fromBig(n7, le2 = false) {
      if (le2)
        return { h: Number(n7 & U32_MASK64), l: Number(n7 >> _32n & U32_MASK64) };
      return { h: Number(n7 >> _32n & U32_MASK64) | 0, l: Number(n7 & U32_MASK64) | 0 };
    }
    exports.fromBig = fromBig;
    function split(lst, le2 = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i5 = 0; i5 < lst.length; i5++) {
        const { h: h6, l: l6 } = fromBig(lst[i5], le2);
        [Ah[i5], Al[i5]] = [h6, l6];
      }
      return [Ah, Al];
    }
    exports.split = split;
    var toBig = (h6, l6) => BigInt(h6 >>> 0) << _32n | BigInt(l6 >>> 0);
    exports.toBig = toBig;
    var shrSH = (h6, _l, s4) => h6 >>> s4;
    exports.shrSH = shrSH;
    var shrSL = (h6, l6, s4) => h6 << 32 - s4 | l6 >>> s4;
    exports.shrSL = shrSL;
    var rotrSH = (h6, l6, s4) => h6 >>> s4 | l6 << 32 - s4;
    exports.rotrSH = rotrSH;
    var rotrSL = (h6, l6, s4) => h6 << 32 - s4 | l6 >>> s4;
    exports.rotrSL = rotrSL;
    var rotrBH = (h6, l6, s4) => h6 << 64 - s4 | l6 >>> s4 - 32;
    exports.rotrBH = rotrBH;
    var rotrBL = (h6, l6, s4) => h6 >>> s4 - 32 | l6 << 64 - s4;
    exports.rotrBL = rotrBL;
    var rotr32H = (_h, l6) => l6;
    exports.rotr32H = rotr32H;
    var rotr32L = (h6, _l) => h6;
    exports.rotr32L = rotr32L;
    var rotlSH = (h6, l6, s4) => h6 << s4 | l6 >>> 32 - s4;
    exports.rotlSH = rotlSH;
    var rotlSL = (h6, l6, s4) => l6 << s4 | h6 >>> 32 - s4;
    exports.rotlSL = rotlSL;
    var rotlBH = (h6, l6, s4) => l6 << s4 - 32 | h6 >>> 64 - s4;
    exports.rotlBH = rotlBH;
    var rotlBL = (h6, l6, s4) => h6 << s4 - 32 | l6 >>> 64 - s4;
    exports.rotlBL = rotlBL;
    function add3(Ah, Al, Bh, Bl) {
      const l6 = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l6 / 2 ** 32 | 0) | 0, l: l6 | 0 };
    }
    exports.add = add3;
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add: add3,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports.default = u64;
  }
});

// node_modules/@noble/hashes/sha512.js
var require_sha5122 = __commonJS({
  "node_modules/@noble/hashes/sha512.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
    var _md_js_1 = require_md();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils3();
    var [SHA512_Kh, SHA512_Kl] = (() => _u64_js_1.default.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n7) => BigInt(n7))))();
    var SHA512_W_H = new Uint32Array(80);
    var SHA512_W_L = new Uint32Array(80);
    var SHA512 = class extends _md_js_1.HashMD {
      constructor() {
        super(128, 64, 16, false);
        this.Ah = 1779033703 | 0;
        this.Al = 4089235720 | 0;
        this.Bh = 3144134277 | 0;
        this.Bl = 2227873595 | 0;
        this.Ch = 1013904242 | 0;
        this.Cl = 4271175723 | 0;
        this.Dh = 2773480762 | 0;
        this.Dl = 1595750129 | 0;
        this.Eh = 1359893119 | 0;
        this.El = 2917565137 | 0;
        this.Fh = 2600822924 | 0;
        this.Fl = 725511199 | 0;
        this.Gh = 528734635 | 0;
        this.Gl = 4215389547 | 0;
        this.Hh = 1541459225 | 0;
        this.Hl = 327033209 | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset) {
        for (let i5 = 0; i5 < 16; i5++, offset += 4) {
          SHA512_W_H[i5] = view.getUint32(offset);
          SHA512_W_L[i5] = view.getUint32(offset += 4);
        }
        for (let i5 = 16; i5 < 80; i5++) {
          const W15h = SHA512_W_H[i5 - 15] | 0;
          const W15l = SHA512_W_L[i5 - 15] | 0;
          const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
          const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H[i5 - 2] | 0;
          const W2l = SHA512_W_L[i5 - 2] | 0;
          const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
          const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
          const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i5 - 7], SHA512_W_L[i5 - 16]);
          const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i5 - 7], SHA512_W_H[i5 - 16]);
          SHA512_W_H[i5] = SUMh | 0;
          SHA512_W_L[i5] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i5 = 0; i5 < 80; i5++) {
          const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
          const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i5], SHA512_W_L[i5]);
          const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i5], SHA512_W_H[i5]);
          const T1l = T1ll | 0;
          const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
          const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
          Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
      }
      destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports.SHA512 = SHA512;
    var SHA512_224 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 2352822216 | 0;
        this.Al = 424955298 | 0;
        this.Bh = 1944164710 | 0;
        this.Bl = 2312950998 | 0;
        this.Ch = 502970286 | 0;
        this.Cl = 855612546 | 0;
        this.Dh = 1738396948 | 0;
        this.Dl = 1479516111 | 0;
        this.Eh = 258812777 | 0;
        this.El = 2077511080 | 0;
        this.Fh = 2011393907 | 0;
        this.Fl = 79989058 | 0;
        this.Gh = 1067287976 | 0;
        this.Gl = 1780299464 | 0;
        this.Hh = 286451373 | 0;
        this.Hl = 2446758561 | 0;
        this.outputLen = 28;
      }
    };
    var SHA512_256 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 573645204 | 0;
        this.Al = 4230739756 | 0;
        this.Bh = 2673172387 | 0;
        this.Bl = 3360449730 | 0;
        this.Ch = 596883563 | 0;
        this.Cl = 1867755857 | 0;
        this.Dh = 2520282905 | 0;
        this.Dl = 1497426621 | 0;
        this.Eh = 2519219938 | 0;
        this.El = 2827943907 | 0;
        this.Fh = 3193839141 | 0;
        this.Fl = 1401305490 | 0;
        this.Gh = 721525244 | 0;
        this.Gl = 746961066 | 0;
        this.Hh = 246885852 | 0;
        this.Hl = 2177182882 | 0;
        this.outputLen = 32;
      }
    };
    var SHA384 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 3418070365 | 0;
        this.Al = 3238371032 | 0;
        this.Bh = 1654270250 | 0;
        this.Bl = 914150663 | 0;
        this.Ch = 2438529370 | 0;
        this.Cl = 812702999 | 0;
        this.Dh = 355462360 | 0;
        this.Dl = 4144912697 | 0;
        this.Eh = 1731405415 | 0;
        this.El = 4290775857 | 0;
        this.Fh = 2394180231 | 0;
        this.Fl = 1750603025 | 0;
        this.Gh = 3675008525 | 0;
        this.Gl = 1694076839 | 0;
        this.Hh = 1203062813 | 0;
        this.Hl = 3204075428 | 0;
        this.outputLen = 48;
      }
    };
    exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
    exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
    exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
    exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
  }
});

// node_modules/@multiversx/sdk-passkey-provider/out/errors.js
var require_errors6 = __commonJS({
  "node_modules/@multiversx/sdk-passkey-provider/out/errors.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthenticatorNotSupported = exports.ErrAccountNotConnected = exports.ErrCannotSignSingleTransaction = exports.Err = void 0;
    var Err2 = class extends Error {
      constructor(message, inner) {
        super(message);
        this.inner = void 0;
        this.inner = inner;
      }
    };
    exports.Err = Err2;
    var ErrCannotSignSingleTransaction2 = class extends Err2 {
      constructor() {
        super("Cannot sign single transaction.");
      }
    };
    exports.ErrCannotSignSingleTransaction = ErrCannotSignSingleTransaction2;
    var ErrAccountNotConnected2 = class extends Err2 {
      constructor() {
        super("Account is not connected.");
      }
    };
    exports.ErrAccountNotConnected = ErrAccountNotConnected2;
    var AuthenticatorNotSupported = class extends Err2 {
      constructor() {
        super("Passkey authenticator does not support PRF.");
      }
    };
    exports.AuthenticatorNotSupported = AuthenticatorNotSupported;
  }
});

// node_modules/short-unique-id/dist/short-unique-id.js
var require_short_unique_id = __commonJS({
  "node_modules/short-unique-id/dist/short-unique-id.js"(exports, module) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var ShortUniqueId = (() => {
      var __defProp = Object.defineProperty;
      var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames = Object.getOwnPropertyNames;
      var __getOwnPropSymbols = Object.getOwnPropertySymbols;
      var __hasOwnProp = Object.prototype.hasOwnProperty;
      var __propIsEnum = Object.prototype.propertyIsEnumerable;
      var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
      var __spreadValues = (a6, b4) => {
        for (var prop in b4 || (b4 = {}))
          if (__hasOwnProp.call(b4, prop))
            __defNormalProp(a6, prop, b4[prop]);
        if (__getOwnPropSymbols)
          for (var prop of __getOwnPropSymbols(b4)) {
            if (__propIsEnum.call(b4, prop))
              __defNormalProp(a6, prop, b4[prop]);
          }
        return a6;
      };
      var __export2 = (target, all) => {
        for (var name2 in all)
          __defProp(target, name2, { get: all[name2], enumerable: true });
      };
      var __copyProps = (to2, from4, except, desc) => {
        if (from4 && typeof from4 === "object" || typeof from4 === "function") {
          for (let key2 of __getOwnPropNames(from4))
            if (!__hasOwnProp.call(to2, key2) && key2 !== except)
              __defProp(to2, key2, { get: () => from4[key2], enumerable: !(desc = __getOwnPropDesc(from4, key2)) || desc.enumerable });
        }
        return to2;
      };
      var __toCommonJS2 = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
      var __publicField = (obj, key2, value) => {
        __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
        return value;
      };
      var src_exports = {};
      __export2(src_exports, {
        DEFAULT_OPTIONS: () => DEFAULT_OPTIONS,
        DEFAULT_UUID_LENGTH: () => DEFAULT_UUID_LENGTH,
        default: () => ShortUniqueId2
      });
      var version12 = "5.2.0";
      var DEFAULT_UUID_LENGTH = 6;
      var DEFAULT_OPTIONS = {
        dictionary: "alphanum",
        shuffle: true,
        debug: false,
        length: DEFAULT_UUID_LENGTH,
        counter: 0
      };
      var _ShortUniqueId = class _ShortUniqueId {
        constructor(argOptions = {}) {
          __publicField(this, "counter");
          __publicField(this, "debug");
          __publicField(this, "dict");
          __publicField(this, "version");
          __publicField(this, "dictIndex", 0);
          __publicField(this, "dictRange", []);
          __publicField(this, "lowerBound", 0);
          __publicField(this, "upperBound", 0);
          __publicField(this, "dictLength", 0);
          __publicField(this, "uuidLength");
          __publicField(this, "_digit_first_ascii", 48);
          __publicField(this, "_digit_last_ascii", 58);
          __publicField(this, "_alpha_lower_first_ascii", 97);
          __publicField(this, "_alpha_lower_last_ascii", 123);
          __publicField(this, "_hex_last_ascii", 103);
          __publicField(this, "_alpha_upper_first_ascii", 65);
          __publicField(this, "_alpha_upper_last_ascii", 91);
          __publicField(this, "_number_dict_ranges", {
            digits: [this._digit_first_ascii, this._digit_last_ascii]
          });
          __publicField(this, "_alpha_dict_ranges", {
            lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],
            upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
          });
          __publicField(this, "_alpha_lower_dict_ranges", {
            lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii]
          });
          __publicField(this, "_alpha_upper_dict_ranges", {
            upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
          });
          __publicField(this, "_alphanum_dict_ranges", {
            digits: [this._digit_first_ascii, this._digit_last_ascii],
            lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],
            upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
          });
          __publicField(this, "_alphanum_lower_dict_ranges", {
            digits: [this._digit_first_ascii, this._digit_last_ascii],
            lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii]
          });
          __publicField(this, "_alphanum_upper_dict_ranges", {
            digits: [this._digit_first_ascii, this._digit_last_ascii],
            upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
          });
          __publicField(this, "_hex_dict_ranges", {
            decDigits: [this._digit_first_ascii, this._digit_last_ascii],
            alphaDigits: [this._alpha_lower_first_ascii, this._hex_last_ascii]
          });
          __publicField(this, "_dict_ranges", {
            _number_dict_ranges: this._number_dict_ranges,
            _alpha_dict_ranges: this._alpha_dict_ranges,
            _alpha_lower_dict_ranges: this._alpha_lower_dict_ranges,
            _alpha_upper_dict_ranges: this._alpha_upper_dict_ranges,
            _alphanum_dict_ranges: this._alphanum_dict_ranges,
            _alphanum_lower_dict_ranges: this._alphanum_lower_dict_ranges,
            _alphanum_upper_dict_ranges: this._alphanum_upper_dict_ranges,
            _hex_dict_ranges: this._hex_dict_ranges
          });
          __publicField(this, "log", (...args) => {
            const finalArgs = [...args];
            finalArgs[0] = `[short-unique-id] ${args[0]}`;
            if (this.debug === true) {
              if (typeof console !== "undefined" && console !== null) {
                return console.log(...finalArgs);
              }
            }
          });
          __publicField(this, "_normalizeDictionary", (dictionary2, shuffle2) => {
            let finalDict;
            if (dictionary2 && Array.isArray(dictionary2) && dictionary2.length > 1) {
              finalDict = dictionary2;
            } else {
              finalDict = [];
              let i5;
              this.dictIndex = i5 = 0;
              const rangesName = `_${dictionary2}_dict_ranges`;
              const ranges = this._dict_ranges[rangesName];
              Object.keys(ranges).forEach((rangeType) => {
                const rangeTypeKey = rangeType;
                this.dictRange = ranges[rangeTypeKey];
                this.lowerBound = this.dictRange[0];
                this.upperBound = this.dictRange[1];
                for (this.dictIndex = i5 = this.lowerBound; this.lowerBound <= this.upperBound ? i5 < this.upperBound : i5 > this.upperBound; this.dictIndex = this.lowerBound <= this.upperBound ? i5 += 1 : i5 -= 1) {
                  finalDict.push(String.fromCharCode(this.dictIndex));
                }
              });
            }
            if (shuffle2) {
              const PROBABILITY = 0.5;
              finalDict = finalDict.sort(() => Math.random() - PROBABILITY);
            }
            return finalDict;
          });
          __publicField(this, "setDictionary", (dictionary2, shuffle2) => {
            this.dict = this._normalizeDictionary(dictionary2, shuffle2);
            this.dictLength = this.dict.length;
            this.setCounter(0);
          });
          __publicField(this, "seq", () => {
            return this.sequentialUUID();
          });
          __publicField(this, "sequentialUUID", () => {
            let counterDiv;
            let counterRem;
            let id3 = "";
            counterDiv = this.counter;
            do {
              counterRem = counterDiv % this.dictLength;
              counterDiv = Math.trunc(counterDiv / this.dictLength);
              id3 += this.dict[counterRem];
            } while (counterDiv !== 0);
            this.counter += 1;
            return id3;
          });
          __publicField(this, "rnd", (uuidLength = this.uuidLength || DEFAULT_UUID_LENGTH) => {
            return this.randomUUID(uuidLength);
          });
          __publicField(this, "randomUUID", (uuidLength = this.uuidLength || DEFAULT_UUID_LENGTH) => {
            let id3;
            let randomPartIdx;
            let j3;
            if (uuidLength === null || typeof uuidLength === "undefined" || uuidLength < 1) {
              throw new Error("Invalid UUID Length Provided");
            }
            const isPositive = uuidLength >= 0;
            id3 = "";
            for (j3 = 0; j3 < uuidLength; j3 += 1) {
              randomPartIdx = parseInt(
                (Math.random() * this.dictLength).toFixed(0),
                10
              ) % this.dictLength;
              id3 += this.dict[randomPartIdx];
            }
            return id3;
          });
          __publicField(this, "fmt", (format, date) => {
            return this.formattedUUID(format, date);
          });
          __publicField(this, "formattedUUID", (format, date) => {
            const fnMap = {
              "$r": this.randomUUID,
              "$s": this.sequentialUUID,
              "$t": this.stamp
            };
            const result = format.replace(
              /\$[rs]\d{0,}|\$t0|\$t[1-9]\d{1,}/g,
              (m5) => {
                const fn3 = m5.slice(0, 2);
                const len = parseInt(m5.slice(2), 10);
                if (fn3 === "$s") {
                  return fnMap[fn3]().padStart(len, "0");
                }
                if (fn3 === "$t" && date) {
                  return fnMap[fn3](len, date);
                }
                return fnMap[fn3](len);
              }
            );
            return result;
          });
          __publicField(this, "availableUUIDs", (uuidLength = this.uuidLength) => {
            return parseFloat(
              Math.pow([...new Set(this.dict)].length, uuidLength).toFixed(0)
            );
          });
          __publicField(this, "approxMaxBeforeCollision", (rounds = this.availableUUIDs(this.uuidLength)) => {
            return parseFloat(
              Math.sqrt(Math.PI / 2 * rounds).toFixed(20)
            );
          });
          __publicField(this, "collisionProbability", (rounds = this.availableUUIDs(this.uuidLength), uuidLength = this.uuidLength) => {
            return parseFloat(
              (this.approxMaxBeforeCollision(rounds) / this.availableUUIDs(uuidLength)).toFixed(20)
            );
          });
          __publicField(this, "uniqueness", (rounds = this.availableUUIDs(this.uuidLength)) => {
            const score = parseFloat(
              (1 - this.approxMaxBeforeCollision(rounds) / rounds).toFixed(20)
            );
            return score > 1 ? 1 : score < 0 ? 0 : score;
          });
          __publicField(this, "getVersion", () => {
            return this.version;
          });
          __publicField(this, "stamp", (finalLength, date) => {
            const hexStamp = Math.floor(+(date || /* @__PURE__ */ new Date()) / 1e3).toString(16);
            if (typeof finalLength === "number" && finalLength === 0) {
              return hexStamp;
            }
            if (typeof finalLength !== "number" || finalLength < 10) {
              throw new Error(
                [
                  "Param finalLength must be a number greater than or equal to 10,",
                  "or 0 if you want the raw hexadecimal timestamp"
                ].join("\n")
              );
            }
            const idLength = finalLength - 9;
            const rndIdx = Math.round(Math.random() * (idLength > 15 ? 15 : idLength));
            const id3 = this.randomUUID(idLength);
            return `${id3.substring(0, rndIdx)}${hexStamp}${id3.substring(rndIdx)}${rndIdx.toString(16)}`;
          });
          __publicField(this, "parseStamp", (suid, format) => {
            if (format && !/t0|t[1-9]\d{1,}/.test(format)) {
              throw new Error("Cannot extract date from a formated UUID with no timestamp in the format");
            }
            const stamp = format ? format.replace(
              /\$[rs]\d{0,}|\$t0|\$t[1-9]\d{1,}/g,
              (m5) => {
                const fnMap = {
                  "$r": (len2) => [...Array(len2)].map(() => "r").join(""),
                  "$s": (len2) => [...Array(len2)].map(() => "s").join(""),
                  "$t": (len2) => [...Array(len2)].map(() => "t").join("")
                };
                const fn3 = m5.slice(0, 2);
                const len = parseInt(m5.slice(2), 10);
                return fnMap[fn3](len);
              }
            ).replace(
              /^(.*?)(t{8,})(.*)$/g,
              (_m, p1, p22) => {
                return suid.substring(p1.length, p1.length + p22.length);
              }
            ) : suid;
            if (stamp.length === 8) {
              return new Date(parseInt(stamp, 16) * 1e3);
            }
            if (stamp.length < 10) {
              throw new Error("Stamp length invalid");
            }
            const rndIdx = parseInt(stamp.substring(stamp.length - 1), 16);
            return new Date(parseInt(stamp.substring(rndIdx, rndIdx + 8), 16) * 1e3);
          });
          __publicField(this, "setCounter", (counter2) => {
            this.counter = counter2;
          });
          __publicField(this, "validate", (uid, dictionary2) => {
            const finalDictionary = dictionary2 ? this._normalizeDictionary(dictionary2) : this.dict;
            return uid.split("").every((c5) => finalDictionary.includes(c5));
          });
          const options = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), argOptions);
          this.counter = 0;
          this.debug = false;
          this.dict = [];
          this.version = version12;
          const {
            dictionary,
            shuffle,
            length: length2,
            counter
          } = options;
          this.uuidLength = length2;
          this.setDictionary(dictionary, shuffle);
          this.setCounter(counter);
          this.debug = options.debug;
          this.log(this.dict);
          this.log(
            `Generator instantiated with Dictionary Size ${this.dictLength} and counter set to ${this.counter}`
          );
          this.log = this.log.bind(this);
          this.setDictionary = this.setDictionary.bind(this);
          this.setCounter = this.setCounter.bind(this);
          this.seq = this.seq.bind(this);
          this.sequentialUUID = this.sequentialUUID.bind(this);
          this.rnd = this.rnd.bind(this);
          this.randomUUID = this.randomUUID.bind(this);
          this.fmt = this.fmt.bind(this);
          this.formattedUUID = this.formattedUUID.bind(this);
          this.availableUUIDs = this.availableUUIDs.bind(this);
          this.approxMaxBeforeCollision = this.approxMaxBeforeCollision.bind(this);
          this.collisionProbability = this.collisionProbability.bind(this);
          this.uniqueness = this.uniqueness.bind(this);
          this.getVersion = this.getVersion.bind(this);
          this.stamp = this.stamp.bind(this);
          this.parseStamp = this.parseStamp.bind(this);
          return this;
        }
      };
      __publicField(_ShortUniqueId, "default", _ShortUniqueId);
      var ShortUniqueId2 = _ShortUniqueId;
      return __toCommonJS2(src_exports);
    })();
    "undefined" != typeof module && (module.exports = ShortUniqueId.default), "undefined" != typeof window && (ShortUniqueId = ShortUniqueId.default);
  }
});

// node_modules/@multiversx/sdk-passkey-provider/out/lib/webauthn-prf/utils.js
var require_utils4 = __commonJS({
  "node_modules/@multiversx/sdk-passkey-provider/out/lib/webauthn-prf/utils.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatenateBuffers = exports.bufferToHex = exports.sha256 = exports.parseBase64url = exports.toBase64url = exports.isBase64url = exports.parseBuffer = exports.toBuffer = exports.randomChallenge = void 0;
    function randomChallenge() {
      return crypto.randomUUID();
    }
    exports.randomChallenge = randomChallenge;
    function toBuffer(txt) {
      return Uint8Array.from(txt, (c5) => c5.charCodeAt(0)).buffer;
    }
    exports.toBuffer = toBuffer;
    function parseBuffer(buffer2) {
      return String.fromCharCode(...new Uint8Array(buffer2));
    }
    exports.parseBuffer = parseBuffer;
    function isBase64url(txt) {
      return txt.match(/^[a-zA-Z0-9\-_]+=*$/) !== null;
    }
    exports.isBase64url = isBase64url;
    function toBase64url(buffer2) {
      const txt = btoa(parseBuffer(buffer2));
      return txt.replaceAll("+", "-").replaceAll("/", "_");
    }
    exports.toBase64url = toBase64url;
    function parseBase64url(txt) {
      txt = txt.replaceAll("-", "+").replaceAll("_", "/");
      return toBuffer(atob(txt));
    }
    exports.parseBase64url = parseBase64url;
    async function sha2562(buffer2) {
      return await crypto.subtle.digest("SHA-256", buffer2);
    }
    exports.sha256 = sha2562;
    function bufferToHex(buffer2) {
      return [...new Uint8Array(buffer2)].map((b4) => b4.toString(16).padStart(2, "0")).join("");
    }
    exports.bufferToHex = bufferToHex;
    function concatenateBuffers(buffer1, buffer2) {
      const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
      tmp.set(new Uint8Array(buffer1), 0);
      tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
      return tmp;
    }
    exports.concatenateBuffers = concatenateBuffers;
  }
});

// node_modules/@multiversx/sdk-passkey-provider/out/lib/webauthn-prf/client.js
var require_client = __commonJS({
  "node_modules/@multiversx/sdk-passkey-provider/out/lib/webauthn-prf/client.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o4, v8) {
      Object.defineProperty(o4, "default", { enumerable: true, value: v8 });
    } : function(o4, v8) {
      o4["default"] = v8;
    });
    var __importStar2 = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k5 in mod2) if (k5 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k5)) __createBinding2(result, mod2, k5);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.authenticate = exports.register = exports.isLocalAuthenticator = exports.isAvailable = void 0;
    var short_unique_id_1 = __importDefault2(require_short_unique_id());
    var utils2 = __importStar2(require_utils4());
    var randomness = "125,31,50,6,242,196,44,99,212,140,13,135,165,76,139,234,130,235,189,246,131,38,217,236,172,174,67,82,180,79,137,150";
    var salt = new Uint8Array(randomness.split(",").map((str2) => parseInt(str2)));
    function isAvailable() {
      return !!window.PublicKeyCredential;
    }
    exports.isAvailable = isAvailable;
    async function isLocalAuthenticator() {
      return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
    }
    exports.isLocalAuthenticator = isLocalAuthenticator;
    async function getAuthAttachment(authType) {
      if (authType === "local") {
        return "platform";
      }
      if (authType === "roaming" || authType === "extern") {
        return "cross-platform";
      }
      if (authType === "both") {
        return void 0;
      }
      try {
        if (await isLocalAuthenticator()) {
          return "platform";
        } else {
          return "cross-platform";
        }
      } catch (e3) {
        return void 0;
      }
    }
    var getDomainWithoutSubdomain = (url) => {
      const urlParts = new URL(url).hostname.split(".");
      return urlParts.slice(0).slice(-(urlParts.length === 4 ? 3 : 2)).join(".");
    };
    function getAlgoName(num) {
      switch (num) {
        case -7:
          return "ES256";
        // case -8 ignored to to its rarity
        case -257:
          return "RS256";
        default:
          throw new Error(`Unknown algorithm code: ${num}`);
      }
    }
    async function register(username, challenge, options) {
      options = options ?? {};
      if (!utils2.isBase64url(challenge)) {
        throw new Error("Provided challenge is not properly encoded in Base64url");
      }
      const uid = new short_unique_id_1.default({ length: 5 });
      const usernameRandom = uid.rnd();
      const creationOptions = {
        challenge: utils2.parseBase64url(challenge),
        rp: {
          id: getDomainWithoutSubdomain(window.location.href),
          name: getDomainWithoutSubdomain(window.location.href)
        },
        user: {
          id: await utils2.sha256(new TextEncoder().encode(`${username}-${usernameRandom}`)),
          name: `${username}-${usernameRandom}`,
          displayName: `${username}-${usernameRandom}`
        },
        pubKeyCredParams: [
          { alg: -7, type: "public-key" },
          { alg: -257, type: "public-key" }
          // RS256 (for Windows Hello and others)
        ],
        timeout: options.timeout ?? 6e4,
        authenticatorSelection: {
          residentKey: "required",
          requireResidentKey: true,
          userVerification: options.userVerification ?? "required",
          authenticatorAttachment: await getAuthAttachment("auto")
        },
        attestation: "direct",
        extensions: {
          prf: {
            eval: {
              first: salt.buffer
            }
          }
        }
      };
      if (options.debug) {
        console.debug(creationOptions);
      }
      const credential = await navigator.credentials.create({
        publicKey: creationOptions
      });
      if (options.debug) {
        console.debug(credential);
      }
      const response = credential.response;
      const publicKey = response.getPublicKey();
      const publicKeyAlgorithm = credential.response.getPublicKeyAlgorithm();
      if (!publicKey) {
        throw new Error("Could not retrieve public key");
      }
      if (!publicKeyAlgorithm) {
        throw new Error("Could not retrieve public key algorithm");
      }
      const registration = {
        username,
        credential: {
          id: credential.id,
          publicKey: utils2.toBase64url(publicKey),
          algorithm: getAlgoName(publicKeyAlgorithm)
        },
        authenticatorData: utils2.toBase64url(response.getAuthenticatorData()),
        clientData: utils2.toBase64url(response.clientDataJSON),
        extensionResults: new Uint8Array(credential.getClientExtensionResults().prf.results.first)
      };
      if (options.attestation) {
        registration.attestationData = utils2.toBase64url(response.attestationObject);
      }
      return registration;
    }
    exports.register = register;
    async function getTransports(authType) {
      const local = ["internal"];
      const roaming = ["hybrid", "usb", "ble", "nfc"];
      if (authType === "local") {
        return local;
      }
      if (authType == "roaming" || authType === "extern") {
        return roaming;
      }
      if (authType === "both") {
        return [...local, ...roaming];
      }
      try {
        if (await isLocalAuthenticator()) {
          return local;
        } else {
          return roaming;
        }
      } catch (e3) {
        return [...local, ...roaming];
      }
    }
    async function authenticate(credentialIds, challenge, options) {
      options = options ?? {};
      if (!utils2.isBase64url(challenge)) {
        throw new Error("Provided challenge is not properly encoded in Base64url");
      }
      const transports = await getTransports(options.authenticatorType ?? "auto");
      const authOptions = {
        challenge: utils2.parseBase64url(challenge),
        rpId: getDomainWithoutSubdomain(window.location.href),
        allowCredentials: credentialIds.map((id3) => {
          return {
            id: utils2.parseBase64url(id3),
            type: "public-key",
            transports
          };
        }),
        userVerification: options.userVerification ?? "required",
        timeout: options.timeout ?? 6e4,
        extensions: {
          prf: {
            eval: {
              first: salt.buffer
            }
          }
        }
      };
      if (options.debug) {
        console.debug(authOptions);
      }
      const auth = await navigator.credentials.get({
        publicKey: authOptions,
        mediation: options.mediation
      });
      if (options.debug) {
        console.debug(auth);
      }
      const response = auth.response;
      const authentication = {
        credentialId: auth.id,
        //userHash: utils.toBase64url(response.userHandle), // unreliable, optional for authenticators
        authenticatorData: utils2.toBase64url(response.authenticatorData),
        clientData: utils2.toBase64url(response.clientDataJSON),
        signature: utils2.toBase64url(response.signature),
        extensionResults: new Uint8Array(auth.getClientExtensionResults().prf.results.first)
      };
      return authentication;
    }
    exports.authenticate = authenticate;
  }
});

// node_modules/@multiversx/sdk-passkey-provider/out/lib/webauthn-prf/index.js
var require_webauthn_prf = __commonJS({
  "node_modules/@multiversx/sdk-passkey-provider/out/lib/webauthn-prf/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o4, v8) {
      Object.defineProperty(o4, "default", { enumerable: true, value: v8 });
    } : function(o4, v8) {
      o4["default"] = v8;
    });
    var __importStar2 = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k5 in mod2) if (k5 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k5)) __createBinding2(result, mod2, k5);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.utils = exports.client = void 0;
    var client = __importStar2(require_client());
    exports.client = client;
    var utils2 = __importStar2(require_utils4());
    exports.utils = utils2;
    exports.default = { client, utils: utils2 };
  }
});

// node_modules/@multiversx/sdk-passkey-provider/out/passkeyProvider.js
var require_passkeyProvider = __commonJS({
  "node_modules/@multiversx/sdk-passkey-provider/out/passkeyProvider.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o4, v8) {
      Object.defineProperty(o4, "default", { enumerable: true, value: v8 });
    } : function(o4, v8) {
      o4["default"] = v8;
    });
    var __importStar2 = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k5 in mod2) if (k5 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k5)) __createBinding2(result, mod2, k5);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PasskeyProvider = void 0;
    var sdk_core_1 = require_out();
    var ed25519_1 = (init_ed25519(), __toCommonJS(ed25519_exports));
    var ed = __importStar2((init_ed25519(), __toCommonJS(ed25519_exports)));
    var sha512_1 = require_sha5122();
    var errors_1 = require_errors6();
    var webauthn_prf_1 = require_webauthn_prf();
    ed.etc.sha512Sync = sha512_1.sha512;
    var PasskeyProvider = class _PasskeyProvider {
      constructor() {
        this.account = { address: "" };
        this.initialized = false;
        this.keyPair = void 0;
        if (_PasskeyProvider._instance) {
          throw new Error("Error: Instantiation failed: Use PasskeyProvider.getInstance() instead of new.");
        }
        _PasskeyProvider._instance = this;
      }
      static getInstance() {
        return _PasskeyProvider._instance;
      }
      setAddress(address) {
        this.account.address = address;
        return _PasskeyProvider._instance;
      }
      async init() {
        this.initialized = true;
        return this.initialized;
      }
      async login(options = {}) {
        var _a2, _b;
        try {
          if (!this.initialized) {
            throw new Error("Passkey provider is not initialised, call init() first");
          }
          const { token } = options;
          await this.ensureConnected();
          if (!((_a2 = this.keyPair) == null ? void 0 : _a2.privateKey) && !((_b = this.keyPair) == null ? void 0 : _b.publicKey)) {
            throw new Error("Could not retrieve key pair.");
          }
          this.account.address = this.keyPair.publicKey;
          if (token) {
            const signedToken = await this.signMessageWithPrivateKey({
              address: this.account.address,
              message: token,
              privateKey: this.keyPair.privateKey
            });
            if (!signedToken.signature) {
              throw new Error("Could not sign token");
            }
            this.account.signature = Buffer.from(signedToken.signature).toString("hex");
          }
          if (!this.keyPair.publicKey) {
            throw new Error("Login cancelled");
          }
          this.destroyKeyPair();
          return {
            address: this.account.address,
            signature: this.account.signature
          };
        } catch (error) {
          console.log("error: ", error);
          throw error;
        }
      }
      destroyKeyPair() {
        this.keyPair = void 0;
      }
      async signMessageWithPrivateKey({ message, address, privateKey }) {
        const signer = new sdk_core_1.UserSigner(sdk_core_1.UserSecretKey.fromString(privateKey));
        const msg = new sdk_core_1.Message({
          ...address ? { address: new sdk_core_1.Address(address) } : {},
          data: Buffer.from(message)
        });
        const messageComputer = new sdk_core_1.MessageComputer();
        const messageToSign = new Uint8Array(messageComputer.computeBytesForSigning(msg));
        const signature2 = await signer.sign(Buffer.from(messageToSign));
        msg.signature = new Uint8Array(signature2);
        return msg;
      }
      // Derive the private key seed using HKDF (Web Crypto API)
      async derivePrivateKeySeed(prfOutput) {
        const keyMaterial = await window.crypto.subtle.importKey("raw", prfOutput.buffer, "HKDF", false, ["deriveBits"]);
        const salt = new Uint8Array([]);
        const info = new TextEncoder().encode("Ed25519 Key Generation");
        const derivedBitsBuffer = await window.crypto.subtle.deriveBits(
          {
            name: "HKDF",
            hash: "SHA-256",
            salt: salt.buffer,
            info: info.buffer
          },
          keyMaterial,
          256
          // Length in bits
        );
        return new Uint8Array(derivedBitsBuffer);
      }
      // Generate the Ed25519 key pair
      async generateEd25519KeyPair(privateKeySeed) {
        const privateKey = privateKeySeed;
        const publicKey = await (0, ed25519_1.getPublicKey)(privateKey);
        return {
          publicKey,
          privateKey
        };
      }
      async setUserKeyPair(prfOutput) {
        const privateKeySeed = await this.derivePrivateKeySeed(prfOutput);
        const { privateKey } = await this.generateEd25519KeyPair(privateKeySeed);
        const userSecretKey = new sdk_core_1.UserSecretKey(privateKey);
        const address = userSecretKey.generatePublicKey().toAddress();
        this.keyPair = {
          privateKey: userSecretKey.hex(),
          publicKey: address.bech32()
        };
      }
      async createAccount({ walletName, token }) {
        const challengeFromServer = window.crypto.randomUUID();
        const { extensionResults } = await webauthn_prf_1.client.register(walletName, challengeFromServer, {
          authenticatorType: "extern"
        });
        await this.setUserKeyPair(extensionResults);
        return this.login({ token });
      }
      async isExistingUser(email) {
        return Boolean(window.localStorage.getItem(email));
      }
      async logout() {
        if (!this.initialized) {
          throw new Error("Passkey provider is not initialised, call init() first");
        }
        try {
          this.disconnect();
        } catch (error) {
          console.warn("Passkey origin url is already cleared!", error);
        }
        return true;
      }
      disconnect() {
        this.account = { address: "" };
      }
      async getAddress() {
        if (!this.initialized) {
          throw new Error("Passkey provider is not initialised, call init() first");
        }
        return this.account ? this.account.address : "";
      }
      isInitialized() {
        return this.initialized;
      }
      async isConnected() {
        return Boolean(this.account.address);
      }
      async signTransaction(transaction) {
        await this.ensureConnected();
        const signedTransactions = await this.signTransactions([transaction]);
        if (signedTransactions.length != 1) {
          throw new errors_1.ErrCannotSignSingleTransaction();
        }
        this.destroyKeyPair();
        return signedTransactions[0];
      }
      async ensureConnected() {
        var _a2, _b;
        if (((_a2 = this.keyPair) == null ? void 0 : _a2.privateKey) || ((_b = this.keyPair) == null ? void 0 : _b.publicKey)) {
          return;
        }
        const challengeFromServer = window.crypto.randomUUID();
        let inputKeyMaterial;
        try {
          const { extensionResults } = await webauthn_prf_1.client.authenticate([], challengeFromServer, { userVerification: "required", authenticatorType: "extern" });
          inputKeyMaterial = extensionResults;
        } catch (error) {
          console.log("error", error);
          throw new errors_1.AuthenticatorNotSupported();
        }
        await this.setUserKeyPair(inputKeyMaterial);
      }
      async signTransactions(transactions) {
        var _a2;
        await this.ensureConnected();
        const privateKey = (_a2 = this.keyPair) == null ? void 0 : _a2.privateKey;
        if (!privateKey) {
          throw new Error("Unable to sign transactions");
        }
        try {
          const signer = new sdk_core_1.UserSigner(sdk_core_1.UserSecretKey.fromString(privateKey));
          for (const transaction of transactions) {
            const signature2 = await signer.sign(transaction.serializeForSigning());
            transaction.applySignature(signature2);
          }
          this.destroyKeyPair();
          return transactions;
        } catch (error) {
          this.destroyKeyPair();
          throw new Error(`Transaction canceled: ${error.message}.`);
        }
      }
      async signMessage(message) {
        var _a2;
        await this.ensureConnected();
        const privateKey = (_a2 = this.keyPair) == null ? void 0 : _a2.privateKey;
        if (!privateKey) {
          throw new Error("Unable to sign message");
        }
        const signedMessage = await this.signMessageWithPrivateKey({
          message: message.data.toString(),
          address: this.account.address,
          privateKey
        });
        message.signature = signedMessage.signature;
        this.destroyKeyPair();
        return message;
      }
      cancelAction() {
        return true;
      }
    };
    PasskeyProvider._instance = new PasskeyProvider();
    exports.PasskeyProvider = PasskeyProvider;
  }
});

// node_modules/@multiversx/sdk-passkey-provider/out/index.js
var require_out8 = __commonJS({
  "node_modules/@multiversx/sdk-passkey-provider/out/index.js"(exports) {
    "use strict";
    var import_dist366 = __toESM(require_dist());
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      var desc = Object.getOwnPropertyDescriptor(m5, k5);
      if (!desc || ("get" in desc ? !m5.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m5[k5];
        } };
      }
      Object.defineProperty(o4, k22, desc);
    } : function(o4, m5, k5, k22) {
      if (k22 === void 0) k22 = k5;
      o4[k22] = m5[k5];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m5, exports2) {
      for (var p5 in m5) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding2(exports2, m5, p5);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_passkeyProvider(), exports);
  }
});

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-4JP4CKHO.js
var import_dist115 = __toESM(require_dist());
var import_sdk_wallet_connect_provider = __toESM(require_out3());
var import_operation = __toESM(require_operation());
var import_walletConnectV2Provider = __toESM(require_walletConnectV2Provider());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-PVNL3U3S.js
var import_dist116 = __toESM(require_dist());
var import_out = __toESM(require_out4());
var import_constants7 = __toESM(require_constants());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-KRNFIMQV.js
var import_dist363 = __toESM(require_dist());
var import_sdk_extension_provider = __toESM(require_out5());
var import_sdk_hw_provider = __toESM(require_out6());

// node_modules/@multiversx/sdk-metamask-provider/out/metamaskProvider.js
var import_dist361 = __toESM(require_dist());
var import_out2 = __toESM(require_out());

// node_modules/@multiversx/sdk-metamask-provider/out/config.js
var import_dist357 = __toESM(require_dist());
var defaultSnapOrigin = "npm:@multiversx/metamask-snap";

// node_modules/@multiversx/sdk-metamask-provider/out/constants.js
var import_dist358 = __toESM(require_dist());
var safeWindow = typeof window !== "undefined" ? window : {};

// node_modules/@multiversx/sdk-metamask-provider/out/errors.js
var import_dist359 = __toESM(require_dist());
var Err = class extends Error {
  constructor(message, inner) {
    super(message);
    this.inner = void 0;
    this.inner = inner;
  }
};
var ErrCannotSignSingleTransaction = class extends Err {
  constructor() {
    super("Cannot sign single transaction.");
  }
};
var ErrAccountNotConnected = class extends Err {
  constructor() {
    super("Account is not connected.");
  }
};
var ErrTransactionCancelled = class extends Err {
  constructor() {
    super("Transaction canceled.");
  }
};

// node_modules/@multiversx/sdk-metamask-provider/out/snap.js
var import_dist360 = __toESM(require_dist());
var __awaiter9 = function(thisArg, _arguments, P5, generator) {
  function adopt(value) {
    return value instanceof P5 ? value : new P5(function(resolve) {
      resolve(value);
    });
  }
  return new (P5 || (P5 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var getSnaps = () => __awaiter9(void 0, void 0, void 0, function* () {
  return yield window.ethereum.request({
    method: "wallet_getSnaps"
  });
});
var connectSnap = (snapId = defaultSnapOrigin, params = {}) => __awaiter9(void 0, void 0, void 0, function* () {
  yield window.ethereum.request({
    method: "wallet_requestSnaps",
    params: {
      [snapId]: params
    }
  });
});
var getSnap = (version12) => __awaiter9(void 0, void 0, void 0, function* () {
  try {
    const snaps = yield getSnaps();
    return Object.values(snaps).find((snap) => snap.id === defaultSnapOrigin && (!version12 || snap.version === version12));
  } catch (e3) {
    console.warn("Failed to obtain installed snap", e3);
    return void 0;
  }
});

// node_modules/@multiversx/sdk-metamask-provider/out/metamaskProvider.js
var __awaiter10 = function(thisArg, _arguments, P5, generator) {
  function adopt(value) {
    return value instanceof P5 ? value : new P5(function(resolve) {
      resolve(value);
    });
  }
  return new (P5 || (P5 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MetamaskProvider = class _MetamaskProvider {
  static isMetamaskInstalled() {
    return Boolean(safeWindow && safeWindow.ethereum && safeWindow.ethereum.isMetaMask);
  }
  constructor() {
    this.account = { address: "" };
    this.initialized = false;
    if (_MetamaskProvider._instance) {
      throw new Error("Error: Instantiation failed: Use MetamaskProvider.getInstance() instead of new.");
    }
    _MetamaskProvider._instance = this;
  }
  static getInstance() {
    return _MetamaskProvider._instance;
  }
  setAddress(address) {
    this.account.address = address;
    return _MetamaskProvider._instance;
  }
  getAccount() {
    return this.account;
  }
  setAccount(account) {
    this.account = account;
  }
  init() {
    return __awaiter10(this, void 0, void 0, function* () {
      const hasMetamask = _MetamaskProvider.isMetamaskInstalled();
      if (hasMetamask && !this.initialized) {
        try {
          yield connectSnap();
          const installedSnap = yield getSnap();
          this.initialized = installedSnap !== void 0;
        } catch (error) {
          this.initialized = false;
        }
      }
      return this.initialized;
    });
  }
  login(options = {}) {
    var _a2, _b;
    return __awaiter10(this, void 0, void 0, function* () {
      const token = options.token;
      if (!this.initialized) {
        throw new Error("Metamask provider is not initialised, call init() first" + token);
      }
      try {
        const address = yield (_a2 = safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.ethereum) === null || _a2 === void 0 ? void 0 : _a2.request({
          method: "wallet_invokeSnap",
          params: {
            snapId: defaultSnapOrigin,
            request: {
              method: "mvx_getAddress",
              params: void 0
            }
          }
        });
        this.account.address = address;
        if (token) {
          const tokenSigned = yield (_b = safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.ethereum) === null || _b === void 0 ? void 0 : _b.request({
            method: "wallet_invokeSnap",
            params: {
              snapId: defaultSnapOrigin,
              request: {
                method: "mvx_signAuthToken",
                params: { token }
              }
            }
          });
          this.account.signature = tokenSigned;
        }
      } catch (error) {
        throw error;
      }
      return this.account;
    });
  }
  logout() {
    return __awaiter10(this, void 0, void 0, function* () {
      if (!this.initialized) {
        throw new Error("Metamask provider is not initialised, call init() first");
      }
      this.account = { address: "" };
      return true;
    });
  }
  getAddress() {
    return __awaiter10(this, void 0, void 0, function* () {
      if (!this.initialized) {
        throw new Error("Metamask provider is not initialised, call init() first");
      }
      return this.account ? this.account.address : "";
    });
  }
  isInitialized() {
    return this.initialized;
  }
  isConnected() {
    return Boolean(this.account.address);
  }
  signTransaction(transaction) {
    return __awaiter10(this, void 0, void 0, function* () {
      const signedTransactions = yield this.signTransactions([transaction]);
      if (signedTransactions.length != 1) {
        throw new ErrCannotSignSingleTransaction();
      }
      return signedTransactions[0];
    });
  }
  signTransactions(transactions) {
    var _a2;
    return __awaiter10(this, void 0, void 0, function* () {
      try {
        const transactionsPlain = transactions.map((transaction) => transaction.toPlainObject());
        const metamaskReponse = yield (_a2 = safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.ethereum) === null || _a2 === void 0 ? void 0 : _a2.request({
          method: "wallet_invokeSnap",
          params: {
            snapId: defaultSnapOrigin,
            request: {
              method: "mvx_signTransactions",
              params: { transactions: transactionsPlain }
            }
          }
        });
        const transactionsResponse = metamaskReponse.map((transaction) => import_out2.Transaction.fromPlainObject(JSON.parse(transaction)));
        return transactionsResponse;
      } catch (error) {
        throw new ErrTransactionCancelled();
      }
    });
  }
  signMessage(messageToSign) {
    var _a2, _b;
    return __awaiter10(this, void 0, void 0, function* () {
      try {
        this.ensureConnected();
        const metamaskReponse = yield (_a2 = safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.ethereum) === null || _a2 === void 0 ? void 0 : _a2.request({
          method: "wallet_invokeSnap",
          params: {
            snapId: defaultSnapOrigin,
            request: {
              method: "mvx_signMessage",
              params: { message: Buffer.from(messageToSign.data).toString() }
            }
          }
        });
        return new import_out2.Message({
          data: Buffer.from(messageToSign.data),
          address: (_b = messageToSign.address) !== null && _b !== void 0 ? _b : import_out2.Address.fromBech32(this.account.address),
          signer: "metamask",
          version: messageToSign.version,
          signature: Buffer.from(metamaskReponse, "hex")
        });
      } catch (error) {
        throw error;
      }
    });
  }
  cancelAction() {
    return false;
  }
  ensureConnected() {
    const hasMetamask = _MetamaskProvider.isMetamaskInstalled();
    if (!this.account.address || !hasMetamask) {
      throw new ErrAccountNotConnected();
    }
  }
};
MetamaskProvider._instance = new MetamaskProvider();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-KRNFIMQV.js
var import_sdk_opera_provider = __toESM(require_out7());
var import_out3 = __toESM(require_out8());
var import_sdk_web_wallet_provider = __toESM(require_out2());
v();
T();
e();
Q();
var v7 = "/dapp/init";
var z5 = (o4) => {
  switch (o4 == null ? void 0 : o4.constructor) {
    case import_sdk_web_wallet_provider.WalletProvider:
      return "wallet";
    case import_walletConnectV2Provider.WalletConnectV2Provider:
      return "walletconnectv2";
    case import_sdk_hw_provider.HWProvider:
      return "ledger";
    case import_sdk_extension_provider.ExtensionProvider:
      return "extension";
    case import_out3.PasskeyProvider:
      return "passkey";
    case MetamaskProvider:
      return "metamask";
    case import_sdk_opera_provider.OperaProvider:
      return "opera";
    case import_CrossWindowProvider.CrossWindowProvider:
      return "crossWindow";
    case import_out.IframeProvider:
      return "iframe";
    case t2:
      return "";
    default:
      return "extra";
  }
};
var H3 = (o4) => new import_sdk_web_wallet_provider.WalletProvider(`${o4}${v7}`);
var N12 = (o4) => Bt(void 0, null, function* () {
  if (!o4.isInitialized()) throw new Error("Unable to get version. Provider not initialized");
  let r6 = o4.hwApp, { contractData: e3, version: d4 } = yield r6.getAppConfiguration();
  return { version: d4, dataEnabled: e3 === P };
});
var n5 = (o4) => `Unable to perform ${o4}, Provider not initialized`;
var t2 = class {
  init() {
    return Promise.resolve(false);
  }
  getAccount() {
    throw new Error(n5("getAccount"));
  }
  setAccount(r6) {
    throw new Error(n5(`setAccount: ${r6}`));
  }
  login(r6) {
    throw new Error(n5(`login with options: ${r6}`));
  }
  logout(r6) {
    throw new Error(n5(`logout with options: ${r6}`));
  }
  getAddress() {
    throw new Error(n5("getAddress"));
  }
  isInitialized() {
    return false;
  }
  isConnected() {
    return false;
  }
  sendTransaction(r6, e3) {
    throw new Error(n5(`sendTransaction with transactions: ${r6} options: ${e3}`));
  }
  signTransaction(r6, e3) {
    throw new Error(n5(`signTransaction with transactions: ${r6} options: ${e3}`));
  }
  signTransactions(r6, e3) {
    throw new Error(n5(`signTransactions with transactions: ${r6} options: ${e3}`));
  }
  signMessage(r6, e3) {
    throw new Error(n5(`signTransactions with ${r6} and options ${e3}`));
  }
  sendCustomMessage({ method: r6, params: e3 }) {
    throw new Error(n5(`sendCustomMessage with method: ${r6} params: ${e3}`));
  }
  sendCustomRequest(r6) {
    throw new Error(n5(`sendSessionEvent with options: ${r6}`));
  }
  ping() {
    return Promise.resolve(false);
  }
};
var V3 = new t2();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-EPS6HRIQ.js
var import_dist364 = __toESM(require_dist());
v();
var i4 = V3;
var r5 = null;
function n6(o4) {
  i4 = o4;
}
function m4(o4) {
  r5 = o4;
}
function a5() {
  r5 != null && (i4 = r5);
}
function s3() {
  return i4 || V3;
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-KEQTNP4F.js
var import_dist365 = __toESM(require_dist());
v();

export {
  import_operation,
  import_walletConnectV2Provider,
  import_out,
  import_constants7 as import_constants,
  require_out5 as require_out,
  require_out6 as require_out2,
  MetamaskProvider,
  require_out7 as require_out3,
  require_out8 as require_out4,
  z5 as z,
  H3 as H,
  N12 as N,
  V3 as V,
  n6 as n,
  m4 as m,
  a5 as a,
  s3 as s
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

@noble/ed25519/index.js:
  (*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) *)

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-GWYV5Q5U.js.map
