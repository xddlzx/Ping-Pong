"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  require_abiRegistry,
  require_algebraic,
  require_boolean,
  require_bytes,
  require_codeMetadata,
  require_composite,
  require_endpoint,
  require_enum,
  require_explicit_enum,
  require_fields,
  require_generic,
  require_genericArray,
  require_h256,
  require_managedDecimal,
  require_managedDecimalSigned,
  require_nothing,
  require_numerical,
  require_string,
  require_struct,
  require_tokenIdentifier,
  require_tuple,
  require_typeExpressionParser,
  require_typeMapper,
  require_variadic
} from "./chunk-7IOKNUEZ.js";
import {
  require_address as require_address2,
  require_types,
  require_utils as require_utils2
} from "./chunk-PA4YGARE.js";
import {
  require_address,
  require_bignumber,
  require_constants,
  require_utils
} from "./chunk-JDLAKVPX.js";
import {
  require_errors
} from "./chunk-7T325JRE.js";
import {
  __commonJS,
  __toESM,
  require_dist
} from "./chunk-UOCZJ3B4.js";

// node_modules/@multiversx/sdk-transaction-decoder/node_modules/bech32/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@multiversx/sdk-transaction-decoder/node_modules/bech32/dist/index.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bech32m = exports.bech32 = void 0;
    var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
    var ALPHABET_MAP = {};
    for (let z = 0; z < ALPHABET.length; z++) {
      const x = ALPHABET.charAt(z);
      ALPHABET_MAP[x] = z;
    }
    function polymodStep(pre) {
      const b = pre >> 25;
      return (pre & 33554431) << 5 ^ -(b >> 0 & 1) & 996825010 ^ -(b >> 1 & 1) & 642813549 ^ -(b >> 2 & 1) & 513874426 ^ -(b >> 3 & 1) & 1027748829 ^ -(b >> 4 & 1) & 705979059;
    }
    function prefixChk(prefix) {
      let chk = 1;
      for (let i = 0; i < prefix.length; ++i) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
          return "Invalid prefix (" + prefix + ")";
        chk = polymodStep(chk) ^ c >> 5;
      }
      chk = polymodStep(chk);
      for (let i = 0; i < prefix.length; ++i) {
        const v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ v & 31;
      }
      return chk;
    }
    function convert(data, inBits, outBits, pad) {
      let value = 0;
      let bits = 0;
      const maxV = (1 << outBits) - 1;
      const result = [];
      for (let i = 0; i < data.length; ++i) {
        value = value << inBits | data[i];
        bits += inBits;
        while (bits >= outBits) {
          bits -= outBits;
          result.push(value >> bits & maxV);
        }
      }
      if (pad) {
        if (bits > 0) {
          result.push(value << outBits - bits & maxV);
        }
      } else {
        if (bits >= inBits)
          return "Excess padding";
        if (value << outBits - bits & maxV)
          return "Non-zero padding";
      }
      return result;
    }
    function toWords(bytes) {
      return convert(bytes, 8, 5, true);
    }
    function fromWordsUnsafe(words) {
      const res = convert(words, 5, 8, false);
      if (Array.isArray(res))
        return res;
    }
    function fromWords(words) {
      const res = convert(words, 5, 8, false);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    function getLibraryFromEncoding(encoding) {
      let ENCODING_CONST;
      if (encoding === "bech32") {
        ENCODING_CONST = 1;
      } else {
        ENCODING_CONST = 734539939;
      }
      function encode(prefix, words, LIMIT) {
        LIMIT = LIMIT || 90;
        if (prefix.length + 7 + words.length > LIMIT)
          throw new TypeError("Exceeds length limit");
        prefix = prefix.toLowerCase();
        let chk = prefixChk(prefix);
        if (typeof chk === "string")
          throw new Error(chk);
        let result = prefix + "1";
        for (let i = 0; i < words.length; ++i) {
          const x = words[i];
          if (x >> 5 !== 0)
            throw new Error("Non 5-bit word");
          chk = polymodStep(chk) ^ x;
          result += ALPHABET.charAt(x);
        }
        for (let i = 0; i < 6; ++i) {
          chk = polymodStep(chk);
        }
        chk ^= ENCODING_CONST;
        for (let i = 0; i < 6; ++i) {
          const v = chk >> (5 - i) * 5 & 31;
          result += ALPHABET.charAt(v);
        }
        return result;
      }
      function __decode(str, LIMIT) {
        LIMIT = LIMIT || 90;
        if (str.length < 8)
          return str + " too short";
        if (str.length > LIMIT)
          return "Exceeds length limit";
        const lowered = str.toLowerCase();
        const uppered = str.toUpperCase();
        if (str !== lowered && str !== uppered)
          return "Mixed-case string " + str;
        str = lowered;
        const split = str.lastIndexOf("1");
        if (split === -1)
          return "No separator character for " + str;
        if (split === 0)
          return "Missing prefix for " + str;
        const prefix = str.slice(0, split);
        const wordChars = str.slice(split + 1);
        if (wordChars.length < 6)
          return "Data too short";
        let chk = prefixChk(prefix);
        if (typeof chk === "string")
          return chk;
        const words = [];
        for (let i = 0; i < wordChars.length; ++i) {
          const c = wordChars.charAt(i);
          const v = ALPHABET_MAP[c];
          if (v === void 0)
            return "Unknown character " + c;
          chk = polymodStep(chk) ^ v;
          if (i + 6 >= wordChars.length)
            continue;
          words.push(v);
        }
        if (chk !== ENCODING_CONST)
          return "Invalid checksum for " + str;
        return { prefix, words };
      }
      function decodeUnsafe(str, LIMIT) {
        const res = __decode(str, LIMIT);
        if (typeof res === "object")
          return res;
      }
      function decode(str, LIMIT) {
        const res = __decode(str, LIMIT);
        if (typeof res === "object")
          return res;
        throw new Error(res);
      }
      return {
        decodeUnsafe,
        decode,
        encode,
        toWords,
        fromWordsUnsafe,
        fromWords
      };
    }
    exports.bech32 = getLibraryFromEncoding("bech32");
    exports.bech32m = getLibraryFromEncoding("bech32m");
  }
});

// node_modules/@multiversx/sdk-transaction-decoder/lib/src/transaction.decoder.js
var require_transaction_decoder = __commonJS({
  "node_modules/@multiversx/sdk-transaction-decoder/lib/src/transaction.decoder.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;
    var bech32_1 = require_dist2();
    var TransactionDecoder = class {
      getTransactionMetadata(transaction) {
        const metadata = this.getNormalTransactionMetadata(transaction);
        const esdtMetadata = this.getEsdtTransactionMetadata(metadata);
        if (esdtMetadata) {
          return esdtMetadata;
        }
        const nftMetadata = this.getNftTransferMetadata(metadata);
        if (nftMetadata) {
          return nftMetadata;
        }
        const multiMetadata = this.getMultiTransferMetadata(metadata);
        if (multiMetadata) {
          return multiMetadata;
        }
        return metadata;
      }
      getNormalTransactionMetadata(transaction) {
        const metadata = new TransactionMetadata();
        metadata.sender = transaction.sender;
        metadata.receiver = transaction.receiver;
        metadata.value = BigInt(transaction.value);
        if (transaction.data) {
          const decodedData = this.base64Decode(transaction.data);
          const dataComponents = decodedData.split("@");
          const args = dataComponents.slice(1);
          if (args.every((x) => this.isSmartContractArgument(x))) {
            metadata.functionName = dataComponents[0];
            metadata.functionArgs = args;
          }
          if (metadata.functionName === "relayedTx" && metadata.functionArgs && metadata.functionArgs.length === 1) {
            try {
              const relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));
              relayedTransaction.value = relayedTransaction.value.toString();
              relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));
              relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));
              return this.getNormalTransactionMetadata(relayedTransaction);
            } catch (error) {
            }
          }
          if (metadata.functionName === "relayedTxV2" && metadata.functionArgs && metadata.functionArgs.length === 4) {
            try {
              const relayedTransaction = new TransactionToDecode();
              relayedTransaction.sender = transaction.receiver;
              relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);
              relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));
              relayedTransaction.value = "0";
              return this.getNormalTransactionMetadata(relayedTransaction);
            } catch (error) {
            }
          }
        }
        return metadata;
      }
      getMultiTransferMetadata(metadata) {
        if (metadata.sender !== metadata.receiver) {
          return void 0;
        }
        if (metadata.functionName !== "MultiESDTNFTTransfer") {
          return void 0;
        }
        const args = metadata.functionArgs;
        if (!args) {
          return void 0;
        }
        if (args.length < 3) {
          return void 0;
        }
        if (!this.isAddressValid(args[0])) {
          return void 0;
        }
        const receiver = this.bech32Encode(args[0]);
        const transferCount = this.hexToNumber(args[1]);
        const result = new TransactionMetadata();
        if (!result.transfers) {
          result.transfers = [];
        }
        let index = 2;
        for (let i = 0; i < transferCount; i++) {
          const identifier = this.hexToString(args[index++]);
          const nonce = args[index++];
          const value = this.hexToBigInt(args[index++]);
          if (nonce) {
            result.transfers.push({
              value,
              properties: {
                collection: identifier,
                identifier: `${identifier}-${nonce}`
              }
            });
          } else {
            result.transfers.push({
              value,
              properties: {
                token: identifier
              }
            });
          }
        }
        result.sender = metadata.sender;
        result.receiver = receiver;
        if (args.length > index) {
          result.functionName = this.hexToString(args[index++]);
          result.functionArgs = args.slice(index++);
        }
        return result;
      }
      getNftTransferMetadata(metadata) {
        if (metadata.sender !== metadata.receiver) {
          return void 0;
        }
        if (metadata.functionName !== "ESDTNFTTransfer") {
          return void 0;
        }
        const args = metadata.functionArgs;
        if (!args) {
          return void 0;
        }
        if (args.length < 4) {
          return void 0;
        }
        if (!this.isAddressValid(args[3])) {
          return void 0;
        }
        const collectionIdentifier = this.hexToString(args[0]);
        const nonce = args[1];
        const value = this.hexToBigInt(args[2]);
        const receiver = this.bech32Encode(args[3]);
        const result = new TransactionMetadata();
        result.sender = metadata.sender;
        result.receiver = receiver;
        result.value = value;
        if (args.length > 4) {
          result.functionName = this.hexToString(args[4]);
          result.functionArgs = args.slice(5);
        }
        result.transfers = [{
          value,
          properties: {
            collection: collectionIdentifier,
            identifier: `${collectionIdentifier}-${nonce}`
          }
        }];
        return result;
      }
      base64Encode(str) {
        return Buffer.from(str).toString("base64");
      }
      base64Decode(str) {
        return Buffer.from(str, "base64").toString("binary");
      }
      hexToNumber(hex) {
        return parseInt(hex, 16);
      }
      getEsdtTransactionMetadata(metadata) {
        if (metadata.functionName !== "ESDTTransfer") {
          return void 0;
        }
        const args = metadata.functionArgs;
        if (!args) {
          return void 0;
        }
        if (args.length < 2) {
          return void 0;
        }
        const tokenIdentifier = this.hexToString(args[0]);
        const value = this.hexToBigInt(args[1]);
        const result = new TransactionMetadata();
        result.sender = metadata.sender;
        result.receiver = metadata.receiver;
        if (args.length > 2) {
          result.functionName = this.hexToString(args[2]);
          result.functionArgs = args.slice(3);
        }
        result.transfers = [{
          value,
          properties: {
            identifier: tokenIdentifier
          }
        }];
        result.value = value;
        return result;
      }
      bech32Encode(address) {
        const pubKey = Buffer.from(address, "hex");
        const words = bech32_1.bech32.toWords(pubKey);
        return bech32_1.bech32.encode("erd", words);
      }
      isAddressValid(address) {
        return Buffer.from(address, "hex").length == 32;
      }
      isSmartContractArgument(arg) {
        if (!this.isHex(arg)) {
          return false;
        }
        if (arg.length % 2 !== 0) {
          return false;
        }
        return true;
      }
      isHex(value) {
        return new RegExp(/[^a-f0-9]/gi).test(value) === false;
      }
      base64ToHex(str) {
        return Buffer.from(str, "base64").toString("hex");
      }
      hexToString(hex) {
        return Buffer.from(hex, "hex").toString("ascii");
      }
      hexToBigInt(hex) {
        if (!hex) {
          return BigInt(0);
        }
        return BigInt("0x" + hex);
      }
    };
    exports.TransactionDecoder = TransactionDecoder;
    var TransactionToDecode = class {
      constructor() {
        this.sender = "";
        this.receiver = "";
        this.data = "";
        this.value = "0";
      }
    };
    exports.TransactionToDecode = TransactionToDecode;
    var TransactionMetadata = class {
      constructor() {
        this.sender = "";
        this.receiver = "";
        this.value = BigInt(0);
      }
    };
    exports.TransactionMetadata = TransactionMetadata;
    var TransactionMetadataTransfer = class {
      constructor() {
        this.value = BigInt(0);
      }
    };
    exports.TransactionMetadataTransfer = TransactionMetadataTransfer;
    var TokenTransferProperties = class {
    };
    exports.TokenTransferProperties = TokenTransferProperties;
  }
});

// node_modules/@multiversx/sdk-core/out/logger.js
var require_logger = __commonJS({
  "node_modules/@multiversx/sdk-core/out/logger.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = exports.LogLevel = void 0;
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["Trace"] = 0] = "Trace";
      LogLevel2[LogLevel2["Debug"] = 1] = "Debug";
      LogLevel2[LogLevel2["Info"] = 2] = "Info";
      LogLevel2[LogLevel2["Warn"] = 3] = "Warn";
      LogLevel2[LogLevel2["Error"] = 4] = "Error";
      LogLevel2[LogLevel2["None"] = 5] = "None";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    var Logger = class _Logger {
      static setLevel(logLevel) {
        _Logger.logLevel = logLevel;
      }
      static trace(message, ...optionalParams) {
        if (_Logger.logLevel >= LogLevel.Debug) {
          return;
        }
        console.debug(message, optionalParams);
      }
      static debug(message, ...optionalParams) {
        if (_Logger.logLevel >= LogLevel.Debug) {
          return;
        }
        console.debug(message, optionalParams);
      }
      static info(message, ...optionalParams) {
        if (_Logger.logLevel >= LogLevel.Info) {
          return;
        }
        console.log(message, optionalParams);
      }
      static warn(message, ...optionalParams) {
        if (_Logger.logLevel >= LogLevel.Warn) {
          return;
        }
        console.warn(message, optionalParams);
      }
      static error(message, ...optionalParams) {
        if (_Logger.logLevel >= LogLevel.Error) {
          return;
        }
        console.error(message, optionalParams);
      }
    };
    exports.Logger = Logger;
    Logger.logLevel = LogLevel.Debug;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/factory.js
var require_factory = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/factory.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createListOfTokenIdentifiers = exports.createListOfAddresses = void 0;
    var address_1 = require_address2();
    var generic_1 = require_generic();
    var tokenIdentifier_1 = require_tokenIdentifier();
    function createListOfAddresses(addresses) {
      let addressesTyped = addresses.map((address) => new address_1.AddressValue(address));
      let list = generic_1.List.fromItems(addressesTyped);
      return list;
    }
    exports.createListOfAddresses = createListOfAddresses;
    function createListOfTokenIdentifiers(identifiers) {
      let identifiersTyped = identifiers.map((identifier) => new tokenIdentifier_1.TokenIdentifierValue(identifier));
      let list = generic_1.List.fromItems(identifiersTyped);
      return list;
    }
    exports.createListOfTokenIdentifiers = createListOfTokenIdentifiers;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/matchers.js
var require_matchers = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/matchers.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onPrimitiveTypeSelect = exports.onPrimitiveValueSelect = exports.onTypedValueSelect = exports.onTypeSelect = void 0;
    var errors = __importStar(require_errors());
    var address_1 = require_address2();
    var boolean_1 = require_boolean();
    var bytes_1 = require_bytes();
    var codeMetadata_1 = require_codeMetadata();
    var enum_1 = require_enum();
    var explicit_enum_1 = require_explicit_enum();
    var generic_1 = require_generic();
    var genericArray_1 = require_genericArray();
    var h256_1 = require_h256();
    var managedDecimal_1 = require_managedDecimal();
    var managedDecimalSigned_1 = require_managedDecimalSigned();
    var nothing_1 = require_nothing();
    var numerical_1 = require_numerical();
    var string_1 = require_string();
    var struct_1 = require_struct();
    var tokenIdentifier_1 = require_tokenIdentifier();
    var tuple_1 = require_tuple();
    var types_1 = require_types();
    function onTypeSelect(type, selectors) {
      if (type.hasExactClass(generic_1.OptionType.ClassName)) {
        return selectors.onOption();
      }
      if (type.hasExactClass(generic_1.ListType.ClassName)) {
        return selectors.onList();
      }
      if (type.hasExactClass(genericArray_1.ArrayVecType.ClassName)) {
        return selectors.onArray();
      }
      if (type.hasClassOrSuperclass(types_1.PrimitiveType.ClassName)) {
        return selectors.onPrimitive();
      }
      if (type.hasExactClass(struct_1.StructType.ClassName)) {
        return selectors.onStruct();
      }
      if (type.hasExactClass(tuple_1.TupleType.ClassName)) {
        return selectors.onTuple();
      }
      if (type.hasExactClass(enum_1.EnumType.ClassName)) {
        return selectors.onEnum();
      }
      if (type.hasExactClass(explicit_enum_1.ExplicitEnumType.ClassName)) {
        return selectors.onExplicitEnum();
      }
      if (type.hasExactClass(managedDecimal_1.ManagedDecimalType.ClassName)) {
        return selectors.onManagedDecimal();
      }
      if (type.hasExactClass(managedDecimalSigned_1.ManagedDecimalSignedType.ClassName)) {
        return selectors.onManagedDecimalSigned();
      }
      if (selectors.onOther) {
        return selectors.onOther();
      }
      throw new errors.ErrTypingSystem(`type isn't known: ${type}`);
    }
    exports.onTypeSelect = onTypeSelect;
    function onTypedValueSelect(value, selectors) {
      if (value.hasClassOrSuperclass(types_1.PrimitiveValue.ClassName)) {
        return selectors.onPrimitive();
      }
      if (value.hasExactClass(generic_1.OptionValue.ClassName)) {
        return selectors.onOption();
      }
      if (value.hasExactClass(generic_1.List.ClassName)) {
        return selectors.onList();
      }
      if (value.hasExactClass(genericArray_1.ArrayVec.ClassName)) {
        return selectors.onArray();
      }
      if (value.hasExactClass(struct_1.Struct.ClassName)) {
        return selectors.onStruct();
      }
      if (value.hasExactClass(tuple_1.Tuple.ClassName)) {
        return selectors.onTuple();
      }
      if (value.hasExactClass(enum_1.EnumValue.ClassName)) {
        return selectors.onEnum();
      }
      if (value.hasExactClass(explicit_enum_1.ExplicitEnumValue.ClassName)) {
        return selectors.onExplicitEnum();
      }
      if (value.hasExactClass(managedDecimal_1.ManagedDecimalValue.ClassName)) {
        return selectors.onManagedDecimal();
      }
      if (value.hasExactClass(managedDecimalSigned_1.ManagedDecimalSignedValue.ClassName)) {
        return selectors.onManagedDecimalSigned();
      }
      if (selectors.onOther) {
        return selectors.onOther();
      }
      throw new errors.ErrTypingSystem(`value isn't typed: ${value}`);
    }
    exports.onTypedValueSelect = onTypedValueSelect;
    function onPrimitiveValueSelect(value, selectors) {
      if (value.hasExactClass(boolean_1.BooleanValue.ClassName)) {
        return selectors.onBoolean();
      }
      if (value.hasClassOrSuperclass(numerical_1.NumericalValue.ClassName)) {
        return selectors.onNumerical();
      }
      if (value.hasExactClass(address_1.AddressValue.ClassName)) {
        return selectors.onAddress();
      }
      if (value.hasExactClass(bytes_1.BytesValue.ClassName)) {
        return selectors.onBytes();
      }
      if (value.hasExactClass(string_1.StringValue.ClassName)) {
        return selectors.onString();
      }
      if (value.hasExactClass(h256_1.H256Value.ClassName)) {
        return selectors.onH256();
      }
      if (value.hasExactClass(tokenIdentifier_1.TokenIdentifierValue.ClassName)) {
        return selectors.onTypeIdentifier();
      }
      if (value.hasExactClass(codeMetadata_1.CodeMetadataValue.ClassName)) {
        return selectors.onCodeMetadata();
      }
      if (value.hasExactClass(nothing_1.NothingValue.ClassName)) {
        return selectors.onNothing();
      }
      if (selectors.onOther) {
        return selectors.onOther();
      }
      throw new errors.ErrTypingSystem(`value isn't a primitive: ${value.getType()}`);
    }
    exports.onPrimitiveValueSelect = onPrimitiveValueSelect;
    function onPrimitiveTypeSelect(type, selectors) {
      if (type.hasExactClass(boolean_1.BooleanType.ClassName)) {
        return selectors.onBoolean();
      }
      if (type.hasClassOrSuperclass(numerical_1.NumericalType.ClassName)) {
        return selectors.onNumerical();
      }
      if (type.hasExactClass(address_1.AddressType.ClassName)) {
        return selectors.onAddress();
      }
      if (type.hasExactClass(bytes_1.BytesType.ClassName)) {
        return selectors.onBytes();
      }
      if (type.hasExactClass(string_1.StringType.ClassName)) {
        return selectors.onString();
      }
      if (type.hasExactClass(h256_1.H256Type.ClassName)) {
        return selectors.onH256();
      }
      if (type.hasExactClass(tokenIdentifier_1.TokenIdentifierType.ClassName)) {
        return selectors.onTokenIndetifier();
      }
      if (type.hasExactClass(codeMetadata_1.CodeMetadataType.ClassName)) {
        return selectors.onCodeMetadata();
      }
      if (type.hasExactClass(nothing_1.NothingType.ClassName)) {
        return selectors.onNothing();
      }
      if (selectors.onOther) {
        return selectors.onOther();
      }
      throw new errors.ErrTypingSystem(`type isn't a known primitive: ${type}`);
    }
    exports.onPrimitiveTypeSelect = onPrimitiveTypeSelect;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/index.js
var require_typesystem = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/typesystem/index.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_abiRegistry(), exports);
    __exportStar(require_address2(), exports);
    __exportStar(require_algebraic(), exports);
    __exportStar(require_boolean(), exports);
    __exportStar(require_bytes(), exports);
    __exportStar(require_codeMetadata(), exports);
    __exportStar(require_composite(), exports);
    __exportStar(require_endpoint(), exports);
    __exportStar(require_enum(), exports);
    __exportStar(require_explicit_enum(), exports);
    __exportStar(require_factory(), exports);
    __exportStar(require_fields(), exports);
    __exportStar(require_generic(), exports);
    __exportStar(require_genericArray(), exports);
    __exportStar(require_h256(), exports);
    __exportStar(require_managedDecimal(), exports);
    __exportStar(require_managedDecimalSigned(), exports);
    __exportStar(require_matchers(), exports);
    __exportStar(require_nothing(), exports);
    __exportStar(require_numerical(), exports);
    __exportStar(require_string(), exports);
    __exportStar(require_struct(), exports);
    __exportStar(require_tokenIdentifier(), exports);
    __exportStar(require_tuple(), exports);
    __exportStar(require_typeExpressionParser(), exports);
    __exportStar(require_typeMapper(), exports);
    __exportStar(require_types(), exports);
    __exportStar(require_variadic(), exports);
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/arrayVec.js
var require_arrayVec = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/arrayVec.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayVecBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var ArrayVecBinaryCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
      }
      decodeNested(buffer, type) {
        let arrayLength = type.length;
        let typeParameter = type.getFirstTypeParameter();
        let result = [];
        let totalLength = 0;
        for (let i = 0; i < arrayLength; i++) {
          let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);
          result.push(decoded);
          totalLength += decodedLength;
          buffer = buffer.slice(decodedLength);
        }
        return [new typesystem_1.ArrayVec(type, result), totalLength];
      }
      decodeTopLevel(buffer, type) {
        let [result, _] = this.decodeNested(buffer, type);
        return result;
      }
      encodeNested(array) {
        let itemsBuffers = [];
        for (const item of array.getItems()) {
          let itemBuffer = this.binaryCodec.encodeNested(item);
          itemsBuffers.push(itemBuffer);
        }
        return Buffer.concat(itemsBuffers);
      }
      encodeTopLevel(array) {
        return this.encodeNested(array);
      }
    };
    exports.ArrayVecBinaryCodec = ArrayVecBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/fields.js
var require_fields2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/fields.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldsBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var FieldsBinaryCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
      }
      decodeNested(buffer, fieldDefinitions) {
        let fields = [];
        let totalLength = 0;
        for (const fieldDefinition of fieldDefinitions) {
          let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);
          buffer = buffer.slice(decodedLength);
          totalLength += decodedLength;
          let field = new typesystem_1.Field(decoded, fieldDefinition.name);
          fields.push(field);
        }
        return [fields, totalLength];
      }
      encodeNested(fields) {
        let buffers = [];
        for (const field of fields) {
          let fieldBuffer = this.binaryCodec.encodeNested(field.value);
          buffers.push(fieldBuffer);
        }
        return Buffer.concat(buffers);
      }
    };
    exports.FieldsBinaryCodec = FieldsBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/enum.js
var require_enum2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/enum.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnumBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var fields_1 = require_fields2();
    var EnumBinaryCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
        this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);
      }
      decodeTopLevel(buffer, type) {
        let [enumValue] = this.decodeNested(buffer, type);
        return enumValue;
      }
      decodeNested(buffer, type) {
        let [discriminant, lengthOfDiscriminant] = this.readDiscriminant(buffer);
        buffer = buffer.slice(lengthOfDiscriminant);
        let variant = type.getVariantByDiscriminant(discriminant);
        let fieldDefinitions = variant.getFieldsDefinitions();
        let [fields, lengthOfFields] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);
        let enumValue = new typesystem_1.EnumValue(type, variant, fields);
        return [enumValue, lengthOfDiscriminant + lengthOfFields];
      }
      readDiscriminant(buffer) {
        let [value, length] = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type());
        let discriminant = value.valueOf();
        return [discriminant, length];
      }
      encodeNested(enumValue) {
        let discriminant = new typesystem_1.U8Value(enumValue.discriminant);
        let discriminantBuffer = this.binaryCodec.encodeNested(discriminant);
        let fields = enumValue.getFields();
        let fieldsBuffer = this.fieldsCodec.encodeNested(fields);
        return Buffer.concat([discriminantBuffer, fieldsBuffer]);
      }
      encodeTopLevel(enumValue) {
        let fields = enumValue.getFields();
        let hasFields = fields.length > 0;
        let fieldsBuffer = this.fieldsCodec.encodeNested(fields);
        let discriminant = new typesystem_1.U8Value(enumValue.discriminant);
        let discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);
        return Buffer.concat([discriminantBuffer, fieldsBuffer]);
      }
    };
    exports.EnumBinaryCodec = EnumBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/constants.js
var require_constants2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/constants.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SizeOfU32 = void 0;
    exports.SizeOfU32 = 4;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/bytes.js
var require_bytes2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/bytes.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesBinaryCodec = void 0;
    var bytes_1 = require_bytes();
    var constants_1 = require_constants2();
    var BytesBinaryCodec = class {
      decodeNested(buffer) {
        let length = buffer.readUInt32BE(0);
        let payload = buffer.slice(constants_1.SizeOfU32, constants_1.SizeOfU32 + length);
        let result = new bytes_1.BytesValue(payload);
        return [result, constants_1.SizeOfU32 + length];
      }
      decodeTopLevel(buffer) {
        return new bytes_1.BytesValue(buffer);
      }
      encodeNested(bytes) {
        let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);
        lengthBuffer.writeUInt32BE(bytes.getLength());
        let buffer = Buffer.concat([lengthBuffer, bytes.valueOf()]);
        return buffer;
      }
      encodeTopLevel(bytes) {
        return bytes.valueOf();
      }
    };
    exports.BytesBinaryCodec = BytesBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/string.js
var require_string2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/string.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var bytes_1 = require_bytes();
    var bytes_2 = require_bytes2();
    var StringBinaryCodec = class {
      constructor() {
        this.bytesBinaryCodec = new bytes_2.BytesBinaryCodec();
      }
      decodeNested(buffer) {
        let [decoded, length] = this.bytesBinaryCodec.decodeNested(buffer);
        let decodedAsString = new typesystem_1.StringValue(decoded.valueOf().toString());
        return [decodedAsString, length];
      }
      decodeTopLevel(buffer) {
        return new typesystem_1.StringValue(buffer.toString());
      }
      encodeNested(value) {
        let valueAsBytes = bytes_1.BytesValue.fromUTF8(value.valueOf());
        return this.bytesBinaryCodec.encodeNested(valueAsBytes);
      }
      encodeTopLevel(value) {
        return Buffer.from(value.valueOf());
      }
    };
    exports.StringBinaryCodec = StringBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/explicit-enum.js
var require_explicit_enum2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/explicit-enum.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExplicitEnumBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var explicit_enum_1 = require_explicit_enum();
    var string_1 = require_string2();
    var ExplicitEnumBinaryCodec = class {
      constructor() {
        this.stringCodec = new string_1.StringBinaryCodec();
      }
      decodeTopLevel(buffer, type) {
        const stringValue = this.stringCodec.decodeTopLevel(buffer);
        return new explicit_enum_1.ExplicitEnumValue(type, new explicit_enum_1.ExplicitEnumVariantDefinition(stringValue.valueOf()));
      }
      decodeNested(buffer, type) {
        const [value, length] = this.stringCodec.decodeNested(buffer);
        const enumValue = new explicit_enum_1.ExplicitEnumValue(type, new explicit_enum_1.ExplicitEnumVariantDefinition(value.valueOf()));
        return [enumValue, length];
      }
      encodeNested(enumValue) {
        const buffer = this.stringCodec.encodeNested(new typesystem_1.StringValue(enumValue.valueOf().name));
        return buffer;
      }
      encodeTopLevel(enumValue) {
        const buffer = this.stringCodec.encodeTopLevel(new typesystem_1.StringValue(enumValue.valueOf().name));
        return buffer;
      }
    };
    exports.ExplicitEnumBinaryCodec = ExplicitEnumBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/list.js
var require_list = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/list.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var constants_1 = require_constants2();
    var ListBinaryCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
      }
      decodeNested(buffer, type) {
        let typeParameter = type.getFirstTypeParameter();
        let result = [];
        let numItems = buffer.readUInt32BE(0);
        this.binaryCodec.constraints.checkListLength(numItems);
        let originalBuffer = buffer;
        let offset = constants_1.SizeOfU32;
        buffer = originalBuffer.slice(offset);
        for (let i = 0; i < numItems; i++) {
          let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);
          result.push(decoded);
          offset += decodedLength;
          buffer = originalBuffer.slice(offset);
        }
        return [new typesystem_1.List(type, result), offset];
      }
      decodeTopLevel(buffer, type) {
        let typeParameter = type.getFirstTypeParameter();
        let result = [];
        let originalBuffer = buffer;
        let offset = 0;
        while (buffer.length > 0) {
          let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);
          result.push(decoded);
          offset += decodedLength;
          buffer = originalBuffer.slice(offset);
          this.binaryCodec.constraints.checkListLength(result.length);
        }
        return new typesystem_1.List(type, result);
      }
      encodeNested(list) {
        this.binaryCodec.constraints.checkListLength(list.getLength());
        let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);
        lengthBuffer.writeUInt32BE(list.getLength());
        let itemsBuffers = [];
        for (const item of list.getItems()) {
          let itemBuffer = this.binaryCodec.encodeNested(item);
          itemsBuffers.push(itemBuffer);
        }
        let buffer = Buffer.concat([lengthBuffer, ...itemsBuffers]);
        return buffer;
      }
      encodeTopLevel(list) {
        this.binaryCodec.constraints.checkListLength(list.getLength());
        let itemsBuffers = [];
        for (const item of list.getItems()) {
          let itemBuffer = this.binaryCodec.encodeNested(item);
          itemsBuffers.push(itemBuffer);
        }
        let buffer = Buffer.concat(itemsBuffers);
        return buffer;
      }
    };
    exports.ListBinaryCodec = ListBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/managedDecimal.js
var require_managedDecimal2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/managedDecimal.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManagedDecimalCodec = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var typesystem_1 = require_typesystem();
    var utils_1 = require_utils();
    var constants_1 = require_constants2();
    var ManagedDecimalCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
      }
      decodeNested(buffer, type) {
        const length = buffer.readUInt32BE(0);
        const payload = buffer.slice(0, length);
        const result = this.decodeTopLevel(payload, type);
        return [result, length];
      }
      decodeTopLevel(buffer, type) {
        if (buffer.length === 0) {
          return new typesystem_1.ManagedDecimalValue(new bignumber_js_1.default(0), 0);
        }
        if (type.isVariable()) {
          const bigUintSize = buffer.length - constants_1.SizeOfU32;
          const [value2] = this.binaryCodec.decodeNested(buffer.slice(0, bigUintSize), new typesystem_1.BigUIntType());
          const scale2 = buffer.readUInt32BE(bigUintSize);
          return new typesystem_1.ManagedDecimalValue(value2.valueOf().shiftedBy(-scale2), scale2);
        }
        const value = utils_1.bufferToBigInt(buffer);
        const metadata = type.getMetadata();
        const scale = metadata !== "usize" ? parseInt(metadata.toString()) : 0;
        return new typesystem_1.ManagedDecimalValue(value.shiftedBy(-scale), scale);
      }
      encodeNested(value) {
        let buffers = [];
        const rawValue = new typesystem_1.BigUIntValue(value.valueOf().shiftedBy(value.getScale()));
        if (value.isVariable()) {
          buffers.push(Buffer.from(this.binaryCodec.encodeNested(rawValue)));
          buffers.push(Buffer.from(this.binaryCodec.encodeNested(new typesystem_1.U32Value(value.getScale()))));
        } else {
          buffers.push(this.binaryCodec.encodeTopLevel(rawValue));
        }
        return Buffer.concat(buffers);
      }
      encodeTopLevel(value) {
        return this.encodeNested(value);
      }
    };
    exports.ManagedDecimalCodec = ManagedDecimalCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/managedDecimalSigned.js
var require_managedDecimalSigned2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/managedDecimalSigned.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManagedDecimalSignedCodec = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var typesystem_1 = require_typesystem();
    var utils_1 = require_utils();
    var constants_1 = require_constants2();
    var ManagedDecimalSignedCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
      }
      decodeNested(buffer, type) {
        const length = buffer.readUInt32BE(0);
        const payload = buffer.slice(0, length);
        const result = this.decodeTopLevel(payload, type);
        return [result, length];
      }
      decodeTopLevel(buffer, type) {
        if (buffer.length === 0) {
          return new typesystem_1.ManagedDecimalSignedValue(new bignumber_js_1.default(0), 0);
        }
        if (type.isVariable()) {
          const bigintSize = buffer.length - constants_1.SizeOfU32;
          const [value2] = this.binaryCodec.decodeNested(buffer.slice(0, bigintSize), new typesystem_1.BigIntType());
          const scale2 = buffer.readUInt32BE(bigintSize);
          return new typesystem_1.ManagedDecimalSignedValue(value2.valueOf().shiftedBy(-scale2), scale2);
        }
        const value = utils_1.bufferToBigInt(buffer);
        const metadata = type.getMetadata();
        const scale = metadata !== "usize" ? parseInt(metadata.toString()) : 0;
        return new typesystem_1.ManagedDecimalSignedValue(value.shiftedBy(-scale), scale);
      }
      encodeNested(value) {
        let buffers = [];
        const rawValue = new typesystem_1.BigIntValue(value.valueOf().shiftedBy(value.getScale()));
        if (value.isVariable()) {
          buffers.push(Buffer.from(this.binaryCodec.encodeNested(rawValue)));
          buffers.push(Buffer.from(this.binaryCodec.encodeNested(new typesystem_1.U32Value(value.getScale()))));
        } else {
          buffers.push(Buffer.from(this.binaryCodec.encodeTopLevel(rawValue)));
        }
        return Buffer.concat(buffers);
      }
      encodeTopLevel(value) {
        return this.encodeNested(value);
      }
    };
    exports.ManagedDecimalSignedCodec = ManagedDecimalSignedCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/option.js
var require_option = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/option.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionValueBinaryCodec = void 0;
    var errors = __importStar(require_errors());
    var typesystem_1 = require_typesystem();
    var OptionValueBinaryCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
      }
      decodeNested(buffer, type) {
        if (buffer[0] == 0) {
          return [typesystem_1.OptionValue.newMissingTyped(type), 1];
        }
        if (buffer[0] != 1) {
          throw new errors.ErrCodec("invalid buffer for optional value");
        }
        let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);
        return [typesystem_1.OptionValue.newProvided(decoded), decodedLength + 1];
      }
      decodeTopLevel(buffer, type) {
        if (buffer.length == 0) {
          return new typesystem_1.OptionValue(type);
        }
        if (buffer[0] != 1) {
          throw new errors.ErrCodec("invalid buffer for optional value");
        }
        let [decoded, _decodedLength] = this.binaryCodec.decodeNested(buffer.slice(1), type);
        return new typesystem_1.OptionValue(type, decoded);
      }
      encodeNested(optionValue) {
        if (optionValue.isSet()) {
          return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);
        }
        return Buffer.from([0]);
      }
      encodeTopLevel(optionValue) {
        if (optionValue.isSet()) {
          return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);
        }
        return Buffer.from([]);
      }
    };
    exports.OptionValueBinaryCodec = OptionValueBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/address.js
var require_address3 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/address.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressBinaryCodec = void 0;
    var address_1 = require_address();
    var typesystem_1 = require_typesystem();
    var AddressBinaryCodec = class {
      /**
       * Reads and decodes an AddressValue from a given buffer.
       *
       * @param buffer the input buffer
       */
      decodeNested(buffer) {
        let slice = buffer.slice(0, 32);
        let value = new address_1.Address(slice);
        return [new typesystem_1.AddressValue(value), 32];
      }
      /**
       * Reads and decodes an AddressValue from a given buffer.
       *
       * @param buffer the input buffer
       */
      decodeTopLevel(buffer) {
        let [decoded, _length] = this.decodeNested(buffer);
        return decoded;
      }
      /**
       * Encodes an AddressValue to a buffer.
       */
      encodeNested(primitive) {
        return primitive.valueOf().pubkey();
      }
      /**
       * Encodes an AddressValue to a buffer.
       */
      encodeTopLevel(primitive) {
        return primitive.valueOf().pubkey();
      }
    };
    exports.AddressBinaryCodec = AddressBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/boolean.js
var require_boolean2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/boolean.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanBinaryCodec = void 0;
    var errors = __importStar(require_errors());
    var typesystem_1 = require_typesystem();
    var BooleanBinaryCodec = class _BooleanBinaryCodec {
      decodeNested(buffer) {
        let byte = buffer.readUInt8(0);
        return [new typesystem_1.BooleanValue(byte == _BooleanBinaryCodec.TRUE), 1];
      }
      decodeTopLevel(buffer) {
        if (buffer.length > 1) {
          throw new errors.ErrInvalidArgument("buffer should be of size <= 1");
        }
        let firstByte = buffer[0];
        return new typesystem_1.BooleanValue(firstByte == _BooleanBinaryCodec.TRUE);
      }
      encodeNested(primitive) {
        if (primitive.isTrue()) {
          return Buffer.from([_BooleanBinaryCodec.TRUE]);
        }
        return Buffer.from([_BooleanBinaryCodec.FALSE]);
      }
      encodeTopLevel(primitive) {
        if (primitive.isTrue()) {
          return Buffer.from([_BooleanBinaryCodec.TRUE]);
        }
        return Buffer.from([]);
      }
    };
    exports.BooleanBinaryCodec = BooleanBinaryCodec;
    BooleanBinaryCodec.TRUE = 1;
    BooleanBinaryCodec.FALSE = 0;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/numerical.js
var require_numerical2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/numerical.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumericalBinaryCodec = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var typesystem_1 = require_typesystem();
    var constants_1 = require_constants2();
    var utils_1 = require_utils();
    var NumericalBinaryCodec = class {
      decodeNested(buffer, type) {
        let offset = 0;
        let length = type.sizeInBytes;
        if (!length) {
          offset = constants_1.SizeOfU32;
          length = buffer.readUInt32BE(0);
        }
        let payload = buffer.slice(offset, offset + length);
        let result = this.decodeTopLevel(payload, type);
        let decodedLength = length + offset;
        return [result, decodedLength];
      }
      decodeTopLevel(buffer, type) {
        let payload = utils_1.cloneBuffer(buffer);
        let empty = buffer.length == 0;
        if (empty) {
          return new typesystem_1.NumericalValue(type, new bignumber_js_1.default(0));
        }
        let isPositive = !type.withSign || utils_1.isMsbZero(payload);
        if (isPositive) {
          let value2 = utils_1.bufferToBigInt(payload);
          return new typesystem_1.NumericalValue(type, value2);
        }
        utils_1.flipBufferBitsInPlace(payload);
        let value = utils_1.bufferToBigInt(payload);
        let negativeValue = value.multipliedBy(new bignumber_js_1.default(-1));
        let negativeValueMinusOne = negativeValue.minus(new bignumber_js_1.default(1));
        return new typesystem_1.NumericalValue(type, negativeValueMinusOne);
      }
      encodeNested(primitive) {
        if (primitive.sizeInBytes) {
          return this.encodeNestedFixedSize(primitive, primitive.sizeInBytes);
        }
        let buffer = this.encodeTopLevel(primitive);
        let length = Buffer.alloc(constants_1.SizeOfU32);
        length.writeUInt32BE(buffer.length);
        return Buffer.concat([length, buffer]);
      }
      encodeNestedFixedSize(primitive, size) {
        if (primitive.value.isZero()) {
          return Buffer.alloc(size, 0);
        }
        if (!primitive.withSign) {
          const buffer2 = utils_1.bigIntToBuffer(primitive.value);
          const paddingBytes2 = Buffer.alloc(size - buffer2.length, 0);
          return Buffer.concat([paddingBytes2, buffer2]);
        }
        if (primitive.value.isPositive()) {
          let buffer2 = utils_1.bigIntToBuffer(primitive.value);
          if (utils_1.isMsbOne(buffer2)) {
            buffer2 = utils_1.prependByteToBuffer(buffer2, 0);
          }
          const paddingBytes2 = Buffer.alloc(size - buffer2.length, 0);
          return Buffer.concat([paddingBytes2, buffer2]);
        }
        let valuePlusOne = primitive.value.plus(new bignumber_js_1.default(1));
        let buffer = utils_1.bigIntToBuffer(valuePlusOne);
        utils_1.flipBufferBitsInPlace(buffer);
        if (utils_1.isMsbZero(buffer)) {
          buffer = utils_1.prependByteToBuffer(buffer, 255);
        }
        const paddingBytes = Buffer.alloc(size - buffer.length, 255);
        return Buffer.concat([paddingBytes, buffer]);
      }
      encodeTopLevel(primitive) {
        let withSign = primitive.withSign;
        if (primitive.value.isZero()) {
          return Buffer.alloc(0);
        }
        if (!withSign) {
          return utils_1.bigIntToBuffer(primitive.value);
        }
        return this.encodePrimitive(primitive);
      }
      encodePrimitive(primitive) {
        if (primitive.value.isPositive()) {
          let buffer2 = utils_1.bigIntToBuffer(primitive.value);
          if (utils_1.isMsbOne(buffer2)) {
            buffer2 = utils_1.prependByteToBuffer(buffer2, 0);
          }
          return buffer2;
        }
        let valuePlusOne = primitive.value.plus(new bignumber_js_1.default(1));
        let buffer = utils_1.bigIntToBuffer(valuePlusOne);
        utils_1.flipBufferBitsInPlace(buffer);
        if (utils_1.isMsbZero(buffer)) {
          buffer = utils_1.prependByteToBuffer(buffer, 255);
        }
        return buffer;
      }
    };
    exports.NumericalBinaryCodec = NumericalBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/h256.js
var require_h2562 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/h256.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.H256BinaryCodec = void 0;
    var h256_1 = require_h256();
    var H256BinaryCodec = class {
      /**
       * Reads and decodes a H256Value from a given buffer.
       *
       * @param buffer the input buffer
       */
      decodeNested(buffer) {
        let slice = buffer.slice(0, 32);
        return [new h256_1.H256Value(slice), 32];
      }
      /**
       * Reads and decodes a H256Value from a given buffer.
       *
       * @param buffer the input buffer
       */
      decodeTopLevel(buffer) {
        let [decoded, _length] = this.decodeNested(buffer);
        return decoded;
      }
      /**
       * Encodes a H256Value to a buffer.
       */
      encodeNested(primitive) {
        return primitive.valueOf();
      }
      /**
       * Encodes a H256Value to a buffer.
       */
      encodeTopLevel(primitive) {
        return primitive.valueOf();
      }
    };
    exports.H256BinaryCodec = H256BinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/tokenIdentifier.js
var require_tokenIdentifier2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/tokenIdentifier.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenIdentifierCodec = void 0;
    var bytes_1 = require_bytes();
    var tokenIdentifier_1 = require_tokenIdentifier();
    var bytes_2 = require_bytes2();
    var TokenIdentifierCodec = class {
      constructor() {
        this.bytesCodec = new bytes_2.BytesBinaryCodec();
      }
      decodeNested(buffer) {
        let [bytesValue, length] = this.bytesCodec.decodeNested(buffer);
        return [new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString()), length];
      }
      decodeTopLevel(buffer) {
        let bytesValue = this.bytesCodec.decodeTopLevel(buffer);
        return new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString());
      }
      encodeNested(tokenIdentifier) {
        let bytesValue = bytes_1.BytesValue.fromUTF8(tokenIdentifier.valueOf());
        return this.bytesCodec.encodeNested(bytesValue);
      }
      encodeTopLevel(tokenIdentifier) {
        return Buffer.from(tokenIdentifier.valueOf());
      }
    };
    exports.TokenIdentifierCodec = TokenIdentifierCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codeMetadata.js
var require_codeMetadata2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codeMetadata.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeMetadata = exports.CodeMetadataLength = void 0;
    exports.CodeMetadataLength = 2;
    var CodeMetadata = class _CodeMetadata {
      /**
       * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.
       *
       * @param upgradeable Whether the contract is upgradeable
       * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)
       * @param payable Whether the contract is payable
       * @param payableBySc Whether the contract is payable by other smart contracts
       */
      constructor(upgradeable = true, readable = false, payable = false, payableBySc = false) {
        this.upgradeable = upgradeable;
        this.readable = readable;
        this.payable = payable;
        this.payableBySc = payableBySc;
      }
      static fromBytes(bytes) {
        return _CodeMetadata.fromBuffer(Buffer.from(bytes));
      }
      /**
       * Creates a metadata object from a buffer.
       */
      static fromBuffer(buffer) {
        if (buffer.length != exports.CodeMetadataLength) {
          throw new Error(`code metadata buffer has length ${buffer.length}, expected ${exports.CodeMetadataLength}`);
        }
        const byteZero = buffer[0];
        const byteOne = buffer[1];
        const upgradeable = (byteZero & _CodeMetadata.ByteZero.Upgradeable) !== 0;
        const readable = (byteZero & _CodeMetadata.ByteZero.Readable) !== 0;
        const payable = (byteOne & _CodeMetadata.ByteOne.Payable) !== 0;
        const payableBySc = (byteOne & _CodeMetadata.ByteOne.PayableBySc) !== 0;
        return new _CodeMetadata(upgradeable, readable, payable, payableBySc);
      }
      /**
       * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.
       */
      toggleUpgradeable(value) {
        this.upgradeable = value;
      }
      /**
       * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.
       */
      toggleReadable(value) {
        this.readable = value;
      }
      /**
       * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.
       */
      togglePayable(value) {
        this.payable = value;
      }
      /**
       * Adjust the metadata (the `payableBySc` attribute), when preparing the deployment transaction.
       */
      togglePayableBySc(value) {
        this.payableBySc = value;
      }
      /**
       * Converts the metadata to the protocol-friendly representation.
       */
      toBuffer() {
        let byteZero = 0;
        let byteOne = 0;
        if (this.upgradeable) {
          byteZero |= _CodeMetadata.ByteZero.Upgradeable;
        }
        if (this.readable) {
          byteZero |= _CodeMetadata.ByteZero.Readable;
        }
        if (this.payable) {
          byteOne |= _CodeMetadata.ByteOne.Payable;
        }
        if (this.payableBySc) {
          byteOne |= _CodeMetadata.ByteOne.PayableBySc;
        }
        return Buffer.from([byteZero, byteOne]);
      }
      /**
       * Converts the metadata to a hex-encoded string.
       */
      toString() {
        return this.toBuffer().toString("hex");
      }
      /**
       * Converts the metadata to a pretty, plain JavaScript object.
       */
      toJSON() {
        return {
          upgradeable: this.upgradeable,
          readable: this.readable,
          payable: this.payable,
          payableBySc: this.payableBySc
        };
      }
      equals(other) {
        return this.upgradeable == other.upgradeable && this.readable == other.readable && this.payable == other.payable && this.payableBySc == other.payableBySc;
      }
    };
    exports.CodeMetadata = CodeMetadata;
    CodeMetadata.ByteZero = {
      Upgradeable: 1,
      Reserved2: 2,
      Readable: 4
    };
    CodeMetadata.ByteOne = {
      Reserved1: 1,
      Payable: 2,
      PayableBySc: 4
    };
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/codemetadata.js
var require_codemetadata = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/codemetadata.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeMetadataCodec = void 0;
    var codeMetadata_1 = require_codeMetadata2();
    var codeMetadata_2 = require_codeMetadata();
    var CodeMetadataCodec = class {
      decodeNested(buffer) {
        const codeMetadata = codeMetadata_1.CodeMetadata.fromBuffer(buffer.slice(0, codeMetadata_1.CodeMetadataLength));
        return [new codeMetadata_2.CodeMetadataValue(codeMetadata), codeMetadata_1.CodeMetadataLength];
      }
      decodeTopLevel(buffer) {
        const codeMetadata = codeMetadata_1.CodeMetadata.fromBuffer(buffer);
        return new codeMetadata_2.CodeMetadataValue(codeMetadata);
      }
      encodeNested(codeMetadata) {
        return codeMetadata.valueOf().toBuffer();
      }
      encodeTopLevel(codeMetadata) {
        return codeMetadata.valueOf().toBuffer();
      }
    };
    exports.CodeMetadataCodec = CodeMetadataCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/nothing.js
var require_nothing2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/nothing.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NothingCodec = void 0;
    var typesystem_1 = require_typesystem();
    var NothingCodec = class {
      decodeNested() {
        return [new typesystem_1.NothingValue(), 0];
      }
      decodeTopLevel() {
        return new typesystem_1.NothingValue();
      }
      encodeNested() {
        return Buffer.from([]);
      }
      encodeTopLevel() {
        return Buffer.from([]);
      }
    };
    exports.NothingCodec = NothingCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/primitive.js
var require_primitive = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/primitive.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrimitiveBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var address_1 = require_address3();
    var boolean_1 = require_boolean2();
    var numerical_1 = require_numerical2();
    var h256_1 = require_h2562();
    var bytes_1 = require_bytes2();
    var tokenIdentifier_1 = require_tokenIdentifier2();
    var codemetadata_1 = require_codemetadata();
    var nothing_1 = require_nothing2();
    var string_1 = require_string2();
    var PrimitiveBinaryCodec = class {
      constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
        this.booleanCodec = new boolean_1.BooleanBinaryCodec();
        this.numericalCodec = new numerical_1.NumericalBinaryCodec();
        this.addressCodec = new address_1.AddressBinaryCodec();
        this.h256Codec = new h256_1.H256BinaryCodec();
        this.bytesCodec = new bytes_1.BytesBinaryCodec();
        this.stringCodec = new string_1.StringBinaryCodec();
        this.tokenIdentifierCodec = new tokenIdentifier_1.TokenIdentifierCodec();
        this.codeMetadataCodec = new codemetadata_1.CodeMetadataCodec();
        this.nothingCodec = new nothing_1.NothingCodec();
      }
      decodeNested(buffer, type) {
        return typesystem_1.onPrimitiveTypeSelect(type, {
          onBoolean: () => this.booleanCodec.decodeNested(buffer),
          onNumerical: () => this.numericalCodec.decodeNested(buffer, type),
          onAddress: () => this.addressCodec.decodeNested(buffer),
          onBytes: () => this.bytesCodec.decodeNested(buffer),
          onString: () => this.stringCodec.decodeNested(buffer),
          onH256: () => this.h256Codec.decodeNested(buffer),
          onTokenIndetifier: () => this.tokenIdentifierCodec.decodeNested(buffer),
          onCodeMetadata: () => this.codeMetadataCodec.decodeNested(buffer),
          onNothing: () => this.nothingCodec.decodeNested()
        });
      }
      decodeTopLevel(buffer, type) {
        return typesystem_1.onPrimitiveTypeSelect(type, {
          onBoolean: () => this.booleanCodec.decodeTopLevel(buffer),
          onNumerical: () => this.numericalCodec.decodeTopLevel(buffer, type),
          onAddress: () => this.addressCodec.decodeTopLevel(buffer),
          onBytes: () => this.bytesCodec.decodeTopLevel(buffer),
          onString: () => this.stringCodec.decodeTopLevel(buffer),
          onH256: () => this.h256Codec.decodeTopLevel(buffer),
          onTokenIndetifier: () => this.tokenIdentifierCodec.decodeTopLevel(buffer),
          onCodeMetadata: () => this.codeMetadataCodec.decodeTopLevel(buffer),
          onNothing: () => this.nothingCodec.decodeTopLevel()
        });
      }
      encodeNested(value) {
        return typesystem_1.onPrimitiveValueSelect(value, {
          onBoolean: () => this.booleanCodec.encodeNested(value),
          onNumerical: () => this.numericalCodec.encodeNested(value),
          onAddress: () => this.addressCodec.encodeNested(value),
          onBytes: () => this.bytesCodec.encodeNested(value),
          onString: () => this.stringCodec.encodeNested(value),
          onH256: () => this.h256Codec.encodeNested(value),
          onTypeIdentifier: () => this.tokenIdentifierCodec.encodeNested(value),
          onCodeMetadata: () => this.codeMetadataCodec.encodeNested(value),
          onNothing: () => this.nothingCodec.encodeNested()
        });
      }
      encodeTopLevel(value) {
        return typesystem_1.onPrimitiveValueSelect(value, {
          onBoolean: () => this.booleanCodec.encodeTopLevel(value),
          onNumerical: () => this.numericalCodec.encodeTopLevel(value),
          onAddress: () => this.addressCodec.encodeTopLevel(value),
          onBytes: () => this.bytesCodec.encodeTopLevel(value),
          onString: () => this.stringCodec.encodeTopLevel(value),
          onH256: () => this.h256Codec.encodeTopLevel(value),
          onTypeIdentifier: () => this.tokenIdentifierCodec.encodeTopLevel(value),
          onCodeMetadata: () => this.codeMetadataCodec.encodeTopLevel(value),
          onNothing: () => this.nothingCodec.encodeTopLevel()
        });
      }
    };
    exports.PrimitiveBinaryCodec = PrimitiveBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/struct.js
var require_struct2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/struct.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StructBinaryCodec = void 0;
    var typesystem_1 = require_typesystem();
    var fields_1 = require_fields2();
    var StructBinaryCodec = class {
      constructor(binaryCodec) {
        this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);
      }
      decodeTopLevel(buffer, type) {
        let [decoded] = this.decodeNested(buffer, type);
        return decoded;
      }
      decodeNested(buffer, type) {
        let fieldDefinitions = type.getFieldsDefinitions();
        let [fields, offset] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);
        let struct = new typesystem_1.Struct(type, fields);
        return [struct, offset];
      }
      encodeNested(struct) {
        let fields = struct.getFields();
        let buffer = this.fieldsCodec.encodeNested(fields);
        return buffer;
      }
      encodeTopLevel(struct) {
        return this.encodeNested(struct);
      }
    };
    exports.StructBinaryCodec = StructBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/tuple.js
var require_tuple2 = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/tuple.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TupleBinaryCodec = void 0;
    var struct_1 = require_struct2();
    var TupleBinaryCodec = class {
      constructor(binaryCodec) {
        this.structCodec = new struct_1.StructBinaryCodec(binaryCodec);
      }
      decodeTopLevel(buffer, type) {
        return this.structCodec.decodeTopLevel(buffer, type);
      }
      decodeNested(buffer, type) {
        return this.structCodec.decodeNested(buffer, type);
      }
      encodeNested(struct) {
        return this.structCodec.encodeNested(struct);
      }
      encodeTopLevel(struct) {
        return this.structCodec.encodeTopLevel(struct);
      }
    };
    exports.TupleBinaryCodec = TupleBinaryCodec;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/binary.js
var require_binary = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/binary.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BinaryCodecConstraints = exports.BinaryCodec = void 0;
    var errors = __importStar(require_errors());
    var utils_1 = require_utils2();
    var typesystem_1 = require_typesystem();
    var arrayVec_1 = require_arrayVec();
    var enum_1 = require_enum2();
    var explicit_enum_1 = require_explicit_enum2();
    var list_1 = require_list();
    var managedDecimal_1 = require_managedDecimal2();
    var managedDecimalSigned_1 = require_managedDecimalSigned2();
    var option_1 = require_option();
    var primitive_1 = require_primitive();
    var struct_1 = require_struct2();
    var tuple_1 = require_tuple2();
    var BinaryCodec = class {
      constructor(constraints = null) {
        this.constraints = constraints || new BinaryCodecConstraints();
        this.optionCodec = new option_1.OptionValueBinaryCodec(this);
        this.listCodec = new list_1.ListBinaryCodec(this);
        this.arrayCodec = new arrayVec_1.ArrayVecBinaryCodec(this);
        this.primitiveCodec = new primitive_1.PrimitiveBinaryCodec(this);
        this.structCodec = new struct_1.StructBinaryCodec(this);
        this.tupleCodec = new tuple_1.TupleBinaryCodec(this);
        this.enumCodec = new enum_1.EnumBinaryCodec(this);
        this.explicitEnumCodec = new explicit_enum_1.ExplicitEnumBinaryCodec();
        this.managedDecimalCodec = new managedDecimal_1.ManagedDecimalCodec(this);
        this.managedDecimalSignedCodec = new managedDecimalSigned_1.ManagedDecimalSignedCodec(this);
      }
      decodeTopLevel(buffer, type) {
        this.constraints.checkBufferLength(buffer);
        let typedValue = typesystem_1.onTypeSelect(type, {
          onOption: () => this.optionCodec.decodeTopLevel(buffer, type.getFirstTypeParameter()),
          onList: () => this.listCodec.decodeTopLevel(buffer, type),
          onArray: () => this.arrayCodec.decodeTopLevel(buffer, type),
          onPrimitive: () => this.primitiveCodec.decodeTopLevel(buffer, type),
          onStruct: () => this.structCodec.decodeTopLevel(buffer, type),
          onTuple: () => this.tupleCodec.decodeTopLevel(buffer, type),
          onEnum: () => this.enumCodec.decodeTopLevel(buffer, type),
          onExplicitEnum: () => this.explicitEnumCodec.decodeTopLevel(buffer, type),
          onManagedDecimal: () => this.managedDecimalCodec.decodeTopLevel(buffer, type),
          onManagedDecimalSigned: () => this.managedDecimalSignedCodec.decodeTopLevel(buffer, type)
        });
        return typedValue;
      }
      decodeNested(buffer, type) {
        this.constraints.checkBufferLength(buffer);
        let [typedResult, decodedLength] = typesystem_1.onTypeSelect(type, {
          onOption: () => this.optionCodec.decodeNested(buffer, type.getFirstTypeParameter()),
          onList: () => this.listCodec.decodeNested(buffer, type),
          onArray: () => this.arrayCodec.decodeNested(buffer, type),
          onPrimitive: () => this.primitiveCodec.decodeNested(buffer, type),
          onStruct: () => this.structCodec.decodeNested(buffer, type),
          onTuple: () => this.tupleCodec.decodeNested(buffer, type),
          onEnum: () => this.enumCodec.decodeNested(buffer, type),
          onExplicitEnum: () => this.explicitEnumCodec.decodeNested(buffer, type),
          onManagedDecimal: () => this.managedDecimalCodec.decodeNested(buffer, type),
          onManagedDecimalSigned: () => this.managedDecimalSignedCodec.decodeNested(buffer, type)
        });
        return [typedResult, decodedLength];
      }
      encodeNested(typedValue) {
        utils_1.guardTrue(typedValue.getType().getCardinality().isSingular(), "singular cardinality, thus encodable type");
        return typesystem_1.onTypedValueSelect(typedValue, {
          onPrimitive: () => this.primitiveCodec.encodeNested(typedValue),
          onOption: () => this.optionCodec.encodeNested(typedValue),
          onList: () => this.listCodec.encodeNested(typedValue),
          onArray: () => this.arrayCodec.encodeNested(typedValue),
          onStruct: () => this.structCodec.encodeNested(typedValue),
          onTuple: () => this.tupleCodec.encodeNested(typedValue),
          onEnum: () => this.enumCodec.encodeNested(typedValue),
          onExplicitEnum: () => this.explicitEnumCodec.encodeNested(typedValue),
          onManagedDecimal: () => this.managedDecimalCodec.encodeNested(typedValue),
          onManagedDecimalSigned: () => this.managedDecimalSignedCodec.encodeNested(typedValue)
        });
      }
      encodeTopLevel(typedValue) {
        utils_1.guardTrue(typedValue.getType().getCardinality().isSingular(), "singular cardinality, thus encodable type");
        return typesystem_1.onTypedValueSelect(typedValue, {
          onPrimitive: () => this.primitiveCodec.encodeTopLevel(typedValue),
          onOption: () => this.optionCodec.encodeTopLevel(typedValue),
          onList: () => this.listCodec.encodeTopLevel(typedValue),
          onArray: () => this.arrayCodec.encodeTopLevel(typedValue),
          onStruct: () => this.structCodec.encodeTopLevel(typedValue),
          onTuple: () => this.tupleCodec.encodeTopLevel(typedValue),
          onEnum: () => this.enumCodec.encodeTopLevel(typedValue),
          onExplicitEnum: () => this.explicitEnumCodec.encodeTopLevel(typedValue),
          onManagedDecimal: () => this.managedDecimalCodec.encodeTopLevel(typedValue),
          onManagedDecimalSigned: () => this.managedDecimalSignedCodec.encodeTopLevel(typedValue)
        });
      }
    };
    exports.BinaryCodec = BinaryCodec;
    var BinaryCodecConstraints = class {
      constructor(init) {
        this.maxBufferLength = (init == null ? void 0 : init.maxBufferLength) || 256e3;
        this.maxListLength = (init == null ? void 0 : init.maxListLength) || 128e3;
      }
      checkBufferLength(buffer) {
        if (buffer.length > this.maxBufferLength) {
          throw new errors.ErrCodec(`Buffer too large: ${buffer.length} > ${this.maxBufferLength}`);
        }
      }
      /**
       * This constraint avoids computer-freezing decode bugs (e.g. due to invalid ABI or struct definitions).
       */
      checkListLength(length) {
        if (length > this.maxListLength) {
          throw new errors.ErrCodec(`List too large: ${length} > ${this.maxListLength}`);
        }
      }
    };
    exports.BinaryCodecConstraints = BinaryCodecConstraints;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/binaryCodecUtils.js
var require_binaryCodecUtils = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/binaryCodecUtils.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBigNumber = exports.decodeString = exports.decodeBool = exports.decodeUnsignedNumber = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var typesystem_1 = require_typesystem();
    var binary_1 = require_binary();
    var Codec = new binary_1.BinaryCodec();
    function decodeUnsignedNumber(buffer) {
      let value = Codec.decodeTopLevel(buffer, new typesystem_1.BigUIntType());
      let raw = Number(value.valueOf());
      return raw;
    }
    exports.decodeUnsignedNumber = decodeUnsignedNumber;
    function decodeBool(buffer) {
      let value = Codec.decodeTopLevel(buffer, new typesystem_1.BooleanType());
      let raw = Boolean(value.valueOf());
      return raw;
    }
    exports.decodeBool = decodeBool;
    function decodeString(buffer) {
      let value = Codec.decodeTopLevel(buffer, new typesystem_1.BytesType());
      let raw = String(value.valueOf());
      return raw;
    }
    exports.decodeString = decodeString;
    function decodeBigNumber(buffer) {
      let value = Codec.decodeTopLevel(buffer, new typesystem_1.BigUIntType());
      let raw = new bignumber_js_1.default(value.valueOf());
      return raw;
    }
    exports.decodeBigNumber = decodeBigNumber;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/codec/index.js
var require_codec = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/codec/index.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_binary(), exports);
    __exportStar(require_binaryCodecUtils(), exports);
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/argSerializer.js
var require_argSerializer = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/argSerializer.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArgSerializer = void 0;
    var constants_1 = require_constants();
    var codec_1 = require_codec();
    var typesystem_1 = require_typesystem();
    var algebraic_1 = require_algebraic();
    var composite_1 = require_composite();
    var variadic_1 = require_variadic();
    var defaultArgSerializerOptions = {
      codec: new codec_1.BinaryCodec()
    };
    var ArgSerializer = class {
      constructor(options) {
        options = { ...defaultArgSerializerOptions, ...options };
        this.codec = options.codec;
      }
      /**
       * Reads typed values from an arguments string (e.g. aa@bb@@cc), given parameter definitions.
       */
      stringToValues(joinedString, parameters) {
        let buffers = this.stringToBuffers(joinedString);
        let values = this.buffersToValues(buffers, parameters);
        return values;
      }
      /**
       * Reads raw buffers from an arguments string (e.g. aa@bb@@cc).
       */
      stringToBuffers(joinedString) {
        return joinedString.split(constants_1.ARGUMENTS_SEPARATOR).map((item) => Buffer.from(item, "hex"));
      }
      /**
       * Decodes a set of buffers into a set of typed values, given parameter definitions.
       */
      buffersToValues(buffers, parameters) {
        const self = this;
        buffers = buffers || [];
        let values = [];
        let bufferIndex = 0;
        let numBuffers = buffers.length;
        for (let i = 0; i < parameters.length; i++) {
          let parameter = parameters[i];
          let type = parameter.type;
          let value = readValue(type);
          values.push(value);
        }
        function readValue(type) {
          if (type.hasExactClass(algebraic_1.OptionalType.ClassName)) {
            const typedValue2 = readValue(type.getFirstTypeParameter());
            return new algebraic_1.OptionalValue(type, typedValue2);
          }
          if (type.hasExactClass(variadic_1.VariadicType.ClassName)) {
            return readVariadicValue(type);
          }
          if (type.hasExactClass(composite_1.CompositeType.ClassName)) {
            const typedValues = [];
            for (const typeParameter of type.getTypeParameters()) {
              typedValues.push(readValue(typeParameter));
            }
            return new composite_1.CompositeValue(type, typedValues);
          }
          const typedValue = decodeNextBuffer(type);
          return typedValue;
        }
        function readVariadicValue(type) {
          const variadicType = type;
          const typedValues = [];
          if (variadicType.isCounted) {
            const count = readValue(new typesystem_1.U32Type()).valueOf().toNumber();
            for (let i = 0; i < count; i++) {
              typedValues.push(readValue(type.getFirstTypeParameter()));
            }
          } else {
            while (!hasReachedTheEnd()) {
              typedValues.push(readValue(type.getFirstTypeParameter()));
            }
          }
          return new variadic_1.VariadicValue(variadicType, typedValues);
        }
        function decodeNextBuffer(type) {
          if (hasReachedTheEnd()) {
            return null;
          }
          let buffer = buffers[bufferIndex++];
          let decodedValue = self.codec.decodeTopLevel(buffer, type);
          return decodedValue;
        }
        function hasReachedTheEnd() {
          return bufferIndex >= numBuffers;
        }
        return values;
      }
      /**
       * Serializes a set of typed values into an arguments string (e.g. aa@bb@@cc).
       */
      valuesToString(values) {
        let strings = this.valuesToStrings(values);
        let argumentsString = strings.join(constants_1.ARGUMENTS_SEPARATOR);
        let count = strings.length;
        return { argumentsString, count };
      }
      /**
       * Serializes a set of typed values into a set of strings.
       */
      valuesToStrings(values) {
        let buffers = this.valuesToBuffers(values);
        let strings = buffers.map((buffer) => buffer.toString("hex"));
        return strings;
      }
      /**
       * Serializes a set of typed values into a set of strings buffers.
       * Variadic types and composite types might result into none, one or more buffers.
       */
      valuesToBuffers(values) {
        const self = this;
        const buffers = [];
        for (const value of values) {
          handleValue(value);
        }
        function handleValue(value) {
          if (value.hasExactClass(algebraic_1.OptionalValue.ClassName)) {
            const valueAsOptional = value;
            if (valueAsOptional.isSet()) {
              handleValue(valueAsOptional.getTypedValue());
            }
            return;
          }
          if (value.hasExactClass(variadic_1.VariadicValue.ClassName)) {
            handleVariadicValue(value);
            return;
          }
          if (value.hasExactClass(composite_1.CompositeValue.ClassName)) {
            const valueAsComposite = value;
            for (const item of valueAsComposite.getItems()) {
              handleValue(item);
            }
            return;
          }
          const buffer = self.codec.encodeTopLevel(value);
          buffers.push(buffer);
        }
        function handleVariadicValue(value) {
          const variadicType = value.getType();
          if (variadicType.isCounted) {
            const countValue = new typesystem_1.U32Value(value.getItems().length);
            buffers.push(self.codec.encodeTopLevel(countValue));
          }
          for (const item of value.getItems()) {
            handleValue(item);
          }
        }
        return buffers;
      }
    };
    exports.ArgSerializer = ArgSerializer;
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/returnCode.js
var require_returnCode = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/returnCode.js"(exports) {
    "use strict";
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReturnCode = void 0;
    var ReturnCode = class _ReturnCode {
      constructor(text) {
        this.text = text;
      }
      static fromBuffer(buffer) {
        let text = buffer.toString();
        return new _ReturnCode(text);
      }
      toString() {
        return this.text;
      }
      valueOf() {
        return this.text;
      }
      equals(other) {
        if (!other) {
          return false;
        }
        return this.text == other.text;
      }
      isSuccess() {
        return this.equals(_ReturnCode.Ok) || this.equals(_ReturnCode.None);
      }
    };
    exports.ReturnCode = ReturnCode;
    ReturnCode.None = new ReturnCode("");
    ReturnCode.Ok = new ReturnCode("ok");
    ReturnCode.FunctionNotFound = new ReturnCode("function not found");
    ReturnCode.FunctionWrongSignature = new ReturnCode("wrong signature for function");
    ReturnCode.ContractNotFound = new ReturnCode("contract not found");
    ReturnCode.UserError = new ReturnCode("user error");
    ReturnCode.OutOfGas = new ReturnCode("out of gas");
    ReturnCode.AccountCollision = new ReturnCode("account collision");
    ReturnCode.OutOfFunds = new ReturnCode("out of funds");
    ReturnCode.CallStackOverFlow = new ReturnCode("call stack overflow");
    ReturnCode.ContractInvalid = new ReturnCode("contract invalid");
    ReturnCode.ExecutionFailed = new ReturnCode("execution failed");
    ReturnCode.Unknown = new ReturnCode("unknown");
  }
});

// node_modules/@multiversx/sdk-core/out/smartcontracts/resultsParser.js
var require_resultsParser = __commonJS({
  "node_modules/@multiversx/sdk-core/out/smartcontracts/resultsParser.js"(exports) {
    var import_dist = __toESM(require_dist());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResultsParser = void 0;
    var transaction_decoder_1 = require_transaction_decoder();
    var address_1 = require_address();
    var errors_1 = require_errors();
    var logger_1 = require_logger();
    var argSerializer_1 = require_argSerializer();
    var returnCode_1 = require_returnCode();
    var WellKnownEvents;
    (function(WellKnownEvents2) {
      WellKnownEvents2["OnTransactionCompleted"] = "completedTxEvent";
      WellKnownEvents2["OnSignalError"] = "signalError";
      WellKnownEvents2["OnWriteLog"] = "writeLog";
    })(WellKnownEvents || (WellKnownEvents = {}));
    var WellKnownTopics;
    (function(WellKnownTopics2) {
      WellKnownTopics2["TooMuchGas"] = "@too much gas provided for processing";
    })(WellKnownTopics || (WellKnownTopics = {}));
    var defaultResultsParserOptions = {
      argsSerializer: new argSerializer_1.ArgSerializer()
    };
    var ResultsParser = class {
      constructor(options) {
        options = { ...defaultResultsParserOptions, ...options };
        this.argsSerializer = options.argsSerializer;
      }
      /**
       * Legacy method, use "SmartContractQueriesController.parseQueryResponse()" instead.
       */
      parseQueryResponse(queryResponse, endpoint) {
        let parts = queryResponse.getReturnDataParts();
        let values = this.argsSerializer.buffersToValues(parts, endpoint.output);
        let returnCode = new returnCode_1.ReturnCode(queryResponse.returnCode.toString());
        return {
          returnCode,
          returnMessage: queryResponse.returnMessage,
          values,
          firstValue: values[0],
          secondValue: values[1],
          thirdValue: values[2],
          lastValue: values[values.length - 1]
        };
      }
      /**
       * Legacy method, use "SmartContractQueriesController.parseQueryResponse()" instead.
       */
      parseUntypedQueryResponse(queryResponse) {
        let returnCode = new returnCode_1.ReturnCode(queryResponse.returnCode.toString());
        return {
          returnCode,
          returnMessage: queryResponse.returnMessage,
          values: queryResponse.getReturnDataParts()
        };
      }
      /**
       * Legacy method, use "SmartContractTransactionsOutcomeParser.parseExecute()" instead.
       */
      parseOutcome(transaction, endpoint) {
        const untypedBundle = this.parseUntypedOutcome(transaction);
        const typedBundle = this.parseOutcomeFromUntypedBundle(untypedBundle, endpoint);
        return typedBundle;
      }
      /**
       * @internal
       * For internal use only.
       */
      parseOutcomeFromUntypedBundle(bundle, endpoint) {
        const values = this.argsSerializer.buffersToValues(bundle.values, endpoint.output);
        return {
          returnCode: bundle.returnCode,
          returnMessage: bundle.returnMessage,
          values,
          firstValue: values[0],
          secondValue: values[1],
          thirdValue: values[2],
          lastValue: values[values.length - 1]
        };
      }
      /**
       * Legacy method, use "SmartContractTransactionsOutcomeParser.parseExecute()" instead.
       */
      parseUntypedOutcome(transaction) {
        let bundle;
        let transactionMetadata = this.parseTransactionMetadata(transaction);
        bundle = this.createBundleOnSimpleMoveBalance(transaction);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): on simple move balance");
          return bundle;
        }
        bundle = this.createBundleOnInvalidTransaction(transaction);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): on invalid transaction");
          return bundle;
        }
        bundle = this.createBundleOnEasilyFoundResultWithReturnData(transaction.contractResults);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): on easily found result with return data");
          return bundle;
        }
        bundle = this.createBundleOnSignalError(transaction.logs);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): on signal error");
          return bundle;
        }
        bundle = this.createBundleOnTooMuchGasWarning(transaction.logs);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): on 'too much gas' warning");
          return bundle;
        }
        bundle = this.createBundleOnWriteLogWhereFirstTopicEqualsAddress(transaction.logs, transaction.sender);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): on writelog with topics[0] == tx.sender");
          return bundle;
        }
        bundle = this.createBundleWithCustomHeuristics(transaction, transactionMetadata);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): with custom heuristics");
          return bundle;
        }
        bundle = this.createBundleWithFallbackHeuristics(transaction, transactionMetadata);
        if (bundle) {
          logger_1.Logger.trace("parseUntypedOutcome(): with fallback heuristics");
          return bundle;
        }
        throw new errors_1.ErrCannotParseContractResults(`transaction ${transaction.hash.toString()}`);
      }
      parseTransactionMetadata(transaction) {
        return new transaction_decoder_1.TransactionDecoder().getTransactionMetadata({
          sender: transaction.sender.bech32(),
          receiver: transaction.receiver.bech32(),
          data: transaction.data.toString("base64"),
          value: transaction.value.toString()
        });
      }
      createBundleOnSimpleMoveBalance(transaction) {
        let noResults = transaction.contractResults.items.length == 0;
        let noLogs = transaction.logs.events.length == 0;
        if (noResults && noLogs) {
          return {
            returnCode: returnCode_1.ReturnCode.None,
            returnMessage: returnCode_1.ReturnCode.None.toString(),
            values: []
          };
        }
        return null;
      }
      createBundleOnInvalidTransaction(transaction) {
        if (transaction.status.isInvalid()) {
          if (transaction.receipt.data) {
            return {
              returnCode: returnCode_1.ReturnCode.OutOfFunds,
              returnMessage: transaction.receipt.data,
              values: []
            };
          }
        }
        return null;
      }
      createBundleOnEasilyFoundResultWithReturnData(results) {
        let resultItemWithReturnData = results.items.find((item) => item.nonce.valueOf() != 0 && item.data.startsWith("@"));
        if (!resultItemWithReturnData) {
          return null;
        }
        let { returnCode, returnDataParts } = this.sliceDataFieldInParts(resultItemWithReturnData.data);
        let returnMessage = resultItemWithReturnData.returnMessage || returnCode.toString();
        return {
          returnCode,
          returnMessage,
          values: returnDataParts
        };
      }
      createBundleOnSignalError(logs) {
        let eventSignalError = logs.findSingleOrNoneEvent(WellKnownEvents.OnSignalError);
        if (!eventSignalError) {
          return null;
        }
        let { returnCode, returnDataParts } = this.sliceDataFieldInParts(eventSignalError.data);
        let lastTopic = eventSignalError.getLastTopic();
        let returnMessage = (lastTopic == null ? void 0 : lastTopic.toString()) || returnCode.toString();
        return {
          returnCode,
          returnMessage,
          values: returnDataParts
        };
      }
      createBundleOnTooMuchGasWarning(logs) {
        let eventTooMuchGas = logs.findSingleOrNoneEvent(WellKnownEvents.OnWriteLog, (event) => event.findFirstOrNoneTopic((topic) => topic.toString().startsWith(WellKnownTopics.TooMuchGas)) != void 0);
        if (!eventTooMuchGas) {
          return null;
        }
        let { returnCode, returnDataParts } = this.sliceDataFieldInParts(eventTooMuchGas.data);
        return {
          returnCode,
          returnMessage: returnCode.toString(),
          values: returnDataParts
        };
      }
      createBundleOnWriteLogWhereFirstTopicEqualsAddress(logs, address) {
        let hexAddress = new address_1.Address(address.bech32()).hex();
        let eventWriteLogWhereTopicIsSender = logs.findSingleOrNoneEvent(WellKnownEvents.OnWriteLog, (event) => event.findFirstOrNoneTopic((topic) => topic.hex() == hexAddress) != void 0);
        if (!eventWriteLogWhereTopicIsSender) {
          return null;
        }
        let { returnCode, returnDataParts } = this.sliceDataFieldInParts(eventWriteLogWhereTopicIsSender.data);
        let returnMessage = returnCode.toString();
        return {
          returnCode,
          returnMessage,
          values: returnDataParts
        };
      }
      /**
       * Override this method (in a subclass of {@link ResultsParser}) if the basic heuristics of the parser are not sufficient.
       */
      createBundleWithCustomHeuristics(_transaction, _transactionMetadata) {
        return null;
      }
      createBundleWithFallbackHeuristics(transaction, transactionMetadata) {
        let contractAddress = new address_1.Address(transactionMetadata.receiver);
        for (const resultItem of transaction.contractResults.items) {
          let writeLogWithReturnData = resultItem.logs.findSingleOrNoneEvent(WellKnownEvents.OnWriteLog, (event) => {
            var _a;
            let addressIsSender = event.address.bech32() == transaction.sender.bech32();
            let firstTopicIsContract = ((_a = event.topics[0]) == null ? void 0 : _a.hex()) == contractAddress.hex();
            return addressIsSender && firstTopicIsContract;
          });
          if (writeLogWithReturnData) {
            let { returnCode, returnDataParts } = this.sliceDataFieldInParts(writeLogWithReturnData.data);
            let returnMessage = returnCode.toString();
            return {
              returnCode,
              returnMessage,
              values: returnDataParts
            };
          }
        }
        for (const resultItem of transaction.contractResults.items) {
          let writeLogWithReturnData = resultItem.logs.findSingleOrNoneEvent(WellKnownEvents.OnWriteLog, (event) => {
            const addressIsContract = event.address.bech32() == contractAddress.toBech32();
            return addressIsContract;
          });
          if (writeLogWithReturnData) {
            const { returnCode, returnDataParts } = this.sliceDataFieldInParts(writeLogWithReturnData.data);
            const returnMessage = returnCode.toString();
            return {
              returnCode,
              returnMessage,
              values: returnDataParts
            };
          }
        }
        return null;
      }
      sliceDataFieldInParts(data) {
        let startingIndex = 1;
        if (data.startsWith("ESDTTransfer")) {
          startingIndex = 3;
        } else {
        }
        let parts = this.argsSerializer.stringToBuffers(data);
        let returnCodePart = parts[startingIndex] || Buffer.from([]);
        let returnDataParts = parts.slice(startingIndex + 1);
        if (returnCodePart.length == 0) {
          throw new errors_1.ErrCannotParseContractResults("no return code");
        }
        let returnCode = returnCode_1.ReturnCode.fromBuffer(returnCodePart);
        return { returnCode, returnDataParts };
      }
      /**
       * Legacy method, use "TransactionEventsParser.parseEvent()" instead.
       */
      parseEvent(transactionEvent, eventDefinition) {
        var _a, _b;
        const topics = transactionEvent.topics.map((topic) => Buffer.from(topic.valueOf())).slice(1);
        const legacyData = ((_a = transactionEvent.dataPayload) == null ? void 0 : _a.valueOf()) || Buffer.from([]);
        const dataItems = ((_b = transactionEvent.additionalData) == null ? void 0 : _b.map((data) => Buffer.from(data.valueOf()))) || [];
        if (dataItems.length === 0) {
          if (legacyData.length) {
            dataItems.push(Buffer.from(legacyData));
          }
        }
        return this.doParseEvent({ topics, dataItems, eventDefinition });
      }
      /**
       * @internal
       * For internal use only.
       *
       * Once the legacy "ResultParser" is deprecated & removed, this logic will be absorbed into "TransactionEventsParser".
       */
      doParseEvent(options) {
        const result = {};
        const indexedInputs = options.eventDefinition.inputs.filter((input) => input.indexed);
        const decodedTopics = this.argsSerializer.buffersToValues(options.topics, indexedInputs);
        for (let i = 0; i < indexedInputs.length; i++) {
          result[indexedInputs[i].name] = decodedTopics[i].valueOf();
        }
        const nonIndexedInputs = options.eventDefinition.inputs.filter((input) => !input.indexed);
        const decodedDataParts = this.argsSerializer.buffersToValues(options.dataItems, nonIndexedInputs);
        for (let i = 0; i < nonIndexedInputs.length; i++) {
          result[nonIndexedInputs[i].name] = decodedDataParts[i].valueOf();
        }
        return result;
      }
    };
    exports.ResultsParser = ResultsParser;
  }
});

export {
  require_logger,
  require_typesystem,
  require_codeMetadata2 as require_codeMetadata,
  require_codec,
  require_argSerializer,
  require_returnCode,
  require_resultsParser
};
//# sourceMappingURL=chunk-C426NY4X.js.map
