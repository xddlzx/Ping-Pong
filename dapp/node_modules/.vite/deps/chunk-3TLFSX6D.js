"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  l as l3,
  t as t2
} from "./chunk-PT4ZAT7W.js";
import {
  faTimes
} from "./chunk-TXMYIQV3.js";
import {
  k as k4
} from "./chunk-63SUVNQE.js";
import {
  require_classnames,
  u as u6
} from "./chunk-S677S367.js";
import {
  Cn,
  P as P2,
  T as T2,
  j,
  n as n2,
  u as u5
} from "./chunk-Q23JG3F6.js";
import {
  s as s3
} from "./chunk-UUNB4OK2.js";
import {
  A as A4
} from "./chunk-DANFAIW7.js";
import {
  p as p7
} from "./chunk-KL3RVTCS.js";
import {
  N as N5,
  p2 as p6
} from "./chunk-B2F7MDWY.js";
import {
  io
} from "./chunk-P6UDNJ3P.js";
import {
  d as d6
} from "./chunk-REBRBBAX.js";
import {
  I as I4
} from "./chunk-4Y4NHRAJ.js";
import {
  A as A2
} from "./chunk-X74RERH2.js";
import {
  Y as Y2
} from "./chunk-X4QWOPZU.js";
import {
  s as s2
} from "./chunk-NLJ5ZWYL.js";
import {
  A2 as A3,
  a as a3
} from "./chunk-Q76JCXYQ.js";
import {
  C2 as C3,
  S as S4,
  p as p5,
  u as u4,
  useSWR
} from "./chunk-DLUMZFAB.js";
import {
  v as v2
} from "./chunk-Q2ALSPT4.js";
import {
  N as N2,
  V,
  import_operation,
  import_walletConnectV2Provider,
  n,
  require_out2,
  require_out3,
  require_out4,
  s,
  z
} from "./chunk-GWYV5Q5U.js";
import {
  p as p4
} from "./chunk-4JMTGKNX.js";
import {
  I as I3
} from "./chunk-46YI7JI6.js";
import {
  C,
  F,
  N2 as N4,
  R3 as R,
  S2 as S3,
  U,
  br,
  d as d2,
  d2 as d3,
  d4,
  o,
  p2 as p3,
  x3
} from "./chunk-DZSHGTAC.js";
import {
  b,
  g as g2,
  o as o2,
  y
} from "./chunk-6OCHV4EV.js";
import {
  C as C2,
  I as I2,
  d as d5,
  g as g3,
  k as k3,
  m as m2,
  r,
  u as u3
} from "./chunk-KMSODH52.js";
import {
  d,
  k as k2
} from "./chunk-EBUGIFUX.js";
import {
  require_react_dom
} from "./chunk-5MLKHMR6.js";
import {
  A2 as A,
  D,
  L,
  N2 as N3,
  O2 as O,
  P,
  Y2 as Y,
  _2 as _,
  a as a2,
  an,
  c as c3,
  f,
  f2,
  g4 as g,
  i,
  l,
  l3 as l2,
  on,
  p2 as p,
  p3 as p2,
  q2 as q,
  tn,
  u2,
  v as v3,
  x,
  x2,
  z2
} from "./chunk-DODOUSNB.js";
import {
  FontAwesomeIcon
} from "./chunk-7GJK4ZO7.js";
import {
  N,
  S,
  a,
  k
} from "./chunk-FFVP3WMN.js";
import {
  I2 as I,
  S2,
  T2 as T,
  c2 as c,
  c4 as c2,
  m,
  t2 as t
} from "./chunk-HXV3SQ6S.js";
import {
  u
} from "./chunk-EKHLTR53.js";
import {
  Q,
  e,
  import_CrossWindowProvider
} from "./chunk-N7F464ZJ.js";
import {
  Bt,
  W,
  gt,
  v,
  xt,
  yt
} from "./chunk-5CKZHQYH.js";
import {
  require_react
} from "./chunk-IRELMTUJ.js";
import {
  require_out
} from "./chunk-5HSAGO3O.js";
import {
  __toESM,
  require_dist
} from "./chunk-UOCZJ3B4.js";

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-NKJDO5GI.js
var import_dist = __toESM(require_dist());
var import_react = __toESM(require_react());
v();
var h = (e2) => {
  let [n3, a5] = (0, import_react.useState)(false), t4 = () => {
    a5(true);
  }, l6 = () => {
    a5(false);
  };
  return (0, import_react.useEffect)(() => {
    (e2 == null ? void 0 : e2.visible) === true ? t4() : (e2 == null ? void 0 : e2.visible) === false && l6();
  }, [e2 == null ? void 0 : e2.visible]), { handleShowModal: t4, handleHideModal: l6, showModal: n3 };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-QIXIXDAL.js
var import_dist2 = __toESM(require_dist());
var import_react2 = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
v();
var s4 = ({ className: t4, children: a5, styles: o5 }) => import_react2.default.createElement("div", { className: (0, import_classnames.default)(o5 == null ? void 0 : o5.dappModalBody, t4) }, a5);
var S5 = u6(s4, { ssrStyles: () => import("./dappModalStyles-WBX6XPBQ.js"), clientStyles: () => (l3(), gt(t2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-YMH2KQQK.js
var import_dist3 = __toESM(require_dist());
var import_react3 = __toESM(require_react());
var import_classnames2 = __toESM(require_classnames());
v();
var f4 = ({ visible: i5, customFooter: e2, className: a5, footerText: l6, styles: o5 }) => i5 ? import_react3.default.createElement("div", { className: (0, import_classnames2.default)(o5 == null ? void 0 : o5.dappModalFooter, a5) }, e2 != null ? e2 : import_react3.default.createElement("div", null, l6)) : null;
var D2 = u6(f4, { ssrStyles: () => import("./dappModalStyles-WBX6XPBQ.js"), clientStyles: () => (l3(), gt(t2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-W2MGORQV.js
var import_dist4 = __toESM(require_dist());
var import_react4 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());
v();
var C4 = ({ visible: m7, headerText: t4, customHeader: a5, className: e2, closeButtonClassName: f8, headerTextClassName: T4, onHide: u10, globalStyles: o5, styles: r4 }) => m7 ? a5 ? import_react4.default.createElement("div", { className: (0, import_classnames3.default)(r4 == null ? void 0 : r4.dappModalHeader, e2) }, a5) : import_react4.default.createElement("div", { className: (0, import_classnames3.default)(r4 == null ? void 0 : r4.dappModalHeader, e2) }, import_react4.default.createElement("div", { className: (0, import_classnames3.default)(r4 == null ? void 0 : r4.dappModalHeaderText, T4) }, t4), import_react4.default.createElement("button", { onClick: u10, className: (0, import_classnames3.default)(r4 == null ? void 0 : r4.dappModalCloseButton, o5 == null ? void 0 : o5.btn, o5 == null ? void 0 : o5.btnLight, f8) }, import_react4.default.createElement(FontAwesomeIcon, { size: "lg", icon: faTimes }))) : null;
var q2 = u6(C4, { ssrStyles: () => import("./dappModalStyles-WBX6XPBQ.js"), clientStyles: () => (l3(), gt(t2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-KNQINYMW.js
var import_dist5 = __toESM(require_dist());
var import_react5 = __toESM(require_react());
var import_react6 = __toESM(require_react());
var import_react7 = __toESM(require_react());
var import_classnames4 = __toESM(require_classnames());
var import_react_dom = __toESM(require_react_dom());
v();
T();
var z3 = { showHeader: true, showFooter: false, headerText: "", footerText: "" };
var A5 = ({ "data-testid": i5 = "dappModal", children: n3, className: f8 = "dapp-modal-dialog-wrapper", closeOnEscape: c5, config: u10 = z3, id: C7 = "dapp-modal", onHide: e2, parentElement: d8, visible: h4, styles: a5 }) => {
  let [M, N6] = (0, import_react6.useState)(false);
  if ((0, import_react7.useEffect)(() => {
    N6(true);
  }, []), !h4) return null;
  let { showHeader: g4, showFooter: D4, headerText: T4, footerText: x5, modalDialogClassName: y2 = "dapp-modal-dialog", modalContentClassName: v5 = "dapp-modal-dialog-content", modalHeaderClassName: b2 = "dapp-modal-dialog-header", modalHeaderTextClassName: w = "dapp-modal-dialog-header-text", modalCloseButtonClassName: B = "dapp-modal-dialog-close-button", modalBodyClassName: F2 = "dapp-modal-dialog-content-body", modalFooterClassName: S8 = "dapp-modal-dialog-footer", customModalHeader: E3, customModalFooter: H2 } = u10, I6 = (K) => {
    K.key === "Escape" && c5 && (e2 == null || e2());
  };
  return import_react5.default.createElement(import_react5.default.Fragment, null, M && (0, import_react_dom.createPortal)(import_react5.default.createElement("div", { id: C7, role: "dialog", "aria-modal": "true", className: (0, import_classnames4.default)(y2, a5 == null ? void 0 : a5.dappModal, f8), "data-testid": i5, onKeyDown: I6 }, import_react5.default.createElement("div", { className: (0, import_classnames4.default)(a5 == null ? void 0 : a5.dappModalContent, v5) }, import_react5.default.createElement(q2, { visible: g4, headerText: T4, customHeader: E3, className: b2, headerTextClassName: w, closeButtonClassName: B, onHide: e2 }), import_react5.default.createElement(S5, { className: F2 }, n3), import_react5.default.createElement(D2, { visible: D4, customFooter: H2, footerText: x5, className: S8 }))), d8 != null ? d8 : document == null ? void 0 : document.body));
};
var po = u6(A5, { ssrStyles: () => import("./dappModalStyles-WBX6XPBQ.js"), clientStyles: () => (l3(), gt(t2)).default });

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-H65OAK2V.js
var import_dist6 = __toESM(require_dist());
v();
S3();
g();
function h2() {
  let r4 = k2(p3), a5 = d();
  return { notification: r4, clearNotification: () => a5(N3()) };
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-NLNFARHY.js
var import_dist7 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VPGECZPA.js
var import_dist8 = __toESM(require_dist());
var import_react8 = __toESM(require_react());
v();
var p9 = (e2, n3) => {
  let [o5, r4] = (0, import_react8.useState)(e2);
  return (0, import_react8.useEffect)(() => {
    let s8 = setTimeout(() => r4(e2), n3);
    return () => clearTimeout(s8);
  }, [e2]), o5;
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VIHCLOWS.js
var import_dist9 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VE3N7X4M.js
var import_dist10 = __toESM(require_dist());
v();
S3();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-XW2JSQNC.js
var import_dist11 = __toESM(require_dist());
var import_react9 = __toESM(require_react());
v();
S3();
u();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-NATPL7A2.js
var import_dist12 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-ZRU3XKDC.js
var import_dist13 = __toESM(require_dist());
v();
y();
N4();
function u7({ parsedTransactionsByDataField: t4, data: n3, txInfo: e2 }) {
  !t4 || (t4[n3] = e2);
}
function I5({ transactions: t4 }) {
  let n3 = {}, e2 = [];
  return !t4 || t4.length === 0 ? { allTransactions: e2, parsedTransactionsByDataField: n3 } : (t4.forEach((o5, f8) => {
    let l6 = o5.getData().toString(), r4 = F(l6);
    if (r4.length > 0) r4.forEach((a5, i5) => {
      let s8 = { transaction: o5, multiTxData: a5.data, transactionIndex: i5 };
      u7({ parsedTransactionsByDataField: n3, data: a5.data, txInfo: { tokenId: a5.token ? a5.token : "", amount: a5.amount ? a5.amount : "", type: a5.type, nonce: a5.nonce ? a5.nonce : "", multiTxData: a5.data, receiver: a5.receiver } }), e2.push(s8);
    });
    else {
      let a5 = o5.getData().toString(), { tokenId: i5, amount: s8 } = b(a5);
      i5 && u7({ parsedTransactionsByDataField: n3, data: a5, txInfo: { tokenId: i5, amount: s8, receiver: o5.getReceiver().bech32() } }), e2.push({ transaction: o5, transactionIndex: f8, multiTxData: a5 });
    }
  }), { allTransactions: e2, parsedTransactionsByDataField: n3 });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-XFLZZ57I.js
var import_dist14 = __toESM(require_dist());
var import_react10 = __toESM(require_react());
v();
var T3 = { tokenId: "", amount: "", type: "", multiTxData: "", receiver: "" };
function m4({ transactions: n3 }) {
  let [a5, o5] = (0, import_react10.useState)({}), [c5, l6] = (0, import_react10.useState)([]);
  function p17(e2, t4) {
    return a5 == null ? T3 : e2 in a5 ? a5[e2] : t4 != null && String(t4) in a5 ? a5[t4] : T3;
  }
  function u10() {
    let { allTransactions: e2, parsedTransactionsByDataField: t4 } = I5({ transactions: n3 });
    l6(e2), o5(t4);
  }
  return (0, import_react10.useEffect)(() => {
    u10();
  }, [n3 == null ? void 0 : n3.length]), { parsedTransactionsByDataField: a5, getTxInfoByDataField: p17, allTransactions: c5 };
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-ILYFBZMT.js
var import_dist15 = __toESM(require_dist());
var import_react11 = __toESM(require_react());
var import_sdk_core = __toESM(require_out());
v();
T();
i();
o();
var D3 = {};
var Nn = ({ isLedger: b2 = false, transactionsToSign: h4, egldLabel: Z2, address: g4, activeGuardianAddress: I6, hasGuardianScreen: $, onCancel: a5, onSignTransaction: C7, onTransactionsSignError: nn, onTransactionsSignSuccess: G2, onGetScamAddressData: M }) => {
  var L4, U2, W3, _2;
  let A6 = Boolean(I6), [c5, i5] = (0, import_react11.useState)(0), [l6, E3] = (0, import_react11.useState)(), [e2, en] = (0, import_react11.useState)(null), [tn2, F2] = (0, import_react11.useState)(false), { getTxInfoByDataField: sn, allTransactions: s8 } = m4({ transactions: I6 ? h4 == null ? void 0 : h4.map((n3) => {
    n3.setSender(import_sdk_core.Address.fromBech32(g4)), n3.setVersion(import_sdk_core.TransactionVersion.withTxOptions()), n3.setGuardian(import_sdk_core.Address.fromBech32(I6));
    let t4 = yt({ guarded: true }, b2 ? { hashSign: true } : {});
    return n3.setOptions(import_sdk_core.TransactionOptions.withOptions(t4)), n3;
  }) : h4 }), w = c5 === s8.length - 1, B = s8[c5], f8 = (L4 = e2 == null ? void 0 : e2.transaction) == null ? void 0 : L4.getSender().toString(), { data: O5 } = A4(!f8 || f8 === g4 ? null : f8), rn = () => Bt(void 0, null, function* () {
    var j3;
    if (B == null) return;
    let { transaction: n3, multiTxData: t4, transactionIndex: T4 } = B, v5 = n3.getData().toString(), u10 = sn(n3.getData().toString(), t4), { tokenId: p17 } = u10, r4 = n3.getReceiver().toString();
    if (f8 && f8 !== g4 && !n2(O5, g4)) return console.error(S2), a5 == null ? void 0 : a5();
    let o5 = g4 !== r4, R2 = r4 in D3;
    if (r4 && o5 && !R2 && M != null) {
      let m7 = yield M(r4);
      D3 = yt(yt({}, D3), m7 != null && m7.scamInfo ? { [r4]: m7.scamInfo } : {});
    }
    let S8 = Boolean(p17 && d2({ tokenId: p17, erdLabel: Z2 }));
    en({ transaction: n3, receiverScamInfo: ((j3 = D3[r4]) == null ? void 0 : j3.info) || null, transactionTokenInfo: u10, isTokenTransaction: S8, dataField: v5, transactionIndex: T4 });
  });
  (0, import_react11.useEffect)(() => {
    rn();
  }, [B, O5]);
  let N6 = () => {
    i5(0), E3(void 0), F2(false);
  }, P5 = () => Bt(void 0, null, function* () {
    let n3 = Object.values(l6 != null ? l6 : {}), t4 = u5({ isGuarded: A6, transactions: n3 });
    if (A6 && t4) {
      G2(n3), N6();
      return;
    }
    if (e2 == null) return;
    F2(b2);
    let T4;
    try {
      T4 = yield C7(e2.transaction);
    } catch (o5) {
      console.error(o5, "sign error");
      let { message: R2 } = o5, S8 = b2 ? x(o5).errorMessage : null;
      N6(), nn(S8 != null ? S8 : R2);
      return;
    }
    if (!T4) return;
    let v5 = { [c5]: T4 }, u10 = l6 ? yt(yt({}, l6), v5) : v5;
    if (E3(u10), !w) {
      i5((o5) => o5 + 1), F2(false);
      return;
    }
    if (!u10) return;
    let p17 = Object.values(u10);
    !u5({ isGuarded: A6, transactions: p17 }) && $ || (G2(p17), N6());
  }), on2 = () => Bt(void 0, null, function* () {
    try {
      if (e2 == null) return;
      if (e2.transaction.getSignature().toString("hex") && !w) {
        i5((t4) => t4 + 1);
        return;
      }
      yield P5();
    } catch (n3) {
      console.error("Error during signing transaction"), yield P5();
    }
  }), an2 = c5 === 0, cn = () => {
    an2 ? a5 == null || a5() : i5((n3) => n3 - 1);
  }, V2 = Boolean(((U2 = e2 == null ? void 0 : e2.transactionTokenInfo) == null ? void 0 : U2.type) && ((W3 = e2 == null ? void 0 : e2.transactionTokenInfo) == null ? void 0 : W3.multiTxData) && !(e2 != null && e2.dataField.endsWith((_2 = e2 == null ? void 0 : e2.transactionTokenInfo) == null ? void 0 : _2.multiTxData)));
  return { allTransactions: s8, onSignTransaction: () => Bt(void 0, null, function* () {
    if (V2) {
      i5((n3) => n3 + 1);
      return;
    }
    yield on2();
  }), onNext: () => {
    i5((n3) => {
      let t4 = n3 + 1;
      return t4 > (s8 == null ? void 0 : s8.length) ? n3 : t4;
    });
  }, onPrev: () => {
    i5((n3) => {
      let t4 = n3 - 1;
      return t4 < 0 ? n3 : t4;
    });
  }, waitingForDevice: tn2, onAbort: cn, isLastTransaction: w, isFirstTransaction: c5 === 0, hasMultipleTransactions: s8.length > 1, shouldContinueWithoutSigning: V2, currentStep: c5, signedTransactions: l6, setSignedTransactions: E3, currentTransaction: e2 };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VJOFL77X.js
var import_dist16 = __toESM(require_dist());
v();
t();
g();
function S6() {
  let n3 = d();
  return (e2) => {
    n3(_()), n3(A(e2)), n3(on(c2));
  };
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-ZJEOPC5D.js
var import_dist17 = __toESM(require_dist());
v();
S4();
S3();
g();
u();
u2();
d3();
c3();
function In(N6) {
  let { onCancel: F2, verifyReceiverScam: U2 = true, hasGuardianScreen: I6 } = N6, { transactionsToSign: q3, hasTransactions: B } = Cn(), V2 = k2(m2), j3 = P2(), z4 = k2(I2), { account: H2 } = p4(), { address: J, isGuarded: l6, activeGuardianAddress: K } = H2, { provider: O5, providerType: Q2 } = v2(), r4 = d(), X = S6(), { transactions: Y4, sessionId: e2, callbackRoute: i5, customTransactionInformation: a5 } = q3 || {};
  function Z2(n3) {
    e2 && r4(tn({ sessionId: e2, status: "cancelled" })), r4(an(n3));
  }
  let { pathname: _2 } = f(), $ = i5 != null && _2.includes(i5), u10 = !(a5 != null && a5.skipGuardian);
  function nn(n3) {
    return Bt(this, null, function* () {
      if (!T2(n3)) return;
      let { needs2FaSigning: S8, guardTransactions: tn2 } = j({ transactions: n3, sessionId: e2, callbackRoute: i5, isGuarded: l6 && u10, walletAddress: V2 }), p17 = n3.map((t4) => U(t4));
      if (S8) {
        let t4 = yield tn2();
        p17 = t4 ? t4.map((rn) => U(rn)) : [];
      }
      !e2 || (r4(tn({ sessionId: e2, status: "signed", transactions: p17 })), i5 != null && (a5 == null ? void 0 : a5.redirectAfterSign) && !$ && l({ url: i5 }));
    });
  }
  function en() {
    F2(), X(e2);
  }
  function an2(n3) {
    return Bt(this, null, function* () {
      let T4 = Q2 !== "ledger" ? O5 : yield j3();
      return n3 ? yield T4.signTransaction(n3) : null;
    });
  }
  let g4 = Nn({ address: J, egldLabel: z4, activeGuardianAddress: l6 && u10 ? K : void 0, transactionsToSign: B ? Y4 : [], onGetScamAddressData: U2 ? C3 : null, isLedger: d6("ledger"), hasGuardianScreen: I6, onCancel: en, onSignTransaction: an2, onTransactionsSignError: Z2, onTransactionsSignSuccess: nn });
  return xt(yt({}, g4), { callbackRoute: i5, waitingForDevice: g4.waitingForDevice });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-BCMFPRDP.js
var import_dist18 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-GE5HEYUM.js
var import_dist19 = __toESM(require_dist());
v();
S3();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-NGOTHU6C.js
var import_dist20 = __toESM(require_dist());
v();
var r2 = {};
var s7 = { setItem: (e2, a5) => Bt(void 0, null, function* () {
  try {
    r2[e2] = JSON.stringify(a5);
  } catch (n3) {
    console.error("tokenDataStorage unable to serialize", n3);
  }
}), getItem: (e2) => Bt(void 0, null, function* () {
  try {
    return JSON.parse(r2[e2]);
  } catch (a5) {
    console.error("tokenDataStorage unable to parse", a5);
  }
}), clear: () => Bt(void 0, null, function* () {
  r2 = {};
}), removeItem: (e2) => Bt(void 0, null, function* () {
  delete r2[e2];
}) };

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-UV5UAFY5.js
var import_dist21 = __toESM(require_dist());
v();
p5();
d5();
l2();
function P3(t4) {
  return Bt(this, null, function* () {
    let { apiAddress: c5, apiTimeout: p17 } = r(a2.getState()), f8 = { baseURL: c5, timeout: Number(p17) }, o5 = yield s7.getItem(t4);
    if (o5) return o5;
    let a5 = yield u4.get(t4, f8);
    return yield s7.setItem(t4, a5.data), a5.data;
  });
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-WTXZ7IB6.js
var import_dist22 = __toESM(require_dist());
v();
N();
o2();
function S7({ tokenId: n3 }) {
  var s8, e2, o5, a5;
  let { network: r4 } = p7(), { isNft: y2 } = g2(n3), t4 = n3, b2 = y2 ? a : k, { data: i5, error: k6, isLoading: N6 } = useSWR(Boolean(t4) ? `${r4.apiAddress}/${b2}/${t4}` : null, P3);
  if (!t4) return { tokenDecimals: Number(r4.decimals), tokenLabel: "", tokenAvatar: "" };
  let l6 = i5 ? i5 == null ? void 0 : i5.decimals : Number(r4.decimals), A6 = i5 ? i5 == null ? void 0 : i5.name : "", D4 = i5 ? (a5 = (s8 = i5 == null ? void 0 : i5.assets) == null ? void 0 : s8.svgUrl) != null ? a5 : (o5 = (e2 = i5 == null ? void 0 : i5.media) == null ? void 0 : e2[0]) == null ? void 0 : o5.thumbnailUrl : "";
  return { isLoading: N6, tokenDecimals: l6, tokenLabel: A6, type: i5 == null ? void 0 : i5.type, tokenAvatar: D4, identifier: i5 == null ? void 0 : i5.identifier, assets: i5 == null ? void 0 : i5.assets, esdtPrice: i5 == null ? void 0 : i5.price, ticker: i5 == null ? void 0 : i5.ticker, name: i5 == null ? void 0 : i5.name, error: k6 };
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-EXPQZSPO.js
var import_dist23 = __toESM(require_dist());
v();
S3();
function p13(e2) {
  return k2((n3) => d4(n3, e2));
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-FMSYULYF.js
var import_dist24 = __toESM(require_dist());
v();
S3();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-GJBN2JNK.js
var import_dist25 = __toESM(require_dist());
v();
u();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-LSFCWNTR.js
var import_dist26 = __toESM(require_dist());
v();
S3();
var m5 = () => k2(br);

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-TSJVB25X.js
var import_dist27 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-HPQLY4CJ.js
var import_dist28 = __toESM(require_dist());
var import_react12 = __toESM(require_react());
v();
t();
p2();
Q();
p();
x2();
x2();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-E3SDNWZO.js
var import_dist29 = __toESM(require_dist());
var import_react13 = __toESM(require_react());
var import_sdk_opera_provider = __toESM(require_out3());
v();
t();
p2();
Q();
p();
x2();
c3();
var ao = ({ callbackRoute: n3, token: E3, nativeAuth: c5, onLoginRedirect: P5 }) => {
  let [l6, U2] = (0, import_react13.useState)(""), [A6, r4] = (0, import_react13.useState)(false), C7 = c5 != null, t4 = Y2(c5), o5 = E3, D4 = d(), p17 = s2();
  function F2() {
    return Bt(this, null, function* () {
      if (p17) throw new Error(I);
      I4(), r4(true);
      let e2 = import_sdk_opera_provider.OperaProvider.getInstance();
      try {
        if (!(yield e2.init())) {
          console.warn("Something went wrong trying to redirect to wallet login..");
          return;
        }
        let { origin: N6 } = f(), G2 = D(), M = encodeURIComponent(`${N6}${n3 != null ? n3 : G2}`);
        if (C7 && !o5 && (o5 = yield t4.getNativeAuthLoginToken(), !o5)) {
          console.warn("Fetching block failed. Login cancelled.");
          return;
        }
        o5 && t4.setLoginToken(o5);
        let _2 = yt({ callbackUrl: M }, o5 && { token: o5 });
        yield e2.login(_2), n(e2);
        let { signature: g4, address: i5 } = e2.account;
        if (!i5) {
          r4(false), console.warn("Login cancelled.");
          return;
        }
        g4 && o5 && t4.setTokenLoginInfo({ signature: g4, address: i5 }), D4(f2({ address: i5, loginMethod: "opera" })), L({ callbackRoute: n3, onLoginRedirect: P5, options: { signature: g4, address: i5 } });
      } catch (a5) {
        console.error("error loging in", a5), U2("error logging in" + a5.message);
      } finally {
        r4(false);
      }
    });
  }
  let s8 = Boolean(l6);
  return [F2, { loginFailed: s8, error: l6, isLoading: A6 && !s8, isLoggedIn: p17 && !s8 }];
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-B3K3DFOC.js
var import_dist30 = __toESM(require_dist());
var import_react14 = __toESM(require_react());
var import_out = __toESM(require_out4());
v();
t();
p2();
Q();
p();
x2();
x2();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-OX4NDJUW.js
var import_dist31 = __toESM(require_dist());
var import_react15 = __toESM(require_react());
v();
c();
t();
e();
p2();
d5();
g();
Q();
a3();
p();
c3();
var Mo = ({ callbackRoute: e2, token: _2, nativeAuth: m7, onLoginRedirect: B, hasConsentPopup: H2, walletAddress: t4 }) => {
  let [f8, R2] = (0, import_react15.useState)(""), [$, r4] = (0, import_react15.useState)(false), l6 = m7 != null, s8 = Y2(m7), o5 = _2, z4 = k2(r), a5 = d(), L4 = s2();
  function j3() {
    return Bt(this, null, function* () {
      if (L4) throw new Error(I);
      I4({ skipLoginMethod: "crossWindow" }), r4(true);
      let q3 = yield import_CrossWindowProvider.CrossWindowProvider.getInstance().init(), g4 = import_CrossWindowProvider.CrossWindowProvider.getInstance().setWalletUrl(t4 != null ? t4 : z4.walletAddress);
      try {
        if (!q3) {
          console.warn("Something went wrong trying to redirect to wallet login..");
          return;
        }
        let { origin: i5, pathname: J } = f(), K = encodeURIComponent(`${i5}${e2 != null ? e2 : J}`);
        if (l6 && !o5 && (o5 = yield s8.getNativeAuthLoginToken(), !o5)) {
          console.warn("Fetching block failed. Login cancelled.");
          return;
        }
        o5 && s8.setLoginToken(o5);
        let Q2 = yt({ callbackUrl: K }, o5 && { token: o5 });
        (m && l6 || H2) && g4.setShouldShowConsentPopup(true);
        let { signature: u10, address: w, multisig: V2, impersonate: X } = yield g4.login(Q2);
        if (n(g4), !w) {
          r4(false), console.warn("Login cancelled.");
          return;
        }
        let n3 = yield A2({ loginToken: o5, extraInfoData: { multisig: V2, impersonate: X }, address: w, signature: u10, loginService: s8 });
        if (!n3) return;
        a5(f2({ address: n3.address, loginMethod: "crossWindow" })), a5(Y(n3.address)), a5(O(xt(yt({}, n3), { nonce: A3(n3) }))), L({ callbackRoute: e2, onLoginRedirect: B, options: { signature: u10, address: n3.address } });
      } catch (i5) {
        console.error("error loging in", i5), R2("error logging in" + i5.message);
      } finally {
        r4(false);
      }
    });
  }
  let c5 = Boolean(f8);
  return [j3, { loginFailed: c5, error: f8, isLoading: $ && !c5, isLoggedIn: L4 && !c5 }];
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-H5MZBKOG.js
var import_dist32 = __toESM(require_dist());
var import_react16 = __toESM(require_react());
v();
T();
var P4 = ({ hideButtonWhenModalOpens: f8, onContentHide: o5, onContentShow: s8, onModalCloses: e2, onModalOpens: t4, token: c5, wrapContentInsideModal: r4 }) => {
  let m7 = I3(), [n3, d8] = (0, import_react16.useState)(false), { handleShowModal: g4, handleHideModal: w, showModal: M } = h(), y2 = k4(c5), I6 = !f8 || !n3, i5 = () => {
    d8(false), o5 == null || o5(), r4 ? (w(), e2 == null || e2()) : e2 && (console.warn('Deprecated: "onModalCloses" must be used only when "wrapContentInsideModal" is set to "true". Use "onContentHide" instead.'), e2());
  };
  return { disabledConnectButton: y2, handleCloseModal: i5, handleOpenModal: () => {
    if (m7) throw new Error(I);
    if (n3) return i5();
    d8(true), s8 == null || s8(), r4 ? (g4(), t4 == null || t4()) : t4 && (console.warn('Deprecated: "onModalOpens" must be used only when "wrapContentInsideModal" is set to "true". Use "onContentShow" instead.'), t4());
  }, shouldRenderButton: I6, showContent: n3, showModal: M };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-L3ERSIIK.js
var import_dist33 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-4UGEM7KX.js
var import_dist34 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-EMI5INPM.js
var import_dist35 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-YYGVJULM.js
var import_dist36 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-R5ZOBQLY.js
var import_dist37 = __toESM(require_dist());
var import_react17 = __toESM(require_react());
v();
var p16 = 10;
var v4 = () => {
  let [d8, r4] = (0, import_react17.useState)(""), [c5, i5] = (0, import_react17.useState)(false), [l6, t4] = (0, import_react17.useState)(0), [a5, g4] = (0, import_react17.useState)([]), [u10, s8] = (0, import_react17.useState)(null), [S8, A6] = (0, import_react17.useState)(false);
  return { accounts: a5, defaultAddressesPerPage: p16, error: d8, isLoading: c5, onGoToNextPage: () => {
    s8(null), t4((e2) => e2 + 1);
  }, onGoToPrevPage: () => {
    s8(null), t4((e2) => e2 === 0 ? 0 : e2 - 1);
  }, onGoToSpecificPage: (e2) => {
    s8(null), t4(e2);
  }, onSelectAddress: (e2) => {
    s8(e2);
  }, selectedAddress: u10, setAccounts: g4, setError: r4, setIsLoading: i5, setShowAddressList: A6, showAddressList: S8, startIndex: l6 };
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-MY2PIBKK.js
var import_dist38 = __toESM(require_dist());
var import_react18 = __toESM(require_react());
var import_sdk_hw_provider = __toESM(require_out2());
v();
t();
p2();
S3();
g();
Q();
p();
var f7 = "Check if the MultiversX App is open on Ledger";
var Xe = ({ callbackRoute: P5, token: oe, addressesPerPage: L4, nativeAuth: x5, onLoginRedirect: k6 }) => {
  let E3 = k2(C), i5 = s(), c5 = d(), z4 = s2(), ne = x5 != null, m7 = Y2(x5), l6 = oe, { accounts: r4, setAccounts: ie, isLoading: b2, setIsLoading: s8, setShowAddressList: h4, showAddressList: y2, startIndex: u10, selectedAddress: a5, onGoToPrevPage: re, onGoToNextPage: se, onGoToSpecificPage: ae, onSelectAddress: de, error: w, setError: p17, defaultAddressesPerPage: ce } = v4(), le = L4 != null ? L4 : ce, [C7, ge] = (0, import_react18.useState)(""), [H2, fe] = (0, import_react18.useState)(false), G2 = ({ address: e2, index: t4, signature: o5 }) => {
    c5(v3({ index: t4, loginType: "ledger" })), o5 && m7.setTokenLoginInfo({ signature: o5, address: e2 }), c5(f2({ address: e2, loginMethod: "ledger" })), L({ callbackRoute: P5, onLoginRedirect: k6, options: { address: e2, signature: o5 } });
  }, n3 = (e2, t4 = "") => {
    var o5;
    if (b2) {
      let { errorMessage: I6, defaultErrorMessage: ye } = x(e2), we = (o5 = I6 != null ? I6 : ye) != null ? o5 : f7;
      p17(`${we}.${t4}`), s8(false), c5(q(null));
    }
  }, g4 = () => Bt(void 0, null, function* () {
    try {
      if (i5 instanceof import_sdk_hw_provider.HWProvider && i5.isInitialized()) return i5.isConnected();
    } catch (e2) {
      n3(e2);
    }
    return false;
  }), ue = () => Bt(void 0, null, function* () {
    if (yield g4()) {
      p17(""), s8(false);
      return;
    }
    try {
      let t4 = new import_sdk_hw_provider.HWProvider();
      (yield t4.init()) && n(t4), p17(""), s8(false);
    } catch (t4) {
      n3(t4);
    }
  }), pe = () => Bt(void 0, null, function* () {
    let e2 = yield g4();
    if (!a5 || !e2) return n3(f7);
    let { index: t4 } = a5;
    if (ne && !l6 && (l6 = yield m7.getNativeAuthLoginToken(), !l6)) {
      console.warn("Fetching block failed. Login cancelled.");
      return;
    }
    if (l6) {
      m7.setLoginToken(l6);
      try {
        let o5 = yield i5.tokenLogin({ token: W.Buffer.from(`${l6}{}`), addressIndex: t4 });
        G2({ address: o5.address, index: t4, signature: o5.signature.toString("hex") });
      } catch (o5) {
        n3(o5, ". Update MultiversX App to continue.");
      }
    } else try {
      let { address: o5 } = yield i5.login({ addressIndex: t4 });
      G2({ address: o5, index: t4 });
    } catch (o5) {
      return n3(o5), false;
    }
    return true;
  }), Le = () => Bt(void 0, null, function* () {
    try {
      if (s8(true), a5 == null) return false;
      c5(E3 ? z2(a5) : q(xt(yt({}, a5), { version: C7, hasContractDataEnabled: H2 }))), s8(false), yield pe();
    } catch (e2) {
      n3(e2);
    }
    return h4(false), true;
  }), D4 = () => Bt(void 0, null, function* () {
    if (!(yield g4())) return n3(w);
    try {
      s8(true);
      let t4 = yield i5.getAccounts(u10, le), o5 = yield N2(i5);
      ge(o5.version), fe(o5.dataEnabled), ie(t4), s8(false);
    } catch (t4) {
      n3(t4);
    }
  }), me = () => Bt(void 0, null, function* () {
    if (z4) throw new Error(I);
    I4(), p17("");
    try {
      if (s8(true), !(yield g4())) return n3(f7);
      if (E3 != null) {
        if (!a5) return n3(f7);
        let { address: t4 } = yield i5.login({ addressIndex: a5.index.valueOf() });
        if (!t4) return n3("Login cancelled.");
        c5(f2({ address: t4, loginMethod: "ledger" })), L({ callbackRoute: P5, onLoginRedirect: k6 });
      } else r4 != null && r4.length || (yield D4()), h4(true);
      s8(false);
    } catch (e2) {
      n3(e2);
    }
  }), he = () => Bt(void 0, null, function* () {
    try {
      let e2 = yield g4();
      if (e2 || (yield ue()), e2 = yield g4(), !e2) return n3(f7);
      (r4.length === 0 || u10 >= 0) && (yield D4());
    } catch (e2) {
      n3(e2);
    }
  });
  (0, import_react18.useEffect)(() => {
    he();
  }, [u10, y2, i5]), (0, import_react18.useEffect)(() => {
    (r4 == null ? void 0 : r4.length) > 0 && !y2 && h4(true);
  }, [r4]);
  let A6 = Boolean(w);
  return [me, { loginFailed: A6, isLoggedIn: z4 && !A6, error: w, isLoading: b2 && !A6 }, { accounts: r4, showAddressList: y2, startIndex: u10, selectedAddress: a5, version: C7, contractDataEnabled: H2, onGoToPrevPage: re, onGoToNextPage: se, onGoToSpecificPage: ae, onSelectAddress: de, onConfirmSelectedAddress: Le }];
};

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-UG2C5XXR.js
var import_dist39 = __toESM(require_dist());
v();

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-DDYYPHNR.js
var import_dist40 = __toESM(require_dist());
v();
N();
function h3() {
  let c5 = (n3) => s3(n3).then((m7) => m7.data), { data: r4, error: i5 } = useSWR(S, c5);
  return { price: r4 == null ? void 0 : r4.price, error: i5 };
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-YTYNUTPN.js
var import_dist41 = __toESM(require_dist());
var import_react19 = __toESM(require_react());
v();
function a4(f8, n3 = []) {
  let e2 = (0, import_react19.useRef)(true);
  (0, import_react19.useEffect)(() => {
    e2.current ? e2.current = false : f8();
  }, n3);
}

// node_modules/@multiversx/sdk-dapp/__chunks__/chunk-MKCCZEMM.js
var import_dist42 = __toESM(require_dist());
var import_react20 = __toESM(require_react());
v();
p2();
S3();
d5();
g();
Q();
p();
c3();
var Oe = ((n3) => (n3.invalidAddress = "Invalid address", n3.invalidConfig = "Invalid WalletConnect setup", n3.invalidTopic = "Expired connection", n3.sessionExpired = "Unable to connect to existing session", n3.connectError = "Unable to connect", n3.userRejected = "User rejected connection proposal", n3.userRejectedExisting = "User rejected existing connection proposal", n3.errorLogout = "Unable to remove existing pairing", n3.invalidChainID = "Invalid chainID", n3))(Oe || {});
var gn2 = ({ callbackRoute: y2, token: b2, nativeAuth: M, onLoginRedirect: we, logoutRoute: x5, customRequestMethods: Ce = [] }) => {
  var $;
  let G2 = d(), L4 = N5(M), p17 = Y2(L4 ? M : false), n3 = b2, [_2, l6] = (0, import_react20.useState)(""), [h4, ye] = (0, import_react20.useState)(""), [F2, f8] = (0, import_react20.useState)(true), [Le, U2] = (0, import_react20.useState)([]), [T4, A6] = (0, import_react20.useState)(null), { provider: R2 } = v2(), E3 = k2(k3), I6 = k2(C2), P5 = k2(g3), he = k2(u3), Te = k2(R), Ee = k2(x3), e2 = (0, import_react20.useRef)(R2), m7 = (0, import_react20.useRef)(false), v5 = (0, import_react20.useRef)(false), B = ($ = x5 != null ? x5 : Te) != null ? $ : "/", S8 = [import_operation.OptionalOperation.CANCEL_ACTION, ...Ce];
  b2 && S8.push(import_operation.OptionalOperation.SIGN_LOGIN_TOKEN), L4 && S8.push(import_operation.OptionalOperation.SIGN_NATIVE_AUTH_TOKEN);
  let Ie = F2 ? "" : `${he}?wallet-connect=${encodeURIComponent(h4)}`, k6 = Boolean(_2), D4 = s2(), Pe = () => {
    io(B);
  }, Se = (t4) => {
    console.log("WalletConnect Session Event: ", t4);
  }, We = () => Bt(void 0, null, function* () {
    var t4, o5, r4, i5;
    try {
      if (m7.current || e2.current == null) return;
      if (!v5.current) {
        try {
          yield (t4 = e2.current) == null ? void 0 : t4.logout();
        } catch (N6) {
          console.warn("Unable to logout");
        }
        return;
      }
      let c5 = yield (r4 = (o5 = e2.current) == null ? void 0 : o5.getAddress) == null ? void 0 : r4.call(o5);
      if (!c5) {
        console.warn("Login cancelled.");
        return;
      }
      let a5 = yield (i5 = e2.current) == null ? void 0 : i5.getSignature(), s8 = { address: c5, loginMethod: "walletconnectv2" }, d8 = { logoutRoute: B, loginType: "walletconnectv2", callbackRoute: y2 != null ? y2 : f().href };
      G2(P(d8)), a5 && p17.setTokenLoginInfo({ signature: a5, address: c5 }), G2(f2(s8)), L({ callbackRoute: y2, onLoginRedirect: we, options: { address: c5, signature: a5 } });
    } catch (c5) {
      l6("User rejected connection proposal"), console.error(c5);
    }
  }), z4 = () => Bt(void 0, null, function* () {
    var o5, r4, i5, c5, a5;
    if (z(e2.current) === "walletconnectv2") try {
      ((c5 = (i5 = (r4 = (o5 = e2.current) == null ? void 0 : o5.walletConnector) == null ? void 0 : r4.session) == null ? void 0 : i5.getAll()) != null ? c5 : []).length > 0 && (yield (a5 = e2.current) == null ? void 0 : a5.logout()), e2.current = V, A6(null);
    } catch (s8) {
      console.warn("Unable to logout");
    }
  }), Ve = (t4) => Bt(void 0, null, function* () {
    var o5, r4, i5;
    if (!E3 || !I6) {
      l6("Invalid WalletConnect setup");
      return;
    }
    if (!t4 || !t4.topic) {
      l6("Expired connection");
      return;
    }
    try {
      if ((e2.current ? z(e2.current) : false) !== "walletconnectv2") {
        yield w();
        return;
      }
      if (f8(true), yield z4(), L4 && !n3 && (n3 = yield p17.getNativeAuthLoginToken(), !n3)) {
        console.warn("Fetching block failed. Login cancelled.");
        return;
      }
      n3 && p17.setLoginToken(n3), yield w(false);
      let { approval: a5 } = yield (o5 = e2.current) == null ? void 0 : o5.connect({ topic: t4.topic, methods: S8 });
      try {
        yield (r4 = e2.current) == null ? void 0 : r4.login({ approval: a5, token: n3 });
      } catch (s8) {
        console.error("User rejected existing connection proposal", s8), l6("User rejected existing connection proposal"), f8(true), yield w();
      }
    } catch (c5) {
      console.error("Unable to connect to existing session", c5), l6("Unable to connect to existing session");
    } finally {
      U2((i5 = e2.current) == null ? void 0 : i5.pairings);
    }
  }), xe = (t4) => Bt(void 0, null, function* () {
    var o5, r4;
    try {
      t4 && (yield (o5 = e2.current) == null ? void 0 : o5.logout({ topic: t4 }));
    } catch (i5) {
      console.error("Unable to remove existing pairing", i5), l6("Unable to remove existing pairing");
    } finally {
      let i5 = yield (r4 = e2.current) == null ? void 0 : r4.getPairings();
      U2(i5);
    }
  });
  function w(t4 = true) {
    return Bt(this, null, function* () {
      var d8, N6, q3;
      I4();
      let o5 = yield p6({ maxRetries: 15 });
      if (!o5) {
        console.error("Invalid chainID"), l6("Invalid chainID");
        return;
      }
      if (!I6 || !E3) {
        console.error("Invalid WalletConnect setup"), l6("Invalid WalletConnect setup");
        return;
      }
      let r4 = s2(), i5 = v5.current === false && !r4, c5 = (N6 = (d8 = e2.current) == null ? void 0 : d8.isInitialized) == null ? void 0 : N6.call(d8);
      if (m7.current || i5 || c5) return;
      if (m7.current = true, (q3 = e2.current) != null && q3.walletConnector) {
        yield e2.current.init(), A6(e2.current), m7.current = false, t4 && (yield K());
        return;
      }
      let a5 = { onClientLogin: We, onClientLogout: Pe, onClientEvent: Se }, s8 = new import_walletConnectV2Provider.WalletConnectV2Provider(a5, o5, E3, I6, P5);
      yield s8.init(), A6(s8), e2.current = s8, m7.current = false, t4 && (U2(s8.pairings), yield K());
    });
  }
  function K() {
    return Bt(this, null, function* () {
      var t4, o5;
      if (!!e2.current) {
        if (!E3 || !I6) {
          l6("Invalid WalletConnect setup");
          return;
        }
        try {
          if (!v5.current) return;
          let { uri: r4, approval: i5 } = yield (t4 = e2.current) == null ? void 0 : t4.connect({ methods: S8 });
          if (!Boolean(r4)) return;
          if (ye(r4), (P5 == null ? void 0 : P5.logger) === "debug" && console.log("WalletConnect uri: ", r4), L4 && !n3 && (n3 = yield p17.getNativeAuthLoginToken(), !n3)) {
            console.warn("Fetching block failed. Login cancelled.");
            return;
          }
          if (n3 && p17.setLoginToken(n3), (e2.current ? z(e2.current) : false) !== "walletconnectv2") {
            f8(true), yield w();
            return;
          }
          try {
            yield (o5 = e2.current) == null ? void 0 : o5.login({ approval: i5, token: n3 });
          } catch (s8) {
            console.error("User rejected connection proposal", s8), l6("User rejected connection proposal"), f8(true);
          }
        } catch (r4) {
          console.error("Unable to connect", r4);
        }
      }
    });
  }
  return a4(() => {
    e2.current = R2;
  }, [R2]), (0, import_react20.useEffect)(() => (v5.current = true, () => {
    v5.current = false;
  }), []), (0, import_react20.useEffect)(() => {
    f8(!h4);
  }, [h4]), (0, import_react20.useEffect)(() => {
    if (!T4) return;
    (Boolean(T4.session) || Ee === "walletconnectv2") && D4 && n(T4);
  }, [T4, D4]), [w, { error: _2, loginFailed: k6, isLoading: F2 && !k6, isLoggedIn: D4 && !k6 }, { uriDeepLink: Ie, walletConnectUri: h4, cancelLogin: z4, connectExisting: Ve, removeExistingPairing: xe, wcPairings: Le }];
};

export {
  h,
  po,
  h2,
  p9 as p,
  S6 as S,
  In,
  S7 as S2,
  p13 as p2,
  m5 as m,
  ao,
  Mo,
  P4 as P,
  Xe,
  h3,
  gn2 as gn
};
//# sourceMappingURL=chunk-3TLFSX6D.js.map
