"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefinitionOfTokenCollectionOnNetwork = exports.DefinitionOfFungibleTokenOnNetwork = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const address_1 = require("../address");
class DefinitionOfFungibleTokenOnNetwork {
    constructor() {
        this.identifier = "";
        this.name = "";
        this.ticker = "";
        this.owner = address_1.Address.empty();
        this.decimals = 0;
        this.supply = new bignumber_js_1.default(0);
        this.isPaused = false;
        this.canUpgrade = false;
        this.canMint = false;
        this.canBurn = false;
        this.canChangeOwner = false;
        this.canPause = false;
        this.canFreeze = false;
        this.canWipe = false;
        this.canAddSpecialRoles = false;
        this.assets = {};
    }
    static fromApiHttpResponse(payload) {
        let result = new DefinitionOfFungibleTokenOnNetwork();
        result.identifier = payload.identifier || "";
        result.name = payload.name || "";
        result.ticker = payload.ticker || "";
        result.owner = new address_1.Address(payload.owner || "");
        result.decimals = payload.decimals || 0;
        result.supply = new bignumber_js_1.default(payload.supply || "0");
        result.isPaused = payload.isPaused || false;
        result.canUpgrade = payload.canUpgrade || false;
        result.canMint = payload.canMint || false;
        result.canBurn = payload.canBurn || false;
        result.canChangeOwner = payload.canChangeOwner || false;
        result.canPause = payload.canPause || false;
        result.canFreeze = payload.canFreeze || false;
        result.canWipe = payload.canWipe || false;
        result.assets = payload.assets || {};
        return result;
    }
    /**
     * The implementation has been moved here from the following location:
     * https://github.com/multiversx/mx-sdk-js-core/blob/release/v9/src/token.ts
     */
    static fromResponseOfGetTokenProperties(identifier, data) {
        let result = new DefinitionOfFungibleTokenOnNetwork();
        let [tokenName, _tokenType, owner, supply, ...propertiesBuffers] = data;
        let properties = parseTokenProperties(propertiesBuffers);
        result.identifier = identifier;
        result.name = tokenName.toString();
        result.ticker = identifier;
        result.owner = new address_1.Address(owner);
        result.decimals = properties.NumDecimals.toNumber();
        result.supply = new bignumber_js_1.default(supply.toString()).shiftedBy(-result.decimals);
        result.isPaused = properties.IsPaused;
        result.canUpgrade = properties.CanUpgrade;
        result.canMint = properties.CanMint;
        result.canBurn = properties.CanBurn;
        result.canChangeOwner = properties.CanChangeOwner;
        result.canPause = properties.CanPause;
        result.canFreeze = properties.CanFreeze;
        result.canWipe = properties.CanWipe;
        return result;
    }
}
exports.DefinitionOfFungibleTokenOnNetwork = DefinitionOfFungibleTokenOnNetwork;
class DefinitionOfTokenCollectionOnNetwork {
    constructor() {
        this.collection = "";
        this.type = "";
        this.name = "";
        this.ticker = "";
        this.owner = address_1.Address.empty();
        this.decimals = 0;
        this.canPause = false;
        this.canFreeze = false;
        this.canWipe = false;
        this.canUpgrade = false;
        this.canChangeOwner = false;
        this.canAddSpecialRoles = false;
        this.canTransferNftCreateRole = false;
        this.canCreateMultiShard = false;
    }
    static fromApiHttpResponse(payload) {
        let result = new DefinitionOfTokenCollectionOnNetwork();
        result.collection = payload.collection || "";
        result.type = payload.type || "";
        result.name = payload.name || "";
        result.ticker = payload.ticker || "";
        result.owner = new address_1.Address(payload.owner || "");
        result.decimals = payload.decimals || 0;
        result.canPause = payload.canPause || false;
        result.canFreeze = payload.canFreeze || false;
        result.canWipe = payload.canWipe || false;
        result.canUpgrade = payload.canUpgrade || false;
        result.canAddSpecialRoles = payload.canAddSpecialRoles || false;
        result.canTransferNftCreateRole = payload.canTransferNftCreateRole || false;
        return result;
    }
    /**
     * The implementation has been moved here from the following location:
     * https://github.com/multiversx/mx-sdk-js-core/blob/release/v9/src/token.ts
     */
    static fromResponseOfGetTokenProperties(collection, data) {
        let result = new DefinitionOfTokenCollectionOnNetwork();
        let [tokenName, tokenType, owner, _, __, ...propertiesBuffers] = data;
        let properties = parseTokenProperties(propertiesBuffers);
        result.collection = collection;
        result.type = tokenType.toString();
        result.name = tokenName.toString();
        result.ticker = collection;
        result.owner = new address_1.Address(owner);
        result.decimals = properties.NumDecimals.toNumber() ?? 0;
        result.canPause = properties.CanPause || false;
        result.canFreeze = properties.CanFreeze || false;
        result.canWipe = properties.CanWipe || false;
        result.canUpgrade = properties.CanUpgrade || false;
        result.canChangeOwner = properties.CanChangeOwner || false;
        result.canAddSpecialRoles = properties.CanAddSpecialRoles || false;
        result.canTransferNftCreateRole = properties.CanTransferNFTCreateRole || false;
        result.canCreateMultiShard = properties.CanCreateMultiShard || false;
        return result;
    }
}
exports.DefinitionOfTokenCollectionOnNetwork = DefinitionOfTokenCollectionOnNetwork;
// Token properties have the following format: {PropertyName}-{PropertyValue}.
function parseTokenProperties(propertiesBuffers) {
    let properties = {};
    for (let buffer of propertiesBuffers) {
        let [name, value] = buffer.toString().split("-");
        properties[name] = parseValueOfTokenProperty(value);
    }
    return properties;
}
// This only handles booleans and numbers.
function parseValueOfTokenProperty(value) {
    switch (value) {
        case "true":
            return true;
        case "false":
            return false;
        default:
            return new bignumber_js_1.default(value);
    }
}
//# sourceMappingURL=tokenDefinitions.js.map