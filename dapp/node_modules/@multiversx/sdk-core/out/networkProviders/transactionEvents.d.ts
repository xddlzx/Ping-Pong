/// <reference types="node" />
import { IAddress } from "./interface";
export declare class TransactionEvent {
    address: IAddress;
    identifier: string;
    topics: TransactionEventTopic[];
    /**
     * @deprecated Use "dataPayload" instead.
     */
    data: string;
    dataPayload: TransactionEventData;
    additionalData: TransactionEventData[];
    constructor(init?: Partial<TransactionEvent>);
    static fromHttpResponse(responsePart: {
        address: string;
        identifier: string;
        topics: string[];
        data: string;
        additionalData?: string[];
    }): TransactionEvent;
    findFirstOrNoneTopic(predicate: (topic: TransactionEventTopic) => boolean): TransactionEventTopic | undefined;
    getLastTopic(): TransactionEventTopic;
}
export declare class TransactionEventData {
    private readonly raw;
    constructor(data: Buffer);
    static fromBase64(str: string): TransactionEventData;
    toString(): string;
    hex(): string;
    valueOf(): Buffer;
}
export declare class TransactionEventTopic {
    private readonly raw;
    constructor(topic: string);
    toString(): string;
    hex(): string;
    valueOf(): Buffer;
}
