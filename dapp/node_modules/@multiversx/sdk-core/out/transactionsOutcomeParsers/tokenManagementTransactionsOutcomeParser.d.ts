import { ITransactionOnNetwork } from "../interfaceOfNetwork";
import { TransactionOutcome } from "./resources";
export declare class TokenManagementTransactionsOutcomeParser {
    constructor();
    parseIssueFungible(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseIssueNonFungible(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseIssueSemiFungible(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseRegisterMetaEsdt(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseRegisterAndSetAllRoles(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
        roles: string[];
    }[];
    parseSetBurnRoleGlobally(transaction: TransactionOutcome | ITransactionOnNetwork): void;
    parseUnsetBurnRoleGlobally(transaction: TransactionOutcome | ITransactionOnNetwork): void;
    parseSetSpecialRole(transaction: TransactionOutcome | ITransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        roles: string[];
    }[];
    private getOutputForSetSpecialRoleEvent;
    parseNftCreate(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
        nonce: bigint;
        initialQuantity: bigint;
    }[];
    private getOutputForNftCreateEvent;
    parseLocalMint(transaction: TransactionOutcome | ITransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        mintedSupply: bigint;
    }[];
    private getOutputForLocalMintEvent;
    parseLocalBurn(transaction: TransactionOutcome | ITransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        burntSupply: bigint;
    }[];
    private getOutputForLocalBurnEvent;
    parsePause(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseUnpause(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseFreeze(transaction: TransactionOutcome | ITransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        balance: bigint;
    }[];
    private getOutputForFreezeEvent;
    parseUnfreeze(transaction: TransactionOutcome | ITransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        balance: bigint;
    }[];
    private getOutputForUnfreezeEvent;
    parseWipe(transaction: TransactionOutcome | ITransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        balance: bigint;
    }[];
    private getOutputForWipeEvent;
    parseUpdateAttributes(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
        nonce: bigint;
        attributes: Uint8Array;
    }[];
    private getOutputForUpdateAttributesEvent;
    parseAddQuantity(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
        nonce: bigint;
        addedQuantity: bigint;
    }[];
    private getOutputForAddQuantityEvent;
    parseBurnQuantity(transaction: TransactionOutcome | ITransactionOnNetwork): {
        tokenIdentifier: string;
        nonce: bigint;
        burntQuantity: bigint;
    }[];
    private getOutputForBurnQuantityEvent;
    /**
     * Temporary workaround, until "TransactionOnNetwork" completely replaces "TransactionOutcome".
     */
    private ensureTransactionOutcome;
    private ensureNoError;
    private extractTokenIdentifier;
    private extractNonce;
    private extractAmount;
    private extractAddress;
    private decodeTopicAsString;
}
