"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionEventsParser = void 0;
const smartcontracts_1 = require("../smartcontracts");
class TransactionEventsParser {
    constructor(options) {
        this.legacyResultsParser = new smartcontracts_1.ResultsParser();
        this.abi = options.abi;
        // By default, we consider that the first topic is the event identifier.
        // This is true for log entries emitted by smart contracts:
        // https://github.com/multiversx/mx-chain-vm-go/blob/v1.5.27/vmhost/contexts/output.go#L270
        // https://github.com/multiversx/mx-chain-vm-go/blob/v1.5.27/vmhost/contexts/output.go#L283
        this.firstTopicIsIdentifier = options.firstTopicIsIdentifier ?? true;
    }
    parseEvents(options) {
        const results = [];
        for (const event of options.events) {
            const parsedEvent = this.parseEvent({ event });
            results.push(parsedEvent);
        }
        return results;
    }
    parseEvent(options) {
        const topics = options.event.topics.map((topic) => Buffer.from(topic));
        const abiIdentifier = this.firstTopicIsIdentifier ? topics[0]?.toString() : options.event.identifier;
        if (this.firstTopicIsIdentifier) {
            topics.shift();
        }
        const dataItems = options.event.dataItems.map((dataItem) => Buffer.from(dataItem));
        const eventDefinition = this.abi.getEvent(abiIdentifier);
        const parsedEvent = this.legacyResultsParser.doParseEvent({
            topics: topics,
            dataItems: dataItems,
            eventDefinition: eventDefinition,
        });
        return parsedEvent;
    }
}
exports.TransactionEventsParser = TransactionEventsParser;
//# sourceMappingURL=transactionEventsParser.js.map