import { ITransactionOnNetwork } from "../interfaceOfNetwork";
import { EndpointDefinition, Type, UntypedOutcomeBundle } from "../smartcontracts";
import { SmartContractCallOutcome, TransactionOutcome } from "./resources";
interface IAbi {
    getEndpoint(name: string): EndpointDefinition;
}
interface IParameterDefinition {
    type: Type;
}
interface ILegacyResultsParser {
    parseOutcomeFromUntypedBundle(bundle: UntypedOutcomeBundle, endpoint: {
        output: IParameterDefinition[];
    }): {
        values: any[];
        returnCode: {
            valueOf(): string;
        };
        returnMessage: string;
    };
}
export declare class SmartContractTransactionsOutcomeParser {
    private readonly abi?;
    private readonly legacyResultsParser;
    constructor(options?: {
        abi?: IAbi;
        legacyResultsParser?: ILegacyResultsParser;
    });
    parseDeploy(options: {
        transactionOutcome: TransactionOutcome;
    } | {
        transactionOnNetwork: ITransactionOnNetwork;
    }): {
        returnCode: string;
        returnMessage: string;
        contracts: {
            address: string;
            ownerAddress: string;
            codeHash: Uint8Array;
        }[];
    };
    /**
     * Legacy approach.
     */
    protected parseDeployGivenTransactionOutcome(transactionOutcome: TransactionOutcome): {
        returnCode: string;
        returnMessage: string;
        contracts: {
            address: string;
            ownerAddress: string;
            codeHash: Uint8Array;
        }[];
    };
    protected parseDeployGivenTransactionOnNetwork(transactionOnNetwork: ITransactionOnNetwork): {
        returnCode: string;
        returnMessage: string;
        contracts: {
            address: string;
            ownerAddress: string;
            codeHash: Uint8Array;
        }[];
    };
    private parseScDeployEvent;
    parseExecute(options: {
        transactionOutcome: TransactionOutcome;
        function?: string;
    } | {
        transactionOnNetwork: ITransactionOnNetwork;
        function?: string;
    }): {
        values: any[];
        returnCode: string;
        returnMessage: string;
    };
    /**
     * Legacy approach.
     */
    protected parseExecuteGivenTransactionOutcome(transactionOutcome: TransactionOutcome, functionName?: string): {
        values: any[];
        returnCode: string;
        returnMessage: string;
    };
    protected parseExecuteGivenTransactionOnNetwork(transactionOnNetwork: ITransactionOnNetwork, functionName?: string): {
        values: any[];
        returnCode: string;
        returnMessage: string;
    };
    protected findDirectSmartContractCallOutcome(transactionOnNetwork: ITransactionOnNetwork): SmartContractCallOutcome;
    protected findDirectSmartContractCallOutcomeWithinSmartContractResults(transactionOnNetwork: ITransactionOnNetwork): SmartContractCallOutcome | null;
    protected findDirectSmartContractCallOutcomeIfError(transactionOnNetwork: ITransactionOnNetwork): SmartContractCallOutcome | null;
    protected findDirectSmartContractCallOutcomeWithinWriteLogEvents(transactionOnNetwork: ITransactionOnNetwork): SmartContractCallOutcome | null;
}
export {};
