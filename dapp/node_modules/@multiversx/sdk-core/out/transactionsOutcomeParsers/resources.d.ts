export declare class TransactionEvent {
    address: string;
    identifier: string;
    topics: Uint8Array[];
    dataItems: Uint8Array[];
    constructor(init: Partial<TransactionEvent>);
}
export declare class TransactionLogs {
    address: string;
    events: TransactionEvent[];
    constructor(init: Partial<TransactionLogs>);
}
export declare class SmartContractResult {
    sender: string;
    receiver: string;
    data: Uint8Array;
    logs: TransactionLogs;
    constructor(init: Partial<SmartContractResult>);
}
export declare class TransactionOutcome {
    directSmartContractCallOutcome: SmartContractCallOutcome;
    smartContractResults: SmartContractResult[];
    logs: TransactionLogs;
    constructor(init: Partial<TransactionOutcome>);
}
export declare class SmartContractCallOutcome {
    function: string;
    returnDataParts: Uint8Array[];
    returnMessage: string;
    returnCode: string;
    constructor(init: Partial<SmartContractCallOutcome>);
}
export declare function findEventsByPredicate(transactionOutcome: TransactionOutcome, predicate: (event: TransactionEvent) => boolean): TransactionEvent[];
export declare function findEventsByIdentifier(transactionOutcome: TransactionOutcome, identifier: string): TransactionEvent[];
export declare function findEventsByFirstTopic(transactionOutcome: TransactionOutcome, topic: string): TransactionEvent[];
export declare function gatherAllEvents(transactionOutcome: TransactionOutcome): TransactionEvent[];
