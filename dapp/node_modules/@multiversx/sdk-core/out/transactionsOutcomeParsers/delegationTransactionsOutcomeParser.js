"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegationTransactionsOutcomeParser = void 0;
const address_1 = require("../address");
const transactionsConverter_1 = require("../converters/transactionsConverter");
const errors_1 = require("../errors");
const resources_1 = require("./resources");
class DelegationTransactionsOutcomeParser {
    constructor() { }
    parseCreateNewDelegationContract(transaction) {
        transaction = this.ensureTransactionOutcome(transaction);
        this.ensureNoError(transaction.logs.events);
        const events = resources_1.findEventsByIdentifier(transaction, "SCDeploy");
        return events.map((event) => ({ contractAddress: this.extractContractAddress(event) }));
    }
    /**
     * Temporary workaround, until "TransactionOnNetwork" completely replaces "TransactionOutcome".
     */
    ensureTransactionOutcome(transaction) {
        if ("hash" in transaction) {
            return new transactionsConverter_1.TransactionsConverter().transactionOnNetworkToOutcome(transaction);
        }
        return transaction;
    }
    ensureNoError(transactionEvents) {
        for (const event of transactionEvents) {
            if (event.identifier == "signalError") {
                const data = Buffer.from(event.dataItems[0]?.toString().slice(1)).toString() || "";
                const message = this.decodeTopicAsString(event.topics[1]);
                throw new errors_1.ErrParseTransactionOutcome(`encountered signalError: ${message} (${Buffer.from(data, "hex").toString()})`);
            }
        }
    }
    extractContractAddress(event) {
        if (!event.topics[0]?.length) {
            return "";
        }
        const address = Buffer.from(event.topics[0]);
        return address_1.Address.fromBuffer(address).bech32();
    }
    decodeTopicAsString(topic) {
        return Buffer.from(topic).toString();
    }
}
exports.DelegationTransactionsOutcomeParser = DelegationTransactionsOutcomeParser;
//# sourceMappingURL=delegationTransactionsOutcomeParser.js.map