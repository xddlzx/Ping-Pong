import { Err } from "./errors";
import { ITransactionFetcher } from "./interface";
import { ITransactionEvent, ITransactionOnNetwork, ITransactionStatus } from "./interfaceOfNetwork";
export declare type PredicateIsAwaitedStatus = (status: ITransactionStatus) => boolean;
/**
 * Internal interface: a transaction, as seen from the perspective of a {@link TransactionWatcher}.
 */
interface ITransaction {
    getHash(): {
        hex(): string;
    };
}
/**
 * TransactionWatcher allows one to continuously watch (monitor), by means of polling, the status of a given transaction.
 */
export declare class TransactionWatcher {
    static DefaultPollingInterval: number;
    static DefaultTimeout: number;
    static DefaultPatience: number;
    static NoopOnStatusReceived: (_: ITransactionStatus) => void;
    protected readonly fetcher: ITransactionFetcher;
    protected readonly pollingIntervalMilliseconds: number;
    protected readonly timeoutMilliseconds: number;
    protected readonly patienceMilliseconds: number;
    /**
     * A transaction watcher (awaiter).
     *
     * @param fetcher The transaction fetcher
     * @param options The options
     * @param options.pollingIntervalMilliseconds The polling interval, in milliseconds
     * @param options.timeoutMilliseconds The timeout, in milliseconds
     * @param options.patienceMilliseconds The patience: an extra time (in milliseconds) to wait, after the transaction has reached its desired status. Currently there's a delay between the moment a transaction is marked as "completed" and the moment its outcome (contract results, events and logs) is available.
     */
    constructor(fetcher: ITransactionFetcher, options?: {
        pollingIntervalMilliseconds?: number;
        timeoutMilliseconds?: number;
        patienceMilliseconds?: number;
    });
    /**
     * Waits until the transaction reaches the "pending" status.
     * @param txHash The hex-encoded transaction hash
     */
    awaitPending(transactionOrTxHash: ITransaction | string): Promise<ITransactionOnNetwork>;
    /**
     * Waits until the transaction is completely processed.
     * @param txHash The hex-encoded transaction hash
     */
    awaitCompleted(transactionOrTxHash: ITransaction | string): Promise<ITransactionOnNetwork>;
    awaitAllEvents(transactionOrTxHash: ITransaction | string, events: string[]): Promise<ITransactionOnNetwork>;
    awaitAnyEvent(transactionOrTxHash: ITransaction | string, events: string[]): Promise<ITransactionOnNetwork>;
    awaitOnCondition(transactionOrTxHash: ITransaction | string, condition: (data: ITransactionOnNetwork) => boolean): Promise<ITransactionOnNetwork>;
    private transactionOrTxHashToTxHash;
    protected awaitConditionally<TData>(isSatisfied: (data: TData) => boolean, doFetch: () => Promise<TData>, createError: () => Err): Promise<TData>;
    protected getAllTransactionEvents(transaction: ITransactionOnNetwork): ITransactionEvent[];
}
export {};
