"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegationTransactionsFactory = void 0;
const address_1 = require("../address");
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const smartcontracts_1 = require("../smartcontracts");
const transactionBuilder_1 = require("./transactionBuilder");
/**
 * Use this class to create delegation related transactions like creating a new delegation contract or adding nodes.
 */
class DelegationTransactionsFactory {
    constructor(options) {
        this.config = options.config;
        this.argSerializer = new smartcontracts_1.ArgSerializer();
        this.delegationManagerAddress = address_1.Address.fromHex(constants_1.DELEGATION_MANAGER_SC_ADDRESS_HEX, this.config.addressHrp);
    }
    createTransactionForNewDelegationContract(options) {
        const dataParts = [
            "createNewDelegationContract",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.BigUIntValue(options.totalDelegationCap),
                new smartcontracts_1.BigUIntValue(options.serviceFee),
            ]),
        ];
        const executionGasLimit = this.config.gasLimitCreateDelegationContract + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.delegationManagerAddress,
            dataParts: dataParts,
            gasLimit: executionGasLimit,
            addDataMovementGas: true,
            amount: options.amount,
        }).build();
    }
    createTransactionForAddingNodes(options) {
        if (options.publicKeys.length !== options.signedMessages.length) {
            throw new errors_1.Err("The number of public keys should match the number of signed messages");
        }
        const signedMessagesAsTypedValues = options.signedMessages.map((message) => new smartcontracts_1.BytesValue(Buffer.from(message)));
        const messagesAsStrings = this.argSerializer.valuesToStrings(signedMessagesAsTypedValues);
        const numNodes = options.publicKeys.length;
        const dataParts = ["addNodes"];
        for (let i = 0; i < numNodes; i++) {
            dataParts.push(...[options.publicKeys[i].hex(), messagesAsStrings[i]]);
        }
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: this.computeExecutionGasLimitForNodesManagement(numNodes),
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForRemovingNodes(options) {
        const dataParts = ["removeNodes"];
        for (const key of options.publicKeys) {
            dataParts.push(key.hex());
        }
        const numNodes = options.publicKeys.length;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: this.computeExecutionGasLimitForNodesManagement(numNodes),
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForStakingNodes(options) {
        let dataParts = ["stakeNodes"];
        for (const key of options.publicKeys) {
            dataParts = dataParts.concat(key.hex());
        }
        const numNodes = options.publicKeys.length;
        const additionalGasForAllNodes = BigInt(numNodes) * this.config.additionalGasLimitPerValidatorNode;
        const executionGasLimit = additionalGasForAllNodes + this.config.gasLimitStake + this.config.gasLimitDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: executionGasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnbondingNodes(options) {
        let dataParts = ["unBondNodes"];
        for (const key of options.publicKeys) {
            dataParts = dataParts.concat(key.hex());
        }
        const numNodes = options.publicKeys.length;
        const executionGasLimit = BigInt(numNodes) * this.config.additionalGasLimitPerValidatorNode +
            this.config.gasLimitUnbond +
            this.config.gasLimitDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: executionGasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnstakingNodes(options) {
        let dataParts = ["unStakeNodes"];
        for (const key of options.publicKeys) {
            dataParts = dataParts.concat(key.hex());
        }
        const numNodes = options.publicKeys.length;
        const executionGasLimit = BigInt(numNodes) * this.config.additionalGasLimitPerValidatorNode +
            this.config.gasLimitUnstake +
            this.config.gasLimitDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: executionGasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnjailingNodes(options) {
        const dataParts = ["unJailNodes"];
        for (const key of options.publicKeys) {
            dataParts.push(key.hex());
        }
        const numNodes = options.publicKeys.length;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: this.computeExecutionGasLimitForNodesManagement(numNodes),
            addDataMovementGas: true,
            amount: options.amount,
        }).build();
    }
    createTransactionForChangingServiceFee(options) {
        const dataParts = [
            "changeServiceFee",
            this.argSerializer.valuesToStrings([new smartcontracts_1.BigUIntValue(options.serviceFee)])[0],
        ];
        const gasLimit = this.config.gasLimitDelegationOperations + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: gasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForModifyingDelegationCap(options) {
        const dataParts = [
            "modifyTotalDelegationCap",
            this.argSerializer.valuesToStrings([new smartcontracts_1.BigUIntValue(options.delegationCap)])[0],
        ];
        const gasLimit = this.config.gasLimitDelegationOperations + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: gasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForSettingAutomaticActivation(options) {
        const dataParts = ["setAutomaticActivation", this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue("true")])[0]];
        const gasLimit = this.config.gasLimitDelegationOperations + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: gasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnsettingAutomaticActivation(options) {
        const dataParts = ["setAutomaticActivation", this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue("false")])[0]];
        const gasLimit = this.config.gasLimitDelegationOperations + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: gasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForSettingCapCheckOnRedelegateRewards(options) {
        const dataParts = [
            "setCheckCapOnReDelegateRewards",
            this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue("true")])[0],
        ];
        const gasLimit = this.config.gasLimitDelegationOperations + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: gasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnsettingCapCheckOnRedelegateRewards(options) {
        const dataParts = [
            "setCheckCapOnReDelegateRewards",
            this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue("false")])[0],
        ];
        const gasLimit = this.config.gasLimitDelegationOperations + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: gasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForSettingMetadata(options) {
        const dataParts = [
            "setMetaData",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.name),
                new smartcontracts_1.StringValue(options.website),
                new smartcontracts_1.StringValue(options.identifier),
            ]),
        ];
        const gasLimit = this.config.gasLimitDelegationOperations + this.config.additionalGasLimitForDelegationOperations;
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.delegationContract,
            dataParts: dataParts,
            gasLimit: gasLimit,
            addDataMovementGas: true,
        }).build();
    }
    computeExecutionGasLimitForNodesManagement(numNodes) {
        const additionalGasForAllNodes = this.config.additionalGasLimitPerValidatorNode * BigInt(numNodes);
        return this.config.gasLimitDelegationOperations + additionalGasForAllNodes;
    }
}
exports.DelegationTransactionsFactory = DelegationTransactionsFactory;
//# sourceMappingURL=delegationTransactionsFactory.js.map