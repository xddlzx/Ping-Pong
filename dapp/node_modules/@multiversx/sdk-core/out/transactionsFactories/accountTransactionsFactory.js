"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountTransactionsFactory = void 0;
const address_1 = require("../address");
const transactionBuilder_1 = require("./transactionBuilder");
class AccountTransactionsFactory {
    constructor(options) {
        this.config = options.config;
    }
    createTransactionForSavingKeyValue(options) {
        const functionName = "SaveKeyValue";
        const keyValueParts = this.computeDataPartsForSavingKeyValue(options.keyValuePairs);
        const dataParts = [functionName, ...keyValueParts];
        const extraGas = this.computeExtraGasForSavingKeyValue(options.keyValuePairs);
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: extraGas,
            addDataMovementGas: true,
        }).build();
    }
    computeExtraGasForSavingKeyValue(keyValuePairs) {
        let extraGas = 0n;
        keyValuePairs.forEach((value, key) => {
            extraGas +=
                this.config.gasLimitPersistPerByte * BigInt(key.length + value.length) +
                    this.config.gasLimitStorePerByte * BigInt(value.length);
        });
        return extraGas + this.config.gasLimitSaveKeyValue;
    }
    computeDataPartsForSavingKeyValue(keyValuePairs) {
        const dataParts = [];
        keyValuePairs.forEach((value, key) => {
            dataParts.push(...[Buffer.from(key).toString("hex"), Buffer.from(value).toString("hex")]);
        });
        return dataParts;
    }
    createTransactionForSettingGuardian(options) {
        const dataParts = [
            "SetGuardian",
            address_1.Address.fromBech32(options.guardianAddress.bech32()).toHex(),
            Buffer.from(options.serviceID).toString("hex"),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitSetGuardian,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForGuardingAccount(options) {
        const dataParts = ["GuardAccount"];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitGuardAccount,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnguardingAccount(options) {
        const dataParts = ["UnGuardAccount"];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitUnguardAccount,
            addDataMovementGas: true,
        }).build();
    }
}
exports.AccountTransactionsFactory = AccountTransactionsFactory;
//# sourceMappingURL=accountTransactionsFactory.js.map