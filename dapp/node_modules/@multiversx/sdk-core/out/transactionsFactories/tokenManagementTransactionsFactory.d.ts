import { IAddress } from "../interface";
import { Transaction } from "../transaction";
interface IConfig {
    chainID: string;
    addressHrp: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitIssue: bigint;
    gasLimitToggleBurnRoleGlobally: bigint;
    gasLimitEsdtLocalMint: bigint;
    gasLimitEsdtLocalBurn: bigint;
    gasLimitSetSpecialRole: bigint;
    gasLimitPausing: bigint;
    gasLimitFreezing: bigint;
    gasLimitWiping: bigint;
    gasLimitEsdtNftCreate: bigint;
    gasLimitEsdtNftUpdateAttributes: bigint;
    gasLimitEsdtNftAddQuantity: bigint;
    gasLimitEsdtNftBurn: bigint;
    gasLimitStorePerByte: bigint;
    gasLimitEsdtModifyRoyalties: bigint;
    gasLimitEsdtModifyCreator: bigint;
    gasLimitEsdtMetadataUpdate: bigint;
    gasLimitSetNewUris: bigint;
    gasLimitNftMetadataRecreate: bigint;
    gasLimitNftChangeToDynamic: bigint;
    gasLimitUpdateTokenId: bigint;
    gasLimitRegisterDynamic: bigint;
    issueCost: bigint;
}
declare type TokenType = "NFT" | "SFT" | "META" | "FNG";
/**
 * Use this class to create token management transactions like issuing ESDTs, creating NFTs, setting roles, etc.
 */
export declare class TokenManagementTransactionsFactory {
    private readonly config;
    private readonly argSerializer;
    private readonly trueAsString;
    private readonly falseAsString;
    private readonly esdtContractAddress;
    constructor(options: {
        config: IConfig;
    });
    createTransactionForIssuingFungible(options: {
        sender: IAddress;
        tokenName: string;
        tokenTicker: string;
        initialSupply: bigint;
        numDecimals: bigint;
        canFreeze: boolean;
        canWipe: boolean;
        canPause: boolean;
        canChangeOwner: boolean;
        canUpgrade: boolean;
        canAddSpecialRoles: boolean;
    }): Transaction;
    createTransactionForIssuingSemiFungible(options: {
        sender: IAddress;
        tokenName: string;
        tokenTicker: string;
        canFreeze: boolean;
        canWipe: boolean;
        canPause: boolean;
        canTransferNFTCreateRole: boolean;
        canChangeOwner: boolean;
        canUpgrade: boolean;
        canAddSpecialRoles: boolean;
    }): Transaction;
    createTransactionForIssuingNonFungible(options: {
        sender: IAddress;
        tokenName: string;
        tokenTicker: string;
        canFreeze: boolean;
        canWipe: boolean;
        canPause: boolean;
        canTransferNFTCreateRole: boolean;
        canChangeOwner: boolean;
        canUpgrade: boolean;
        canAddSpecialRoles: boolean;
    }): Transaction;
    createTransactionForRegisteringMetaESDT(options: {
        sender: IAddress;
        tokenName: string;
        tokenTicker: string;
        numDecimals: bigint;
        canFreeze: boolean;
        canWipe: boolean;
        canPause: boolean;
        canTransferNFTCreateRole: boolean;
        canChangeOwner: boolean;
        canUpgrade: boolean;
        canAddSpecialRoles: boolean;
    }): Transaction;
    createTransactionForRegisteringAndSettingRoles(options: {
        sender: IAddress;
        tokenName: string;
        tokenTicker: string;
        tokenType: TokenType;
        numDecimals: bigint;
    }): Transaction;
    createTransactionForSettingBurnRoleGlobally(options: {
        sender: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForUnsettingBurnRoleGlobally(options: {
        sender: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForSettingSpecialRoleOnFungibleToken(options: {
        sender: IAddress;
        user: IAddress;
        tokenIdentifier: string;
        addRoleLocalMint: boolean;
        addRoleLocalBurn: boolean;
        addRoleESDTTransferRole: boolean;
    }): Transaction;
    createTransactionForSettingSpecialRoleOnSemiFungibleToken(options: {
        sender: IAddress;
        user: IAddress;
        tokenIdentifier: string;
        addRoleNFTCreate: boolean;
        addRoleNFTBurn: boolean;
        addRoleNFTAddQuantity: boolean;
        addRoleESDTTransferRole: boolean;
        addRoleESDTModifyCreator?: boolean;
    }): Transaction;
    createTransactionForSettingSpecialRoleOnMetaESDT(options: {
        sender: IAddress;
        user: IAddress;
        tokenIdentifier: string;
        addRoleNFTCreate: boolean;
        addRoleNFTBurn: boolean;
        addRoleNFTAddQuantity: boolean;
        addRoleESDTTransferRole: boolean;
    }): Transaction;
    createTransactionForSettingSpecialRoleOnNonFungibleToken(options: {
        sender: IAddress;
        user: IAddress;
        tokenIdentifier: string;
        addRoleNFTCreate: boolean;
        addRoleNFTBurn: boolean;
        addRoleNFTUpdateAttributes: boolean;
        addRoleNFTAddURI: boolean;
        addRoleESDTTransferRole: boolean;
        addRoleESDTModifyCreator?: boolean;
        addRoleNFTRecreate?: boolean;
        addRoleESDTSetNewURI?: boolean;
        addRoleESDTModifyRoyalties?: boolean;
    }): Transaction;
    createTransactionForCreatingNFT(options: {
        sender: IAddress;
        tokenIdentifier: string;
        initialQuantity: bigint;
        name: string;
        royalties: number;
        hash: string;
        attributes: Uint8Array;
        uris: string[];
    }): Transaction;
    createTransactionForPausing(options: {
        sender: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForUnpausing(options: {
        sender: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForFreezing(options: {
        sender: IAddress;
        user: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForUnfreezing(options: {
        sender: IAddress;
        user: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForWiping(options: {
        sender: IAddress;
        user: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForLocalMint(options: {
        sender: IAddress;
        tokenIdentifier: string;
        supplyToMint: bigint;
    }): Transaction;
    createTransactionForLocalBurning(options: {
        sender: IAddress;
        tokenIdentifier: string;
        supplyToBurn: bigint;
    }): Transaction;
    createTransactionForUpdatingAttributes(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
        attributes: Uint8Array;
    }): Transaction;
    createTransactionForAddingQuantity(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
        quantityToAdd: bigint;
    }): Transaction;
    createTransactionForBurningQuantity(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
        quantityToBurn: bigint;
    }): Transaction;
    createTransactionForModifyingRoyalties(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
        newRoyalties: bigint;
    }): Transaction;
    createTransactionForSettingNewUris(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
        newUris: string[];
    }): Transaction;
    createTransactionForModifyingCreator(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
    }): Transaction;
    createTransactionForUpdatingMetadata(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
        newTokenName?: string;
        newRoyalties?: bigint;
        newHash?: string;
        newAttributes?: Uint8Array;
        newUris?: string[];
    }): Transaction;
    createTransactionForMetadataRecreate(options: {
        sender: IAddress;
        tokenIdentifier: string;
        tokenNonce: bigint;
        newTokenName: string;
        newRoyalties: bigint;
        newHash: string;
        newAttributes: Uint8Array;
        newUris: string[];
    }): Transaction;
    createTransactionForChangingTokenToDynamic(options: {
        sender: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForUpdatingTokenId(options: {
        sender: IAddress;
        tokenIdentifier: string;
    }): Transaction;
    createTransactionForRegisteringDynamicToken(options: {
        sender: IAddress;
        tokenName: string;
        tokenTicker: string;
        tokenType: TokenType;
    }): Transaction;
    createTransactionForRegisteringDynamicAndSettingRoles(options: {
        sender: IAddress;
        tokenName: string;
        tokenTicker: string;
        tokenType: TokenType;
    }): Transaction;
    private notifyAboutUnsettingBurnRoleGlobally;
    private boolToString;
}
export {};
