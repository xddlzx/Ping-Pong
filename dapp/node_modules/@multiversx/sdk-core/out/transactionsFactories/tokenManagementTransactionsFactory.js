"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenManagementTransactionsFactory = void 0;
const address_1 = require("../address");
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const logger_1 = require("../logger");
const smartcontracts_1 = require("../smartcontracts");
const transactionBuilder_1 = require("./transactionBuilder");
/**
 * Use this class to create token management transactions like issuing ESDTs, creating NFTs, setting roles, etc.
 */
class TokenManagementTransactionsFactory {
    constructor(options) {
        this.config = options.config;
        this.argSerializer = new smartcontracts_1.ArgSerializer();
        this.trueAsString = "true";
        this.falseAsString = "false";
        this.esdtContractAddress = address_1.Address.fromHex(constants_1.ESDT_CONTRACT_ADDRESS_HEX, this.config.addressHrp);
    }
    createTransactionForIssuingFungible(options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new smartcontracts_1.StringValue(options.tokenName),
            new smartcontracts_1.StringValue(options.tokenTicker),
            new smartcontracts_1.BigUIntValue(options.initialSupply),
            new smartcontracts_1.BigUIntValue(options.numDecimals),
            new smartcontracts_1.StringValue("canFreeze"),
            new smartcontracts_1.StringValue(this.boolToString(options.canFreeze)),
            new smartcontracts_1.StringValue("canWipe"),
            new smartcontracts_1.StringValue(this.boolToString(options.canWipe)),
            new smartcontracts_1.StringValue("canPause"),
            new smartcontracts_1.StringValue(this.boolToString(options.canPause)),
            new smartcontracts_1.StringValue("canChangeOwner"),
            new smartcontracts_1.StringValue(this.boolToString(options.canChangeOwner)),
            new smartcontracts_1.StringValue("canUpgrade"),
            new smartcontracts_1.StringValue(this.boolToString(options.canUpgrade)),
            new smartcontracts_1.StringValue("canAddSpecialRoles"),
            new smartcontracts_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["issue", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitIssue,
            addDataMovementGas: true,
            amount: this.config.issueCost,
        }).build();
    }
    createTransactionForIssuingSemiFungible(options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new smartcontracts_1.StringValue(options.tokenName),
            new smartcontracts_1.StringValue(options.tokenTicker),
            new smartcontracts_1.StringValue("canFreeze"),
            new smartcontracts_1.StringValue(this.boolToString(options.canFreeze)),
            new smartcontracts_1.StringValue("canWipe"),
            new smartcontracts_1.StringValue(this.boolToString(options.canWipe)),
            new smartcontracts_1.StringValue("canPause"),
            new smartcontracts_1.StringValue(this.boolToString(options.canPause)),
            new smartcontracts_1.StringValue("canTransferNFTCreateRole"),
            new smartcontracts_1.StringValue(this.boolToString(options.canTransferNFTCreateRole)),
            new smartcontracts_1.StringValue("canChangeOwner"),
            new smartcontracts_1.StringValue(this.boolToString(options.canChangeOwner)),
            new smartcontracts_1.StringValue("canUpgrade"),
            new smartcontracts_1.StringValue(this.boolToString(options.canUpgrade)),
            new smartcontracts_1.StringValue("canAddSpecialRoles"),
            new smartcontracts_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["issueSemiFungible", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitIssue,
            addDataMovementGas: true,
            amount: this.config.issueCost,
        }).build();
    }
    createTransactionForIssuingNonFungible(options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new smartcontracts_1.StringValue(options.tokenName),
            new smartcontracts_1.StringValue(options.tokenTicker),
            new smartcontracts_1.StringValue("canFreeze"),
            new smartcontracts_1.StringValue(this.boolToString(options.canFreeze)),
            new smartcontracts_1.StringValue("canWipe"),
            new smartcontracts_1.StringValue(this.boolToString(options.canWipe)),
            new smartcontracts_1.StringValue("canPause"),
            new smartcontracts_1.StringValue(this.boolToString(options.canPause)),
            new smartcontracts_1.StringValue("canTransferNFTCreateRole"),
            new smartcontracts_1.StringValue(this.boolToString(options.canTransferNFTCreateRole)),
            new smartcontracts_1.StringValue("canChangeOwner"),
            new smartcontracts_1.StringValue(this.boolToString(options.canChangeOwner)),
            new smartcontracts_1.StringValue("canUpgrade"),
            new smartcontracts_1.StringValue(this.boolToString(options.canUpgrade)),
            new smartcontracts_1.StringValue("canAddSpecialRoles"),
            new smartcontracts_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["issueNonFungible", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitIssue,
            addDataMovementGas: true,
            amount: this.config.issueCost,
        }).build();
    }
    createTransactionForRegisteringMetaESDT(options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new smartcontracts_1.StringValue(options.tokenName),
            new smartcontracts_1.StringValue(options.tokenTicker),
            new smartcontracts_1.BigUIntValue(options.numDecimals),
            new smartcontracts_1.StringValue("canFreeze"),
            new smartcontracts_1.StringValue(this.boolToString(options.canFreeze)),
            new smartcontracts_1.StringValue("canWipe"),
            new smartcontracts_1.StringValue(this.boolToString(options.canWipe)),
            new smartcontracts_1.StringValue("canPause"),
            new smartcontracts_1.StringValue(this.boolToString(options.canPause)),
            new smartcontracts_1.StringValue("canTransferNFTCreateRole"),
            new smartcontracts_1.StringValue(this.boolToString(options.canTransferNFTCreateRole)),
            new smartcontracts_1.StringValue("canChangeOwner"),
            new smartcontracts_1.StringValue(this.boolToString(options.canChangeOwner)),
            new smartcontracts_1.StringValue("canUpgrade"),
            new smartcontracts_1.StringValue(this.boolToString(options.canUpgrade)),
            new smartcontracts_1.StringValue("canAddSpecialRoles"),
            new smartcontracts_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["registerMetaESDT", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitIssue,
            addDataMovementGas: true,
            amount: this.config.issueCost,
        }).build();
    }
    createTransactionForRegisteringAndSettingRoles(options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const dataParts = [
            "registerAndSetAllRoles",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenName),
                new smartcontracts_1.StringValue(options.tokenTicker),
                new smartcontracts_1.StringValue(options.tokenType),
                new smartcontracts_1.BigUIntValue(options.numDecimals),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitIssue,
            addDataMovementGas: true,
            amount: this.config.issueCost,
        }).build();
    }
    createTransactionForSettingBurnRoleGlobally(options) {
        const dataParts = [
            "setBurnRoleGlobally",
            ...this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue(options.tokenIdentifier)]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitToggleBurnRoleGlobally,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnsettingBurnRoleGlobally(options) {
        const dataParts = [
            "unsetBurnRoleGlobally",
            ...this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue(options.tokenIdentifier)]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitToggleBurnRoleGlobally,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForSettingSpecialRoleOnFungibleToken(options) {
        const args = [new smartcontracts_1.StringValue(options.tokenIdentifier), new smartcontracts_1.AddressValue(options.user)];
        options.addRoleLocalMint ? args.push(new smartcontracts_1.StringValue("ESDTRoleLocalMint")) : 0;
        options.addRoleLocalBurn ? args.push(new smartcontracts_1.StringValue("ESDTRoleLocalBurn")) : 0;
        options.addRoleESDTTransferRole ? args.push(new smartcontracts_1.StringValue("ESDTTransferRole")) : 0;
        const dataParts = ["setSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitSetSpecialRole,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForSettingSpecialRoleOnSemiFungibleToken(options) {
        const args = [new smartcontracts_1.StringValue(options.tokenIdentifier), new smartcontracts_1.AddressValue(options.user)];
        options.addRoleNFTCreate ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTCreate")) : 0;
        options.addRoleNFTBurn ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTBurn")) : 0;
        options.addRoleNFTAddQuantity ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTAddQuantity")) : 0;
        options.addRoleESDTTransferRole ? args.push(new smartcontracts_1.StringValue("ESDTTransferRole")) : 0;
        options.addRoleESDTModifyCreator ? args.push(new smartcontracts_1.StringValue("ESDTRoleModifyCreator")) : 0;
        const dataParts = ["setSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitSetSpecialRole,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForSettingSpecialRoleOnMetaESDT(options) {
        return this.createTransactionForSettingSpecialRoleOnSemiFungibleToken(options);
    }
    createTransactionForSettingSpecialRoleOnNonFungibleToken(options) {
        const args = [new smartcontracts_1.StringValue(options.tokenIdentifier), new smartcontracts_1.AddressValue(options.user)];
        options.addRoleNFTCreate ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTCreate")) : 0;
        options.addRoleNFTBurn ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTBurn")) : 0;
        options.addRoleNFTUpdateAttributes ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTUpdateAttributes")) : 0;
        options.addRoleNFTAddURI ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTAddURI")) : 0;
        options.addRoleESDTTransferRole ? args.push(new smartcontracts_1.StringValue("ESDTTransferRole")) : 0;
        options.addRoleESDTModifyCreator ? args.push(new smartcontracts_1.StringValue("ESDTRoleModifyCreator")) : 0;
        options.addRoleNFTRecreate ? args.push(new smartcontracts_1.StringValue("ESDTRoleNFTRecreate")) : 0;
        options.addRoleESDTSetNewURI ? args.push(new smartcontracts_1.StringValue("ESDTRoleSetNewURI")) : 0;
        options.addRoleESDTModifyRoyalties ? args.push(new smartcontracts_1.StringValue("ESDTRoleModifyRoyalties")) : 0;
        const dataParts = ["setSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitSetSpecialRole,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForCreatingNFT(options) {
        const dataParts = [
            "ESDTNFTCreate",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.initialQuantity),
                new smartcontracts_1.StringValue(options.name),
                new smartcontracts_1.BigUIntValue(options.royalties),
                new smartcontracts_1.StringValue(options.hash),
                new smartcontracts_1.BytesValue(Buffer.from(options.attributes)),
                ...options.uris.map((uri) => new smartcontracts_1.StringValue(uri)),
            ]),
        ];
        // Note that the following is an approximation (a reasonable one):
        const nftData = options.name + options.hash + options.attributes + options.uris.join("");
        const storageGasLimit = this.config.gasLimitStorePerByte + BigInt(nftData.length);
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtNftCreate + storageGasLimit,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForPausing(options) {
        const dataParts = ["pause", ...this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue(options.tokenIdentifier)])];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitPausing,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnpausing(options) {
        const dataParts = [
            "unPause",
            ...this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue(options.tokenIdentifier)]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitPausing,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForFreezing(options) {
        const dataParts = [
            "freeze",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.AddressValue(options.user),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitFreezing,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUnfreezing(options) {
        const dataParts = [
            "UnFreeze",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.AddressValue(options.user),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitFreezing,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForWiping(options) {
        const dataParts = [
            "wipe",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.AddressValue(options.user),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitWiping,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForLocalMint(options) {
        const dataParts = [
            "ESDTLocalMint",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.supplyToMint),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtLocalMint,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForLocalBurning(options) {
        const dataParts = [
            "ESDTLocalBurn",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.supplyToBurn),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtLocalBurn,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUpdatingAttributes(options) {
        const dataParts = [
            "ESDTNFTUpdateAttributes",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
                new smartcontracts_1.BytesValue(Buffer.from(options.attributes)),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtNftUpdateAttributes,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForAddingQuantity(options) {
        const dataParts = [
            "ESDTNFTAddQuantity",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
                new smartcontracts_1.BigUIntValue(options.quantityToAdd),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtNftAddQuantity,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForBurningQuantity(options) {
        const dataParts = [
            "ESDTNFTBurn",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
                new smartcontracts_1.BigUIntValue(options.quantityToBurn),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtNftBurn,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForModifyingRoyalties(options) {
        const dataParts = [
            "ESDTModifyRoyalties",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
                new smartcontracts_1.BigUIntValue(options.newRoyalties),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtModifyRoyalties,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForSettingNewUris(options) {
        if (!options.newUris.length) {
            throw new errors_1.ErrBadUsage("No URIs provided");
        }
        const dataParts = [
            "ESDTSetNewURIs",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
                ...options.newUris.map((uri) => new smartcontracts_1.StringValue(uri)),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitSetNewUris,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForModifyingCreator(options) {
        const dataParts = [
            "ESDTModifyCreator",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtModifyCreator,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUpdatingMetadata(options) {
        const dataParts = [
            "ESDTMetaDataUpdate",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
                ...(options.newTokenName ? [new smartcontracts_1.StringValue(options.newTokenName)] : []),
                ...(options.newRoyalties ? [new smartcontracts_1.BigUIntValue(options.newRoyalties)] : []),
                ...(options.newHash ? [new smartcontracts_1.StringValue(options.newHash)] : []),
                ...(options.newAttributes ? [new smartcontracts_1.BytesValue(Buffer.from(options.newAttributes))] : []),
                ...(options.newUris ? options.newUris.map((uri) => new smartcontracts_1.StringValue(uri)) : []),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitEsdtMetadataUpdate,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForMetadataRecreate(options) {
        const dataParts = [
            "ESDTMetaDataRecreate",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenIdentifier),
                new smartcontracts_1.BigUIntValue(options.tokenNonce),
                ...(options.newTokenName ? [new smartcontracts_1.StringValue(options.newTokenName)] : []),
                ...(options.newRoyalties ? [new smartcontracts_1.BigUIntValue(options.newRoyalties)] : []),
                ...(options.newHash ? [new smartcontracts_1.StringValue(options.newHash)] : []),
                ...(options.newAttributes ? [new smartcontracts_1.BytesValue(Buffer.from(options.newAttributes))] : []),
                ...(options.newUris ? options.newUris.map((uri) => new smartcontracts_1.StringValue(uri)) : []),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: options.sender,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitNftMetadataRecreate,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForChangingTokenToDynamic(options) {
        const dataParts = [
            "changeToDynamic",
            ...this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue(options.tokenIdentifier)]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitNftChangeToDynamic,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForUpdatingTokenId(options) {
        const dataParts = [
            "updateTokenID",
            ...this.argSerializer.valuesToStrings([new smartcontracts_1.StringValue(options.tokenIdentifier)]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitUpdateTokenId,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForRegisteringDynamicToken(options) {
        const dataParts = [
            "registerDynamic",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenName),
                new smartcontracts_1.StringValue(options.tokenTicker),
                new smartcontracts_1.StringValue(options.tokenType),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitRegisterDynamic,
            addDataMovementGas: true,
            amount: this.config.issueCost,
        }).build();
    }
    createTransactionForRegisteringDynamicAndSettingRoles(options) {
        const dataParts = [
            "registerAndSetAllRolesDynamic",
            ...this.argSerializer.valuesToStrings([
                new smartcontracts_1.StringValue(options.tokenName),
                new smartcontracts_1.StringValue(options.tokenTicker),
                new smartcontracts_1.StringValue(options.tokenType),
            ]),
        ];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: options.sender,
            receiver: this.esdtContractAddress,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitRegisterDynamic,
            addDataMovementGas: true,
            amount: this.config.issueCost,
        }).build();
    }
    notifyAboutUnsettingBurnRoleGlobally() {
        logger_1.Logger.info(`
==========
IMPORTANT!
==========
You are about to issue (register) a new token. This will set the role "ESDTRoleBurnForAll" (globally).
Once the token is registered, you can unset this role by calling "unsetBurnRoleGlobally" (in a separate transaction).`);
    }
    boolToString(value) {
        if (value) {
            return this.trueAsString;
        }
        return this.falseAsString;
    }
}
exports.TokenManagementTransactionsFactory = TokenManagementTransactionsFactory;
//# sourceMappingURL=tokenManagementTransactionsFactory.js.map