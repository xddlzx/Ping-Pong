"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const constants_1 = require("../constants");
const transaction_1 = require("../transaction");
const transactionPayload_1 = require("../transactionPayload");
/**
 * @internal
 */
class TransactionBuilder {
    constructor(options) {
        this.config = options.config;
        this.sender = options.sender;
        this.receiver = options.receiver;
        this.dataParts = options.dataParts;
        this.providedGasLimit = options.gasLimit;
        this.addDataMovementGas = options.addDataMovementGas;
        this.amount = options.amount;
    }
    computeGasLimit(payload) {
        if (!this.addDataMovementGas) {
            return this.providedGasLimit;
        }
        const dataMovementGas = this.config.minGasLimit + this.config.gasLimitPerByte * BigInt(payload.length());
        const gasLimit = dataMovementGas + this.providedGasLimit;
        return gasLimit;
    }
    buildTransactionPayload() {
        const data = this.dataParts.join(constants_1.ARGUMENTS_SEPARATOR);
        return new transactionPayload_1.TransactionPayload(data);
    }
    build() {
        const data = this.buildTransactionPayload();
        const gasLimit = this.computeGasLimit(data);
        return new transaction_1.Transaction({
            sender: this.sender.bech32(),
            receiver: this.receiver.bech32(),
            gasLimit: gasLimit,
            value: this.amount || 0n,
            data: data.valueOf(),
            chainID: this.config.chainID,
        });
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=transactionBuilder.js.map