import { IAddress, IChainID, IGasLimit, IGasPrice, INonce, ITokenTransfer, ITransactionPayload, ITransactionValue } from "../interface";
import { TokenTransfer } from "../tokens";
import { Transaction } from "../transaction";
interface IConfig {
    chainID: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitESDTTransfer: bigint;
    gasLimitESDTNFTTransfer: bigint;
    gasLimitMultiESDTNFTTransfer: bigint;
}
interface IGasEstimator {
    forEGLDTransfer(dataLength: number): number;
    forESDTTransfer(dataLength: number): number;
    forESDTNFTTransfer(dataLength: number): number;
    forMultiESDTNFTTransfer(dataLength: number, numTransfers: number): number;
}
/**
 * Use this class to create transactions for native token transfers (EGLD) or custom tokens transfers (ESDT/NTF/MetaESDT).
 */
export declare class TransferTransactionsFactory {
    private readonly config?;
    private readonly tokenTransfersDataBuilder?;
    private readonly tokenComputer?;
    private readonly gasEstimator?;
    /**
     * Should be instantiated using `Config`.
     * Instantiating this class using GasEstimator represents the legacy version of this class.
     * The legacy version contains methods like `createEGLDTransfer`, `createESDTTransfer`, `createESDTNFTTransfer` and `createMultiESDTNFTTransfer`.
     * This was done in order to minimize breaking changes in client code.
     */
    constructor(options: IGasEstimator | {
        config: IConfig;
    });
    private isGasEstimator;
    private isGasEstimatorDefined;
    private ensureConfigIsDefined;
    createTransactionForNativeTokenTransfer(options: {
        sender: IAddress;
        receiver: IAddress;
        nativeAmount: bigint;
        data?: Uint8Array;
    }): Transaction;
    createTransactionForESDTTokenTransfer(options: {
        sender: IAddress;
        receiver: IAddress;
        tokenTransfers: TokenTransfer[];
    }): Transaction;
    createTransactionForTransfer(options: {
        sender: IAddress;
        receiver: IAddress;
        nativeAmount?: bigint;
        tokenTransfers?: TokenTransfer[];
        data?: Uint8Array;
    }): Transaction;
    /**
     * This is a legacy method. Can only be used if the class was instantiated using `GasEstimator`.
     * Use {@link createTransactionForNativeTokenTransfer} instead.
     */
    createEGLDTransfer(args: {
        nonce?: INonce;
        value: ITransactionValue;
        receiver: IAddress;
        sender: IAddress;
        gasPrice?: IGasPrice;
        gasLimit?: IGasLimit;
        data?: ITransactionPayload;
        chainID: IChainID;
    }): Transaction;
    /**
     * This is a legacy method. Can only be used if the class was instantiated using `GasEstimator`.
     * Use {@link createTransactionForESDTTokenTransfer} instead.
     */
    createESDTTransfer(args: {
        tokenTransfer: ITokenTransfer;
        nonce?: INonce;
        receiver: IAddress;
        sender: IAddress;
        gasPrice?: IGasPrice;
        gasLimit?: IGasLimit;
        chainID: IChainID;
    }): Transaction;
    /**
     * This is a legacy method. Can only be used if the class was instantiated using `GasEstimator`.
     * Use {@link createTransactionForESDTTokenTransfer} instead.
     */
    createESDTNFTTransfer(args: {
        tokenTransfer: ITokenTransfer;
        nonce?: INonce;
        destination: IAddress;
        sender: IAddress;
        gasPrice?: IGasPrice;
        gasLimit?: IGasLimit;
        chainID: IChainID;
    }): Transaction;
    /**
     * This is a legacy method. Can only be used if the class was instantiated using `GasEstimator`.
     * Use {@link createTransactionForESDTTokenTransfer} instead.
     */
    createMultiESDTNFTTransfer(args: {
        tokenTransfers: ITokenTransfer[];
        nonce?: INonce;
        destination: IAddress;
        sender: IAddress;
        gasPrice?: IGasPrice;
        gasLimit?: IGasLimit;
        chainID: IChainID;
    }): Transaction;
    private createSingleESDTTransferTransaction;
    private buildTransferData;
    private buildMultiESDTNFTTransferData;
    private buildESDTTransferData;
    private buildSingleESDTNFTTransferData;
    private computeGasForMoveBalance;
}
export {};
