import { IAddress } from "../interface";
import { ContractFunction, EndpointDefinition } from "../smartcontracts";
import { TokenTransfer } from "../tokens";
import { Transaction } from "../transaction";
interface IConfig {
    chainID: string;
    addressHrp: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitClaimDeveloperRewards: bigint;
    gasLimitChangeOwnerAddress: bigint;
}
interface IAbi {
    constructorDefinition: EndpointDefinition;
    upgradeConstructorDefinition?: EndpointDefinition;
    getEndpoint(name: string | ContractFunction): EndpointDefinition;
}
/**
 * Use this class to create transactions to deploy, call or upgrade a smart contract.
 */
export declare class SmartContractTransactionsFactory {
    private readonly config;
    private readonly abi?;
    private readonly tokenComputer;
    private readonly dataArgsBuilder;
    private readonly contractDeployAddress;
    constructor(options: {
        config: IConfig;
        abi?: IAbi;
    });
    createTransactionForDeploy(options: {
        sender: IAddress;
        bytecode: Uint8Array;
        gasLimit: bigint;
        arguments?: any[];
        nativeTransferAmount?: bigint;
        isUpgradeable?: boolean;
        isReadable?: boolean;
        isPayable?: boolean;
        isPayableBySmartContract?: boolean;
    }): Transaction;
    createTransactionForExecute(options: {
        sender: IAddress;
        contract: IAddress;
        function: string;
        gasLimit: bigint;
        arguments?: any[];
        nativeTransferAmount?: bigint;
        tokenTransfers?: TokenTransfer[];
    }): Transaction;
    createTransactionForUpgrade(options: {
        sender: IAddress;
        contract: IAddress;
        bytecode: Uint8Array;
        gasLimit: bigint;
        arguments?: any[];
        nativeTransferAmount?: bigint;
        isUpgradeable?: boolean;
        isReadable?: boolean;
        isPayable?: boolean;
        isPayableBySmartContract?: boolean;
    }): Transaction;
    private getEndpointForUpgrade;
    createTransactionForClaimingDeveloperRewards(options: {
        sender: IAddress;
        contract: IAddress;
    }): Transaction;
    createTransactionForChangingOwnerAddress(options: {
        sender: IAddress;
        contract: IAddress;
        newOwner: IAddress;
    }): Transaction;
    private argsToDataParts;
    private areArgsOfTypedValue;
}
export {};
