import { IAddress } from "../interface";
import { Transaction } from "../transaction";
interface IConfig {
    chainID: string;
    addressHrp: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitStake: bigint;
    gasLimitUnstake: bigint;
    gasLimitUnbond: bigint;
    gasLimitCreateDelegationContract: bigint;
    gasLimitDelegationOperations: bigint;
    additionalGasLimitPerValidatorNode: bigint;
    additionalGasLimitForDelegationOperations: bigint;
}
interface IValidatorPublicKey {
    hex(): string;
}
/**
 * Use this class to create delegation related transactions like creating a new delegation contract or adding nodes.
 */
export declare class DelegationTransactionsFactory {
    private readonly config;
    private readonly argSerializer;
    private readonly delegationManagerAddress;
    constructor(options: {
        config: IConfig;
    });
    createTransactionForNewDelegationContract(options: {
        sender: IAddress;
        totalDelegationCap: bigint;
        serviceFee: bigint;
        amount: bigint;
    }): Transaction;
    createTransactionForAddingNodes(options: {
        sender: IAddress;
        delegationContract: IAddress;
        publicKeys: IValidatorPublicKey[];
        signedMessages: Uint8Array[];
    }): Transaction;
    createTransactionForRemovingNodes(options: {
        sender: IAddress;
        delegationContract: IAddress;
        publicKeys: IValidatorPublicKey[];
    }): Transaction;
    createTransactionForStakingNodes(options: {
        sender: IAddress;
        delegationContract: IAddress;
        publicKeys: IValidatorPublicKey[];
    }): Transaction;
    createTransactionForUnbondingNodes(options: {
        sender: IAddress;
        delegationContract: IAddress;
        publicKeys: IValidatorPublicKey[];
    }): Transaction;
    createTransactionForUnstakingNodes(options: {
        sender: IAddress;
        delegationContract: IAddress;
        publicKeys: IValidatorPublicKey[];
    }): Transaction;
    createTransactionForUnjailingNodes(options: {
        sender: IAddress;
        delegationContract: IAddress;
        publicKeys: IValidatorPublicKey[];
        amount: bigint;
    }): Transaction;
    createTransactionForChangingServiceFee(options: {
        sender: IAddress;
        delegationContract: IAddress;
        serviceFee: bigint;
    }): Transaction;
    createTransactionForModifyingDelegationCap(options: {
        sender: IAddress;
        delegationContract: IAddress;
        delegationCap: bigint;
    }): Transaction;
    createTransactionForSettingAutomaticActivation(options: {
        sender: IAddress;
        delegationContract: IAddress;
    }): Transaction;
    createTransactionForUnsettingAutomaticActivation(options: {
        sender: IAddress;
        delegationContract: IAddress;
    }): Transaction;
    createTransactionForSettingCapCheckOnRedelegateRewards(options: {
        sender: IAddress;
        delegationContract: IAddress;
    }): Transaction;
    createTransactionForUnsettingCapCheckOnRedelegateRewards(options: {
        sender: IAddress;
        delegationContract: IAddress;
    }): Transaction;
    createTransactionForSettingMetadata(options: {
        sender: IAddress;
        delegationContract: IAddress;
        name: string;
        website: string;
        identifier: string;
    }): Transaction;
    private computeExecutionGasLimitForNodesManagement;
}
export {};
