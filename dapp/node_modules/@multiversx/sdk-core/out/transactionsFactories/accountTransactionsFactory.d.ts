import { IAddress } from "../interface";
import { Transaction } from "../transaction";
interface IConfig {
    chainID: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitSaveKeyValue: bigint;
    gasLimitPersistPerByte: bigint;
    gasLimitStorePerByte: bigint;
    gasLimitSetGuardian: bigint;
    gasLimitGuardAccount: bigint;
    gasLimitUnguardAccount: bigint;
}
export declare class AccountTransactionsFactory {
    private readonly config;
    constructor(options: {
        config: IConfig;
    });
    createTransactionForSavingKeyValue(options: {
        sender: IAddress;
        keyValuePairs: Map<Uint8Array, Uint8Array>;
    }): Transaction;
    private computeExtraGasForSavingKeyValue;
    private computeDataPartsForSavingKeyValue;
    createTransactionForSettingGuardian(options: {
        sender: IAddress;
        guardianAddress: IAddress;
        serviceID: string;
    }): Transaction;
    createTransactionForGuardingAccount(options: {
        sender: IAddress;
    }): Transaction;
    createTransactionForUnguardingAccount(options: {
        sender: IAddress;
    }): Transaction;
}
export {};
