import { SmartContractQuery, SmartContractQueryResponse } from "./smartContractQuery";
import { ContractFunction, EndpointDefinition } from "./smartcontracts";
interface IAbi {
    getEndpoint(name: string | ContractFunction): EndpointDefinition;
}
interface IQueryRunner {
    runQuery(query: SmartContractQuery): Promise<SmartContractQueryResponse>;
}
export declare class SmartContractQueriesController {
    private readonly abi?;
    private readonly queryRunner;
    private readonly legacyResultsParser;
    constructor(options: {
        abi?: IAbi;
        queryRunner: IQueryRunner;
    });
    query(options: {
        contract: string;
        caller?: string;
        value?: bigint;
        function: string;
        arguments: any[];
    }): Promise<any[]>;
    private raiseForStatus;
    createQuery(options: {
        contract: string;
        caller?: string;
        value?: bigint;
        function: string;
        arguments: any[];
    }): SmartContractQuery;
    private encodeArguments;
    private areArgsOfTypedValue;
    private areArgsBuffers;
    runQuery(query: SmartContractQuery): Promise<SmartContractQueryResponse>;
    parseQueryResponse(response: SmartContractQueryResponse): any[];
}
export {};
