"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedDecimalSignedCodec = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const typesystem_1 = require("../typesystem");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
class ManagedDecimalSignedCodec {
    constructor(binaryCodec) {
        this.binaryCodec = binaryCodec;
    }
    decodeNested(buffer, type) {
        const length = buffer.readUInt32BE(0);
        const payload = buffer.slice(0, length);
        const result = this.decodeTopLevel(payload, type);
        return [result, length];
    }
    decodeTopLevel(buffer, type) {
        if (buffer.length === 0) {
            return new typesystem_1.ManagedDecimalSignedValue(new bignumber_js_1.default(0), 0);
        }
        if (type.isVariable()) {
            const bigintSize = buffer.length - constants_1.SizeOfU32;
            const [value] = this.binaryCodec.decodeNested(buffer.slice(0, bigintSize), new typesystem_1.BigIntType());
            const scale = buffer.readUInt32BE(bigintSize);
            return new typesystem_1.ManagedDecimalSignedValue(value.valueOf().shiftedBy(-scale), scale);
        }
        const value = utils_1.bufferToBigInt(buffer);
        const metadata = type.getMetadata();
        const scale = metadata !== "usize" ? parseInt(metadata.toString()) : 0;
        return new typesystem_1.ManagedDecimalSignedValue(value.shiftedBy(-scale), scale);
    }
    encodeNested(value) {
        let buffers = [];
        const rawValue = new typesystem_1.BigIntValue(value.valueOf().shiftedBy(value.getScale()));
        if (value.isVariable()) {
            buffers.push(Buffer.from(this.binaryCodec.encodeNested(rawValue)));
            buffers.push(Buffer.from(this.binaryCodec.encodeNested(new typesystem_1.U32Value(value.getScale()))));
        }
        else {
            buffers.push(Buffer.from(this.binaryCodec.encodeTopLevel(rawValue)));
        }
        return Buffer.concat(buffers);
    }
    encodeTopLevel(value) {
        return this.encodeNested(value);
    }
}
exports.ManagedDecimalSignedCodec = ManagedDecimalSignedCodec;
//# sourceMappingURL=managedDecimalSigned.js.map