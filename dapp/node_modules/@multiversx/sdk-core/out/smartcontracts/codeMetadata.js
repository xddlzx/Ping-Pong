"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeMetadata = exports.CodeMetadataLength = void 0;
exports.CodeMetadataLength = 2;
/**
 * The metadata of a Smart Contract, as an abstraction.
 */
class CodeMetadata {
    /**
     * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.
     *
     * @param upgradeable Whether the contract is upgradeable
     * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)
     * @param payable Whether the contract is payable
     * @param payableBySc Whether the contract is payable by other smart contracts
     */
    constructor(upgradeable = true, readable = false, payable = false, payableBySc = false) {
        this.upgradeable = upgradeable;
        this.readable = readable;
        this.payable = payable;
        this.payableBySc = payableBySc;
    }
    static fromBytes(bytes) {
        return CodeMetadata.fromBuffer(Buffer.from(bytes));
    }
    /**
     * Creates a metadata object from a buffer.
     */
    static fromBuffer(buffer) {
        if (buffer.length != exports.CodeMetadataLength) {
            throw new Error(`code metadata buffer has length ${buffer.length}, expected ${exports.CodeMetadataLength}`);
        }
        const byteZero = buffer[0];
        const byteOne = buffer[1];
        const upgradeable = (byteZero & CodeMetadata.ByteZero.Upgradeable) !== 0;
        const readable = (byteZero & CodeMetadata.ByteZero.Readable) !== 0;
        const payable = (byteOne & CodeMetadata.ByteOne.Payable) !== 0;
        const payableBySc = (byteOne & CodeMetadata.ByteOne.PayableBySc) !== 0;
        return new CodeMetadata(upgradeable, readable, payable, payableBySc);
    }
    /**
     * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.
     */
    toggleUpgradeable(value) {
        this.upgradeable = value;
    }
    /**
     * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.
     */
    toggleReadable(value) {
        this.readable = value;
    }
    /**
     * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.
     */
    togglePayable(value) {
        this.payable = value;
    }
    /**
     * Adjust the metadata (the `payableBySc` attribute), when preparing the deployment transaction.
     */
    togglePayableBySc(value) {
        this.payableBySc = value;
    }
    /**
     * Converts the metadata to the protocol-friendly representation.
     */
    toBuffer() {
        let byteZero = 0;
        let byteOne = 0;
        if (this.upgradeable) {
            byteZero |= CodeMetadata.ByteZero.Upgradeable;
        }
        if (this.readable) {
            byteZero |= CodeMetadata.ByteZero.Readable;
        }
        if (this.payable) {
            byteOne |= CodeMetadata.ByteOne.Payable;
        }
        if (this.payableBySc) {
            byteOne |= CodeMetadata.ByteOne.PayableBySc;
        }
        return Buffer.from([byteZero, byteOne]);
    }
    /**
     * Converts the metadata to a hex-encoded string.
     */
    toString() {
        return this.toBuffer().toString("hex");
    }
    /**
     * Converts the metadata to a pretty, plain JavaScript object.
     */
    toJSON() {
        return {
            upgradeable: this.upgradeable,
            readable: this.readable,
            payable: this.payable,
            payableBySc: this.payableBySc,
        };
    }
    equals(other) {
        return (this.upgradeable == other.upgradeable &&
            this.readable == other.readable &&
            this.payable == other.payable &&
            this.payableBySc == other.payableBySc);
    }
}
exports.CodeMetadata = CodeMetadata;
CodeMetadata.ByteZero = {
    Upgradeable: 1,
    Reserved2: 2,
    Readable: 4,
};
CodeMetadata.ByteOne = {
    Reserved1: 1,
    Payable: 2,
    PayableBySc: 4,
};
//# sourceMappingURL=codeMetadata.js.map