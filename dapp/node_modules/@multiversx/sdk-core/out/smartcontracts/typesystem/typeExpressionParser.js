"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeExpressionParser = void 0;
const typeFormulaParser_1 = require("../../abi/typeFormulaParser");
const errors_1 = require("../../errors");
const types_1 = require("./types");
class TypeExpressionParser {
    constructor() {
        this.backingTypeFormulaParser = new typeFormulaParser_1.TypeFormulaParser();
    }
    parse(expression) {
        try {
            return this.doParse(expression);
        }
        catch (e) {
            throw new errors_1.ErrTypingSystem(`Failed to parse type expression: ${expression}. Error: ${e}`);
        }
    }
    doParse(expression) {
        const typeFormula = this.backingTypeFormulaParser.parseExpression(expression);
        const type = this.typeFormulaToType(typeFormula);
        return type;
    }
    typeFormulaToType(typeFormula) {
        const typeParameters = typeFormula.typeParameters.map((typeFormula) => this.typeFormulaToType(typeFormula));
        return new types_1.Type(typeFormula.name, typeParameters, undefined, typeFormula.metadata);
    }
}
exports.TypeExpressionParser = TypeExpressionParser;
//# sourceMappingURL=typeExpressionParser.js.map