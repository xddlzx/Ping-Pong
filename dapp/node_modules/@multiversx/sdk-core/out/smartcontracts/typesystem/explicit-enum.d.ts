import { CustomType, TypedValue } from "./types";
export declare class ExplicitEnumType extends CustomType {
    static ClassName: string;
    readonly variants: ExplicitEnumVariantDefinition[];
    constructor(name: string, variants: ExplicitEnumVariantDefinition[]);
    getClassName(): string;
    static fromJSON(json: {
        name: string;
        variants: any[];
    }): ExplicitEnumType;
    getVariantByName(name: string): ExplicitEnumVariantDefinition;
}
export declare class ExplicitEnumVariantDefinition {
    readonly name: string;
    constructor(name: string);
    static fromJSON(json: {
        name: string;
    }): ExplicitEnumVariantDefinition;
}
export declare class ExplicitEnumValue extends TypedValue {
    static ClassName: string;
    readonly name: string;
    constructor(type: ExplicitEnumType, variant: ExplicitEnumVariantDefinition);
    getClassName(): string;
    /**
     * Utility (named constructor) to create a simple (i.e. without fields) enum value.
     */
    static fromName(type: ExplicitEnumType, name: string): ExplicitEnumValue;
    equals(other: ExplicitEnumValue): boolean;
    valueOf(): {
        name: string;
    };
}
