"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedDecimalValue = exports.ManagedDecimalType = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const types_1 = require("./types");
class ManagedDecimalType extends types_1.Type {
    constructor(metadata) {
        super("ManagedDecimal", undefined, undefined, metadata);
    }
    getClassName() {
        return ManagedDecimalType.ClassName;
    }
    getMetadata() {
        return this.metadata;
    }
    isVariable() {
        return this.metadata == "usize";
    }
}
exports.ManagedDecimalType = ManagedDecimalType;
ManagedDecimalType.ClassName = "ManagedDecimalType";
class ManagedDecimalValue extends types_1.TypedValue {
    constructor(value, scale, isVariable = false) {
        super(new ManagedDecimalType(isVariable ? "usize" : scale));
        this.value = new bignumber_js_1.default(value);
        this.scale = scale;
        this.variable = isVariable;
    }
    getClassName() {
        return ManagedDecimalValue.ClassName;
    }
    getScale() {
        return this.scale;
    }
    getPrecision() {
        return this.value.toFixed(this.scale).replace(".", "").length;
    }
    /**
     * Returns whether two objects have the same value.
     */
    equals(other) {
        if (this.getPrecision() != other.getPrecision()) {
            return false;
        }
        return new bignumber_js_1.default(this.value).eq(other.value);
    }
    valueOf() {
        return this.value;
    }
    toString() {
        return this.value.toFixed(this.scale);
    }
    isVariable() {
        return this.variable;
    }
}
exports.ManagedDecimalValue = ManagedDecimalValue;
ManagedDecimalValue.ClassName = "ManagedDecimalValue";
//# sourceMappingURL=managedDecimal.js.map