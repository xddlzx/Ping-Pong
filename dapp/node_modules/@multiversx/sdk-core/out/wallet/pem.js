"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.parseValidatorKeys = exports.parseValidatorKey = exports.parseUserKeys = exports.parseUserKey = void 0;
const errors_1 = require("../errors");
const userKeys_1 = require("./userKeys");
const validatorKeys_1 = require("./validatorKeys");
function parseUserKey(text, index = 0) {
    const keys = parseUserKeys(text);
    return keys[index];
}
exports.parseUserKey = parseUserKey;
function parseUserKeys(text) {
    // The user PEM files encode both the seed and the pubkey in their payloads.
    const buffers = parse(text, userKeys_1.USER_SEED_LENGTH + userKeys_1.USER_PUBKEY_LENGTH);
    return buffers.map((buffer) => new userKeys_1.UserSecretKey(buffer.slice(0, userKeys_1.USER_SEED_LENGTH)));
}
exports.parseUserKeys = parseUserKeys;
function parseValidatorKey(text, index = 0) {
    const keys = parseValidatorKeys(text);
    return keys[index];
}
exports.parseValidatorKey = parseValidatorKey;
function parseValidatorKeys(text) {
    const buffers = parse(text, validatorKeys_1.VALIDATOR_SECRETKEY_LENGTH);
    return buffers.map((buffer) => new validatorKeys_1.ValidatorSecretKey(buffer));
}
exports.parseValidatorKeys = parseValidatorKeys;
function parse(text, expectedLength) {
    // Split by newlines, trim whitespace, then discard remaining empty lines.
    const lines = text
        .split(/\r?\n/)
        .map((line) => line.trim())
        .filter((line) => line.length > 0);
    const buffers = [];
    let linesAccumulator = [];
    for (const line of lines) {
        if (line.startsWith("-----BEGIN")) {
            linesAccumulator = [];
        }
        else if (line.startsWith("-----END")) {
            const asBase64 = linesAccumulator.join("");
            const asHex = Buffer.from(asBase64, "base64").toString();
            const asBytes = Buffer.from(asHex, "hex");
            if (asBytes.length != expectedLength) {
                throw new errors_1.ErrBadPEM(`incorrect key length: expected ${expectedLength}, found ${asBytes.length}`);
            }
            buffers.push(asBytes);
            linesAccumulator = [];
        }
        else {
            linesAccumulator.push(line);
        }
    }
    if (linesAccumulator.length != 0) {
        throw new errors_1.ErrBadPEM("incorrect file structure");
    }
    return buffers;
}
exports.parse = parse;
//# sourceMappingURL=pem.js.map