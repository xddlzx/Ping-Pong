import BigNumber from "bignumber.js";
interface ILegacyTokenTransferOptions {
    tokenIdentifier: string;
    nonce: number;
    amountAsBigInteger: BigNumber.Value;
    numDecimals?: number;
}
export declare class Token {
    readonly identifier: string;
    readonly nonce: bigint;
    constructor(options: {
        identifier: string;
        nonce?: bigint;
    });
}
export declare class TokenTransfer {
    readonly token: Token;
    readonly amount: bigint;
    /**
     * Legacy field. Use "token.identifier" instead.
     */
    readonly tokenIdentifier: string;
    /**
     * Legacy field. Use "token.nonce" instead.
     */
    readonly nonce: number;
    /**
     * Legacy field. Use "amount" instead.
     */
    readonly amountAsBigInteger: BigNumber;
    /**
     * Legacy field. The number of decimals is not a concern of "sdk-core".
     * For formatting and parsing amounts, use "sdk-dapp" or "bignumber.js" directly.
     */
    readonly numDecimals: number;
    constructor(options: {
        token: Token;
        amount: bigint;
    } | ILegacyTokenTransferOptions);
    static newFromEgldAmount(amount: bigint): TokenTransfer;
    private isLegacyTokenTransferOptions;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static egldFromAmount(amount: BigNumber.Value): TokenTransfer;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static egldFromBigInteger(amountAsBigInteger: BigNumber.Value): TokenTransfer;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static fungibleFromAmount(tokenIdentifier: string, amount: BigNumber.Value, numDecimals: number): TokenTransfer;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static fungibleFromBigInteger(tokenIdentifier: string, amountAsBigInteger: BigNumber.Value, numDecimals?: number): TokenTransfer;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static nonFungible(tokenIdentifier: string, nonce: number): TokenTransfer;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static semiFungible(tokenIdentifier: string, nonce: number, quantity: number): TokenTransfer;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static metaEsdtFromAmount(tokenIdentifier: string, nonce: number, amount: BigNumber.Value, numDecimals: number): TokenTransfer;
    /**
     * Legacy function. Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static metaEsdtFromBigInteger(tokenIdentifier: string, nonce: number, amountAsBigInteger: BigNumber.Value, numDecimals?: number): TokenTransfer;
    toString(): string;
    /**
     * Legacy function. Use the "amount" field instead.
     */
    valueOf(): BigNumber;
    /**
     * Legacy function. For formatting and parsing amounts, use "sdk-dapp" or "bignumber.js" directly.
     */
    toPrettyString(): string;
    private toAmount;
    /**
     * Legacy function. Within your code, don't mix native values (EGLD) and custom (ESDT) tokens.
     * See "TransferTransactionsFactory.createTransactionForNativeTokenTransfer()" vs. "TransferTransactionsFactory.createTransactionForESDTTokenTransfer()".
     */
    isEgld(): boolean;
    /**
     * Legacy function. Use "TokenComputer.isFungible(token)" instead.
     */
    isFungible(): boolean;
}
export declare class TokenComputer {
    TOKEN_RANDOM_SEQUENCE_LENGTH: number;
    constructor();
    isFungible(token: Token): boolean;
    extractNonceFromExtendedIdentifier(identifier: string): number;
    extractIdentifierFromExtendedIdentifier(identifier: string): string;
    private validateExtendedIdentifier;
    private splitIdentifierIntoComponents;
    private checkIfExtendedIdentifierWasProvided;
    private isLowercaseAlphanumeric;
    private checkLengthOfRandomSequence;
    private checkLengthOfPrefix;
    private ensureTokenTickerValidity;
}
/**
 * @deprecated use {@link TokenTransfer} instead.
 */
export declare class TokenPayment extends TokenTransfer {
    constructor(tokenIdentifier: string, nonce: number, amountAsBigInteger: BigNumber.Value, numDecimals: number);
}
export {};
