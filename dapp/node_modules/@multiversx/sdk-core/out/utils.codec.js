"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addressToHex = exports.bigIntToHex = exports.byteArrayToHex = exports.boolToHex = exports.utf8ToHex = exports.zeroPadStringIfOddLength = exports.isPaddedHex = exports.numberToPaddedHex = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const address_1 = require("./address");
const contractsCodecUtils = __importStar(require("./smartcontracts/codec/utils"));
function numberToPaddedHex(value) {
    let hexableNumber;
    if (typeof value === "bigint" || typeof value === "number") {
        hexableNumber = value;
    }
    else {
        hexableNumber = new bignumber_js_1.default(value);
    }
    const hex = hexableNumber.toString(16);
    return zeroPadStringIfOddLength(hex);
}
exports.numberToPaddedHex = numberToPaddedHex;
function isPaddedHex(input) {
    input = input || "";
    let decodedThenEncoded = Buffer.from(input, "hex").toString("hex");
    return input.toUpperCase() == decodedThenEncoded.toUpperCase();
}
exports.isPaddedHex = isPaddedHex;
function zeroPadStringIfOddLength(input) {
    input = input || "";
    if (input.length % 2 == 1) {
        return "0" + input;
    }
    return input;
}
exports.zeroPadStringIfOddLength = zeroPadStringIfOddLength;
function utf8ToHex(value) {
    const hex = Buffer.from(value).toString("hex");
    return zeroPadStringIfOddLength(hex);
}
exports.utf8ToHex = utf8ToHex;
function boolToHex(value) {
    return utf8ToHex(value.toString());
}
exports.boolToHex = boolToHex;
function byteArrayToHex(byteArray) {
    const hexString = Buffer.from(byteArray).toString("hex");
    return zeroPadStringIfOddLength(hexString);
}
exports.byteArrayToHex = byteArrayToHex;
function bigIntToHex(value) {
    if (value == 0) {
        return "";
    }
    return contractsCodecUtils.getHexMagnitudeOfBigInt(value);
}
exports.bigIntToHex = bigIntToHex;
function addressToHex(address) {
    const buffer = address_1.Address.fromBech32(address.toString()).pubkey();
    return buffer.toString("hex");
}
exports.addressToHex = addressToHex;
//# sourceMappingURL=utils.codec.js.map