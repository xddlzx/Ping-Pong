import { IAddress } from "../interface";
import { IContractQueryResponse } from "../interfaceOfNetwork";
import { SmartContractQuery, SmartContractQueryResponse } from "../smartContractQuery";
interface INetworkProvider {
    queryContract(query: IQuery): Promise<IContractQueryResponse>;
}
interface IQuery {
    address: IAddress;
    caller?: IAddress;
    func: {
        toString(): string;
    };
    value?: {
        toString(): string;
    };
    getEncodedArguments(): string[];
}
export declare class QueryRunnerAdapter {
    private readonly networkProvider;
    constructor(options: {
        networkProvider: INetworkProvider;
    });
    runQuery(query: SmartContractQuery): Promise<SmartContractQueryResponse>;
}
export {};
