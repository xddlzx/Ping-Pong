/// <reference types="node" />
import { IAddress } from "../interface";
interface ITransactionOnNetwork {
    hash: string;
    contractResults: IContractResults;
    logs: ITransactionLogs;
}
interface IContractResults {
    items: IContractResultItem[];
}
interface IContractResultItem {
    logs: ITransactionLogs;
}
interface ITransactionLogs {
    events: ITransactionEvent[];
}
interface ITransactionEvent {
    readonly address: IAddress;
    readonly identifier: string;
    readonly topics: ITransactionEventTopic[];
    readonly data: string;
}
interface ITransactionEventTopic {
    valueOf(): any;
}
export interface IESDTIssueOutcome {
    tokenIdentifier: string;
}
export interface IRegisterAndSetAllRolesOutcome {
    tokenIdentifier: string;
    roles: string[];
}
export interface IToggleBurnRoleGloballyOutcome {
}
export interface ISetSpecialRoleOutcome {
    userAddress: string;
    tokenIdentifier: string;
    roles: string[];
}
export interface INFTCreateOutcome {
    tokenIdentifier: string;
    nonce: string;
    initialQuantity: string;
}
export interface IMintOutcome {
    userAddress: string;
    tokenIdentifier: string;
    nonce: string;
    mintedSupply: string;
}
export interface IBurnOutcome {
    userAddress: string;
    tokenIdentifier: string;
    nonce: string;
    burntSupply: string;
}
export interface IPausingOutcome {
}
export interface IFreezingOutcome {
    userAddress: string;
    tokenIdentifier: string;
    nonce: string;
    balance: string;
}
export interface IWipingOutcome {
    userAddress: string;
    tokenIdentifier: string;
    nonce: string;
    balance: string;
}
export interface IUpdateAttributesOutcome {
    tokenIdentifier: string;
    nonce: string;
    attributes: Buffer;
}
export interface IAddQuantityOutcome {
    tokenIdentifier: string;
    nonce: string;
    addedQuantity: string;
}
export interface IBurnQuantityOutcome {
    tokenIdentifier: string;
    nonce: string;
    burntQuantity: string;
}
/**
 * @deprecated Use {@link TokenManagementTransactionsOutcomeParser}
 */
export declare class TokenOperationsOutcomeParser {
    parseIssueFungible(transaction: ITransactionOnNetwork): IESDTIssueOutcome;
    parseIssueNonFungible(transaction: ITransactionOnNetwork): IESDTIssueOutcome;
    parseIssueSemiFungible(transaction: ITransactionOnNetwork): IESDTIssueOutcome;
    parseRegisterMetaESDT(transaction: ITransactionOnNetwork): IESDTIssueOutcome;
    parseRegisterAndSetAllRoles(transaction: ITransactionOnNetwork): IRegisterAndSetAllRolesOutcome;
    parseSetBurnRoleGlobally(transaction: ITransactionOnNetwork): IToggleBurnRoleGloballyOutcome;
    parseUnsetBurnRoleGlobally(transaction: ITransactionOnNetwork): IToggleBurnRoleGloballyOutcome;
    parseSetSpecialRole(transaction: ITransactionOnNetwork): ISetSpecialRoleOutcome;
    parseNFTCreate(transaction: ITransactionOnNetwork): INFTCreateOutcome;
    parseLocalMint(transaction: ITransactionOnNetwork): IMintOutcome;
    parseLocalBurn(transaction: ITransactionOnNetwork): IBurnOutcome;
    parsePause(transaction: ITransactionOnNetwork): IPausingOutcome;
    parseUnpause(transaction: ITransactionOnNetwork): IPausingOutcome;
    parseFreeze(transaction: ITransactionOnNetwork): IFreezingOutcome;
    parseUnfreeze(transaction: ITransactionOnNetwork): IFreezingOutcome;
    parseWipe(transaction: ITransactionOnNetwork): IWipingOutcome;
    parseUpdateAttributes(transaction: ITransactionOnNetwork): IUpdateAttributesOutcome;
    parseAddQuantity(transaction: ITransactionOnNetwork): IAddQuantityOutcome;
    parseBurnQuantity(transaction: ITransactionOnNetwork): IBurnQuantityOutcome;
    private ensureNoError;
    private findSingleEventByIdentifier;
    private gatherAllEvents;
    private extractTokenIdentifier;
    private extractNonce;
    private extractAmount;
    private extractAddress;
}
export {};
