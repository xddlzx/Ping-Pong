"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bufferToHex = exports.addressToHex = exports.bigIntToHex = exports.utf8ToHex = exports.bigIntToBuffer = exports.bufferToBigInt = exports.stringToBuffer = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const contractsCodecUtils = __importStar(require("../smartcontracts/codec/utils"));
const codecUtils = __importStar(require("../utils.codec"));
function stringToBuffer(value) {
    return Buffer.from(value);
}
exports.stringToBuffer = stringToBuffer;
function bufferToBigInt(buffer) {
    if (buffer.length == 0) {
        return new bignumber_js_1.default(0);
    }
    return contractsCodecUtils.bufferToBigInt(buffer);
}
exports.bufferToBigInt = bufferToBigInt;
function bigIntToBuffer(value) {
    if (value == 0) {
        return Buffer.from([]);
    }
    return contractsCodecUtils.bigIntToBuffer(value);
}
exports.bigIntToBuffer = bigIntToBuffer;
var utils_codec_1 = require("../utils.codec");
Object.defineProperty(exports, "utf8ToHex", { enumerable: true, get: function () { return utils_codec_1.utf8ToHex; } });
Object.defineProperty(exports, "bigIntToHex", { enumerable: true, get: function () { return utils_codec_1.bigIntToHex; } });
Object.defineProperty(exports, "addressToHex", { enumerable: true, get: function () { return utils_codec_1.addressToHex; } });
function bufferToHex(value) {
    const hex = value.toString("hex");
    return codecUtils.zeroPadStringIfOddLength(hex);
}
exports.bufferToHex = bufferToHex;
//# sourceMappingURL=codec.js.map