/// <reference types="node" />
import BigNumber from "bignumber.js";
import { IAddress, IChainID, IGasLimit, IGasPrice, INonce, ITransactionValue } from "../interface";
import { Transaction } from "../transaction";
interface IConfig {
    chainID: IChainID;
    minGasPrice: IGasPrice;
    minGasLimit: IGasLimit;
    gasLimitPerByte: IGasLimit;
    gasLimitIssue: IGasLimit;
    gasLimitToggleBurnRoleGlobally: IGasLimit;
    gasLimitESDTLocalMint: IGasLimit;
    gasLimitESDTLocalBurn: IGasLimit;
    gasLimitSetSpecialRole: IGasLimit;
    gasLimitPausing: IGasLimit;
    gasLimitFreezing: IGasLimit;
    gasLimitWiping: IGasLimit;
    gasLimitESDTNFTCreate: IGasLimit;
    gasLimitESDTNFTUpdateAttributes: IGasLimit;
    gasLimitESDTNFTAddQuantity: IGasLimit;
    gasLimitESDTNFTBurn: IGasLimit;
    gasLimitStorePerByte: IGasLimit;
    issueCost: BigNumber.Value;
    esdtContractAddress: IAddress;
}
interface IBaseArgs {
    transactionNonce?: INonce;
    value?: ITransactionValue;
    gasPrice?: IGasPrice;
    gasLimit?: IGasLimit;
}
interface IIssueFungibleArgs extends IBaseArgs {
    issuer: IAddress;
    tokenName: string;
    tokenTicker: string;
    initialSupply: BigNumber.Value;
    numDecimals: number;
    canFreeze: boolean;
    canWipe: boolean;
    canPause: boolean;
    canChangeOwner: boolean;
    canUpgrade: boolean;
    canAddSpecialRoles: boolean;
}
interface IIssueSemiFungibleArgs extends IBaseArgs {
    issuer: IAddress;
    tokenName: string;
    tokenTicker: string;
    canFreeze: boolean;
    canWipe: boolean;
    canPause: boolean;
    canTransferNFTCreateRole: boolean;
    canChangeOwner: boolean;
    canUpgrade: boolean;
    canAddSpecialRoles: boolean;
}
interface IIssueNonFungibleArgs extends IIssueSemiFungibleArgs {
}
interface IRegisterMetaESDT extends IIssueSemiFungibleArgs {
    numDecimals: number;
}
interface IRegisterAndSetAllRoles extends IBaseArgs {
    issuer: IAddress;
    tokenName: string;
    tokenTicker: string;
    tokenType: RegisterAndSetAllRolesTokenType;
    numDecimals: number;
}
declare type RegisterAndSetAllRolesTokenType = "NFT" | "SFT" | "META" | "FNG";
interface IToggleBurnRoleGloballyArgs extends IBaseArgs {
    manager: IAddress;
    tokenIdentifier: string;
}
interface IFungibleSetSpecialRoleArgs extends IBaseArgs {
    manager: IAddress;
    user: IAddress;
    tokenIdentifier: string;
    addRoleLocalMint: boolean;
    addRoleLocalBurn: boolean;
}
interface ISemiFungibleSetSpecialRoleArgs extends IBaseArgs {
    manager: IAddress;
    user: IAddress;
    tokenIdentifier: string;
    addRoleNFTCreate: boolean;
    addRoleNFTBurn: boolean;
    addRoleNFTAddQuantity: boolean;
    addRoleESDTTransferRole: boolean;
}
interface INonFungibleSetSpecialRoleArgs extends IBaseArgs {
    manager: IAddress;
    user: IAddress;
    tokenIdentifier: string;
    addRoleNFTCreate: boolean;
    addRoleNFTBurn: boolean;
    addRoleNFTUpdateAttributes: boolean;
    addRoleNFTAddURI: boolean;
    addRoleESDTTransferRole: boolean;
}
interface INFTCreateArgs extends IBaseArgs {
    creator: IAddress;
    tokenIdentifier: string;
    initialQuantity: BigNumber.Value;
    name: string;
    royalties: number;
    hash: string;
    attributes: Buffer;
    uris: string[];
}
interface IPausingArgs extends IBaseArgs {
    manager: IAddress;
    tokenIdentifier: string;
}
interface IFreezingArgs extends IBaseArgs {
    manager: IAddress;
    user: IAddress;
    tokenIdentifier: string;
}
interface IWipingArgs extends IBaseArgs {
    manager: IAddress;
    user: IAddress;
    tokenIdentifier: string;
}
interface ILocalMintArgs extends IBaseArgs {
    manager: IAddress;
    user: IAddress;
    tokenIdentifier: string;
    supplyToMint: BigNumber.Value;
}
interface ILocalBurnArgs extends IBaseArgs {
    manager: IAddress;
    user: IAddress;
    tokenIdentifier: string;
    supplyToBurn: BigNumber.Value;
}
interface IUpdateAttributesArgs extends IBaseArgs {
    manager: IAddress;
    tokenIdentifier: string;
    tokenNonce: BigNumber.Value;
    attributes: Buffer;
}
interface IAddQuantityArgs extends IBaseArgs {
    manager: IAddress;
    tokenIdentifier: string;
    tokenNonce: BigNumber.Value;
    quantityToAdd: BigNumber.Value;
}
interface IBurnQuantityArgs extends IBaseArgs {
    manager: IAddress;
    tokenIdentifier: string;
    tokenNonce: BigNumber.Value;
    quantityToBurn: BigNumber.Value;
}
/**
 * @deprecated Use {@link TokenManagementTransactionsFactory} instead.
 */
export declare class TokenOperationsFactory {
    private readonly config;
    private readonly trueAsHex;
    private readonly falseAsHex;
    constructor(config: IConfig);
    issueFungible(args: IIssueFungibleArgs): Transaction;
    private notifyAboutUnsettingBurnRoleGlobally;
    issueSemiFungible(args: IIssueSemiFungibleArgs): Transaction;
    issueNonFungible(args: IIssueNonFungibleArgs): Transaction;
    registerMetaESDT(args: IRegisterMetaESDT): Transaction;
    registerAndSetAllRoles(args: IRegisterAndSetAllRoles): Transaction;
    setBurnRoleGlobally(args: IToggleBurnRoleGloballyArgs): Transaction;
    unsetBurnRoleGlobally(args: IToggleBurnRoleGloballyArgs): Transaction;
    setSpecialRoleOnFungible(args: IFungibleSetSpecialRoleArgs): Transaction;
    setSpecialRoleOnSemiFungible(args: ISemiFungibleSetSpecialRoleArgs): Transaction;
    setSpecialRoleOnMetaESDT(args: ISemiFungibleSetSpecialRoleArgs): Transaction;
    setSpecialRoleOnNonFungible(args: INonFungibleSetSpecialRoleArgs): Transaction;
    nftCreate(args: INFTCreateArgs): Transaction;
    pause(args: IPausingArgs): Transaction;
    unpause(args: IPausingArgs): Transaction;
    freeze(args: IFreezingArgs): Transaction;
    unfreeze(args: IFreezingArgs): Transaction;
    wipe(args: IWipingArgs): Transaction;
    localMint(args: ILocalMintArgs): Transaction;
    localBurn(args: ILocalBurnArgs): Transaction;
    updateAttributes(args: IUpdateAttributesArgs): Transaction;
    addQuantity(args: IAddQuantityArgs): Transaction;
    burnQuantity(args: IBurnQuantityArgs): Transaction;
    private createTransaction;
    private buildTransactionPayload;
    private computeGasLimit;
}
export {};
