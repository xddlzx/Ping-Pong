import { Message, Transaction } from "@multiversx/sdk-core";
import { PlainSignedTransaction } from "./plainSignedTransaction";
export declare class WalletProvider {
    private readonly walletUrl;
    /**
     * Creates a new WalletProvider
     * @param walletURL
     */
    constructor(walletURL: string);
    /**
     * Fetches the login hook url and redirects the client to the wallet login.
     */
    login(options?: {
        callbackUrl?: string;
        token?: string;
        redirectDelayMilliseconds?: number;
    }): Promise<string>;
    private redirect;
    private redirectImmediately;
    private redirectLater;
    /**
    * Fetches the logout hook url and redirects the client to the wallet logout.
    */
    logout(options?: {
        callbackUrl?: string;
        redirectDelayMilliseconds?: number;
    }): Promise<boolean>;
    /**
     * Packs a {@link Message} and fetches correct redirect URL from the wallet API. Then redirects
     * the client to the sign message hook
     * @param message
     * @param options
     */
    signMessage(messageToSign: Message, options?: {
        callbackUrl?: string;
    }): Promise<string>;
    getMessageSignatureFromWalletUrl(): string;
    /**
    * Packs an array of {$link Transaction} and redirects to the 2fa hook
    *
    * @param transactions
    * @param options
    */
    guardTransactions(transactions: Transaction[], options?: {
        callbackUrl?: string;
    }): Promise<void>;
    /**
    * Packs an array of {$link Transaction} and redirects to the correct transaction sigining hook
    *
    * @param transactions
    * @param options
    */
    signTransactions(transactions: Transaction[], options?: {
        callbackUrl?: string;
    }): Promise<void>;
    /**
     * Packs a {@link Transaction} and fetches correct redirect URL from the wallet API. Then redirects
     *   the client to the sign transaction hook
     * @param transaction
     * @param options
     */
    signTransaction(transaction: Transaction, options?: {
        callbackUrl?: string;
    }): Promise<void>;
    getTransactionsFromWalletUrl(search?: string): PlainSignedTransaction[];
    static isTxSignReturnSuccess(urlParams: any): boolean;
    private getTxSignReturnValue;
    static prepareWalletTransaction(transaction: Transaction): any;
    private buildWalletUrl;
    private baseWalletUrl;
    /**
     * Packs an array of {$link Transaction} and redirects to the specified wallet hook
     *
     * @param transactions
     * @param options
     */
    private redirectTransactionsToEndpoint;
}
