import { Message } from '@multiversx/sdk-core';
import { Transaction } from '@multiversx/sdk-core/out/transaction';
interface IPasskeyAccount {
    address: string;
    name?: string;
    signature?: string;
}
export declare class PasskeyProvider {
    account: IPasskeyAccount;
    private initialized;
    private static _instance;
    private keyPair;
    private constructor();
    static getInstance(): PasskeyProvider;
    setAddress(address: string): PasskeyProvider;
    init(): Promise<boolean>;
    login(options?: {
        callbackUrl?: string;
        token?: string;
    }): Promise<{
        address: string;
        signature?: string;
    }>;
    private destroyKeyPair;
    private signMessageWithPrivateKey;
    private derivePrivateKeySeed;
    private generateEd25519KeyPair;
    setUserKeyPair(prfOutput: Uint8Array): Promise<void>;
    createAccount({ walletName, token }: {
        walletName: string;
        token?: string;
    }): Promise<{
        address: string;
        signature?: string | undefined;
    }>;
    isExistingUser(email: string): Promise<boolean>;
    logout(): Promise<boolean>;
    private disconnect;
    getAddress(): Promise<string>;
    isInitialized(): boolean;
    isConnected(): Promise<boolean>;
    signTransaction(transaction: Transaction): Promise<Transaction>;
    private ensureConnected;
    signTransactions(transactions: Transaction[]): Promise<Transaction[]>;
    signMessage(message: Message): Promise<Message>;
    cancelAction(): boolean;
}
export {};
