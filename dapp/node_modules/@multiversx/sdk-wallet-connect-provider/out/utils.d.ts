import { Transaction } from "@multiversx/sdk-core";
import Client from "@walletconnect/sign-client";
import { EngineTypes, SessionTypes, SignClientTypes } from "@walletconnect/types";
export interface ConnectParamsTypes {
    topic?: string;
    events?: SessionTypes.Namespace["events"];
    methods?: string[];
}
export interface TransactionResponse {
    signature: string;
    guardian?: string;
    guardianSignature?: string;
    options?: number;
    version?: number;
}
export declare function getCurrentSession(chainId: string, client?: Client): SessionTypes.Struct;
export declare function getCurrentTopic(chainId: string, client?: Client): SessionTypes.Struct["topic"];
export declare function getConnectionParams(chainId: string, options?: ConnectParamsTypes): EngineTypes.FindParams;
export declare function addressIsValid(destinationAddress: string): boolean;
export declare function getAddressFromSession(session: SessionTypes.Struct): string;
export declare function applyTransactionSignature({ transaction, response, }: {
    transaction: Transaction;
    response: TransactionResponse;
}): Transaction;
export declare function getMetadata(metadata?: SignClientTypes.Options["metadata"]): {
    url: string;
    name: string;
    description: string;
    icons: string[];
    verifyUrl?: string;
    redirect?: {
        native?: string;
        universal?: string;
        linkMode?: boolean;
    };
} | undefined;
export declare function sleep(timeout: number): Promise<void>;
