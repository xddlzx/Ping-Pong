"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PopupConsent = void 0;
const constants_1 = require("./constants");
const getStyles_1 = require("./getStyles");
class PopupConsent extends HTMLElement {
    constructor() {
        super();
        this.walletUrl = '';
        this.identifier = constants_1.confirmationDialogTag;
        this.onCancel = () => {
            console.log('onCancel');
        };
        this.onConfirm = () => {
            console.log('onConfirm');
        };
        this.events = {
            confirm: `${this.identifier}-confirm`,
            cancel: `${this.identifier}-cancel`,
            mounted: `${this.identifier}-mounted`
        };
        this.dispatchAction = (type) => {
            const event = new CustomEvent(type, {
                bubbles: true,
                composed: true // Allow the event to cross the shadow DOM boundary
            });
            this.dispatchEvent(event);
        };
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue !== newValue) {
            this[name.replace(/-./g, (x) => x[1].toUpperCase())] = newValue;
            this.render();
        }
    }
    handleConfirmEvent({ type }) {
        switch (type) {
            case this.events.cancel:
                return this.onCancel();
            case this.events.confirm:
                return this.onConfirm();
            default:
                break;
        }
    }
    render() {
        this.innerHTML = `
        <style>
          ${(0, getStyles_1.getStyles)(constants_1.confirmationDialogTag)}
        </style>
        <div id="${constants_1.confirmationDialogTag}">
            <div class="content">
                <div class="body">
                    <div class="title">Confirm on MultiversX Wallet</div>
                    <div class="subtitle">Continue to ${this.walletUrl}</div>
                    <div class="actions-container">
                        <button
                            class="button"
                            data-testid="${this.events.cancel}-btn"
                            id="${this.events.cancel}-btn"
                        >
                            Cancel
                        </button>
                        <button
                            class="button btn-proceed"
                            data-testid="${this.events.confirm}-btn"
                            id="${this.events.confirm}-btn"
                        >
                            Continue â†’
                        </button>
                    </div>
                </div>
            </div>
        </div>
      `;
    }
    toggleEvents(action) {
        [this.events.cancel, this.events.confirm].forEach((event) => {
            var _a;
            (_a = this.querySelector(`#${event}-btn`)) === null || _a === void 0 ? void 0 : _a[action]('click', () => this.dispatchAction(event));
            this[action](event, this.handleConfirmEvent);
        });
    }
    connectedCallback() {
        this.render();
        this.toggleEvents('addEventListener');
    }
    disconnectedCallback() {
        this.toggleEvents('removeEventListener');
    }
}
exports.PopupConsent = PopupConsent;
//# sourceMappingURL=PopupConsent.js.map