import { Message, Transaction } from '@multiversx/sdk-core';
import { WindowProviderRequestEnums } from '../enums';
import { WindowManager } from '../WindowManager';
export interface IProviderAccount {
    address: string;
    signature?: string;
    multisig?: string;
    impersonate?: string;
}
export declare class CrossWindowProvider {
    private account;
    private accessToken;
    protected initialized: boolean;
    protected windowManager: WindowManager;
    protected _shouldShowConsentPopup: boolean;
    protected static _instance: CrossWindowProvider | null;
    constructor();
    setShouldShowConsentPopup(shouldShow: boolean): void;
    protected ensureConnected(): void;
    protected disconnect(): void;
    static getInstance(): CrossWindowProvider;
    getWindowManager(): WindowManager;
    setAddress(address: string): CrossWindowProvider;
    setWalletUrl(url: string): CrossWindowProvider;
    setWalletWindow(): Promise<void>;
    init(): Promise<boolean>;
    login(options?: {
        token?: string;
    }): Promise<IProviderAccount>;
    dispose(): Promise<boolean>;
    logout(): Promise<boolean>;
    getAddress(): Promise<string>;
    isInitialized(): boolean;
    isConnected(): boolean;
    getAccount(): IProviderAccount | null;
    setAccount(account: IProviderAccount): void;
    signTransaction(transaction: Transaction): Promise<Transaction>;
    signTransactions(transactions: Transaction[]): Promise<Transaction[]>;
    guardTransactions(transactions: Transaction[]): Promise<Transaction[]>;
    signMessage(messageToSign: Message): Promise<Message>;
    cancelAction(): Promise<import("../types").PostMessageReturnType<WindowProviderRequestEnums.cancelAction>> | undefined;
    openPopupConsent(): Promise<boolean>;
}
