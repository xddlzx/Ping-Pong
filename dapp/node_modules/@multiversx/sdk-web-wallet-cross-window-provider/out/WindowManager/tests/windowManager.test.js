"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("../../enums");
const test_utils_1 = require("../../test-utils");
const WindowManager_1 = require("../WindowManager");
describe('WindowManager', () => {
    let windowOpenSpy;
    let windowCloseSpy;
    let windowAddListenerSpy;
    let windowRemoveListenerSpy;
    let walletWindowMock;
    beforeEach(() => {
        walletWindowMock = (0, test_utils_1.getWalletWindowMock)();
        windowAddListenerSpy = jest.spyOn(window, 'addEventListener');
        windowAddListenerSpy.mockImplementation(jest.fn());
        windowRemoveListenerSpy = jest.spyOn(window, 'removeEventListener');
        windowRemoveListenerSpy.mockImplementation(jest.fn());
        windowCloseSpy = jest.spyOn(window, 'close');
        windowCloseSpy.mockImplementation(jest.fn());
        windowOpenSpy = jest.spyOn(window, 'open');
        windowOpenSpy.mockImplementation(() => walletWindowMock);
    });
    afterEach(() => {
        jest.resetAllMocks();
    });
    it('should set wallet URL and initialize', () => __awaiter(void 0, void 0, void 0, function* () {
        const windowManager = new WindowManager_1.WindowManager();
        windowManager.setWalletUrl('https://wallet.example.com');
        yield windowManager.init();
        expect(windowManager.isInitialized()).toBeTruthy();
    }));
    it('should call init successfully correctly', () => __awaiter(void 0, void 0, void 0, function* () {
        const windowManager = new WindowManager_1.WindowManager();
        yield windowManager.init();
        expect(windowManager.isInitialized()).toBeTruthy();
    }));
    it('should call handshake successfully', () => __awaiter(void 0, void 0, void 0, function* () {
        const windowManager = new WindowManager_1.WindowManager();
        windowManager.handshake(enums_1.WindowProviderRequestEnums.loginRequest);
        expect(windowAddListenerSpy).toHaveBeenCalledTimes(1);
        expect(windowOpenSpy).toHaveBeenCalledTimes(1);
        expect(windowCloseSpy).toHaveBeenCalledTimes(0);
    }));
    it('should close connections correctly', () => __awaiter(void 0, void 0, void 0, function* () {
        const windowManager = new WindowManager_1.WindowManager();
        windowManager.init();
        windowManager.setWalletUrl('https://wallet.example.com');
        windowManager.closeConnection();
        expect(windowAddListenerSpy).toHaveBeenCalledTimes(1);
        expect(windowOpenSpy).toHaveBeenCalledTimes(1);
        expect(windowCloseSpy).toHaveBeenCalledTimes(0);
    }));
    it('should call add event listener successfully', () => __awaiter(void 0, void 0, void 0, function* () {
        const windowManager = new WindowManager_1.WindowManager();
        yield windowManager.init();
        windowManager.handshake(enums_1.WindowProviderRequestEnums.loginRequest);
        windowManager.listenOnce(enums_1.WindowProviderResponseEnums.loginResponse);
        expect(windowAddListenerSpy).toHaveBeenCalledTimes(2);
    }));
    it('should call postMessage successfully', () => __awaiter(void 0, void 0, void 0, function* () {
        const windowManager = new WindowManager_1.WindowManager();
        windowManager.postMessage({
            type: enums_1.WindowProviderRequestEnums.loginRequest,
            payload: {
                token: 'token'
            }
        });
        expect(windowAddListenerSpy).toHaveBeenCalledTimes(1);
        expect(windowOpenSpy).toHaveBeenCalledTimes(1);
        expect(windowCloseSpy).toHaveBeenCalledTimes(0);
    }));
});
//# sourceMappingURL=windowManager.test.js.map