"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowManager = void 0;
const constants_1 = require("../constants");
const enums_1 = require("../enums");
const errors_1 = require("../errors");
class WindowManager {
    constructor() {
        var _a, _b;
        this._session = '';
        this._walletUrl = '';
        this.initialized = false;
        this.walletWindow = null;
        (_a = constants_1.safeWindow.addEventListener) === null || _a === void 0 ? void 0 : _a.call(constants_1.safeWindow, 'beforeunload', () => {
            this.closeWalletWindow();
        });
        constants_1.safeWindow.name = (_b = constants_1.safeWindow.location) === null || _b === void 0 ? void 0 : _b.origin;
    }
    get walletUrl() {
        return this._walletUrl;
    }
    setWalletUrl(url) {
        this._walletUrl = url;
        return this;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.initialized = typeof window !== 'undefined';
            return this.initialized;
        });
    }
    isWalletOpened(type) {
        return (type === enums_1.WindowProviderRequestEnums.cancelAction &&
            Boolean(this.walletWindow));
    }
    handshake(type) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const isOpened = this.isWalletOpened(type);
            if (isOpened) {
                return true;
            }
            this.closeWalletWindow();
            yield this.setWalletWindow();
            const { payload } = yield this.listenOnce(enums_1.WindowProviderResponseEnums.handshakeResponse);
            if (!payload) {
                throw new errors_1.ErrCannotEstablishHandshake();
            }
            this._session = this._session || payload.data || Date.now().toString();
            (_a = this.walletWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
                type: enums_1.WindowProviderRequestEnums.finalizeHandshakeRequest,
                payload: this._session
            }, this.walletUrl);
            this.addHandshakeChangeListener();
            return true;
        });
    }
    addHandshakeChangeListener() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const walletUrl = this.walletUrl;
            const eventHandler = (event) => {
                var _a, _b;
                try {
                    const { type, payload } = event.data;
                    const isWalletEvent = event.origin === new URL(walletUrl).origin;
                    if (!isWalletEvent) {
                        return;
                    }
                    switch (type) {
                        case enums_1.WindowProviderResponseEnums.handshakeResponse:
                            if (payload === '') {
                                (_a = this.walletWindow) === null || _a === void 0 ? void 0 : _a.close();
                                this.walletWindow = null;
                                (_b = constants_1.safeWindow.removeEventListener) === null || _b === void 0 ? void 0 : _b.call(constants_1.safeWindow, 'message', eventHandler);
                                break;
                            }
                            // Save the current session and send it in later handshake requests
                            if (typeof payload === 'string') {
                                this._session = payload;
                            }
                            break;
                    }
                }
                catch (e) {
                    console.error('Handshake response error', e);
                }
            };
            (_a = constants_1.safeWindow.addEventListener) === null || _a === void 0 ? void 0 : _a.call(constants_1.safeWindow, 'message', eventHandler);
        });
    }
    listenOnce(action) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.walletWindow) {
                throw new errors_1.ErrProviderNotInstantiated();
            }
            return yield new Promise((resolve) => {
                var _a;
                const walletUrl = this.walletUrl;
                (_a = constants_1.safeWindow.addEventListener) === null || _a === void 0 ? void 0 : _a.call(constants_1.safeWindow, 'message', function eventHandler(event) {
                    var _a;
                    return __awaiter(this, void 0, void 0, function* () {
                        const { type, payload } = event.data;
                        const isWalletEvent = event.origin === new URL(walletUrl).origin;
                        const isCurrentAction = action === type ||
                            type === enums_1.WindowProviderResponseEnums.cancelResponse;
                        if (!isCurrentAction || !isWalletEvent) {
                            return;
                        }
                        (_a = constants_1.safeWindow.removeEventListener) === null || _a === void 0 ? void 0 : _a.call(constants_1.safeWindow, 'message', eventHandler);
                        resolve({ type, payload });
                    });
                });
            });
        });
    }
    closeConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.initialized) {
                throw new errors_1.ErrProviderNotInitialized();
            }
            yield this.postMessage({
                type: enums_1.WindowProviderRequestEnums.logoutRequest,
                payload: undefined
            });
            // Reset the session on logout
            this._session = Date.now().toString();
            return true;
        });
    }
    isInitialized() {
        return this.initialized;
    }
    postMessage({ type, payload }) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.handshake(type);
            (_a = this.walletWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
                type,
                payload
            }, this.walletUrl);
            const data = yield this.listenOnce(constants_1.responseTypeMap[type]);
            this.closeWalletWindow();
            return data;
        });
    }
    closeWalletWindow() {
        var _a;
        (_a = this.walletWindow) === null || _a === void 0 ? void 0 : _a.close();
    }
    setWalletWindow() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.walletWindow =
                (_b = (_a = constants_1.safeWindow.open) === null || _a === void 0 ? void 0 : _a.call(constants_1.safeWindow, this.walletUrl, this.walletUrl)) !== null && _b !== void 0 ? _b : null;
        });
    }
}
exports.WindowManager = WindowManager;
//# sourceMappingURL=WindowManager.js.map