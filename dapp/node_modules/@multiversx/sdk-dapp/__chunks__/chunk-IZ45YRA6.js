import{a as R}from"./chunk-5YBGSBWJ.js";import{a as y}from"./chunk-GICMTFDA.js";import{a as F}from"./chunk-B7ZRV6BR.js";import{a as T}from"./chunk-Y7QAA5B4.js";import{a as k}from"./chunk-GOSQZVXA.js";import{a as I}from"./chunk-VNKGI35J.js";import{c as v}from"./chunk-4NFNYA6L.js";import{j as B,m as S}from"./chunk-HBP5N4FR.js";S();import{useCallback as D}from"react";var N=s=>{let p=v(),{signedTransactions:i}=I(),a=R(),c=k(),b=y(),n=s==null?void 0:s.onSuccess,o=s==null?void 0:s.onFail;return{verifyBatchStatus:D(Q=>B(void 0,[Q],function*({batchId:r}){var f,d,g,h,l;let t=(d=(f=T(r))==null?void 0:f.toString())!=null?d:"",u=i[t];if(!u||!((g=u.customTransactionInformation)==null?void 0:g.grouping))return;let m=(l=(h=i[t])==null?void 0:h.transactions)!=null?l:[],{isSuccessful:w,isFailed:x,isPending:C}=F({transactions:m});if(!C)w&&(n==null||n(t)),x&&(o==null||o(t,"Error processing batch transactions."));else{let e=yield a({batchId:r});yield c({sessionId:t.toString(),isBatchFailed:e==null?void 0:e.isBatchFailed,shouldRefreshBalance:!0,transactions:m})}}),[p,b,c,i,a,n,o])}};export{N as a};
//# sourceMappingURL=chunk-IZ45YRA6.js.map
