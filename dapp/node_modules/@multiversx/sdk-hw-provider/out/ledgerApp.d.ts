import type Transport from "@ledgerhq/hw-transport";
export default class LedgerApp {
    transport: Transport;
    constructor(transport: Transport, scrambleKey?: string);
    getAddress(account: number, index: number, display?: boolean): Promise<{
        address: string;
    }>;
    setAddress(account: number, index: number, display?: boolean): Promise<Buffer>;
    signTransaction(rawTx: Buffer, usingHash: boolean): Promise<string>;
    signMessage(message: Buffer): Promise<string>;
    getAddressAndSignAuthToken(account: number, index: number, token: Buffer): Promise<{
        address: string;
        signature: string;
    }>;
    getAppConfiguration(): Promise<{
        contractData: number;
        accountIndex: number;
        addressIndex: number;
        version: string;
    }>;
    getIntValueFromBytes(buffer: Buffer): number;
    sign(message: Buffer, type: number): Promise<string>;
    handleAuthTokenResponse(response: Buffer): Promise<string>;
    serializeESDTInfo(ticker: string, id: string, decimals: number, chainId: string, signature: string): Buffer;
    provideESDTInfo(ticker: string, id: string, decimals: number, chainId: string, signature: string): Promise<any>;
}
