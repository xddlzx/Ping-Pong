import { IOperaWalletAccount, ISignableMessage, ITransaction, MultiversxOperaProvider } from "./interface";
declare global {
    interface Window {
        elrond: MultiversxOperaProvider;
        isOpera: boolean;
    }
}
export declare class OperaProvider {
    account: IOperaWalletAccount;
    private initialized;
    private static _instance;
    private constructor();
    static getInstance(): OperaProvider;
    setAddress(address: string): OperaProvider;
    init(): Promise<boolean>;
    login({ token, }?: {
        callbackUrl?: string;
        token?: string;
    }): Promise<string>;
    logout(): Promise<boolean>;
    private disconnect;
    getAddress(): Promise<string>;
    isInitialized(): boolean;
    isConnected(): boolean;
    signTransaction<T extends ITransaction>(transaction: T): Promise<T>;
    signTransactions<T extends ITransaction>(transactions: T[]): Promise<T[]>;
    signMessage<T extends ISignableMessage>(message: T): Promise<T>;
    cancelAction(): boolean;
    private ensureConnected;
}
