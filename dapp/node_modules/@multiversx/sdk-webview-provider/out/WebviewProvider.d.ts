import { Transaction } from '@multiversx/sdk-core/out/transaction';
import { WindowProviderRequestEnums } from '@multiversx/sdk-web-wallet-cross-window-provider/out/enums';
import { PostMessageParamsType, PostMessageReturnType } from '@multiversx/sdk-web-wallet-cross-window-provider/out/types';
import { Message } from '@multiversx/sdk-core';
interface IWebviewProviderOptions {
    resetStateCallback?: () => void;
}
export interface IProviderAccount {
    address: string;
    signature?: string;
    accessToken?: string;
}
export declare class WebviewProvider {
    private static _instance;
    private initialized;
    private account;
    static getInstance(options?: IWebviewProviderOptions): WebviewProvider;
    constructor(options?: IWebviewProviderOptions);
    private resetState;
    private disconnect;
    init: () => Promise<boolean>;
    login: () => Promise<IProviderAccount | null>;
    logout: () => Promise<boolean>;
    relogin: () => Promise<string | null>;
    signTransactions: (transactionsToSign: Transaction[]) => Promise<Transaction[] | null>;
    signTransaction: (transaction: Transaction) => Promise<Transaction | undefined>;
    signMessage: (messageToSign: Message) => Promise<Message | null>;
    cancelAction: () => Promise<PostMessageReturnType<WindowProviderRequestEnums.cancelAction>>;
    finalizeResetState: () => Promise<PostMessageReturnType<WindowProviderRequestEnums.finalizeResetStateRequest>>;
    isInitialized(): boolean;
    isConnected(): boolean;
    getAccount(): IProviderAccount | null;
    setAccount(account: IProviderAccount): void;
    sendPostMessage: <T extends WindowProviderRequestEnums>(message: PostMessageParamsType<T>) => Promise<PostMessageReturnType<T>>;
    private waitingForResponse;
}
export {};
