import { MetaMaskInpageProvider } from '@metamask/providers';
import { Message, Transaction } from '@multiversx/sdk-core/out';
export interface IMetamaskWalletAccount {
    address: string;
    name?: string;
    signature?: string;
}
declare global {
    interface Window {
        ethereum: MetaMaskInpageProvider & {
            setProvider?: (provider: MetaMaskInpageProvider) => void;
            detected?: MetaMaskInpageProvider[];
            providers?: MetaMaskInpageProvider[];
        };
        isMetamask: boolean;
    }
}
export declare class MetamaskProvider {
    account: IMetamaskWalletAccount;
    private initialized;
    private static _instance;
    static isMetamaskInstalled(): boolean;
    private constructor();
    static getInstance(): MetamaskProvider;
    setAddress(address: string): MetamaskProvider;
    getAccount(): IMetamaskWalletAccount | null;
    setAccount(account: IMetamaskWalletAccount): void;
    init(): Promise<boolean>;
    login(options?: {
        token?: string;
    }): Promise<IMetamaskWalletAccount>;
    logout(): Promise<boolean>;
    getAddress(): Promise<string>;
    isInitialized(): boolean;
    isConnected(): boolean;
    signTransaction(transaction: Transaction): Promise<Transaction>;
    signTransactions(transactions: Transaction[]): Promise<Transaction[]>;
    signMessage(messageToSign: Message): Promise<Message>;
    cancelAction(): boolean;
    private ensureConnected;
}
