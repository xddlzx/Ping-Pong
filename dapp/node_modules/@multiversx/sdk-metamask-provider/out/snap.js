var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { defaultSnapOrigin } from './config';
export const getSnaps = () => __awaiter(void 0, void 0, void 0, function* () {
    return (yield window.ethereum.request({
        method: 'wallet_getSnaps'
    }));
});
export const connectSnap = (snapId = defaultSnapOrigin, params = {}) => __awaiter(void 0, void 0, void 0, function* () {
    yield window.ethereum.request({
        method: 'wallet_requestSnaps',
        params: {
            [snapId]: params
        }
    });
});
export const getSnap = (version) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const snaps = yield getSnaps();
        return Object.values(snaps).find((snap) => snap.id === defaultSnapOrigin && (!version || snap.version === version));
    }
    catch (e) {
        console.warn('Failed to obtain installed snap', e);
        return undefined;
    }
});
export const isLocalSnap = (snapId) => snapId.startsWith('local:');
//# sourceMappingURL=snap.js.map